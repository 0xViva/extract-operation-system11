{
  "address": "0x17DB934a6f8C424C533eC01A71313c02a9835Bc0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traderAddress",
          "type": "address"
        }
      ],
      "name": "addTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_controllers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_moduleMap",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traderAddress",
          "type": "address"
        }
      ],
      "name": "removeTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "setInternalWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapExactIn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "tradeSuccess_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExactIn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "tradeSuccess_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x53677bd867ad2910820cadc4f6fbe3d9847e19a8f330dac679b034f621326ce1",
  "receipt": {
    "to": null,
    "from": "0x5bF98cC575E3aBA4756b9000778d3F906681876D",
    "contractAddress": "0x17DB934a6f8C424C533eC01A71313c02a9835Bc0",
    "transactionIndex": 0,
    "gasUsed": "1548884",
    "logsBloom": "0x
    "blockHash": "0xe8506b88bc68afb0df285ffc0999821f1662874eb0c105ef2a5ed2af29374d8e",
    "transactionHash": "0x53677bd867ad2910820cadc4f6fbe3d9847e19a8f330dac679b034f621326ce1",
    "logs": [],
    "blockNumber": 29442915,
    "cumulativeGasUsed": "1548884",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3431e4381f2519326a70e3e5c8d5090e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"}],\"name\":\"addTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_controllers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_moduleMap\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"}],\"name\":\"removeTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"setInternalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tradeSuccess_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tradeSuccess_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTrader(address)\":{\"params\":{\"_traderAddress\":\"Address of the contract implementing IDexTrader interface\"}},\"removeTrader(address)\":{\"params\":{\"_traderAddress\":\"Address of the contract implementing IDexTrader interface\"}},\"setInternalWallet(address)\":{\"params\":{\"_walletAddress\":\"The address of the contract (user) which will be used for internal swaps\"}},\"swapExactIn(address,address,address,uint256)\":{\"params\":{\"_amountIn\":\"The exact amount of the input to swap\",\"_recipient\":\"The address of the token out recipient\",\"_tokenIn\":\"The address of the input token\",\"_tokenOut\":\"The address of the output token\"},\"returns\":{\"tradeSuccess_\":\"Indicates whether the swap succeeded\"}},\"swapExactIn(address,address,address,uint256,uint256)\":{\"params\":{\"_amountIn\":\"The exact amount of the input to swap\",\"_minAmountOut\":\"The minimum amount of _tokenOut to receive\",\"_recipient\":\"The address of the token out recipient\",\"_tokenIn\":\"The address of the input token\",\"_tokenOut\":\"The address of the output token\"},\"returns\":{\"tradeSuccess_\":\"Indicates whether the swap succeeded\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SwapManager.sol\":\"SwapManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) public initializer {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i = 0; i < controllers_.length; i++) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x215a65d03cab95bbf6c6e9ba9df39f78c71bdd50ab3a29be989236c9074cc357\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/core/SwapManager.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ISwapManager.sol\\\";\\nimport \\\"../interfaces/IDexTrader.sol\\\";\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\ncontract SwapManager is Initializable, ModuleMapConsumer, Controlled, ISwapManager {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    // Addresses of dex traders.\\n    // For easy adding new dexes, this contract use traders addresses\\n    // instead of enum values in moduleMap.\\n    EnumerableSet.AddressSet traders;\\n    // address of the contract (user) which will be used for internal swaps\\n    address internalWallet;\\n\\n    function initialize(address[] memory _controllers, address _moduleMap) external initializer {\\n        __Controlled_init(_controllers, _moduleMap);\\n        internalWallet = moduleMap.getModuleAddress(Modules.Kernel);\\n    }\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external override onlyController returns (bool tradeSuccess_) {\\n        swapExactIn(_tokenIn, _tokenOut, _recipient, _amountIn, 0);\\n    }\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _minAmountOut The minimum amount of _tokenOut to receive\\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) public override onlyController returns (bool tradeSuccess_) {\\n        (address bestTrader, uint256 minOut) = getBestTraderForTheSwap(_tokenIn, _tokenOut, _amountIn);\\n\\n        uint256 trueMinAmountOut = minOut >= _minAmountOut ? minOut : _minAmountOut;\\n\\n        tradeSuccess_ = swapUsingInternalWallet(_tokenIn, _tokenOut, _recipient, _amountIn, trueMinAmountOut);\\n        if (tradeSuccess_) return tradeSuccess_;\\n\\n        IDexTrader trader = IDexTrader(bestTrader);\\n        IERC20MetadataUpgradeable(_tokenIn).safeTransfer(bestTrader, _amountIn);\\n        tradeSuccess_ = trader.swapExactInput(_tokenIn, _tokenOut, _recipient, _amountIn, trueMinAmountOut);\\n    }\\n\\n    /// @param _traderAddress Address of the contract implementing IDexTrader interface\\n    function addTrader(address _traderAddress) external onlyManager {\\n        require(!traders.contains(_traderAddress), \\\"SwapManager::addTrader: Trader already added\\\");\\n        traders.add(_traderAddress);\\n    }\\n\\n    /// @param _traderAddress Address of the contract implementing IDexTrader interface\\n    function removeTrader(address _traderAddress) external onlyManager {\\n        require(traders.contains(_traderAddress), \\\"SwapManager::removeTrader: Trader was not added\\\");\\n        traders.remove(_traderAddress);\\n    }\\n\\n    /// @param _walletAddress The address of the contract (user) which will be used for internal swaps\\n    function setInternalWallet(address _walletAddress) external onlyManager {\\n        internalWallet = _walletAddress;\\n    }\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return bestTrader_ Address of found trader\\n    /// @return minAmountOut_ The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    /// @dev iterates over all added traders and finds best for swapping\\n    /// @dev uses getAmountOut() for comparing\\n    function getBestTraderForTheSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (address bestTrader_, uint256 minAmountOut_) {\\n        uint256 maxAmountOut;\\n        for (uint8 i = 0; i < traders.length(); i++) {\\n            IDexTrader trader = IDexTrader(traders.at(i));\\n            uint256 amountOut;\\n            uint256 amountOutMin;\\n\\n            if (trader.isPoolExist(_tokenIn, _tokenOut)) {\\n                amountOut = trader.getAmountOut(_tokenIn, _tokenOut, _amountIn);\\n                amountOutMin = trader.getAmountOutMinimum(_tokenIn, _tokenOut, _amountIn);\\n            }\\n\\n            if (amountOut > maxAmountOut) {\\n                bestTrader_ = traders.at(i);\\n                minAmountOut_ = amountOutMin;\\n                maxAmountOut = amountOut;\\n            }\\n        }\\n    }\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\\n    /// @dev tries to swap tokens using internal wallet instead of external dexes\\n    function swapUsingInternalWallet(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin\\n    ) internal returns (bool tradeSuccess_) {\\n        IERC20MetadataUpgradeable tokenIn = IERC20MetadataUpgradeable(_tokenIn);\\n        IERC20MetadataUpgradeable tokenOut = IERC20MetadataUpgradeable(_tokenOut);\\n\\n        uint256 walletTokenOutBalance = tokenOut.balanceOf(internalWallet);\\n        uint256 walletAllowanceToThis = tokenOut.allowance(internalWallet, address(this));\\n\\n        if (walletTokenOutBalance >= _amountOutMin && walletAllowanceToThis >= _amountOutMin && _amountOutMin > 0) {\\n            tokenOut.safeTransferFrom(internalWallet, address(this), _amountOutMin);\\n            tokenOut.safeTransfer(_recipient, _amountOutMin);\\n            tokenIn.safeTransfer(internalWallet, _amountIn);\\n            tradeSuccess_ = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32cfb7d95787c9e263237a85518827d354ab394dee7f4a7feb1ce88dea66e1f3\"},\"contracts/interfaces/IDexTrader.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface IDexTrader {\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin\\n    ) external returns (bool);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256);\\n\\n    /// @param _tokenA The address of the first  token from the token pair\\n    /// @param _tokenB The address of the second token from the token pair\\n    /// return true if pool exist else overwise\\n    function isPoolExist(address _tokenA, address _tokenB) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x301fa1c4ff446ebdd8df904ef991ec13339fe282e5b1b0b3cfe0f4dea838c5ab\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IKernel {\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x021ed6a77e66a7b95b3e6ea1e11bec9502fee63daa96f3cea9bdc68edcc28eaf\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager // 11\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd39d052a3b0788f77f806435622f4cef19d8b3c0c734d44d8a3f3b85bd3b48a3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface ISwapManager {\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _minAmountOut The minimum amount of _tokenOut to receive\\n    /// @return tradeSuccress_ Indicates whether the swap succeeded\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (bool tradeSuccress_);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return tradeSuccress_ Indicates whether the swap succeeded\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external returns (bool tradeSuccress_);\\n}\\n\",\"keccak256\":\"0x26493406575a40310b4e395873c8455b37f3b5f381c988a59dca6ade1dc39e78\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b11806100206000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c80630a1f194f146100935780630f0a1c6f146100a8578063462d0b2e146100d75780635d428e08146100ea57806398c671ce146100fd578063a7fc7a0714610110578063c0e7e87014610123578063c343129f14610146578063c4ef281914610159578063e94b0dd21461016c575b600080fd5b6100a66100a1366004611631565b61017f565b005b6000546100c1906201000090046001600160a01b031681565b6040516100ce9190611857565b60405180910390f35b6100a66100e5366004611713565b610322565b6100a66100f8366004611631565b610445565b6100a661010b366004611713565b6105d9565b6100a661011e366004611631565b61077e565b6101366101313660046116b9565b6109bc565b60405190151581526020016100ce565b6100a6610154366004611631565b610aec565b610136610167366004611669565b610c2a565b6100c161017a36600461180b565b610c70565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916101b491906004016118a9565b60206040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610204919061164d565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161022f9190611857565b60206040518083038186803b15801561024757600080fd5b505afa15801561025b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027f91906117eb565b6102a45760405162461bcd60e51b815260040161029b90611977565b60405180910390fd5b6102af600382610c9a565b6103135760405162461bcd60e51b815260206004820152602f60248201527f537761704d616e616765723a3a72656d6f76655472616465723a20547261646560448201526e1c881dd85cc81b9bdd081859191959608a1b606482015260840161029b565b61031e600382610cb8565b5050565b600054610100900460ff1661033d5760005460ff1615610341565b303b155b61035d5760405162461bcd60e51b815260040161029b90611904565b600054610100900460ff1615801561037f576000805461ffff19166101011790555b61038983836105d9565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916103be91906004016118a9565b60206040518083038186803b1580156103d657600080fd5b505afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e919061164d565b600580546001600160a01b0319166001600160a01b03929092169190911790558015610440576000805461ff00191690555b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161047a91906004016118a9565b60206040518083038186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca919061164d565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016104f59190611857565b60206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906117eb565b6105615760405162461bcd60e51b815260040161029b90611977565b61056c600382610c9a565b156105ce5760405162461bcd60e51b815260206004820152602c60248201527f537761704d616e616765723a3a6164645472616465723a20547261646572206160448201526b1b1c9958591e48185919195960a21b606482015260840161029b565b61031e600382610ccd565b600054610100900460ff166105f45760005460ff16156105f8565b303b155b6106145760405162461bcd60e51b815260040161029b90611904565b600054610100900460ff16158015610636576000805461ffff19166101011790555b6001600160a01b03821661065c5760405162461bcd60e51b815260040161029b90611952565b60005b83518110156106d45760006001600160a01b031684828151811061069357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156106c25760405162461bcd60e51b815260040161029b90611952565b806106cc81611a5c565b91505061065f565b5060005b835181101561074a57600180600086848151811061070657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061074281611a5c565b9150506106d8565b50825161075e9060029060208601906115a7565b5061076882610ce2565b8015610440576000805461ff0019169055505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916107b391906004016118a9565b60206040518083038186803b1580156107cb57600080fd5b505afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610803919061164d565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161082e9190611857565b60206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e91906117eb565b6108dd5760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161029b565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015610965576002818154811061092f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561095357600191505b8061095d81611a5c565b915050610904565b508061031e57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b3360009081526001602052604081205460ff166109eb5760405162461bcd60e51b815260040161029b906119c5565b6000806109f9888887610d76565b91509150600084821015610a0d5784610a0f565b815b9050610a1e8989898985610f71565b93508315610a2e57505050610ae3565b82610a436001600160a01b038b168289611104565b604051634947054160e01b81526001600160a01b038b811660048301528a811660248301528981166044830152606482018990526084820184905282169063494705419060a401602060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906117eb565b9450505050505b95945050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610b2191906004016118a9565b60206040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b71919061164d565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b8152600401610b9c9190611857565b60206040518083038186803b158015610bb457600080fd5b505afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec91906117eb565b610c085760405162461bcd60e51b815260040161029b90611977565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604081205460ff16610c595760405162461bcd60e51b815260040161029b906119c5565b610c678585858560006109bc565b50949350505050565b60028181548110610c8057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610caf836001600160a01b038416611167565b90505b92915050565b6000610caf836001600160a01b03841661117f565b6000610caf836001600160a01b03841661129c565b600054610100900460ff16610cfd5760005460ff1615610d01565b303b155b610d1d5760405162461bcd60e51b815260040161029b90611904565b600054610100900460ff16158015610d3f576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561031e576000805461ff00191690555050565b60008080805b610d8660036112e6565b8160ff161015610f67576000610da0600360ff84166112f0565b9050600080826001600160a01b031663841bdb9e8b8b6040518363ffffffff1660e01b8152600401610dd392919061186b565b60206040518083038186803b158015610deb57600080fd5b505afa158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2391906117eb565b15610f3257604051632550332960e11b81526001600160a01b03841690634aa0665290610e58908d908d908d90600401611885565b602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611823565b60405163332ff05b60e21b81529092506001600160a01b0384169063ccbfc16c90610edd908d908d908d90600401611885565b602060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611823565b90505b84821115610f5157610f48600360ff86166112f0565b96508095508194505b5050508080610f5f90611a77565b915050610d7c565b5050935093915050565b6005546040516370a0823160e01b81526000918791879184916001600160a01b03808516926370a0823192610fac9290911690600401611857565b60206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190611823565b600554604051636eb1769f60e11b81529192506000916001600160a01b038581169263dd62ed3e926110369290911690309060040161186b565b60206040518083038186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110869190611823565b90508582101580156110985750858110155b80156110a45750600086115b156110f7576005546110c4906001600160a01b03858116911630896112fc565b6110d86001600160a01b0384168988611104565b6005546110f2906001600160a01b03868116911689611104565b600194505b5050505095945050505050565b6040516001600160a01b03831660248201526044810182905261044090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611323565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156112925760006111a3600183611a19565b85549091506000906111b790600190611a19565b90508181146112385760008660000182815481106111e557634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061121657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061125757634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610cb2565b6000915050610cb2565b60006112a88383611167565b6112de57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cb2565b506000610cb2565b6000610cb2825490565b6000610caf83836113f5565b61131d846323b872dd60e01b85858560405160240161113093929190611885565b50505050565b6000611378826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661142d9092919063ffffffff16565b805190915015610440578080602001905181019061139691906117eb565b6104405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161029b565b600082600001828154811061141a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606061143c8484600085611446565b90505b9392505050565b6060824710156114a75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161029b565b843b6114f55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029b565b600080866001600160a01b03168587604051611511919061183b565b60006040518083038185875af1925050503d806000811461154e576040519150601f19603f3d011682016040523d82523d6000602084013e611553565b606091505b509150915061156382828661156e565b979650505050505050565b6060831561157d57508161143f565b82511561158d5782518084602001fd5b8160405162461bcd60e51b815260040161029b91906118d1565b8280548282559060005260206000209081019282156115fc579160200282015b828111156115fc57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906115c7565b5061160892915061160c565b5090565b5b80821115611608576000815560010161160d565b803561162c81611ac3565b919050565b600060208284031215611642578081fd5b813561143f81611ac3565b60006020828403121561165e578081fd5b815161143f81611ac3565b6000806000806080858703121561167e578283fd5b843561168981611ac3565b9350602085013561169981611ac3565b925060408501356116a981611ac3565b9396929550929360600135925050565b600080600080600060a086880312156116d0578081fd5b85356116db81611ac3565b945060208601356116eb81611ac3565b935060408601356116fb81611ac3565b94979396509394606081013594506080013592915050565b60008060408385031215611725578182fd5b82356001600160401b038082111561173b578384fd5b818501915085601f83011261174e578384fd5b813560208282111561176257611762611aad565b8160051b604051601f19603f8301168101818110868211171561178757611787611aad565b604052838152828101945085830182870184018b10156117a5578889fd5b8896505b848710156117ce576117ba81611621565b8652600196909601959483019483016117a9565b5096506117de9050878201611621565b9450505050509250929050565b6000602082840312156117fc578081fd5b8151801515811461143f578182fd5b60006020828403121561181c578081fd5b5035919050565b600060208284031215611834578081fd5b5051919050565b6000825161184d818460208701611a30565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208101600c83106118cb57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526118f0816040850160208701611a30565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600082821015611a2b57611a2b611a97565b500390565b60005b83811015611a4b578181015183820152602001611a33565b8381111561131d5750506000910152565b6000600019821415611a7057611a70611a97565b5060010190565b600060ff821660ff811415611a8e57611a8e611a97565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611ad857600080fd5b5056fea2646970667358221220e6371f353b038a8e33de6a8fbafa3e720f9899c18b584d3acfd1ae4c85f7c5fc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c80630a1f194f146100935780630f0a1c6f146100a8578063462d0b2e146100d75780635d428e08146100ea57806398c671ce146100fd578063a7fc7a0714610110578063c0e7e87014610123578063c343129f14610146578063c4ef281914610159578063e94b0dd21461016c575b600080fd5b6100a66100a1366004611631565b61017f565b005b6000546100c1906201000090046001600160a01b031681565b6040516100ce9190611857565b60405180910390f35b6100a66100e5366004611713565b610322565b6100a66100f8366004611631565b610445565b6100a661010b366004611713565b6105d9565b6100a661011e366004611631565b61077e565b6101366101313660046116b9565b6109bc565b60405190151581526020016100ce565b6100a6610154366004611631565b610aec565b610136610167366004611669565b610c2a565b6100c161017a36600461180b565b610c70565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916101b491906004016118a9565b60206040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610204919061164d565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161022f9190611857565b60206040518083038186803b15801561024757600080fd5b505afa15801561025b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027f91906117eb565b6102a45760405162461bcd60e51b815260040161029b90611977565b60405180910390fd5b6102af600382610c9a565b6103135760405162461bcd60e51b815260206004820152602f60248201527f537761704d616e616765723a3a72656d6f76655472616465723a20547261646560448201526e1c881dd85cc81b9bdd081859191959608a1b606482015260840161029b565b61031e600382610cb8565b5050565b600054610100900460ff1661033d5760005460ff1615610341565b303b155b61035d5760405162461bcd60e51b815260040161029b90611904565b600054610100900460ff1615801561037f576000805461ffff19166101011790555b61038983836105d9565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916103be91906004016118a9565b60206040518083038186803b1580156103d657600080fd5b505afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e919061164d565b600580546001600160a01b0319166001600160a01b03929092169190911790558015610440576000805461ff00191690555b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161047a91906004016118a9565b60206040518083038186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca919061164d565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016104f59190611857565b60206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906117eb565b6105615760405162461bcd60e51b815260040161029b90611977565b61056c600382610c9a565b156105ce5760405162461bcd60e51b815260206004820152602c60248201527f537761704d616e616765723a3a6164645472616465723a20547261646572206160448201526b1b1c9958591e48185919195960a21b606482015260840161029b565b61031e600382610ccd565b600054610100900460ff166105f45760005460ff16156105f8565b303b155b6106145760405162461bcd60e51b815260040161029b90611904565b600054610100900460ff16158015610636576000805461ffff19166101011790555b6001600160a01b03821661065c5760405162461bcd60e51b815260040161029b90611952565b60005b83518110156106d45760006001600160a01b031684828151811061069357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156106c25760405162461bcd60e51b815260040161029b90611952565b806106cc81611a5c565b91505061065f565b5060005b835181101561074a57600180600086848151811061070657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061074281611a5c565b9150506106d8565b50825161075e9060029060208601906115a7565b5061076882610ce2565b8015610440576000805461ff0019169055505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916107b391906004016118a9565b60206040518083038186803b1580156107cb57600080fd5b505afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610803919061164d565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161082e9190611857565b60206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e91906117eb565b6108dd5760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161029b565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015610965576002818154811061092f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561095357600191505b8061095d81611a5c565b915050610904565b508061031e57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b3360009081526001602052604081205460ff166109eb5760405162461bcd60e51b815260040161029b906119c5565b6000806109f9888887610d76565b91509150600084821015610a0d5784610a0f565b815b9050610a1e8989898985610f71565b93508315610a2e57505050610ae3565b82610a436001600160a01b038b168289611104565b604051634947054160e01b81526001600160a01b038b811660048301528a811660248301528981166044830152606482018990526084820184905282169063494705419060a401602060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906117eb565b9450505050505b95945050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610b2191906004016118a9565b60206040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b71919061164d565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b8152600401610b9c9190611857565b60206040518083038186803b158015610bb457600080fd5b505afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec91906117eb565b610c085760405162461bcd60e51b815260040161029b90611977565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604081205460ff16610c595760405162461bcd60e51b815260040161029b906119c5565b610c678585858560006109bc565b50949350505050565b60028181548110610c8057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610caf836001600160a01b038416611167565b90505b92915050565b6000610caf836001600160a01b03841661117f565b6000610caf836001600160a01b03841661129c565b600054610100900460ff16610cfd5760005460ff1615610d01565b303b155b610d1d5760405162461bcd60e51b815260040161029b90611904565b600054610100900460ff16158015610d3f576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561031e576000805461ff00191690555050565b60008080805b610d8660036112e6565b8160ff161015610f67576000610da0600360ff84166112f0565b9050600080826001600160a01b031663841bdb9e8b8b6040518363ffffffff1660e01b8152600401610dd392919061186b565b60206040518083038186803b158015610deb57600080fd5b505afa158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2391906117eb565b15610f3257604051632550332960e11b81526001600160a01b03841690634aa0665290610e58908d908d908d90600401611885565b602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611823565b60405163332ff05b60e21b81529092506001600160a01b0384169063ccbfc16c90610edd908d908d908d90600401611885565b602060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611823565b90505b84821115610f5157610f48600360ff86166112f0565b96508095508194505b5050508080610f5f90611a77565b915050610d7c565b5050935093915050565b6005546040516370a0823160e01b81526000918791879184916001600160a01b03808516926370a0823192610fac9290911690600401611857565b60206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190611823565b600554604051636eb1769f60e11b81529192506000916001600160a01b038581169263dd62ed3e926110369290911690309060040161186b565b60206040518083038186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110869190611823565b90508582101580156110985750858110155b80156110a45750600086115b156110f7576005546110c4906001600160a01b03858116911630896112fc565b6110d86001600160a01b0384168988611104565b6005546110f2906001600160a01b03868116911689611104565b600194505b5050505095945050505050565b6040516001600160a01b03831660248201526044810182905261044090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611323565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156112925760006111a3600183611a19565b85549091506000906111b790600190611a19565b90508181146112385760008660000182815481106111e557634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061121657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061125757634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610cb2565b6000915050610cb2565b60006112a88383611167565b6112de57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cb2565b506000610cb2565b6000610cb2825490565b6000610caf83836113f5565b61131d846323b872dd60e01b85858560405160240161113093929190611885565b50505050565b6000611378826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661142d9092919063ffffffff16565b805190915015610440578080602001905181019061139691906117eb565b6104405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161029b565b600082600001828154811061141a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606061143c8484600085611446565b90505b9392505050565b6060824710156114a75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161029b565b843b6114f55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029b565b600080866001600160a01b03168587604051611511919061183b565b60006040518083038185875af1925050503d806000811461154e576040519150601f19603f3d011682016040523d82523d6000602084013e611553565b606091505b509150915061156382828661156e565b979650505050505050565b6060831561157d57508161143f565b82511561158d5782518084602001fd5b8160405162461bcd60e51b815260040161029b91906118d1565b8280548282559060005260206000209081019282156115fc579160200282015b828111156115fc57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906115c7565b5061160892915061160c565b5090565b5b80821115611608576000815560010161160d565b803561162c81611ac3565b919050565b600060208284031215611642578081fd5b813561143f81611ac3565b60006020828403121561165e578081fd5b815161143f81611ac3565b6000806000806080858703121561167e578283fd5b843561168981611ac3565b9350602085013561169981611ac3565b925060408501356116a981611ac3565b9396929550929360600135925050565b600080600080600060a086880312156116d0578081fd5b85356116db81611ac3565b945060208601356116eb81611ac3565b935060408601356116fb81611ac3565b94979396509394606081013594506080013592915050565b60008060408385031215611725578182fd5b82356001600160401b038082111561173b578384fd5b818501915085601f83011261174e578384fd5b813560208282111561176257611762611aad565b8160051b604051601f19603f8301168101818110868211171561178757611787611aad565b604052838152828101945085830182870184018b10156117a5578889fd5b8896505b848710156117ce576117ba81611621565b8652600196909601959483019483016117a9565b5096506117de9050878201611621565b9450505050509250929050565b6000602082840312156117fc578081fd5b8151801515811461143f578182fd5b60006020828403121561181c578081fd5b5035919050565b600060208284031215611834578081fd5b5051919050565b6000825161184d818460208701611a30565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208101600c83106118cb57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526118f0816040850160208701611a30565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600082821015611a2b57611a2b611a97565b500390565b60005b83811015611a4b578181015183820152602001611a33565b8381111561131d5750506000910152565b6000600019821415611a7057611a70611a97565b5060010190565b600060ff821660ff811415611a8e57611a8e611a97565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611ad857600080fd5b5056fea2646970667358221220e6371f353b038a8e33de6a8fbafa3e720f9899c18b584d3acfd1ae4c85f7c5fc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTrader(address)": {
        "params": {
          "_traderAddress": "Address of the contract implementing IDexTrader interface"
        }
      },
      "removeTrader(address)": {
        "params": {
          "_traderAddress": "Address of the contract implementing IDexTrader interface"
        }
      },
      "setInternalWallet(address)": {
        "params": {
          "_walletAddress": "The address of the contract (user) which will be used for internal swaps"
        }
      },
      "swapExactIn(address,address,address,uint256)": {
        "params": {
          "_amountIn": "The exact amount of the input to swap",
          "_recipient": "The address of the token out recipient",
          "_tokenIn": "The address of the input token",
          "_tokenOut": "The address of the output token"
        },
        "returns": {
          "tradeSuccess_": "Indicates whether the swap succeeded"
        }
      },
      "swapExactIn(address,address,address,uint256,uint256)": {
        "params": {
          "_amountIn": "The exact amount of the input to swap",
          "_minAmountOut": "The minimum amount of _tokenOut to receive",
          "_recipient": "The address of the token out recipient",
          "_tokenIn": "The address of the input token",
          "_tokenOut": "The address of the output token"
        },
        "returns": {
          "tradeSuccess_": "Indicates whether the swap succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 723,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 726,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10143,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)20736"
      },
      {
        "astId": 4667,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4670,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12959,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "traders",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3315_storage"
      },
      {
        "astId": 12961,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "internalWallet",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IModuleMap)20736": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3315_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3314,
            "contract": "contracts/core/SwapManager.sol:SwapManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3014_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3014_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3009,
            "contract": "contracts/core/SwapManager.sol:SwapManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3013,
            "contract": "contracts/core/SwapManager.sol:SwapManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}