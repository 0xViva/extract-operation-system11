{
  "address": "0xF43D563A0Ca6e474955BA87db65552B1dc8B4a78",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimBiosRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "biosClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBiosRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBiosRewardsDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalClaimedBiosRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTotalUserClaimedBiosRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserBiosRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userBiosRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseBiosRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "biosRewardsDuration",
          "type": "uint32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "biosAmount",
          "type": "uint256"
        }
      ],
      "name": "seedBiosRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "biosRewardsDuration_",
          "type": "uint32"
        }
      ],
      "name": "setBiosRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ebcbfb0363945856c653bbecc9640c27c75eb7d87e5c6ab9f9f05dc987f7428",
  "receipt": {
    "to": null,
    "from": "0x34B3A62aD391052B8A4d8FAB59cDFF8C2A249701",
    "contractAddress": "0xF43D563A0Ca6e474955BA87db65552B1dc8B4a78",
    "transactionIndex": 67,
    "gasUsed": "2601674",
    "logsBloom": "0x00000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000001000008000000000000000000000000000000004000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000800000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000800000000000000004000000000000000000001000000000000000000000000000000100100000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xdf79e992b3aea948eb2f2219004b9b057e69bb30ac499440168cd8a6babf78e6",
    "transactionHash": "0x9ebcbfb0363945856c653bbecc9640c27c75eb7d87e5c6ab9f9f05dc987f7428",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 22884086,
        "transactionHash": "0x9ebcbfb0363945856c653bbecc9640c27c75eb7d87e5c6ab9f9f05dc987f7428",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000034b3a62ad391052b8a4d8fab59cdff8c2a249701",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001154a42f5bdb8000000000000000000000000000000000000000000000000032e5b4162409338000000000000000000000000000000000000000000000002e1d6fe8fe7ca39d6a30000000000000000000000000000000000000000000000032d45f71f4ad580000000000000000000000000000000000000000000000002e1d813da2abff78ea3",
        "logIndex": 322,
        "blockHash": "0xdf79e992b3aea948eb2f2219004b9b057e69bb30ac499440168cd8a6babf78e6"
      }
    ],
    "blockNumber": 22884086,
    "cumulativeGasUsed": "12885563",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3fb2c2d9111dbcc848be196eb3f217b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBiosRewardsDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimedBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalUserClaimedBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userBiosRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseBiosRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"biosRewardsDuration\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"biosAmount\",\"type\":\"uint256\"}],\"name\":\"seedBiosRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"biosRewardsDuration_\",\"type\":\"uint32\"}],\"name\":\"setBiosRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimBiosRewards(address)\":{\"params\":{\"recipient\":\"The address of the user claiming BIOS rewards\"}},\"getBiosRewardsDuration()\":{\"returns\":{\"_0\":\"The Bios Rewards Duration\"}},\"notifyRewardAmount(address,uint256,uint32)\":{\"params\":{\"duration\":\"The duration of the rewards period\",\"reward\":\"The updated reward amount\",\"token\":\"The address of the ERC20 token contract\"}},\"seedBiosRewards(address,uint256)\":{\"params\":{\"biosAmount\":\"The amount of BIOS to add to rewards\",\"sender\":\"The account seeding BIOS rewards\"}},\"setBiosRewardsDuration(uint32)\":{\"params\":{\"biosRewardsDuration_\":\"The duration in seconds for a BIOS rewards period to last\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimBiosRewards(address)\":{\"notice\":\"Allows users to claim their BIOS rewards for each token\"},\"increaseBiosRewards()\":{\"notice\":\"Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/BiosRewards.sol\":\"BiosRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0c85e40b29481eadb132cb5eb973d27b4567098f4bc257b250ee540d8d309a00\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xb5f53cc3ab24ab6fa25438eb8f5d7eb1c3ba12ee0766e7f8f3b73d6a94d22131\",\"license\":\"MIT\"},\"contracts/core/BiosRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IBiosRewards.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\ncontract BiosRewards is\\n    Initializable,\\n    ModuleMapConsumer,\\n    Controlled,\\n    IBiosRewards\\n{\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    uint256 private totalBiosRewards;\\n    uint256 private totalClaimedBiosRewards;\\n    mapping(address => uint256) private totalUserClaimedBiosRewards;\\n    mapping(address => uint256) public periodFinish;\\n    mapping(address => uint256) public rewardRate;\\n    mapping(address => uint256) public lastUpdateTime;\\n    mapping(address => uint256) public rewardPerTokenStored;\\n    mapping(address => mapping(address => uint256))\\n        public userRewardPerTokenPaid;\\n    mapping(address => mapping(address => uint256)) public rewards;\\n\\n    uint32 private _biosRewardsDuration;\\n\\n    event RewardAdded(address indexed token, uint256 reward, uint32 duration);\\n\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        uint32 biosRewardsDuration\\n    ) public initializer {\\n        __Controlled_init(controllers_, moduleMap_);\\n        _biosRewardsDuration = biosRewardsDuration;\\n    }\\n\\n    modifier updateReward(address token, address account) {\\n        rewardPerTokenStored[token] = rewardPerToken(token);\\n        lastUpdateTime[token] = lastTimeRewardApplicable(token);\\n        if (account != address(0)) {\\n            rewards[token][account] = earned(token, account);\\n            userRewardPerTokenPaid[token][account] = rewardPerTokenStored[\\n                token\\n            ];\\n        }\\n        _;\\n    }\\n\\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_)\\n        external\\n        override\\n        onlyController\\n    {\\n        require(\\n            _biosRewardsDuration != biosRewardsDuration_,\\n            \\\"BiosRewards::setBiosRewardsDuration: Duration must be set to a new value\\\"\\n        );\\n        require(\\n            biosRewardsDuration_ > 0,\\n            \\\"BiosRewards::setBiosRewardsDuration: Duration must be greater than zero\\\"\\n        );\\n\\n        _biosRewardsDuration = biosRewardsDuration_;\\n    }\\n\\n    /// @param sender The account seeding BIOS rewards\\n    /// @param biosAmount The amount of BIOS to add to rewards\\n    function seedBiosRewards(address sender, uint256 biosAmount)\\n        external\\n        override\\n        onlyController\\n    {\\n        require(\\n            biosAmount > 0,\\n            \\\"BiosRewards::seedBiosRewards: BIOS amount must be greater than zero\\\"\\n        );\\n\\n        IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(\\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n                .getBiosTokenAddress()\\n        );\\n\\n        bios.safeTransferFrom(\\n            sender,\\n            moduleMap.getModuleAddress(Modules.Kernel),\\n            biosAmount\\n        );\\n\\n        _increaseBiosRewards();\\n    }\\n\\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\\n    function increaseBiosRewards() external override onlyController {\\n        _increaseBiosRewards();\\n    }\\n\\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\\n    function _increaseBiosRewards() private {\\n        IBiosRewards biosRewards = IBiosRewards(\\n            moduleMap.getModuleAddress(Modules.BiosRewards)\\n        );\\n        IIntegrationMap integrationMap = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        );\\n        IUserPositions userPositions = IUserPositions(\\n            moduleMap.getModuleAddress(Modules.UserPositions)\\n        );\\n        address biosAddress = integrationMap.getBiosTokenAddress();\\n        uint256 kernelBiosBalance = IERC20MetadataUpgradeable(biosAddress)\\n            .balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\\n\\n        require(\\n            kernelBiosBalance >\\n                biosRewards.getBiosRewards() +\\n                    userPositions.totalTokenBalance(biosAddress),\\n            \\\"BiosRewards::increaseBiosRewards: No available BIOS to add to rewards\\\"\\n        );\\n\\n        uint256 availableBiosRewards = kernelBiosBalance -\\n            biosRewards.getBiosRewards() -\\n            userPositions.totalTokenBalance(biosAddress);\\n\\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n        uint256 biosRewardWeightSum = integrationMap.getBiosRewardWeightSum();\\n\\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n            address token = integrationMap.getTokenAddress(tokenId);\\n            uint256 tokenBiosRewardWeight = integrationMap\\n                .getTokenBiosRewardWeight(token);\\n            uint256 tokenBiosRewardAmount = (availableBiosRewards *\\n                tokenBiosRewardWeight) / biosRewardWeightSum;\\n            _increaseTokenBiosRewards(token, tokenBiosRewardAmount);\\n        }\\n    }\\n\\n    /// @param token The address of the ERC20 token contract\\n    /// @param biosReward The added reward amount\\n    function _increaseTokenBiosRewards(address token, uint256 biosReward)\\n        private\\n    {\\n        IBiosRewards biosRewards = IBiosRewards(\\n            moduleMap.getModuleAddress(Modules.BiosRewards)\\n        );\\n\\n        require(\\n            IERC20MetadataUpgradeable(\\n                IIntegrationMap(\\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\\n                ).getBiosTokenAddress()\\n            ).balanceOf(moduleMap.getModuleAddress(Modules.Kernel)) >=\\n                biosReward + biosRewards.getBiosRewards(),\\n            \\\"BiosRewards::increaseTokenBiosRewards: Not enough available BIOS for specified amount\\\"\\n        );\\n\\n        _notifyRewardAmount(token, biosReward, _biosRewardsDuration);\\n    }\\n\\n    /// @notice Allows users to claim their BIOS rewards for each token\\n    /// @param recipient The address of the user claiming BIOS rewards\\n    function claimBiosRewards(address recipient)\\n        external\\n        override\\n        onlyController\\n        returns (uint256 biosClaimed)\\n    {\\n        biosClaimed = _claimBiosRewards(recipient);\\n    }\\n\\n    /// @notice Allows users to claim their BIOS rewards for each token\\n    /// @param recipient The address of the user claiming BIOS rewards\\n    function _claimBiosRewards(address recipient)\\n        private\\n        returns (uint256 biosClaimed)\\n    {\\n        IIntegrationMap integrationMap = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        );\\n\\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n\\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n            address token = integrationMap.getTokenAddress(tokenId);\\n\\n            if (earned(token, recipient) > 0) {\\n                biosClaimed += claimReward(token, recipient);\\n            }\\n        }\\n\\n        IERC20MetadataUpgradeable(integrationMap.getBiosTokenAddress())\\n            .safeTransferFrom(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                recipient,\\n                biosClaimed\\n            );\\n    }\\n\\n    /// @param token The address of the ERC20 token contract\\n    /// @param reward The updated reward amount\\n    /// @param duration The duration of the rewards period\\n    function notifyRewardAmount(\\n        address token,\\n        uint256 reward,\\n        uint32 duration\\n    ) external override {\\n        _notifyRewardAmount(token, reward, duration);\\n    }\\n\\n    function _notifyRewardAmount(\\n        address token,\\n        uint256 reward,\\n        uint32 duration\\n    ) private updateReward(token, address(0)) {\\n        if (block.timestamp >= periodFinish[token]) {\\n            rewardRate[token] = reward / duration;\\n        } else {\\n            uint256 remaining = periodFinish[token] - block.timestamp;\\n            uint256 leftover = remaining * rewardRate[token];\\n            rewardRate[token] = (reward + leftover) / duration;\\n        }\\n        lastUpdateTime[token] = block.timestamp;\\n        periodFinish[token] = block.timestamp + duration;\\n        totalBiosRewards += reward;\\n        emit RewardAdded(token, reward, duration);\\n    }\\n\\n    function increaseRewards(\\n        address token,\\n        address account,\\n        uint256 amount\\n    ) public override onlyController updateReward(token, account) {\\n        require(amount > 0, \\\"BiosRewards::increaseRewards: Cannot increase 0\\\");\\n    }\\n\\n    function decreaseRewards(\\n        address token,\\n        address account,\\n        uint256 amount\\n    ) public override onlyController updateReward(token, account) {\\n        require(amount > 0, \\\"BiosRewards::decreaseRewards: Cannot decrease 0\\\");\\n    }\\n\\n    function claimReward(address token, address account)\\n        public\\n        override\\n        onlyController\\n        updateReward(token, account)\\n        returns (uint256 reward)\\n    {\\n        reward = earned(token, account);\\n        if (reward > 0) {\\n            rewards[token][account] = 0;\\n            totalBiosRewards -= reward;\\n            totalClaimedBiosRewards += reward;\\n            totalUserClaimedBiosRewards[account] += reward;\\n        }\\n        return reward;\\n    }\\n\\n    function lastTimeRewardApplicable(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return MathUpgradeable.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    function rewardPerToken(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = IUserPositions(\\n            moduleMap.getModuleAddress(Modules.UserPositions)\\n        ).totalTokenBalance(token);\\n        if (totalSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return\\n            rewardPerTokenStored[token] +\\n            (((lastTimeRewardApplicable(token) - lastUpdateTime[token]) *\\n                rewardRate[token] *\\n                1e18) / totalSupply);\\n    }\\n\\n    function earned(address token, address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        IUserPositions userPositions = IUserPositions(\\n            moduleMap.getModuleAddress(Modules.UserPositions)\\n        );\\n        return\\n            ((userPositions.userTokenBalance(token, account) *\\n                (rewardPerToken(token) -\\n                    userRewardPerTokenPaid[token][account])) / 1e18) +\\n            rewards[token][account];\\n    }\\n\\n    function getUserBiosRewards(address account)\\n        external\\n        view\\n        override\\n        returns (uint256 userBiosRewards)\\n    {\\n        IIntegrationMap integrationMap = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        );\\n\\n        for (\\n            uint256 tokenId;\\n            tokenId < integrationMap.getTokenAddressesLength();\\n            tokenId++\\n        ) {\\n            userBiosRewards += earned(\\n                integrationMap.getTokenAddress(tokenId),\\n                account\\n            );\\n        }\\n    }\\n\\n    function getTotalClaimedBiosRewards()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return totalClaimedBiosRewards;\\n    }\\n\\n    function getTotalUserClaimedBiosRewards(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return totalUserClaimedBiosRewards[account];\\n    }\\n\\n    function getBiosRewards() external view override returns (uint256) {\\n        return totalBiosRewards;\\n    }\\n\\n    /// @return The Bios Rewards Duration\\n    function getBiosRewardsDuration() public view override returns (uint32) {\\n        return _biosRewardsDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x159eab5bb311486871ae61eea604ee0177b746dbf6b93811729e19227f006f7b\",\"license\":\"GPL-2.0\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(\\n        address[] memory controllers_,\\n        address moduleMap_\\n    ) public initializer {\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender],\\n            \\\"Controlled::onlyController: Caller is not controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d695827316f9115bdeefad43183295fe65948c7ca5489ba6718fbbb01bfbcb8\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IBiosRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IBiosRewards {\\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_) external;\\n\\n    /// @param sender The account seeding BIOS rewards\\n    /// @param biosAmount The amount of BIOS to add to rewards\\n    function seedBiosRewards(address sender, uint256 biosAmount) external;\\n\\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\\n    function increaseBiosRewards() external;\\n\\n    /// @notice Allows users to claim their BIOS rewards for each token\\n    /// @param recipient The address of the usuer claiming BIOS rewards\\n    function claimBiosRewards(address recipient)\\n        external\\n        returns (uint256 biosClaimed);\\n\\n    /// @return The Bios Rewards Duration\\n    function getBiosRewardsDuration() external view returns (uint32);\\n\\n    /// @param token The address of the ERC20 token contract\\n    /// @param reward The updated reward amount\\n    /// @param duration The duration of the rewards period\\n    function notifyRewardAmount(\\n        address token,\\n        uint256 reward,\\n        uint32 duration\\n    ) external;\\n\\n    function increaseRewards(\\n        address token,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function decreaseRewards(\\n        address token,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function claimReward(address asset, address account)\\n        external\\n        returns (uint256 reward);\\n\\n    function lastTimeRewardApplicable(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardPerToken(address token) external view returns (uint256);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserBiosRewards(address account)\\n        external\\n        view\\n        returns (uint256 userBiosRewards);\\n\\n    function getTotalClaimedBiosRewards() external view returns (uint256);\\n\\n    function getTotalUserClaimedBiosRewards(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBiosRewards() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ceb1c50727afd41fa8362b0a68bc3c23fe08ac560ca6688115e208bc9f3c5b2\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /// @param tokenAddress The address of the withdrawal token\\n    /// @param amount The amount of the token to withdraw\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n    function deploy() external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n\\n    /// @dev This returns the total amount of the underlying token that\\n    /// @dev has been deposited to the integration contract\\n    /// @param tokenAddress The address of the deployed token\\n    /// @return The amount of the underlying token that can be withdrawn\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /// @dev Returns the total amount of yield awaiting to be harvested\\n    /// @dev using the relevant integration's own function\\n    /// @param amount The amount of available yield for the specified token\\n    function getPendingYield(address) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xd92f51a22cbda8f9cbf06a31f798a76d946b82e82b1074cf7ade968125f58e01\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name)\\n        external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(\\n        address tokenAddress,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(\\n        address tokenAddress,\\n        uint256 targetLiquidityRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(\\n        address tokenAddress,\\n        uint256 transferFeeKValueNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum()\\n        external\\n        view\\n        returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x4a57712bb45de506f0e58f5d04714af48bfd391d8ae251ab9f599b02a081f410\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IKernel {\\n    event Withdraw(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] tokenAmounts,\\n        uint256 ethAmount\\n    );\\n    event ClaimEthRewards(address indexed user, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x510aabf6a9a2a4f10896501ce5e850d4b92f52413f09dd1a7379368de07af7f0\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects // 10\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x6c093d69ac78d7d864d031e64f2b3fecedd07dcbf4aa18533f045735cf9d3f62\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    // #### Structs\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct TokenDeploy {\\n        address integration;\\n        uint32 ammPoolID;\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct StrategyBalance {\\n        uint256 strategyID;\\n        GeneralBalance[] tokens;\\n    }\\n\\n    struct GeneralBalance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    // #### Events\\n    // NewStrategy, UpdateName, UpdateStrategy, DeleteStrategy\\n    event NewStrategy(\\n        uint256 indexed id,\\n        Integration[] integrations,\\n        Token[] tokens,\\n        string name\\n    );\\n    event UpdateName(uint256 indexed id, string name);\\n    event UpdateStrategy(\\n        uint256 indexed id,\\n        Integration[] integrations,\\n        Token[] tokens\\n    );\\n    event DeleteStrategy(uint256 indexed id);\\n\\n    // #### Functions\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 id, string calldata name) external;\\n\\n    /**\\n    @notice Updates a strategy's integrations and tokens\\n    @param id  the strategy to update\\n    @param integrations  the new integrations that will be used\\n    @param tokens  the tokens accepted for new entries\\n    */\\n    function updateStrategy(\\n        uint256 id,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\\n    @param id  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 id) external;\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param id  the strategy to deposit into\\n    @param tokens  the tokens to deposit\\n     */\\n    function increaseStrategy(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param id  the strategy to withdraw assets from\\n    @param tokens  details of the tokens being deposited\\n     */\\n    function decreaseStrategy(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param id  the strategy to return\\n     */\\n    function getStrategy(uint256 id)\\n        external\\n        view\\n        returns (StrategySummary memory);\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param amount  the amount to reduce the vector by\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param id  the strategy id to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 id, address token)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return the pending deploy amount\\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256);\\n\\n    /**\\n    @notice Returns balances per strategy, and total invested balances\\n    @param _strategies  The strategies to retrieve balances for\\n    @param _tokens  The tokens to retrieve\\n     */\\n    function getStrategyBalances(\\n        uint256[] calldata _strategies,\\n        address[] calldata _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            StrategyBalance[] memory strategyBalances,\\n            GeneralBalance[] memory generalBalances\\n        );\\n\\n    /**\\n  @notice Returns 1 or more strategies in a single call.\\n  @param ids  The ids of the strategies to return.\\n   */\\n    function getMultipleStrategies(uint256[] calldata ids)\\n        external\\n        view\\n        returns (StrategySummary[] memory);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n    @notice Clears the list of positions that can be closed to supply a token\\n    @param tokens  The list of tokens to clear\\n     */\\n    function clearClosablePositions(address[] calldata tokens) external;\\n\\n    /**\\n    @notice Closes enough positions to provide a requested amount of a token\\n    @param token  the token to source\\n    @param amount  the amount to source\\n     */\\n    function closePositionsForWithdrawal(address token, uint256 amount)\\n        external;\\n\\n    /**\\n@notice Increases strategy balances without increasing the deploy amount\\n@param id  The strategy id\\n@param tokens  the tokens and amounts \\n */\\n    function increaseTokenBalance(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbcf21ccdeb7fea2e8370775d38c28d6f4ea582d058eef6407730116078fc2290\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct MigrateStrategy {\\n        address user;\\n        TokenMovement[] tokens;\\n    }\\n    // ##### Events\\n    event EnterStrategy(\\n        uint256 indexed id,\\n        address indexed user,\\n        TokenMovement[] tokens\\n    );\\n    event ExitStrategy(\\n        uint256 indexed id,\\n        address indexed user,\\n        TokenMovement[] tokens\\n    );\\n    event Deposit(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] tokenAmounts,\\n        uint256 ethAmount\\n    );\\n\\n    // ##### Functions\\n\\n    /// @notice User is allowed to deposit whitelisted tokens\\n    /// @param depositor Address of the account depositing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param ethAmount The amount of ETH sent with the deposit\\n    /// @param migration flag if this is a migration from the old system\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /// @notice User is allowed to withdraw tokens\\n    /// @param recipient The address of the user withdrawing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n    /// @param recipient The address of the user withdrawing tokens\\n    /// @param tokens Array of token address that user is exiting positions from\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    /// @return tokenAmounts The amounts of each token being withdrawn\\n    /// @return ethWithdrawn The amount of ETH being withdrawn\\n    /// @return ethClaimed The amount of ETH being claimed from rewards\\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        bool withdrawWethAsEth\\n    )\\n        external\\n        returns (\\n            uint256[] memory tokenAmounts,\\n            uint256 ethWithdrawn,\\n            uint256 ethClaimed,\\n            uint256 biosClaimed\\n        );\\n\\n    /// @param user The address of the user claiming ETH rewards\\n    function claimEthRewards(address user)\\n        external\\n        returns (uint256 ethClaimed);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @return The total balance of the asset deposited in the system\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /// @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userTokenBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userDeployableBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the amount that a user has interconnected\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userInterconnectBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n    @notice Adds a user's funds to a strategy to be deployed\\n    @param strategyID  The strategy to enter\\n    @param tokens  The tokens and amounts to enter into the strategy\\n     */\\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\\n        external;\\n\\n    /**\\n    @notice Marks a user's funds as withdrawable\\n    @param strategyID  The strategy to withdrawfrom\\n    @param tokens  The tokens and amounts to withdraw\\n     */\\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\\n        external;\\n\\n    /**\\n    @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n    @param assets list of tokens to update\\n    @param account user \\n    @param amounts list of amounts to update \\n     */\\n    function updateUserTokenBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n    @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n    @param assets list of tokens to update\\n    @param account user \\n    @param amounts list of amounts to update \\n     */\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n    @notice returns the amount of a given token a user has invested in a given strategy\\n    @param id  the strategy id\\n    @param token  the token address\\n    @param user  the user who holds the funds\\n    @return amount  the amount of token that the user has invested in the strategy \\n     */\\n    function getUserStrategyBalanceByToken(\\n        uint256 id,\\n        address token,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the amount of a given token that a user has invested across all strategies\\n    @param token  the token address\\n    @param user  the user holding the funds\\n    @return amount  the amount of tokens the user has invested across all strategies\\n     */\\n    function getUserInvestedAmountByToken(address token, address user)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n    @notice Returns a user's balances for requested strategies, and the users total invested amounts for each token requested\\n    @param user  the user to request for\\n    @param _strategies  the strategies to get balances for\\n    @param _tokens  the tokens to get balances for\\n    @return userStrategyBalances  The user's invested funds in the strategies\\n    @return userBalance  User total token balances\\n     */\\n    function getUserBalances(\\n        address user,\\n        uint256[] calldata _strategies,\\n        address[] calldata _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            IStrategyMap.StrategyBalance[] memory userStrategyBalances,\\n            IStrategyMap.GeneralBalance[] memory userBalance\\n        );\\n\\n    /**\\n    @notice Migrates user strategy positions to the new system\\n    @param users  the user data to add to the strategy\\n     */\\n    function migrateUser(uint256 strategyId, MigrateStrategy[] calldata users)\\n        external;\\n}\\n\",\"keccak256\":\"0xa15543e8ccdf019cac726eab17675f4c241e0741bfcacb103940e9f713052c20\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenSettings contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenSettings {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n}\\n\",\"keccak256\":\"0xa610706ba9d4134cf5afd5b23dc7db0aefff042c75c7d0aadd616e0bb50fc461\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e1c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c806304abbb1c1461014e5780630f0a1c6f14610163578063182b69fd146101925780631f126bd0146101a4578063211dc32d146101b7578063221ca18c146101ca5780632ce9aead146101ea57806335f6978f1461020a57806341a275e4146102125780634953c78214610225578063638634ee14610238578063668e69611461024b57806367dc15bc146102745780637035ab9814610287578063705624cd146102b25780637af85b53146102c55780637b65fb1c146102dd57806384afeffd146102f05780638c3b32ee1461030357806398c671ce1461030b5780639ce43f901461031e578063a7fc7a071461033e578063da09d19d14610351578063e70b9e2714610371578063e94b0dd21461039c578063f1229777146103af578063f487f603146103c2575b600080fd5b61016161015c366004612b86565b6103d5565b005b60005461017c906201000090046001600160a01b031681565b6040516101899190612bbc565b60405180910390f35b6004545b604051908152602001610189565b6101616101b23660046129f6565b610523565b6101966101c53660046129be565b610667565b6101966101d8366004612986565b60076020526000908152604090205481565b6101966101f8366004612986565b60086020526000908152604090205481565b600354610196565b610161610220366004612a61565b6107f5565b6101966102333660046129be565b610805565b610196610246366004612986565b61097c565b610196610259366004612986565b6001600160a01b031660009081526005602052604090205490565b610196610282366004612986565b6109a6565b6101966102953660046129be565b600a60209081526000928352604080842090915290825290205481565b6101616102c0366004612ae2565b610b52565b600c5460405163ffffffff9091168152602001610189565b6101616102eb3660046129f6565b610be0565b6101966102fe366004612986565b610d1d565b610161610d55565b610161610319366004612a9e565b610d8e565b61019661032c366004612986565b60096020526000908152604090205481565b61016161034c366004612986565b610e8e565b61019661035f366004612986565b60066020526000908152604090205481565b61019661037f3660046129be565b600b60209081526000928352604080842090915290825290205481565b61017c6103aa366004612b56565b6110cb565b6101966103bd366004612986565b6110f5565b6101616103d0366004612a36565b6112a7565b3360009081526001602052604090205460ff1661040d5760405162461bcd60e51b815260040161040490612c79565b60405180910390fd5b600c5463ffffffff8281169116141561048d5760405162461bcd60e51b81526020600482015260486024820152600080516020612dc783398151915260448201527f696f6e3a204475726174696f6e206d7573742062652073657420746f2061206e60648201526765772076616c756560c01b608482015260a401610404565b60008163ffffffff16116105075760405162461bcd60e51b81526020600482015260476024820152600080516020612dc783398151915260448201527f696f6e3a204475726174696f6e206d7573742062652067726561746572207468606482015266616e207a65726f60c81b608482015260a401610404565b600c805463ffffffff191663ffffffff92909216919091179055565b3360009081526001602052604090205460ff166105525760405162461bcd60e51b815260040161040490612c79565b828261055d826110f5565b6001600160a01b03831660009081526009602052604090205561057f8261097c565b6001600160a01b038084166000908152600860205260409020919091558116156105f8576105ad8282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b600083116106605760405162461bcd60e51b815260206004820152602f60248201527f42696f73526577617264733a3a6465637265617365526577617264733a20436160448201526e06e6e6f74206465637265617365203608c1b6064820152608401610404565b5050505050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a9061069f90600190600401612bd0565b60206040518083038186803b1580156106b757600080fd5b505afa1580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef91906129a2565b6001600160a01b038086166000818152600b6020908152604080832094891680845294825280832054938352600a8252808320948352939052919091205491925090670de0b6b3a764000090610744876110f5565b61074e9190612d24565b60405163168e0c9960e31b81526001600160a01b038881166004830152878116602483015285169063b47064c89060440160206040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190612b6e565b6107d99190612d05565b6107e39190612ce5565b6107ed9190612ccd565b949350505050565b6108008383836114f7565b505050565b3360009081526001602052604081205460ff166108345760405162461bcd60e51b815260040161040490612c79565b828261083f826110f5565b6001600160a01b0383166000908152600960205260409020556108618261097c565b6001600160a01b038084166000908152600860205260409020919091558116156108da5761088f8282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b6108e48585610667565b92508215610974576001600160a01b038086166000908152600b60209081526040808320938816835292905290812081905560038054859290610928908490612d24565b9250508190555082600460008282546109419190612ccd565b90915550506001600160a01b0384166000908152600560205260408120805485929061096e908490612ccd565b90915550505b505092915050565b6001600160a01b0381166000908152600660205260408120546109a0904290611720565b92915050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a906109de90600390600401612bd0565b60206040518083038186803b1580156109f657600080fd5b505afa158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e91906129a2565b905060005b816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa49190612b6e565b811015610b4b57604051630cf99be760e31b815260048101829052610b2d906001600160a01b038416906367ccdf389060240160206040518083038186803b158015610aef57600080fd5b505afa158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2791906129a2565b85610667565b610b379084612ccd565b925080610b4381612d67565b915050610a33565b5050919050565b600054610100900460ff1680610b6b575060005460ff16155b610b875760405162461bcd60e51b815260040161040490612c2b565b600054610100900460ff16158015610ba9576000805461ffff19166101011790555b610bb38484610d8e565b600c805463ffffffff191663ffffffff84161790558015610bda576000805461ff00191690555b50505050565b3360009081526001602052604090205460ff16610c0f5760405162461bcd60e51b815260040161040490612c79565b8282610c1a826110f5565b6001600160a01b038316600090815260096020526040902055610c3c8261097c565b6001600160a01b03808416600090815260086020526040902091909155811615610cb557610c6a8282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b600083116106605760405162461bcd60e51b815260206004820152602f60248201527f42696f73526577617264733a3a696e637265617365526577617264733a20436160448201526e06e6e6f7420696e637265617365203608c1b6064820152608401610404565b3360009081526001602052604081205460ff16610d4c5760405162461bcd60e51b815260040161040490612c79565b6109a082611736565b3360009081526001602052604090205460ff16610d845760405162461bcd60e51b815260040161040490612c79565b610d8c611a07565b565b600054610100900460ff1680610da7575060005460ff16155b610dc35760405162461bcd60e51b815260040161040490612c2b565b600054610100900460ff16158015610de5576000805461ffff19166101011790555b60005b8351811015610e5a576001806000868481518110610e1657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610e5281612d67565b915050610de8565b508251610e6e906002906020860190612844565b50610e78826121e3565b8015610800576000805461ff0019169055505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610ec39190600401612bd0565b60206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1391906129a2565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401610f3e9190612bbc565b60206040518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e9190612b36565b610fed5760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b6064820152608401610404565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015611075576002818154811061103f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561106357600191505b8061106d81612d67565b915050611014565b50806110c757600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600281815481106110db57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a9061112d90600190600401612bd0565b60206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d91906129a2565b6001600160a01b031663f5465992846040518263ffffffff1660e01b81526004016111a89190612bbc565b60206040518083038186803b1580156111c057600080fd5b505afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f89190612b6e565b90508061121c5750506001600160a01b031660009081526009602052604090205490565b6001600160a01b03831660009081526007602090815260408083205460089092529091205482919061124d8661097c565b6112579190612d24565b6112619190612d05565b61127390670de0b6b3a7640000612d05565b61127d9190612ce5565b6001600160a01b0384166000908152600960205260409020546112a09190612ccd565b9392505050565b3360009081526001602052604090205460ff166112d65760405162461bcd60e51b815260040161040490612c79565b600081116113585760405162461bcd60e51b815260206004820152604360248201527f42696f73526577617264733a3a7365656442696f73526577617264733a20424960448201527f4f5320616d6f756e74206d7573742062652067726561746572207468616e207a60648201526265726f60e81b608482015260a401610404565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061138f90600390600401612bd0565b60206040518083038186803b1580156113a757600080fd5b505afa1580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113df91906129a2565b6001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f91906129a2565b600080546040516337c61fc560e11b81529293506114ef928692620100009092046001600160a01b031691636f8c3f8a9161148d9190600401612bd0565b60206040518083038186803b1580156114a557600080fd5b505afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd91906129a2565b6001600160a01b038416919085612271565b610800611a07565b826000611503826110f5565b6001600160a01b0383166000908152600960205260409020556115258261097c565b6001600160a01b0380841660009081526008602052604090209190915581161561159e576115538282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b6001600160a01b03851660009081526006602052604090205442106115eb576115cd63ffffffff841685612ce5565b6001600160a01b03861660009081526007602052604090205561166f565b6001600160a01b03851660009081526006602052604081205461160f904290612d24565b6001600160a01b038716600090815260076020526040812054919250906116369083612d05565b905063ffffffff85166116498288612ccd565b6116539190612ce5565b6001600160a01b03881660009081526007602052604090205550505b6001600160a01b0385166000908152600860205260409020429081905561169d9063ffffffff851690612ccd565b6001600160a01b038616600090815260066020526040812091909155600380548692906116cb908490612ccd565b90915550506040805185815263ffffffff851660208201526001600160a01b038716917f70c212f3b1a015d66b8a21bb7d6dec623050fc2fc878c5f72d30b90000414419910160405180910390a25050505050565b600081831061172f57816112a0565b5090919050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a9061176e90600390600401612bd0565b60206040518083038186803b15801561178657600080fd5b505afa15801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be91906129a2565b90506000816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612b6e565b905060005b818110156118f957604051630cf99be760e31b8152600481018290526000906001600160a01b038516906367ccdf389060240160206040518083038186803b15801561188357600080fd5b505afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb91906129a2565b905060006118c98288610667565b11156118e6576118d98187610805565b6118e39086612ccd565b94505b50806118f181612d67565b915050611838565b50600080546040516337c61fc560e11b8152610b4b92620100009092046001600160a01b031691636f8c3f8a916119339190600401612bd0565b60206040518083038186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198391906129a2565b8585856001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b1580156119be57600080fd5b505afa1580156119d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f691906129a2565b6001600160a01b0316929190612271565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90611a3d906004908101612bd0565b60206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d91906129a2565b600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a90611ac990600390600401612bd0565b60206040518083038186803b158015611ae157600080fd5b505afa158015611af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1991906129a2565b600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a90611b5590600190600401612bd0565b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba591906129a2565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015611be257600080fd5b505afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a91906129a2565b90506000816001600160a01b03166370a08231600060029054906101000a90046001600160a01b03166001600160a01b0316636f8c3f8a60006040518263ffffffff1660e01b8152600401611c6f9190612bd0565b60206040518083038186803b158015611c8757600080fd5b505afa158015611c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbf91906129a2565b6040518263ffffffff1660e01b8152600401611cdb9190612bbc565b60206040518083038186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190612b6e565b604051637aa32cc960e11b81529091506001600160a01b0384169063f546599290611d5a908590600401612bbc565b60206040518083038186803b158015611d7257600080fd5b505afa158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa9190612b6e565b856001600160a01b03166335f6978f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611de357600080fd5b505afa158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b9190612b6e565b611e259190612ccd565b8111611ea75760405162461bcd60e51b815260206004820152604560248201527f42696f73526577617264733a3a696e63726561736542696f735265776172647360448201527f3a204e6f20617661696c61626c652042494f5320746f2061646420746f207265606482015264776172647360d81b608482015260a401610404565b604051637aa32cc960e11b81526000906001600160a01b0385169063f546599290611ed6908690600401612bbc565b60206040518083038186803b158015611eee57600080fd5b505afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f269190612b6e565b866001600160a01b03166335f6978f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f979190612b6e565b611fa19084612d24565b611fab9190612d24565b90506000856001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe857600080fd5b505afa158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120209190612b6e565b90506000866001600160a01b0316638e7a4b186040518163ffffffff1660e01b815260040160206040518083038186803b15801561205d57600080fd5b505afa158015612071573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120959190612b6e565b905060005b828110156121d857604051630cf99be760e31b8152600481018290526000906001600160a01b038a16906367ccdf389060240160206040518083038186803b1580156120e557600080fd5b505afa1580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211d91906129a2565b90506000896001600160a01b0316633c43134d836040518263ffffffff1660e01b815260040161214d9190612bbc565b60206040518083038186803b15801561216557600080fd5b505afa158015612179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219d9190612b6e565b90506000846121ac8389612d05565b6121b69190612ce5565b90506121c283826122cb565b50505080806121d090612d67565b91505061209a565b505050505050505050565b600054610100900460ff16806121fc575060005460ff16155b6122185760405162461bcd60e51b815260040161040490612c2b565b600054610100900460ff1615801561223a576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156110c7576000805461ff00191690555050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610bda908590612667565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90612301906004908101612bd0565b60206040518083038186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235191906129a2565b9050806001600160a01b03166335f6978f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561238c57600080fd5b505afa1580156123a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c49190612b6e565b6123ce9083612ccd565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061240490600390600401612bd0565b60206040518083038186803b15801561241c57600080fd5b505afa158015612430573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245491906129a2565b6001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b15801561248c57600080fd5b505afa1580156124a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c491906129a2565b600080546040516337c61fc560e11b81526001600160a01b03938416936370a0823193620100009093041691636f8c3f8a916125039190600401612bd0565b60206040518083038186803b15801561251b57600080fd5b505afa15801561252f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255391906129a2565b6040518263ffffffff1660e01b815260040161256f9190612bbc565b60206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bf9190612b6e565b10156126515760405162461bcd60e51b815260206004820152605560248201527f42696f73526577617264733a3a696e637265617365546f6b656e42696f73526560448201527f77617264733a204e6f7420656e6f75676820617661696c61626c652042494f5360648201527408199bdc881cdc1958da599a595908185b5bdd5b9d605a1b608482015260a401610404565b600c54610800908490849063ffffffff166114f7565b60006126bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127399092919063ffffffff16565b80519091501561080057808060200190518101906126da9190612b36565b6108005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610404565b60606107ed848460008585843b6127925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b600080866001600160a01b031685876040516127ae9190612ba0565b60006040518083038185875af1925050503d80600081146127eb576040519150601f19603f3d011682016040523d82523d6000602084013e6127f0565b606091505b509150915061280082828661280b565b979650505050505050565b6060831561281a5750816112a0565b82511561282a5782518084602001fd5b8160405162461bcd60e51b81526004016104049190612bf8565b828054828255906000526020600020908101928215612899579160200282015b8281111561289957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612864565b506128a59291506128a9565b5090565b5b808211156128a557600081556001016128aa565b80356128c981612dae565b919050565b600082601f8301126128de578081fd5b813560206001600160401b03808311156128fa576128fa612d98565b8260051b604051601f19603f8301168101818110848211171561291f5761291f612d98565b6040528481528381019250868401828801850189101561293d578687fd5b8692505b8583101561296657612952816128be565b845292840192600192909201918401612941565b50979650505050505050565b803563ffffffff811681146128c957600080fd5b600060208284031215612997578081fd5b81356112a081612dae565b6000602082840312156129b3578081fd5b81516112a081612dae565b600080604083850312156129d0578081fd5b82356129db81612dae565b915060208301356129eb81612dae565b809150509250929050565b600080600060608486031215612a0a578081fd5b8335612a1581612dae565b92506020840135612a2581612dae565b929592945050506040919091013590565b60008060408385031215612a48578182fd5b8235612a5381612dae565b946020939093013593505050565b600080600060608486031215612a75578283fd5b8335612a8081612dae565b925060208401359150612a9560408501612972565b90509250925092565b60008060408385031215612ab0578182fd5b82356001600160401b03811115612ac5578283fd5b612ad1858286016128ce565b92505060208301356129eb81612dae565b600080600060608486031215612af6578283fd5b83356001600160401b03811115612b0b578384fd5b612b17868287016128ce565b9350506020840135612b2881612dae565b9150612a9560408501612972565b600060208284031215612b47578081fd5b815180151581146112a0578182fd5b600060208284031215612b67578081fd5b5035919050565b600060208284031215612b7f578081fd5b5051919050565b600060208284031215612b97578081fd5b6112a082612972565b60008251612bb2818460208701612d3b565b9190910192915050565b6001600160a01b0391909116815260200190565b60208101600b8310612bf257634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152612c17816040850160208701612d3b565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b60008219821115612ce057612ce0612d82565b500190565b600082612d0057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d1f57612d1f612d82565b500290565b600082821015612d3657612d36612d82565b500390565b60005b83811015612d56578181015183820152602001612d3e565b83811115610bda5750506000910152565b6000600019821415612d7b57612d7b612d82565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612dc357600080fd5b5056fe42696f73526577617264733a3a73657442696f73526577617264734475726174a264697066735822122086010ed5ac27a4a4a1bc69d8b2b0c6e87603736df7f0b51c3ca1f055a816adb664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101495760003560e01c806304abbb1c1461014e5780630f0a1c6f14610163578063182b69fd146101925780631f126bd0146101a4578063211dc32d146101b7578063221ca18c146101ca5780632ce9aead146101ea57806335f6978f1461020a57806341a275e4146102125780634953c78214610225578063638634ee14610238578063668e69611461024b57806367dc15bc146102745780637035ab9814610287578063705624cd146102b25780637af85b53146102c55780637b65fb1c146102dd57806384afeffd146102f05780638c3b32ee1461030357806398c671ce1461030b5780639ce43f901461031e578063a7fc7a071461033e578063da09d19d14610351578063e70b9e2714610371578063e94b0dd21461039c578063f1229777146103af578063f487f603146103c2575b600080fd5b61016161015c366004612b86565b6103d5565b005b60005461017c906201000090046001600160a01b031681565b6040516101899190612bbc565b60405180910390f35b6004545b604051908152602001610189565b6101616101b23660046129f6565b610523565b6101966101c53660046129be565b610667565b6101966101d8366004612986565b60076020526000908152604090205481565b6101966101f8366004612986565b60086020526000908152604090205481565b600354610196565b610161610220366004612a61565b6107f5565b6101966102333660046129be565b610805565b610196610246366004612986565b61097c565b610196610259366004612986565b6001600160a01b031660009081526005602052604090205490565b610196610282366004612986565b6109a6565b6101966102953660046129be565b600a60209081526000928352604080842090915290825290205481565b6101616102c0366004612ae2565b610b52565b600c5460405163ffffffff9091168152602001610189565b6101616102eb3660046129f6565b610be0565b6101966102fe366004612986565b610d1d565b610161610d55565b610161610319366004612a9e565b610d8e565b61019661032c366004612986565b60096020526000908152604090205481565b61016161034c366004612986565b610e8e565b61019661035f366004612986565b60066020526000908152604090205481565b61019661037f3660046129be565b600b60209081526000928352604080842090915290825290205481565b61017c6103aa366004612b56565b6110cb565b6101966103bd366004612986565b6110f5565b6101616103d0366004612a36565b6112a7565b3360009081526001602052604090205460ff1661040d5760405162461bcd60e51b815260040161040490612c79565b60405180910390fd5b600c5463ffffffff8281169116141561048d5760405162461bcd60e51b81526020600482015260486024820152600080516020612dc783398151915260448201527f696f6e3a204475726174696f6e206d7573742062652073657420746f2061206e60648201526765772076616c756560c01b608482015260a401610404565b60008163ffffffff16116105075760405162461bcd60e51b81526020600482015260476024820152600080516020612dc783398151915260448201527f696f6e3a204475726174696f6e206d7573742062652067726561746572207468606482015266616e207a65726f60c81b608482015260a401610404565b600c805463ffffffff191663ffffffff92909216919091179055565b3360009081526001602052604090205460ff166105525760405162461bcd60e51b815260040161040490612c79565b828261055d826110f5565b6001600160a01b03831660009081526009602052604090205561057f8261097c565b6001600160a01b038084166000908152600860205260409020919091558116156105f8576105ad8282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b600083116106605760405162461bcd60e51b815260206004820152602f60248201527f42696f73526577617264733a3a6465637265617365526577617264733a20436160448201526e06e6e6f74206465637265617365203608c1b6064820152608401610404565b5050505050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a9061069f90600190600401612bd0565b60206040518083038186803b1580156106b757600080fd5b505afa1580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef91906129a2565b6001600160a01b038086166000818152600b6020908152604080832094891680845294825280832054938352600a8252808320948352939052919091205491925090670de0b6b3a764000090610744876110f5565b61074e9190612d24565b60405163168e0c9960e31b81526001600160a01b038881166004830152878116602483015285169063b47064c89060440160206040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190612b6e565b6107d99190612d05565b6107e39190612ce5565b6107ed9190612ccd565b949350505050565b6108008383836114f7565b505050565b3360009081526001602052604081205460ff166108345760405162461bcd60e51b815260040161040490612c79565b828261083f826110f5565b6001600160a01b0383166000908152600960205260409020556108618261097c565b6001600160a01b038084166000908152600860205260409020919091558116156108da5761088f8282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b6108e48585610667565b92508215610974576001600160a01b038086166000908152600b60209081526040808320938816835292905290812081905560038054859290610928908490612d24565b9250508190555082600460008282546109419190612ccd565b90915550506001600160a01b0384166000908152600560205260408120805485929061096e908490612ccd565b90915550505b505092915050565b6001600160a01b0381166000908152600660205260408120546109a0904290611720565b92915050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a906109de90600390600401612bd0565b60206040518083038186803b1580156109f657600080fd5b505afa158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e91906129a2565b905060005b816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa49190612b6e565b811015610b4b57604051630cf99be760e31b815260048101829052610b2d906001600160a01b038416906367ccdf389060240160206040518083038186803b158015610aef57600080fd5b505afa158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2791906129a2565b85610667565b610b379084612ccd565b925080610b4381612d67565b915050610a33565b5050919050565b600054610100900460ff1680610b6b575060005460ff16155b610b875760405162461bcd60e51b815260040161040490612c2b565b600054610100900460ff16158015610ba9576000805461ffff19166101011790555b610bb38484610d8e565b600c805463ffffffff191663ffffffff84161790558015610bda576000805461ff00191690555b50505050565b3360009081526001602052604090205460ff16610c0f5760405162461bcd60e51b815260040161040490612c79565b8282610c1a826110f5565b6001600160a01b038316600090815260096020526040902055610c3c8261097c565b6001600160a01b03808416600090815260086020526040902091909155811615610cb557610c6a8282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b600083116106605760405162461bcd60e51b815260206004820152602f60248201527f42696f73526577617264733a3a696e637265617365526577617264733a20436160448201526e06e6e6f7420696e637265617365203608c1b6064820152608401610404565b3360009081526001602052604081205460ff16610d4c5760405162461bcd60e51b815260040161040490612c79565b6109a082611736565b3360009081526001602052604090205460ff16610d845760405162461bcd60e51b815260040161040490612c79565b610d8c611a07565b565b600054610100900460ff1680610da7575060005460ff16155b610dc35760405162461bcd60e51b815260040161040490612c2b565b600054610100900460ff16158015610de5576000805461ffff19166101011790555b60005b8351811015610e5a576001806000868481518110610e1657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610e5281612d67565b915050610de8565b508251610e6e906002906020860190612844565b50610e78826121e3565b8015610800576000805461ff0019169055505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610ec39190600401612bd0565b60206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1391906129a2565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401610f3e9190612bbc565b60206040518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e9190612b36565b610fed5760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b6064820152608401610404565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015611075576002818154811061103f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561106357600191505b8061106d81612d67565b915050611014565b50806110c757600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600281815481106110db57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a9061112d90600190600401612bd0565b60206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d91906129a2565b6001600160a01b031663f5465992846040518263ffffffff1660e01b81526004016111a89190612bbc565b60206040518083038186803b1580156111c057600080fd5b505afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f89190612b6e565b90508061121c5750506001600160a01b031660009081526009602052604090205490565b6001600160a01b03831660009081526007602090815260408083205460089092529091205482919061124d8661097c565b6112579190612d24565b6112619190612d05565b61127390670de0b6b3a7640000612d05565b61127d9190612ce5565b6001600160a01b0384166000908152600960205260409020546112a09190612ccd565b9392505050565b3360009081526001602052604090205460ff166112d65760405162461bcd60e51b815260040161040490612c79565b600081116113585760405162461bcd60e51b815260206004820152604360248201527f42696f73526577617264733a3a7365656442696f73526577617264733a20424960448201527f4f5320616d6f756e74206d7573742062652067726561746572207468616e207a60648201526265726f60e81b608482015260a401610404565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061138f90600390600401612bd0565b60206040518083038186803b1580156113a757600080fd5b505afa1580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113df91906129a2565b6001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f91906129a2565b600080546040516337c61fc560e11b81529293506114ef928692620100009092046001600160a01b031691636f8c3f8a9161148d9190600401612bd0565b60206040518083038186803b1580156114a557600080fd5b505afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd91906129a2565b6001600160a01b038416919085612271565b610800611a07565b826000611503826110f5565b6001600160a01b0383166000908152600960205260409020556115258261097c565b6001600160a01b0380841660009081526008602052604090209190915581161561159e576115538282610667565b6001600160a01b038084166000818152600b60209081526040808320948716808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b6001600160a01b03851660009081526006602052604090205442106115eb576115cd63ffffffff841685612ce5565b6001600160a01b03861660009081526007602052604090205561166f565b6001600160a01b03851660009081526006602052604081205461160f904290612d24565b6001600160a01b038716600090815260076020526040812054919250906116369083612d05565b905063ffffffff85166116498288612ccd565b6116539190612ce5565b6001600160a01b03881660009081526007602052604090205550505b6001600160a01b0385166000908152600860205260409020429081905561169d9063ffffffff851690612ccd565b6001600160a01b038616600090815260066020526040812091909155600380548692906116cb908490612ccd565b90915550506040805185815263ffffffff851660208201526001600160a01b038716917f70c212f3b1a015d66b8a21bb7d6dec623050fc2fc878c5f72d30b90000414419910160405180910390a25050505050565b600081831061172f57816112a0565b5090919050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a9061176e90600390600401612bd0565b60206040518083038186803b15801561178657600080fd5b505afa15801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be91906129a2565b90506000816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612b6e565b905060005b818110156118f957604051630cf99be760e31b8152600481018290526000906001600160a01b038516906367ccdf389060240160206040518083038186803b15801561188357600080fd5b505afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb91906129a2565b905060006118c98288610667565b11156118e6576118d98187610805565b6118e39086612ccd565b94505b50806118f181612d67565b915050611838565b50600080546040516337c61fc560e11b8152610b4b92620100009092046001600160a01b031691636f8c3f8a916119339190600401612bd0565b60206040518083038186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198391906129a2565b8585856001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b1580156119be57600080fd5b505afa1580156119d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f691906129a2565b6001600160a01b0316929190612271565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90611a3d906004908101612bd0565b60206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d91906129a2565b600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a90611ac990600390600401612bd0565b60206040518083038186803b158015611ae157600080fd5b505afa158015611af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1991906129a2565b600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a90611b5590600190600401612bd0565b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba591906129a2565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015611be257600080fd5b505afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a91906129a2565b90506000816001600160a01b03166370a08231600060029054906101000a90046001600160a01b03166001600160a01b0316636f8c3f8a60006040518263ffffffff1660e01b8152600401611c6f9190612bd0565b60206040518083038186803b158015611c8757600080fd5b505afa158015611c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbf91906129a2565b6040518263ffffffff1660e01b8152600401611cdb9190612bbc565b60206040518083038186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190612b6e565b604051637aa32cc960e11b81529091506001600160a01b0384169063f546599290611d5a908590600401612bbc565b60206040518083038186803b158015611d7257600080fd5b505afa158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa9190612b6e565b856001600160a01b03166335f6978f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611de357600080fd5b505afa158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b9190612b6e565b611e259190612ccd565b8111611ea75760405162461bcd60e51b815260206004820152604560248201527f42696f73526577617264733a3a696e63726561736542696f735265776172647360448201527f3a204e6f20617661696c61626c652042494f5320746f2061646420746f207265606482015264776172647360d81b608482015260a401610404565b604051637aa32cc960e11b81526000906001600160a01b0385169063f546599290611ed6908690600401612bbc565b60206040518083038186803b158015611eee57600080fd5b505afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f269190612b6e565b866001600160a01b03166335f6978f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f979190612b6e565b611fa19084612d24565b611fab9190612d24565b90506000856001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe857600080fd5b505afa158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120209190612b6e565b90506000866001600160a01b0316638e7a4b186040518163ffffffff1660e01b815260040160206040518083038186803b15801561205d57600080fd5b505afa158015612071573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120959190612b6e565b905060005b828110156121d857604051630cf99be760e31b8152600481018290526000906001600160a01b038a16906367ccdf389060240160206040518083038186803b1580156120e557600080fd5b505afa1580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211d91906129a2565b90506000896001600160a01b0316633c43134d836040518263ffffffff1660e01b815260040161214d9190612bbc565b60206040518083038186803b15801561216557600080fd5b505afa158015612179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219d9190612b6e565b90506000846121ac8389612d05565b6121b69190612ce5565b90506121c283826122cb565b50505080806121d090612d67565b91505061209a565b505050505050505050565b600054610100900460ff16806121fc575060005460ff16155b6122185760405162461bcd60e51b815260040161040490612c2b565b600054610100900460ff1615801561223a576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156110c7576000805461ff00191690555050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610bda908590612667565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90612301906004908101612bd0565b60206040518083038186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235191906129a2565b9050806001600160a01b03166335f6978f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561238c57600080fd5b505afa1580156123a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c49190612b6e565b6123ce9083612ccd565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061240490600390600401612bd0565b60206040518083038186803b15801561241c57600080fd5b505afa158015612430573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245491906129a2565b6001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b15801561248c57600080fd5b505afa1580156124a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c491906129a2565b600080546040516337c61fc560e11b81526001600160a01b03938416936370a0823193620100009093041691636f8c3f8a916125039190600401612bd0565b60206040518083038186803b15801561251b57600080fd5b505afa15801561252f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255391906129a2565b6040518263ffffffff1660e01b815260040161256f9190612bbc565b60206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bf9190612b6e565b10156126515760405162461bcd60e51b815260206004820152605560248201527f42696f73526577617264733a3a696e637265617365546f6b656e42696f73526560448201527f77617264733a204e6f7420656e6f75676820617661696c61626c652042494f5360648201527408199bdc881cdc1958da599a595908185b5bdd5b9d605a1b608482015260a401610404565b600c54610800908490849063ffffffff166114f7565b60006126bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127399092919063ffffffff16565b80519091501561080057808060200190518101906126da9190612b36565b6108005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610404565b60606107ed848460008585843b6127925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b600080866001600160a01b031685876040516127ae9190612ba0565b60006040518083038185875af1925050503d80600081146127eb576040519150601f19603f3d011682016040523d82523d6000602084013e6127f0565b606091505b509150915061280082828661280b565b979650505050505050565b6060831561281a5750816112a0565b82511561282a5782518084602001fd5b8160405162461bcd60e51b81526004016104049190612bf8565b828054828255906000526020600020908101928215612899579160200282015b8281111561289957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612864565b506128a59291506128a9565b5090565b5b808211156128a557600081556001016128aa565b80356128c981612dae565b919050565b600082601f8301126128de578081fd5b813560206001600160401b03808311156128fa576128fa612d98565b8260051b604051601f19603f8301168101818110848211171561291f5761291f612d98565b6040528481528381019250868401828801850189101561293d578687fd5b8692505b8583101561296657612952816128be565b845292840192600192909201918401612941565b50979650505050505050565b803563ffffffff811681146128c957600080fd5b600060208284031215612997578081fd5b81356112a081612dae565b6000602082840312156129b3578081fd5b81516112a081612dae565b600080604083850312156129d0578081fd5b82356129db81612dae565b915060208301356129eb81612dae565b809150509250929050565b600080600060608486031215612a0a578081fd5b8335612a1581612dae565b92506020840135612a2581612dae565b929592945050506040919091013590565b60008060408385031215612a48578182fd5b8235612a5381612dae565b946020939093013593505050565b600080600060608486031215612a75578283fd5b8335612a8081612dae565b925060208401359150612a9560408501612972565b90509250925092565b60008060408385031215612ab0578182fd5b82356001600160401b03811115612ac5578283fd5b612ad1858286016128ce565b92505060208301356129eb81612dae565b600080600060608486031215612af6578283fd5b83356001600160401b03811115612b0b578384fd5b612b17868287016128ce565b9350506020840135612b2881612dae565b9150612a9560408501612972565b600060208284031215612b47578081fd5b815180151581146112a0578182fd5b600060208284031215612b67578081fd5b5035919050565b600060208284031215612b7f578081fd5b5051919050565b600060208284031215612b97578081fd5b6112a082612972565b60008251612bb2818460208701612d3b565b9190910192915050565b6001600160a01b0391909116815260200190565b60208101600b8310612bf257634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152612c17816040850160208701612d3b565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b60008219821115612ce057612ce0612d82565b500190565b600082612d0057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d1f57612d1f612d82565b500290565b600082821015612d3657612d36612d82565b500390565b60005b83811015612d56578181015183820152602001612d3e565b83811115610bda5750506000910152565b6000600019821415612d7b57612d7b612d82565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612dc357600080fd5b5056fe42696f73526577617264733a3a73657442696f73526577617264734475726174a264697066735822122086010ed5ac27a4a4a1bc69d8b2b0c6e87603736df7f0b51c3ca1f055a816adb664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimBiosRewards(address)": {
        "params": {
          "recipient": "The address of the user claiming BIOS rewards"
        }
      },
      "getBiosRewardsDuration()": {
        "returns": {
          "_0": "The Bios Rewards Duration"
        }
      },
      "notifyRewardAmount(address,uint256,uint32)": {
        "params": {
          "duration": "The duration of the rewards period",
          "reward": "The updated reward amount",
          "token": "The address of the ERC20 token contract"
        }
      },
      "seedBiosRewards(address,uint256)": {
        "params": {
          "biosAmount": "The amount of BIOS to add to rewards",
          "sender": "The account seeding BIOS rewards"
        }
      },
      "setBiosRewardsDuration(uint32)": {
        "params": {
          "biosRewardsDuration_": "The duration in seconds for a BIOS rewards period to last"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimBiosRewards(address)": {
        "notice": "Allows users to claim their BIOS rewards for each token"
      },
      "increaseBiosRewards()": {
        "notice": "Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 722,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 725,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8299,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)17371"
      },
      {
        "astId": 3467,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3470,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2553,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "totalBiosRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2555,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "totalClaimedBiosRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2559,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "totalUserClaimedBiosRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2563,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2567,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2571,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2575,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2581,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2587,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2589,
        "contract": "contracts/core/BiosRewards.sol:BiosRewards",
        "label": "_biosRewardsDuration",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)17371": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}