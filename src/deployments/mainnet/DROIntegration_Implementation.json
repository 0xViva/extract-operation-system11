{
  "address": "0xa962Ef15a9b2A20521EA98cD88b9eb5a241b1A40",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "CreatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "DeployError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "DeploySuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "HarvestYieldError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "source",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destination",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "TransferBetweenPools",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "YieldHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "YieldReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "poolID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDROIntegration.DonateParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "newFee",
              "type": "uint24"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "uint32",
              "name": "poolID",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1Min",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDROIntegration.EnterParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "enterPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "poolID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "decreaseAmount0Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decreaseAmount1Min",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDROIntegration.CloseParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint160",
          "name": "currentPrice",
          "type": "uint160"
        }
      ],
      "name": "getAmountMinimums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0Min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Min",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getPendingYield",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getPendingYieldBurn",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniPool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionID",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUniswapV3Integration.PositionNFT",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "getPoolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "getRawPoolData",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "tokensOwed0",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "tokensOwed1",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDROIntegration.SwapParams",
          "name": "token0Params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDROIntegration.SwapParams",
          "name": "token1Params",
          "type": "tuple"
        }
      ],
      "name": "harvestYieldByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nonfungiblePositionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouter_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount0Desired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Desired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount0Min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Min",
          "type": "uint256"
        }
      ],
      "name": "manualDeploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount0Min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Min",
          "type": "uint256"
        }
      ],
      "name": "manualWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolIDCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "positionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDROIntegration.SwapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "rebalancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV3SwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87338be5ef250ad394377be5f653141a814da97fe3ceec029d5af1412b29130f",
  "receipt": {
    "to": null,
    "from": "0xBf98f6DF65dfa2f2b50d4a806cF134A209C7D364",
    "contractAddress": "0xa962Ef15a9b2A20521EA98cD88b9eb5a241b1A40",
    "transactionIndex": 236,
    "gasUsed": "5210786",
    "logsBloom": "0x
    "blockHash": "0x8db584053330eddb394093f84bd7ec0d47955e665fa51a458246ea6e86853f49",
    "transactionHash": "0x87338be5ef250ad394377be5f653141a814da97fe3ceec029d5af1412b29130f",
    "logs": [],
    "blockNumber": 14683420,
    "cumulativeGasUsed": "20976184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ac678850e482357cdda9c4b11b479f14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"DeployError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DeploySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"HarvestYieldError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"source\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TransferBetweenPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"YieldHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"YieldReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDROIntegration.DonateParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"newFee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"internalType\":\"struct IDROIntegration.EnterParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"enterPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"decreaseAmount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseAmount1Min\",\"type\":\"uint256\"}],\"internalType\":\"struct IDROIntegration.CloseParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint160\",\"name\":\"currentPrice\",\"type\":\"uint160\"}],\"name\":\"getAmountMinimums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPendingYield\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPendingYieldBurn\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"internalType\":\"struct IUniswapV3Integration.PositionNFT\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"getRawPoolData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IDROIntegration.SwapParams\",\"name\":\"token0Params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IDROIntegration.SwapParams\",\"name\":\"token1Params\",\"type\":\"tuple\"}],\"name\":\"harvestYieldByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"name\":\"manualDeploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"name\":\"manualWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIDCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"positionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IDROIntegration.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"rebalancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV3SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPendingYield(uint32)\":{\"details\":\"use getPendingYieldDRO via callstatic instead\"},\"getPendingYieldBurn(uint32)\":{\"details\":\"don't run this on chain!!!\"},\"harvestYield()\":{\"details\":\"Harvests token yield from the integration\"},\"rebalancePool(uint32,(uint160,address,address,uint24,uint256,uint256))\":{\"params\":{\"params\":\"The swap parameters\",\"poolID\":\"The pool to change\"}},\"withdraw(address,uint256,uint32)\":{\"params\":{\"amount\":\"The amount of token in the pool to withdraw\",\"poolID\":\"the pool to withdraw from\",\"token\":\"the token to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CreatePool(address,address,uint32)\":{\"notice\":\"Events\"},\"PoolCreated(uint32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"availableYield(uint32,address)\":{\"notice\":\"Autogenerated getter function definitions\"},\"createPool()\":{\"notice\":\"Functions\"},\"deposit(address,uint256,uint32)\":{\"notice\":\"IAMMInterface Functions\"},\"getPoolBalance(uint32)\":{\"notice\":\"Getter functions\"},\"initialize(address[],address,address,address,address)\":{\"notice\":\"Functions\"},\"poolIDCounter()\":{\"notice\":\"Autogenerated getter function definitions\"},\"positionManager()\":{\"notice\":\"State variables\"},\"rebalancePool(uint32,(uint160,address,address,uint24,uint256,uint256))\":{\"notice\":\"Changes the composition of deposits in preparation of a deploy\"},\"updateBalance(uint32,address,uint256,bool)\":{\"notice\":\"Management functions\"}},\"notice\":\"RULES - when we burn liquidity, we always withdraw the principal and leave the fees - when we claim fees, we know all the tokens we collect are fees - in other words, calling \\\"collect\\\" will always pull only fees unless we have just performed a liquidity burn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yield-integrations/DROIntegration.sol\":\"DROIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal initializer {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xbe4c36b0a1e398f29a4f344b714870a95d5037cc38fce4e60cd66d5e6a6aef9b\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// Events\\n    event CreatePool(address indexed tokenA, address indexed tokenB, uint32 poolID);\\n    event YieldHarvested(uint32 poolID);\\n    event Deposit(address token, uint256 amount, uint32 poolID);\\n    event HarvestYieldError(uint32 indexed poolID);\\n\\n    event TransferBetweenPools(uint32 source, uint32 destination, uint256[] amounts, address[] tokens);\\n\\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n}\\n\",\"keccak256\":\"0x8d06bf6ffe0533f98ddea99623136cd05d8e78a712417a35d6dca8ff2a1070b3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDROIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IDROIntegration {\\n    /// Structs\\n    struct CloseParams {\\n        uint32 poolID;\\n        uint256 decreaseAmount0Min; // If the position is out of range, only one of these will be > 0\\n        uint256 decreaseAmount1Min; // If the position is out of range, only one of these will be > 0\\n    }\\n    struct EnterParams {\\n        address token0;\\n        uint24 newFee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint32 poolID;\\n        address token1;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n    }\\n\\n    struct LiquidateParams {\\n        uint32 poolID;\\n        address token0;\\n        address token1;\\n        uint128 liquidity;\\n        uint256 position;\\n        uint256 decreaseAmount0Min;\\n        uint256 decreaseAmount1Min;\\n    }\\n\\n    struct SwapParams {\\n        uint160 sqrtPriceLimitX96;\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    struct RebalanceParams {\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct DonateParams {\\n        uint32 poolID;\\n        uint256 amount;\\n    }\\n\\n    /// Events\\n    event PoolCreated(uint32 poolID);\\n    event YieldReceived(uint256 amount, address token, uint32 poolID);\\n\\n    /// Functions\\n    function createPool() external;\\n\\n    function donate(DonateParams[] calldata params) external;\\n\\n    function enterPosition(EnterParams calldata params) external;\\n\\n    /// @notice Changes the composition of deposits in preparation of a deploy\\n    /// @param poolID The pool to change\\n    /// @param params The swap parameters\\n    function rebalancePool(uint32 poolID, SwapParams calldata params) external;\\n\\n    function exitPosition(CloseParams calldata params) external;\\n\\n    function harvestYieldByPool(\\n        uint32 poolID,\\n        SwapParams calldata token0Params,\\n        SwapParams calldata token1Params\\n    ) external;\\n\\n    function manualWithdraw(\\n        uint32 poolID,\\n        address token,\\n        uint256 amount,\\n        uint256 amount0Min,\\n        uint256 amount1Min\\n    ) external;\\n\\n    function getPoolBalance(uint32 poolID) external view returns (uint256 tokenA, uint256 tokenB);\\n\\n    function getPendingYield(uint32 poolId) external view returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function getPendingYieldBurn(uint32 poolId) external returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function getRawPoolData(uint32 poolID)\\n        external\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// Autogenerated getter function definitions\\n    function availableYield(uint32 poolID, address token) external view returns (uint256 amount);\\n\\n    function positionID(uint32 poolID) external view returns (uint256 id);\\n}\\n\",\"keccak256\":\"0xe1cd9ee4cc6405d489745033bd417c6be44c8f36b4bb69c4ae245ab22c58bd27\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70fb689b3b91c20166f3c2823639933580d22a61b392aba6b08bb8c3a1c00425\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2e7a465772a645a92442ab9c12173bd3506761e50a18178eb09d1119599f4ec8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapV3Integration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\n\\ninterface IUniswapV3Integration {\\n    /// Structs\\n    struct PositionNFT {\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        address tokenA;\\n        address tokenB;\\n        address uniPool;\\n        uint256 positionID;\\n    }\\n\\n    // Events\\n    event DeployError(uint32 indexed poolID);\\n    event DeploySuccess(uint32 indexed poolID, uint256 indexed amount0, uint256 indexed amount1);\\n\\n    function getPool(uint32 poolID) external view returns (PositionNFT memory pool);\\n\\n    /// Autogenerated getter function definitions\\n    function poolIDCounter() external view returns (uint32);\\n\\n    function balances(uint32 poolID, address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x10dc24cbb889a1712f6fd94da69244d0fb227282731a43d8044197aaabfa378b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3SwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xd0861c3bc26021753022f15eca60a68f51cb4d9e62f071e02e1273d8a9ce4903\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vendors/uniswap-v3/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vendors/uniswap-v3/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84cabdd61177f3e7add098d0dfd54bab3b862f6a7224524d59404a3965cde356\",\"license\":\"MIT\"},\"contracts/vendors/uniswap-v3/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/// Modified so it compiles with solidity 0.8.4.\\npragma solidity 0.8.4;\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager {\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xb27e7701ee63d342103c3fe39fa1e73f79d82331c415259c8ed0a8dc565974c7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vendors/uniswap-v3/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vendors/uniswap-v3/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 amountToken0, uint128 amountToken1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function fee() external view returns (uint24);\\n\\n    function tickSpacing() external view returns (int24);\\n\\n    function maxLiquidityPerTick() external view returns (uint128);\\n\\n    /// @dev We should not actually use these on chain!\\n    /// @dev We only use this in getPendingYieldDRO and should be called statically to not transact.\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n}\\n\",\"keccak256\":\"0xd26810ebf929b3a2d78c92810c106c0ca78ee45200647f4029e477f311f7e7dc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vendors/uniswap-v3/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb5f9b27e0eedfe44219c72b54e13bdd3d3beac51c41100b24bf424dbc0866880\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vendors/uniswap-v3/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x863b909368bb390cf0278fef372ca5d6f1acfeb551ba6e12ff4f2fcd5c3a588a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/yield-integrations/DROIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../core/Controlled.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IUniswapV3Integration.sol\\\";\\nimport \\\"../vendors/uniswap-v3/INonfungiblePositionManager.sol\\\";\\nimport \\\"../vendors/uniswap-v3/LiquidityAmounts.sol\\\";\\nimport \\\"../vendors/uniswap-v3/IUniswapV3Factory.sol\\\";\\nimport \\\"../vendors/uniswap-v3/IUniswapV3Pool.sol\\\";\\nimport \\\"../vendors/uniswap-v3/TickMath.sol\\\";\\nimport \\\"../core/ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IDROIntegration.sol\\\";\\nimport \\\"../interfaces/IUniswapV3SwapRouter.sol\\\";\\n\\n/**\\n * RULES\\n * - when we burn liquidity, we always withdraw the principal and leave the fees\\n * - when we claim fees, we know all the tokens we collect are fees\\n * - in other words, calling \\\"collect\\\" will always pull only fees unless we have just performed a liquidity burn\\n */\\ncontract DROIntegration is\\n    Initializable,\\n    ModuleMapConsumer,\\n    Controlled,\\n    IAMMIntegration,\\n    IUniswapV3Integration,\\n    IERC721Receiver,\\n    IDROIntegration\\n{\\n    /// Libraries\\n    using SafeERC20 for IERC20;\\n\\n    /// State variables\\n    INonfungiblePositionManager public positionManager;\\n\\n    IUniswapV3Factory public factory;\\n\\n    IUniswapV3SwapRouter public swapRouter;\\n\\n    uint32 public override poolIDCounter;\\n\\n    // Pool ID => token address => balance held within this contract\\n    mapping(uint32 => mapping(address => uint256)) public override balances;\\n\\n    // Pool ID => Current position (nft) ID for the pool\\n    mapping(uint32 => uint256) public override positionID;\\n\\n    // Pool ID => token address => balance of yield available to be transferred out of the integration\\n    mapping(uint32 => mapping(address => uint256)) public override availableYield;\\n\\n    /// Functions\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address nonfungiblePositionManager_,\\n        address uniswapFactory_,\\n        address swapRouter_\\n    ) public initializer {\\n        require(nonfungiblePositionManager_ != address(0), \\\"bad address\\\");\\n        require(uniswapFactory_ != address(0), \\\"bad address\\\");\\n        require(swapRouter_ != address(0), \\\"bad address\\\");\\n        __Controlled_init(controllers_, moduleMap_);\\n        positionManager = INonfungiblePositionManager(nonfungiblePositionManager_);\\n        swapRouter = IUniswapV3SwapRouter(swapRouter_);\\n        factory = IUniswapV3Factory(uniswapFactory_);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// IAMMInterface Functions\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external override onlyController {\\n        require(poolID <= poolIDCounter, \\\"invalid pool\\\");\\n        require(token != address(0), \\\"bad address\\\");\\n        balances[poolID][token] += amount;\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external override onlyController {\\n        require(amount <= balances[poolID][token], \\\"DRO: Not Enough Balance\\\");\\n        balances[poolID][token] -= amount;\\n        IERC20(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\\n\\n        // To be used for a user initiated forced withdrawal. No mev protection, so they get what's offered.\\n        // Manual withdrawal should be used when processing negative deploy amounts.\\n        // require(poolID <= poolIDCounter && poolID > 0, \\\"Invalid pool\\\");\\n        // require(token != address(0), \\\"invalid token\\\");\\n\\n        // uint256 balance = balances[poolID][token];\\n        // uint256 amountOut = amount;\\n        // if (balance >= amount) {\\n        //     // Fill from reserves\\n        //     balances[poolID][token] -= amount;\\n        // } else {\\n        //     uint256 excess = amount - balance;\\n        //     balances[poolID][token] = 0;\\n\\n        //     // Pull liquidity to fill the amount out\\n        //     uint128 liquidity = 0;\\n\\n        //     (, , address token0, , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(\\n        //         positionID[poolID]\\n        //     );\\n        //     bool isToken0 = token == token0;\\n        //     uint256 offsideAmount = 0;\\n        //     if (token0 == token) {\\n        //         liquidity = LiquidityAmounts.getLiquidityForAmount0(\\n        //             TickMath.getSqrtRatioAtTick(tickLower),\\n        //             TickMath.getSqrtRatioAtTick(tickUpper),\\n        //             excess\\n        //         );\\n        //         offsideAmount = LiquidityAmounts.getAmount1ForLiquidity(\\n        //             TickMath.getSqrtRatioAtTick(tickLower),\\n        //             TickMath.getSqrtRatioAtTick(tickUpper),\\n        //             liquidity\\n        //         );\\n        //     } else {\\n        //         liquidity = liquidity = LiquidityAmounts.getLiquidityForAmount0(\\n        //             TickMath.getSqrtRatioAtTick(tickLower),\\n        //             TickMath.getSqrtRatioAtTick(tickUpper),\\n        //             excess\\n        //         );\\n        //         offsideAmount = LiquidityAmounts.getAmount0ForLiquidity(\\n        //             TickMath.getSqrtRatioAtTick(tickLower),\\n        //             TickMath.getSqrtRatioAtTick(tickUpper),\\n        //             liquidity\\n        //         );\\n        //     }\\n        //     (uint256 amount0, uint256 amount1) = _withdraw(\\n        //         poolID,\\n        //         liquidity,\\n        //         isToken0 ? excess - ((excess / 10) / 2) : offsideAmount - ((offsideAmount / 10) / 2),\\n        //         !isToken0 ? excess - ((excess / 10) / 2) : offsideAmount - ((offsideAmount / 10) / 2)\\n        //     );\\n        //     amountOut = balance + (isToken0 ? amount0 : amount1);\\n        // }\\n        // IERC20(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amountOut);\\n    }\\n\\n    function deploy(uint32) external view override onlyController {\\n        // No mev protection. It's here to satisfy the interface, not to actually be used.\\n        return;\\n    }\\n\\n    function donate(DonateParams[] calldata params) external override {\\n        address weth = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n        uint256 total;\\n        uint256 length = params.length;\\n        for (uint256 i; i < length; ++i) {\\n            availableYield[params[i].poolID][weth] += params[i].amount;\\n            total += params[i].amount;\\n        }\\n        IERC20(weth).safeTransferFrom(msg.sender, address(this), total);\\n    }\\n\\n    function harvestYield() external override onlyController {\\n        address yieldManager = moduleMap.getModuleAddress(Modules.YieldManager);\\n        address weth = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n        for (uint32 i = 1; i <= poolIDCounter; i++) {\\n            uint256 yieldAmount = availableYield[i][weth];\\n            if (yieldAmount != 0) {\\n                availableYield[i][weth] = 0;\\n                IERC20(weth).safeTransfer(yieldManager, yieldAmount);\\n                emit YieldReceived(yieldAmount, weth, i);\\n            }\\n        }\\n    }\\n\\n    /// Management functions\\n    function updateBalance(\\n        uint32 poolID,\\n        address token,\\n        uint256 amount,\\n        bool add\\n    ) external onlyManager {\\n        if (add) {\\n            balances[poolID][token] += amount;\\n        } else {\\n            balances[poolID][token] -= amount;\\n        }\\n    }\\n\\n    function manualDeploy(\\n        uint32 poolID,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 amount0Min,\\n        uint256 amount1Min\\n    ) external onlyManager {\\n        require(poolID <= poolIDCounter, \\\"Invalid pool\\\");\\n\\n        uint256 tokenId = positionID[poolID];\\n        require(tokenId > 0, \\\"Pool position invalid\\\");\\n\\n        (, , address token0, address token1, , , , , , , , ) = positionManager.positions(positionID[poolID]);\\n        require(balances[poolID][token0] >= amount0Desired, \\\"insufficient amount 0\\\");\\n        require(balances[poolID][token1] >= amount1Desired, \\\"insufficient amount 1\\\");\\n\\n        // Increase liquidity of existing position\\n        (, uint256 amount0, uint256 amount1) = positionManager.increaseLiquidity(\\n            INonfungiblePositionManager.IncreaseLiquidityParams(\\n                tokenId,\\n                amount0Desired,\\n                amount1Desired,\\n                amount0Min,\\n                amount1Min,\\n                block.timestamp\\n            )\\n        );\\n        // Update balances\\n        balances[poolID][token0] -= amount0;\\n        balances[poolID][token1] -= amount1;\\n    }\\n\\n    function rebalancePool(uint32 poolID, SwapParams calldata params) external override onlyManager {\\n        // Swaps the currently deposited funds into the correct range\\n        require(poolID <= poolIDCounter, \\\"Invalid pool\\\");\\n\\n        require(balances[poolID][params.tokenIn] >= params.amountIn, \\\"insufficient amount in\\\");\\n        uint256 balanceA = balances[poolID][params.tokenIn];\\n        uint256 balanceB = balances[poolID][params.tokenOut];\\n\\n        // Swap out\\n        uint256 amountOut = _swapExactInput(params);\\n\\n        balanceA -= params.amountIn;\\n        balanceB += amountOut;\\n        balances[poolID][params.tokenIn] = balanceA;\\n        balances[poolID][params.tokenOut] = balanceB;\\n    }\\n\\n    function manualWithdraw(\\n        uint32 poolID,\\n        address token,\\n        uint256 amount,\\n        uint256 amount0Min,\\n        uint256 amount1Min\\n    ) external override onlyManager {\\n        require(poolID <= poolIDCounter && poolID > 0, \\\"Invalid pool\\\");\\n        require(token != address(0), \\\"invalid token\\\");\\n\\n        // Pull liquidity to fill the amount out\\n        (, , address token0, address token1, , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(\\n            positionID[poolID]\\n        );\\n        uint256 amount0;\\n        uint256 amount1;\\n        if (token == token0) {\\n            (amount0, amount1) = _withdraw(\\n                poolID,\\n                LiquidityAmounts.getLiquidityForAmount0(\\n                    TickMath.getSqrtRatioAtTick(tickLower),\\n                    TickMath.getSqrtRatioAtTick(tickUpper),\\n                    amount\\n                ),\\n                amount0Min,\\n                amount1Min\\n            );\\n        } else {\\n            (amount0, amount1) = _withdraw(\\n                poolID,\\n                LiquidityAmounts.getLiquidityForAmount1(\\n                    TickMath.getSqrtRatioAtTick(tickLower),\\n                    TickMath.getSqrtRatioAtTick(tickUpper),\\n                    amount\\n                ),\\n                amount0Min,\\n                amount1Min\\n            );\\n        }\\n\\n        balances[poolID][token0] += amount0;\\n        balances[poolID][token1] += amount1;\\n    }\\n\\n    function _withdraw(\\n        uint32 poolID,\\n        uint128 liquidity,\\n        uint256 amount0Min,\\n        uint256 amount1Min\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        // Remove liquidity\\n        uint256 tokenId = positionID[poolID];\\n        (amount0, amount1) = positionManager.decreaseLiquidity(\\n            INonfungiblePositionManager.DecreaseLiquidityParams(\\n                tokenId,\\n                liquidity,\\n                amount0Min,\\n                amount1Min,\\n                block.timestamp\\n            )\\n        );\\n\\n        // collect liquidity but leave the fees\\n        positionManager.collect(\\n            INonfungiblePositionManager.CollectParams(\\n                tokenId,\\n                address(this),\\n                SafeCast.toUint128(amount0),\\n                SafeCast.toUint128(amount1)\\n            )\\n        );\\n    }\\n\\n    function createPool() external override onlyManager {\\n        poolIDCounter++;\\n        emit PoolCreated(poolIDCounter);\\n    }\\n\\n    function harvestYieldByPool(\\n        uint32 poolID,\\n        SwapParams calldata token0Params,\\n        SwapParams calldata token1Params\\n    ) external override onlyManager {\\n        /**\\n         * 1. Collect owed tokens from the pool\\n         * 2. Everything should be fees, because we always claim our owed liquidity when withdrawing.\\n         *       A small amount of fees (any increment from when SwapParams were generated) may remain behind\\n         * 3. Liquidate any fees to WETH\\n         * 4. Account yield\\n         */\\n        require(poolID <= poolIDCounter, \\\"invalid pool\\\");\\n        uint256 tokenId = positionID[poolID];\\n        require(tokenId > 0, \\\"pool has no position\\\");\\n\\n        (, , address token0, address token1, , , , , , , , ) = positionManager.positions(tokenId);\\n        (uint256 amount0, uint256 amount1) = positionManager.collect(\\n            INonfungiblePositionManager.CollectParams(\\n                tokenId,\\n                address(this),\\n                SafeCast.toUint128(token0Params.amountIn),\\n                SafeCast.toUint128(token1Params.amountIn)\\n            )\\n        );\\n\\n        address wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n        uint256 wethYield;\\n        // we colelcted exactly the amount we want to trade, so there should not be any excess to account\\n        if (token0 != wethAddress) {\\n            if (amount0 != 0) {\\n                wethYield += _swapExactInput(token0Params);\\n            }\\n        } else {\\n            wethYield += amount0;\\n        }\\n        if (token1 != wethAddress) {\\n            if (amount1 != 0) {\\n                wethYield += _swapExactInput(token1Params);\\n            }\\n        } else {\\n            wethYield += amount1;\\n        }\\n\\n        if (wethYield != 0) {\\n            availableYield[poolID][wethAddress] += wethYield;\\n        }\\n    }\\n\\n    function exitPosition(CloseParams calldata params) external override onlyManager {\\n        uint256 position = positionID[params.poolID];\\n        require(position > 0, \\\"pool has no position\\\");\\n        require(params.poolID <= poolIDCounter, \\\"invalid pool\\\");\\n        (, , address token0, address token1, , , , uint128 liquidity, , , , ) = positionManager.positions(position);\\n\\n        // Liquidate and burn current position\\n        (uint256 amount0, uint256 amount1) = _liquidatePosition(\\n            LiquidateParams(\\n                params.poolID,\\n                token0,\\n                token1,\\n                liquidity,\\n                position,\\n                params.decreaseAmount0Min,\\n                params.decreaseAmount1Min\\n            )\\n        );\\n        if (amount0 > 0) {\\n            balances[params.poolID][token0] += amount0;\\n        }\\n        if (amount1 > 0) {\\n            balances[params.poolID][token1] += amount1;\\n        }\\n    }\\n\\n    function enterPosition(EnterParams calldata params) external override onlyManager {\\n        require(positionID[params.poolID] == 0, \\\"position still open\\\");\\n        require(params.poolID <= poolIDCounter, \\\"Invalid pool\\\");\\n\\n        // Trade to get enough of the other half\\n        uint256 amount0 = balances[params.poolID][params.token0];\\n        uint256 amount1 = balances[params.poolID][params.token1];\\n        if (IERC20(params.token0).allowance(address(this), address(positionManager)) != type(uint256).max) {\\n            IERC20(params.token0).safeApprove(address(positionManager), 0);\\n            IERC20(params.token0).safeApprove(address(positionManager), type(uint256).max);\\n        }\\n        if (IERC20(params.token1).allowance(address(this), address(positionManager)) != type(uint256).max) {\\n            IERC20(params.token1).safeApprove(address(positionManager), 0);\\n            IERC20(params.token1).safeApprove(address(positionManager), type(uint256).max);\\n        }\\n        // Mint a new position and save position id\\n        (uint256 tokenId, , uint256 amount0Invested, uint256 amount1Invested) = positionManager.mint(\\n            INonfungiblePositionManager.MintParams(\\n                params.token0,\\n                params.token1,\\n                params.newFee,\\n                params.tickLower,\\n                params.tickUpper,\\n                amount0,\\n                amount1,\\n                params.amount0Min,\\n                params.amount1Min,\\n                address(this),\\n                block.timestamp\\n            )\\n        );\\n        positionID[params.poolID] = tokenId;\\n        balances[params.poolID][params.token0] -= amount0Invested;\\n        balances[params.poolID][params.token1] -= amount1Invested;\\n    }\\n\\n    function _liquidatePosition(LiquidateParams memory params) internal returns (uint256 amount0, uint256 amount1) {\\n        positionManager.decreaseLiquidity(\\n            INonfungiblePositionManager.DecreaseLiquidityParams(\\n                params.position,\\n                params.liquidity,\\n                params.decreaseAmount0Min,\\n                params.decreaseAmount1Min,\\n                block.timestamp\\n            )\\n        );\\n        (amount0, amount1) = positionManager.collect(\\n            INonfungiblePositionManager.CollectParams(\\n                params.position,\\n                address(this),\\n                type(uint128).max,\\n                type(uint128).max\\n            )\\n        );\\n        // Any leftover fees just gets rolled into principal\\n        positionManager.burn(params.position);\\n        delete positionID[params.poolID];\\n    }\\n\\n    function _swapExactInput(SwapParams memory swap) internal returns (uint256 amountOut) {\\n        _approveToken(swap.tokenIn, address(swapRouter), swap.amountIn);\\n        amountOut = swapRouter.exactInputSingle(\\n            IUniswapV3SwapRouter.ExactInputSingleParams(\\n                swap.tokenIn,\\n                swap.tokenOut,\\n                swap.fee,\\n                address(this),\\n                swap.amountIn,\\n                swap.amountOutMinimum,\\n                swap.sqrtPriceLimitX96\\n            )\\n        );\\n    }\\n\\n    function _approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        if (allowance < amount) {\\n            if (allowance != 0) {\\n                IERC20(token).safeApprove(spender, 0);\\n            }\\n            IERC20(token).safeApprove(spender, type(uint256).max);\\n        }\\n    }\\n\\n    /// Getter functions\\n    function getPoolBalance(uint32 poolID) external view override returns (uint256 tokenA, uint256 tokenB) {\\n        require(poolID > 0 && poolID <= poolIDCounter, \\\"invalid pool\\\");\\n        uint256 position = positionID[poolID];\\n        require(position > 0, \\\"position is invalid\\\");\\n\\n        // Returns the uniswap pool balances\\n        (\\n            ,\\n            ,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = positionManager.positions(position);\\n        (uint160 price, , , , , , ) = IUniswapV3Pool(factory.getPool(token0, token1, fee)).slot0();\\n        (tokenA, tokenB) = LiquidityAmounts.getAmountsForLiquidity(\\n            price,\\n            TickMath.getSqrtRatioAtTick(tickLower),\\n            TickMath.getSqrtRatioAtTick(tickUpper),\\n            liquidity\\n        );\\n    }\\n\\n    /// @dev don't run this on chain!!!\\n    function getPendingYieldBurn(uint32 poolId)\\n        external\\n        override\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {\\n        uint256 tokenId = positionID[poolId];\\n        (, , address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, , , , , ) = positionManager\\n            .positions(tokenId);\\n        IUniswapV3Pool(factory.getPool(token0, token1, fee)).burn(tickLower, tickUpper, 0);\\n        (, , , , , , , , , , uint128 tokensOwed0, uint128 tokensOwed1) = positionManager.positions(tokenId);\\n        tokens = new address[](3);\\n        amounts = new uint256[](3);\\n        tokens[0] = token0;\\n        amounts[0] = uint256(tokensOwed0);\\n        tokens[1] = token1;\\n        amounts[1] = uint256(tokensOwed1);\\n        tokens[2] = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n        amounts[2] = availableYield[poolId][tokens[2]];\\n    }\\n\\n    /// @dev use getPendingYieldDRO via callstatic instead\\n    function getPendingYield(uint32 poolId)\\n        external\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {}\\n\\n    function getPool(uint32 poolID) external view override returns (PositionNFT memory pool) {\\n        (, , address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, , , , , ) = positionManager\\n            .positions(positionID[poolID]);\\n        pool.fee = fee;\\n        pool.tickLower = tickLower;\\n        pool.tickUpper = tickUpper;\\n        pool.tokenA = token0;\\n        pool.tokenB = token1;\\n        pool.uniPool = factory.getPool(token0, token1, fee);\\n        pool.positionID = positionID[poolID];\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1) {\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    function getRawPoolData(uint32 poolID)\\n        external\\n        view\\n        override\\n        returns (\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        )\\n    {\\n        (, , token0, token1, fee, tickLower, tickUpper, liquidity, , , tokensOwed0, tokensOwed1) = positionManager\\n            .positions(positionID[poolID]);\\n    }\\n\\n    function getAmountMinimums(\\n        uint256 amount0,\\n        uint256 amount1,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint160 currentPrice\\n    ) external pure returns (uint256 amount0Min, uint256 amount1Min) {\\n        uint160 priceLower = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint160 priceUpper = TickMath.getSqrtRatioAtTick(tickUpper);\\n        uint128 liquidity = LiquidityAmounts.getLiquidityForAmounts(\\n            currentPrice,\\n            priceLower,\\n            priceUpper,\\n            amount0,\\n            amount1\\n        );\\n        (amount0Min, amount1Min) = LiquidityAmounts.getAmountsForLiquidity(\\n            currentPrice,\\n            priceLower,\\n            priceUpper,\\n            liquidity\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa8ca4d3b9f2c84c6889868ef665b1a94cac385609780bf2786d9ad47e89660b8\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101965760003560e01c80630a7597d81461019b5780630e0e28f1146101b05780630f0a1c6f146101c3578063150b7a02146101f2578063337993cb1461021e5780633ba4879114610233578063403df5441461026c5780634437bac21461029057806349ee8ac9146103035780634c73682d14610323578063544caa561461033657806357efda03146103575780635aa5869b146103825780635ce564f4146103955780636ab4c728146103a8578063791b98bc146103bb5780637db2ddfe146103ce5780637dc55d21146103e15780639a06b113146103f45780639da46ee3146103fc5780639ef3a9a014610480578063a7fc7a07146104ac578063b1cccca2146104bf578063b429afeb146104d2578063b6968ce21461050e578063b783ea0514610536578063bcc59f0814610549578063bda9c6491461055c578063c31c9c071461056f578063c45a015514610582578063c86cf98e14610595578063e8d991d1146105a8578063e94b0dd2146105b0578063eb40c545146105c3575b600080fd5b6101ae6101a93660046151cc565b6105d6565b005b6101ae6101be3660046151dd565b610977565b6000546101dc906201000090046001600160a01b031681565b6040516101e99190615723565b60405180910390f35b610205610200366004614f58565b611038565b6040516001600160e01b031990911681526020016101e9565b61022661104a565b6040516101e99190615792565b61025e610241366004615474565b600860209081526000928352604080842090915290825290205481565b6040519081526020016101e9565b61028261027a36600461545a565b606080915091565b6040516101e99291906157a5565b6102a361029e36600461545a565b6110ac565b604080516001600160a01b03998a16815298909716602089015262ffffff90951695870195909552600292830b6060870152910b60808501526001600160801b0390811660a085015291821660c08401521660e0820152610100016101e9565b61025e61031136600461545a565b60076020526000908152604090205481565b6101ae61033136600461559c565b611199565b610349610344366004614f20565b611647565b6040516101e9929190615737565b61025e610365366004615474565b600660209081526000928352604080842090915290825290205481565b6101ae61039036600461502e565b611678565b6101ae6103a336600461545a565b6117ac565b6101ae6103b636600461548f565b6117de565b6003546101dc906001600160a01b031681565b6101ae6103dc366004614ff1565b611989565b6102826103ef36600461545a565b611b08565b6101ae612083565b61040f61040a36600461545a565b61221c565b6040516101e99190600060e08201905062ffffff8351168252602083015160020b6020830152604083015160020b6040830152606083015160018060a01b0380821660608501528060808601511660808501528060a08601511660a0850152505060c083015160c083015292915050565b60055461049790600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016101e9565b6101ae6104ba366004614ee8565b612440565b6101ae6104cd366004614ff1565b61267b565b6104fe6104e0366004614ee8565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016101e9565b61052161051c3660046153fc565b612746565b604080519283526020830191909152016101e9565b6101ae610544366004615560565b612791565b6101ae61055736600461552d565b612c7d565b6101ae61056a3660046154df565b612fd1565b6005546101dc906001600160a01b031681565b6004546101dc906001600160a01b031681565b6101ae6105a3366004615125565b613322565b6101ae613542565b6101dc6105be36600461536e565b6137e0565b6105216105d136600461545a565b61380a565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161060b91906004016157fb565b60206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016106869190615723565b60206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190615194565b6106fb5760405162461bcd60e51b81526004016106f2906158f7565b60405180910390fd5b600060078161070d602085018561545a565b63ffffffff1663ffffffff1681526020019081526020016000205490506000811161074a5760405162461bcd60e51b81526004016106f290615856565b600554600160a01b900463ffffffff16610767602084018461545a565b63ffffffff16111561078b5760405162461bcd60e51b81526004016106f2906159bf565b60035460405163133f757160e31b815260048101839052600091829182916001600160a01b0316906399fbab88906024016101806040518083038186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d91906155dd565b5050505097505050509450945050506000806108956040518060e00160405280896000016020810190610840919061545a565b63ffffffff168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160801b03168152602001888152602001896020013581526020018960400135815250613a84565b909250905081156109045781600660006108b260208b018b61545a565b63ffffffff1663ffffffff1681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108fe9190615b4c565b90915550505b801561096e57806006600061091c60208b018b61545a565b63ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109689190615b4c565b90915550505b50505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916109ac91906004016157fb565b60206040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b8152600401610a279190615723565b60206040518083038186803b158015610a3f57600080fd5b505afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190615194565b610a935760405162461bcd60e51b81526004016106f2906158f7565b60076000610aa760a084016080850161545a565b63ffffffff16815260208101919091526040016000205415610b015760405162461bcd60e51b81526020600482015260136024820152723837b9b4ba34b7b71039ba34b6361037b832b760691b60448201526064016106f2565b600554600160a01b900463ffffffff16610b2160a083016080840161545a565b63ffffffff161115610b455760405162461bcd60e51b81526004016106f290615999565b6000600681610b5a60a085016080860161545a565b63ffffffff168152602080820192909252604001600090812091610b8090850185614ee8565b6001600160a01b0316815260208101919091526040016000908120549150600681610bb160a086016080870161545a565b63ffffffff1681526020810191909152604001600090812090610bda60c0860160a08701614ee8565b6001600160a01b0316815260208082019290925260400160002054915060001990610c0790850185614ee8565b600354604051636eb1769f60e11b81526001600160a01b039283169263dd62ed3e92610c3b92309290911690600401615737565b60206040518083038186803b158015610c5357600080fd5b505afa158015610c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8b9190615386565b14610cdf57600354610cbf906001600160a01b03166000610caf6020870187614ee8565b6001600160a01b03169190613c7a565b600354610cdf906001600160a01b0316600019610caf6020870187614ee8565b600019610cf260c0850160a08601614ee8565b600354604051636eb1769f60e11b81526001600160a01b039283169263dd62ed3e92610d2692309290911690600401615737565b60206040518083038186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190615386565b14610dc057600354610d9d906001600160a01b03166000610caf60c0870160a08801614ee8565b600354610dc0906001600160a01b0316600019610caf60c0870160a08801614ee8565b600354604080516101608101909152600091829182916001600160a01b03169063883164569080610df460208b018b614ee8565b6001600160a01b03168152602001610e1260c08b0160a08c01614ee8565b6001600160a01b03168152602001896020016020810190610e339190615352565b62ffffff168152602001610e4d60608b0160408c016151b0565b60020b8152602001610e6560808b0160608c016151b0565b60020b81526020018881526020018781526020018960c0013581526020018960e001358152602001306001600160a01b03168152602001428152506040518263ffffffff1660e01b8152600401610ebc9190615a66565b608060405180830381600087803b158015610ed657600080fd5b505af1158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e919061539e565b935093505092508260076000886080016020810190610f2d919061545a565b63ffffffff1663ffffffff168152602001908152602001600020819055508160066000886080016020810190610f63919061545a565b63ffffffff168152602080820192909252604001600090812091610f89908a018a614ee8565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610fb89190615bbf565b9091555081905060066000610fd360a08a0160808b0161545a565b63ffffffff1681526020810191909152604001600090812090610ffc60c08a0160a08b01614ee8565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461102b9190615bbf565b9091555050505050505050565b630a85bd0160e11b5b95945050505050565b606060028054806020026020016040519081016040528092919081815260200182805480156110a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611084575b5050505050905090565b60035463ffffffff821660009081526007602052604080822054905163133f757160e31b81526004810191909152909182918291829182918291829182916001600160a01b03909116906399fbab88906024016101806040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115091906155dd565b909192939495969798999a50909192939495969798995090919250909150809850819950829a50839b50849c50859d50869e50879f505050505050505050919395975091939597565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916111ce91906004016157fb565b60206040518083038186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e9190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016112499190615723565b60206040518083038186803b15801561126157600080fd5b505afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190615194565b6112b55760405162461bcd60e51b81526004016106f2906158f7565b60055463ffffffff600160a01b909104811690861611156112e85760405162461bcd60e51b81526004016106f290615999565b63ffffffff8516600090815260076020526040902054806113435760405162461bcd60e51b8152602060048201526015602482015274141bdbdb081c1bdcda5d1a5bdb881a5b9d985b1a59605a1b60448201526064016106f2565b60035463ffffffff871660009081526007602052604080822054905163133f757160e31b81526004810191909152909182916001600160a01b03909116906399fbab88906024016101806040518083038186803b1580156113a357600080fd5b505afa1580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db91906155dd565b505050505050505093509350505086600660008a63ffffffff1663ffffffff1681526020019081526020016000206000846001600160a01b03166001600160a01b031681526020019081526020016000205410156114735760405162461bcd60e51b81526020600482015260156024820152740696e73756666696369656e7420616d6f756e74203605c1b60448201526064016106f2565b63ffffffff881660009081526006602090815260408083206001600160a01b03851684529091529020548611156114e45760405162461bcd60e51b8152602060048201526015602482015274696e73756666696369656e7420616d6f756e74203160581b60448201526064016106f2565b6003546040805160c081018252858152602081018a81528183018a8152606083018a8152608084018a81524260a08601908152955163219f5d1760e01b8152945160048601529251602485015290516044840152516064830152516084820152905160a482015260009182916001600160a01b039091169063219f5d179060c401606060405180830381600087803b15801561157f57600080fd5b505af1158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b79190615288565b63ffffffff8d1660009081526006602090815260408083206001600160a01b038b1684529091528120805493965091945085935090916115f8908490615bbf565b909155505063ffffffff8a1660009081526006602090815260408083206001600160a01b038716845290915281208054839290611636908490615bbf565b909155505050505050505050505050565b600080826001600160a01b0316846001600160a01b03161061166a57828461166d565b83835b909590945092505050565b600054610100900460ff166116935760005460ff161561169b565b61169b613dc3565b6116b75760405162461bcd60e51b81526004016106f290615884565b600054610100900460ff161580156116d9576000805461ffff19166101011790555b6001600160a01b0384166116ff5760405162461bcd60e51b81526004016106f2906158d2565b6001600160a01b0383166117255760405162461bcd60e51b81526004016106f2906158d2565b6001600160a01b03821661174b5760405162461bcd60e51b81526004016106f2906158d2565b6117558686613dd4565b600380546001600160a01b038087166001600160a01b03199283161790925560058054858416908316179055600480549286169290911691909117905580156117a4576000805461ff00191690555b505050505050565b3360009081526001602052604090205460ff166117db5760405162461bcd60e51b81526004016106f290615945565b50565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161181391906004016157fb565b60206040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161188e9190615723565b60206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118de9190615194565b6118fa5760405162461bcd60e51b81526004016106f2906158f7565b80156119445763ffffffff841660009081526006602090815260408083206001600160a01b038716845290915281208054849290611939908490615b4c565b909155506119839050565b63ffffffff841660009081526006602090815260408083206001600160a01b03871684529091528120805484929061197d908490615bbf565b90915550505b50505050565b3360009081526001602052604090205460ff166119b85760405162461bcd60e51b81526004016106f290615945565b63ffffffff811660009081526006602090815260408083206001600160a01b0387168452909152902054821115611a2b5760405162461bcd60e51b815260206004820152601760248201527644524f3a204e6f7420456e6f7567682042616c616e636560481b60448201526064016106f2565b63ffffffff811660009081526006602090815260408083206001600160a01b038716845290915281208054849290611a64908490615bbf565b9091555050600080546040516337c61fc560e11b8152611b0392620100009092046001600160a01b031691636f8c3f8a91611aa291906004016157fb565b60206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af29190614f04565b6001600160a01b0385169084613f79565b505050565b63ffffffff811660009081526007602052604080822054600354915163133f757160e31b8152600481018290526060938493909182918291829182916001600160a01b03909116906399fbab88906024016101806040518083038186803b158015611b7257600080fd5b505afa158015611b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa91906155dd565b5050505050965096509650965096505050600460009054906101000a90046001600160a01b03166001600160a01b0316631698ee828686866040518463ffffffff1660e01b8152600401611c0093929190615751565b60206040518083038186803b158015611c1857600080fd5b505afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190614f04565b60405163a34123a760e01b8152600284810b600483015283900b6024820152600060448201526001600160a01b03919091169063a34123a7906064016040805180830381600087803b158015611ca557600080fd5b505af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd91906153d9565b505060035460405163133f757160e31b81526004810188905260009182916001600160a01b03909116906399fbab88906024016101806040518083038186803b158015611d2957600080fd5b505afa158015611d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6191906155dd565b909c509a5060039950611d7998505050505050505050565b604051908082528060200260200182016040528015611da2578160200160208202803683370190505b5060408051600380825260808201909252919b5060208201606080368337019050509850868a600081518110611de857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160801b031689600081518110611e3357634e487b7160e01b600052603260045260246000fd5b602002602001018181525050858a600181518110611e6157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160801b031689600181518110611eac57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90611eed906003906004016157fb565b60206040518083038186803b158015611f0557600080fd5b505afa158015611f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3d9190614f04565b6001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7557600080fd5b505afa158015611f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fad9190614f04565b8a600281518110611fce57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910182015263ffffffff8c1660009081526008909152604081208b519091908c90600290811061202057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548960028151811061206a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050505050505050915091565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916120b891906004016157fb565b60206040518083038186803b1580156120d057600080fd5b505afa1580156120e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121089190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016121339190615723565b60206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190615194565b61219f5760405162461bcd60e51b81526004016106f2906158f7565b60058054600160a01b900463ffffffff169060146121bc83615c1d565b82546101009290920a63ffffffff818102199093169183160217909155600554604051600160a01b90910490911681527fa78ad62f94123bd15ee811eb3ffb683be428ffa403852cb585a3c77cc2cd2939915060200160405180910390a1565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260035463ffffffff831660009081526007602052604080822054905163133f757160e31b81526004810191909152909182918291829182916001600160a01b0316906399fbab88906024016101806040518083038186803b1580156122b957600080fd5b505afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f191906155dd565b505050505096509650965096509650505082866000019062ffffff16908162ffffff168152505081866020019060020b908160020b8152505080866040019060020b908160020b815250508486606001906001600160a01b031690816001600160a01b0316815250508386608001906001600160a01b031690816001600160a01b031681525050600460009054906101000a90046001600160a01b03166001600160a01b0316631698ee828686866040518463ffffffff1660e01b81526004016123bd93929190615751565b60206040518083038186803b1580156123d557600080fd5b505afa1580156123e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240d9190614f04565b6001600160a01b031660a087015250505063ffffffff90931660009081526007602052604090205460c083015250919050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161247591906004016157fb565b60206040518083038186803b15801561248d57600080fd5b505afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190614f04565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016124f09190615723565b60206040518083038186803b15801561250857600080fd5b505afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190615194565b61259f5760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016106f2565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b60025481101561262557600281815481106125f157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561261557600191505b61261e81615c02565b90506125c6565b508061267757600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b3360009081526001602052604090205460ff166126aa5760405162461bcd60e51b81526004016106f290615945565b60055463ffffffff600160a01b909104811690821611156126dd5760405162461bcd60e51b81526004016106f2906159bf565b6001600160a01b0383166127035760405162461bcd60e51b81526004016106f2906158d2565b63ffffffff811660009081526006602090815260408083206001600160a01b03871684529091528120805484929061273c908490615b4c565b9091555050505050565b600080600061275486613f98565b9050600061276186613f98565b905060006127728684848d8d6143aa565b90506127808684848461446c565b909b909a5098505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916127c691906004016157fb565b60206040518083038186803b1580156127de57600080fd5b505afa1580156127f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128169190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016128419190615723565b60206040518083038186803b15801561285957600080fd5b505afa15801561286d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128919190615194565b6128ad5760405162461bcd60e51b81526004016106f2906158f7565b60055463ffffffff600160a01b909104811690841611156128e05760405162461bcd60e51b81526004016106f2906159bf565b63ffffffff8316600090815260076020526040902054806129135760405162461bcd60e51b81526004016106f290615856565b60035460405163133f757160e31b81526004810183905260009182916001600160a01b03909116906399fbab88906024016101806040518083038186803b15801561295d57600080fd5b505afa158015612971573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299591906155dd565b5050505050505050935093505050600080600360009054906101000a90046001600160a01b03166001600160a01b031663fc6f78656040518060800160405280888152602001306001600160a01b031681526020016129f78b60800135614508565b6001600160801b03168152602001612a128a60800135614508565b6001600160801b03168152506040518263ffffffff1660e01b8152600401612a3a91906159e5565b6040805180830381600087803b158015612a5357600080fd5b505af1158015612a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8b91906153d9565b600080546040516337c61fc560e11b815293955091935091620100009091046001600160a01b031690636f8c3f8a90612ac9906003906004016157fb565b60206040518083038186803b158015612ae157600080fd5b505afa158015612af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b199190614f04565b6001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5157600080fd5b505afa158015612b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b899190614f04565b90506000816001600160a01b0316866001600160a01b031614612bd5578315612bd057612bc3612bbe368b90038b018b6151ef565b614575565b612bcd9082615b4c565b90505b612be2565b612bdf8482615b4c565b90505b816001600160a01b0316856001600160a01b031614612c25578215612c2057612c13612bbe368a90038a018a6151ef565b612c1d9082615b4c565b90505b612c32565b612c2f8382615b4c565b90505b8015612c715763ffffffff8a1660009081526008602090815260408083206001600160a01b038616845290915281208054839290611636908490615b4c565b50505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91612cb291906004016157fb565b60206040518083038186803b158015612cca57600080fd5b505afa158015612cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d029190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b8152600401612d2d9190615723565b60206040518083038186803b158015612d4557600080fd5b505afa158015612d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7d9190615194565b612d995760405162461bcd60e51b81526004016106f2906158f7565b60055463ffffffff600160a01b90910481169083161115612dcc5760405162461bcd60e51b81526004016106f290615999565b8060800135600660008463ffffffff1663ffffffff1681526020019081526020016000206000836020016020810190612e059190614ee8565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015612e6d5760405162461bcd60e51b815260206004820152601660248201527534b739bab33334b1b4b2b73a1030b6b7bab73a1034b760511b60448201526064016106f2565b63ffffffff82166000908152600660209081526040808320918391612e9791908601908601614ee8565b6001600160a01b03166001600160a01b031681526020019081526020016000205490506000600660008563ffffffff1663ffffffff1681526020019081526020016000206000846040016020810190612ef09190614ee8565b6001600160a01b0316815260208101919091526040016000908120549150612f20612bbe368690038601866151ef565b9050612f30608085013584615bbf565b9250612f3c8183615b4c565b63ffffffff8616600090815260066020908152604080832093955086939291612f69918901908901614ee8565b6001600160a01b03168152602080820192909252604090810160009081209390935563ffffffff88168352600690915280822084929091612fb09060608901908901614ee8565b6001600160a01b031681526020810191909152604001600020555050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161300691906004016157fb565b60206040518083038186803b15801561301e57600080fd5b505afa158015613032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130569190614f04565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016130819190615723565b60206040518083038186803b15801561309957600080fd5b505afa1580156130ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d19190615194565b6130ed5760405162461bcd60e51b81526004016106f2906158f7565b60055463ffffffff600160a01b909104811690861611801590613116575060008563ffffffff16115b6131325760405162461bcd60e51b81526004016106f290615999565b6001600160a01b0384166131785760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103a37b5b2b760991b60448201526064016106f2565b60035463ffffffff861660009081526007602052604080822054905163133f757160e31b815291928392839283926001600160a01b0316916399fbab88916131c69160040190815260200190565b6101806040518083038186803b1580156131df57600080fd5b505afa1580156131f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321791906155dd565b50505050509650965050955095505050600080856001600160a01b03168a6001600160a01b031614156132745761326a8b61326361325487613f98565b61325d87613f98565b8d6146b3565b8a8a614728565b9092509050613299565b6132938b61326361328487613f98565b61328d87613f98565b8d6148c4565b90925090505b63ffffffff8b1660009081526006602090815260408083206001600160a01b038a168452909152812080548492906132d2908490615b4c565b909155505063ffffffff8b1660009081526006602090815260408083206001600160a01b038916845290915281208054839290613310908490615b4c565b90915550505050505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90613359906003906004016157fb565b60206040518083038186803b15801561337157600080fd5b505afa158015613385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a99190614f04565b6001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b1580156133e157600080fd5b505afa1580156133f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134199190614f04565b9050600082815b818110156135255785858281811061344857634e487b7160e01b600052603260045260246000fd5b905060400201602001356008600088888581811061347657634e487b7160e01b600052603260045260246000fd5b61348c926020604090920201908101915061545a565b63ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546134d89190615b4c565b9091555086905085828181106134fe57634e487b7160e01b600052603260045260246000fd5b90506040020160200135836135139190615b4c565b925061351e81615c02565b9050613420565b5061353b6001600160a01b0384163330856148fa565b5050505050565b3360009081526001602052604090205460ff166135715760405162461bcd60e51b81526004016106f290615945565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906135a8906002906004016157fb565b60206040518083038186803b1580156135c057600080fd5b505afa1580156135d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f89190614f04565b600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a90613634906003906004016157fb565b60206040518083038186803b15801561364c57600080fd5b505afa158015613660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136849190614f04565b6001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b1580156136bc57600080fd5b505afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f49190614f04565b905060015b60055463ffffffff600160a01b909104811690821611611b035763ffffffff811660009081526008602090815260408083206001600160a01b038616845290915290205480156137cd5763ffffffff80831660009081526008602090815260408083206001600160a01b038816808552925282209190915561377f9186908490613f7916565b604080518281526001600160a01b038516602082015263ffffffff84168183015290517f3dd230bc07734c2a9b97385becdf27d48f7e25031ca7140521b740a2aa9070c09181900360600190a15b50806137d881615c1d565b9150506136f9565b600281815481106137f057600080fd5b6000918252602090912001546001600160a01b0316905081565b60008060008363ffffffff16118015613836575060055463ffffffff600160a01b909104811690841611155b6138525760405162461bcd60e51b81526004016106f2906159bf565b63ffffffff8316600090815260076020526040902054806138ab5760405162461bcd60e51b81526020600482015260136024820152721c1bdcda5d1a5bdb881a5cc81a5b9d985b1a59606a1b60448201526064016106f2565b60035460405163133f757160e31b815260048101839052600091829182918291829182916001600160a01b03909116906399fbab88906024016101806040518083038186803b1580156138fd57600080fd5b505afa158015613911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393591906155dd565b5050505097509750975097509750975050506000600460009054906101000a90046001600160a01b03166001600160a01b0316631698ee828888886040518463ffffffff1660e01b815260040161398e93929190615751565b60206040518083038186803b1580156139a657600080fd5b505afa1580156139ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139de9190614f04565b6001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015613a1657600080fd5b505afa158015613a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4e91906152bc565b5050505050509050613a7281613a6386613f98565b613a6c86613f98565b8561446c565b909c909b509950505050505050505050565b6003546040805160a0808201835260808086015183526060808701516001600160801b03166020850152918601518385015260c08601519183019190915242908201529051630624e65f60e11b815260009283926001600160a01b0390911691630c49ccbe91613af691600401615a28565b6040805180830381600087803b158015613b0f57600080fd5b505af1158015613b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4791906153d9565b5050600354604080516080808201835286015181523060208201526001600160801b038183018190526060820152905163fc6f786560e01b81526001600160a01b039092169163fc6f786591613b9f916004016159e5565b6040805180830381600087803b158015613bb857600080fd5b505af1158015613bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf091906153d9565b6003546080860151604051630852cd8d60e31b81529395509193506001600160a01b0316916342966c6891613c2b9160040190815260200190565b600060405180830381600087803b158015613c4557600080fd5b505af1158015613c59573d6000803e3d6000fd5b5050935163ffffffff16600090815260076020526040812055509092909150565b801580613d025750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90613cb09030908690600401615737565b60206040518083038186803b158015613cc857600080fd5b505afa158015613cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d009190615386565b155b613d6d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106f2565b611b038363095ea7b360e01b8484604051602401613d8c929190615779565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614932565b6000613dce30614a04565b15905090565b600054610100900460ff16613def5760005460ff1615613df7565b613df7613dc3565b613e135760405162461bcd60e51b81526004016106f290615884565b600054610100900460ff16158015613e35576000805461ffff19166101011790555b6001600160a01b038216613e5b5760405162461bcd60e51b81526004016106f2906158d2565b60005b8351811015613ed15760006001600160a01b0316848281518110613e9257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415613ec15760405162461bcd60e51b81526004016106f2906158d2565b613eca81615c02565b9050613e5e565b5060005b8351811015613f45576001806000868481518110613f0357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055613f3e81615c02565b9050613ed5565b508251613f59906002906020860190614df7565b50613f6382614a13565b8015611b03576000805461ff0019169055505050565b611b038363a9059cbb60e01b8484604051602401613d8c929190615779565b60008060008360020b12613faf578260020b613fbc565b8260020b613fbc90615c76565b9050613fcb620d89e719615c55565b60020b8111156140015760405162461bcd60e51b81526020600482015260016024820152601560fa1b60448201526064016106f2565b60006001821661401557600160801b614027565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b03169050600282161561405c576080614057826ffff97272373d413259a46990580e213a615b78565b901c90505b6004821615614086576080614081826ffff2e50f5f656932ef12357cf3c7fdcc615b78565b901c90505b60088216156140b05760806140ab826fffe5caca7e10e4e61c3624eaa0941cd0615b78565b901c90505b60108216156140da5760806140d5826fffcb9843d60f6159c9db58835c926644615b78565b901c90505b60208216156141045760806140ff826fff973b41fa98c081472e6896dfb254c0615b78565b901c90505b604082161561412e576080614129826fff2ea16466c96a3843ec78b326b52861615b78565b901c90505b6080821615614158576080614153826ffe5dee046a99a2a811c461f1969c3053615b78565b901c90505b61010082161561418357608061417e826ffcbe86c7900a88aedcffc83b479aa3a4615b78565b901c90505b6102008216156141ae5760806141a9826ff987a7253ac413176f2b074cf7815e54615b78565b901c90505b6104008216156141d95760806141d4826ff3392b0822b70005940c7a398e4b70f3615b78565b901c90505b6108008216156142045760806141ff826fe7159475a2c29b7443b29c7fa6e889d9615b78565b901c90505b61100082161561422f57608061422a826fd097f3bdfd2022b8845ad8f792aa5825615b78565b901c90505b61200082161561425a576080614255826fa9f746462d870fdf8a65dc1f90e061e5615b78565b901c90505b614000821615614285576080614280826f70d869a156d2a1b890bb3df62baf32f7615b78565b901c90505b6180008216156142b05760806142ab826f31be135f97d08fd981231505542fcfa6615b78565b901c90505b620100008216156142dc5760806142d7826f09aa508b5b7a84e1c677de54f3e99bc9615b78565b901c90505b62020000821615614307576080614302826e5d6af8dedb81196699c329225ee604615b78565b901c90505b6204000082161561433157608061432c826d2216e584f5fa1ea926041bedfe98615b78565b901c90505b62080000821615614359576080614354826b048a170391f7dc42444e8fa2615b78565b901c90505b60008460020b13156143745761437181600019615b64565b90505b614382600160201b82615c41565b1561438e576001614391565b60005b6143a29060ff16602083901c615b4c565b949350505050565b6000836001600160a01b0316856001600160a01b031611156143ca579293925b846001600160a01b0316866001600160a01b0316116143f5576143ee8585856146b3565b9050611041565b836001600160a01b0316866001600160a01b0316101561445757600061441c8786866146b3565b9050600061442b8789866148c4565b9050806001600160801b0316826001600160801b03161061444c578061444e565b815b92505050611041565b6144628585846148c4565b9695505050505050565b600080836001600160a01b0316856001600160a01b0316111561448d579293925b846001600160a01b0316866001600160a01b0316116144b8576144b1858585614aab565b91506144ff565b836001600160a01b0316866001600160a01b031610156144f1576144dd868585614aab565b91506144ea858785614b15565b90506144ff565b6144fc858585614b15565b90505b94509492505050565b60006001600160801b038211156145715760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016106f2565b5090565b600061459f8260200151600560009054906101000a90046001600160a01b03168460800151614b5f565b6005546040805160e0810182526020858101516001600160a01b03908116835286840151811691830191825260608088015162ffffff908116858701908152309286019283526080808b015190870190815260a0808c01519088019081528b51861660c0890190815298516304e45aaf60e01b815297518616600489015295518516602488015290519091166044860152905182166064850152516084840152905160a48301529151821660c48201529116906304e45aaf9060e401602060405180830381600087803b15801561467557600080fd5b505af1158015614689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146ad9190615386565b92915050565b6000826001600160a01b0316846001600160a01b031611156146d3579192915b60006146f6856001600160a01b0316856001600160a01b0316600160601b614c1b565b905061471d614718848361470a8989615b97565b6001600160a01b0316614c1b565b614cca565b9150505b9392505050565b63ffffffff8416600090815260076020908152604080832054600354825160a0810184528281526001600160801b03891694810194909452838301879052606084018690524260808501529151630624e65f60e11b8152849391926001600160a01b031691630c49ccbe916147a09190600401615a28565b6040805180830381600087803b1580156147b957600080fd5b505af11580156147cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147f191906153d9565b600354604080516080810182528581523060208201529396509194506001600160a01b03169163fc6f786591810161482887614508565b6001600160801b0316815260200161483f86614508565b6001600160801b03168152506040518263ffffffff1660e01b815260040161486791906159e5565b6040805180830381600087803b15801561488057600080fd5b505af1158015614894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148b891906153d9565b50505094509492505050565b6000826001600160a01b0316846001600160a01b031611156148e4579192915b6143a261471883600160601b61470a8888615b97565b6040516001600160a01b03808516602483015283166044820152606481018290526119839085906323b872dd60e01b90608401613d8c565b6000614987826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614ce59092919063ffffffff16565b805190915015611b0357808060200190518101906149a59190615194565b611b035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f2565b6001600160a01b03163b151590565b600054610100900460ff16614a2e5760005460ff1615614a36565b614a36613dc3565b614a525760405162461bcd60e51b81526004016106f290615884565b600054610100900460ff16158015614a74576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015612677576000805461ff00191690555050565b6000826001600160a01b0316846001600160a01b03161115614acb579192915b6001600160a01b038416614b0b600160601b600160e01b03606085901b16614af38787615b97565b6001600160a01b0316866001600160a01b0316614c1b565b6143a29190615b64565b6000826001600160a01b0316846001600160a01b03161115614b35579192915b6143a26001600160801b038316614b4c8686615b97565b6001600160a01b0316600160601b614c1b565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90614b909030908790600401615737565b60206040518083038186803b158015614ba857600080fd5b505afa158015614bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614be09190615386565b905081811015611983578015614c0557614c056001600160a01b038516846000613c7a565b6119836001600160a01b03851684600019613c7a565b600080806000198587098587029250828110838203039150508060001415614c555760008411614c4a57600080fd5b508290049050614721565b808411614c6157600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b806001600160801b0381168114614ce057600080fd5b919050565b60606143a2848460008585614cf985614a04565b614d455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f2565b600080866001600160a01b03168587604051614d619190615707565b60006040518083038185875af1925050503d8060008114614d9e576040519150601f19603f3d011682016040523d82523d6000602084013e614da3565b606091505b5091509150614db3828286614dbe565b979650505050505050565b60608315614dcd575081614721565b825115614ddd5782518084602001fd5b8160405162461bcd60e51b81526004016106f29190615823565b828054828255906000526020600020908101928215614e4c579160200282015b82811115614e4c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614e17565b506145719291505b808211156145715760008155600101614e54565b8035614ce081615cd2565b8051614ce081615cd2565b8051614ce081615cf5565b600060c08284031215614e9a578081fd5b50919050565b80516001600160801b0381168114614ce057600080fd5b805161ffff81168114614ce057600080fd5b8051614ce081615d04565b803563ffffffff81168114614ce057600080fd5b600060208284031215614ef9578081fd5b813561472181615cd2565b600060208284031215614f15578081fd5b815161472181615cd2565b60008060408385031215614f32578081fd5b8235614f3d81615cd2565b91506020830135614f4d81615cd2565b809150509250929050565b600080600080600060808688031215614f6f578081fd5b8535614f7a81615cd2565b94506020860135614f8a81615cd2565b93506040860135925060608601356001600160401b0380821115614fac578283fd5b818801915088601f830112614fbf578283fd5b813581811115614fcd578384fd5b896020828501011115614fde578384fd5b9699959850939650602001949392505050565b600080600060608486031215615005578081fd5b833561501081615cd2565b92506020840135915061502560408501614ed4565b90509250925092565b600080600080600060a08688031215615045578283fd5b85356001600160401b038082111561505b578485fd5b818801915088601f83011261506e578485fd5b813560208282111561508257615082615cbc565b8160051b9250615093818401615b1c565b8281528181019085830185870184018e10156150ad57898afd5b8996505b848710156150db57803595506150c686615cd2565b858352600196909601959183019183016150b1565b5099506150eb90508a8201614e68565b9750505050506150fd60408701614e68565b925061510b60608701614e68565b915061511960808701614e68565b90509295509295909350565b60008060208385031215615137578182fd5b82356001600160401b038082111561514d578384fd5b818501915085601f830112615160578384fd5b81358181111561516e578485fd5b8660208260061b8501011115615182578485fd5b60209290920196919550909350505050565b6000602082840312156151a5578081fd5b815161472181615ce7565b6000602082840312156151c1578081fd5b813561472181615cf5565b600060608284031215614e9a578081fd5b60006101008284031215614e9a578081fd5b600060c08284031215615200578081fd5b60405160c081016001600160401b038111828210171561522257615222615cbc565b604052823561523081615cd2565b8152602083013561524081615cd2565b6020820152604083013561525381615cd2565b6040820152606083013561526681615d04565b60608201526080838101359082015260a0928301359281019290925250919050565b60008060006060848603121561529c578081fd5b6152a584614ea0565b925060208401519150604084015190509250925092565b600080600080600080600060e0888a0312156152d6578485fd5b87516152e181615cd2565b60208901519097506152f281615cf5565b955061530060408901614eb7565b945061530e60608901614eb7565b935061531c60808901614eb7565b925060a088015160ff81168114615331578283fd5b60c089015190925061534281615ce7565b8091505092959891949750929550565b600060208284031215615363578081fd5b813561472181615d04565b60006020828403121561537f578081fd5b5035919050565b600060208284031215615397578081fd5b5051919050565b600080600080608085870312156153b3578182fd5b845193506153c360208601614ea0565b6040860151606090960151949790965092505050565b600080604083850312156153eb578182fd5b505080516020909101519092909150565b600080600080600060a08688031215615413578283fd5b8535945060208601359350604086013561542c81615cf5565b9250606086013561543c81615cf5565b9150608086013561544c81615cd2565b809150509295509295909350565b60006020828403121561546b578081fd5b61472182614ed4565b60008060408385031215615486578182fd5b614f3d83614ed4565b600080600080608085870312156154a4578182fd5b6154ad85614ed4565b935060208501356154bd81615cd2565b92506040850135915060608501356154d481615ce7565b939692955090935050565b600080600080600060a086880312156154f6578283fd5b6154ff86614ed4565b9450602086013561550f81615cd2565b94979496505050506040830135926060810135926080909101359150565b60008060e0838503121561553f578182fd5b61554883614ed4565b91506155578460208501614e89565b90509250929050565b60008060006101a08486031215615575578081fd5b61557e84614ed4565b925061558d8560208601614e89565b91506150258560e08601614e89565b600080600080600060a086880312156155b3578283fd5b6155bc86614ed4565b97602087013597506040870135966060810135965060800135945092505050565b6000806000806000806000806000806000806101808d8f0312156155ff578586fd5b8c516001600160601b0381168114615615578687fd5b9b5061562360208e01614e73565b9a5061563160408e01614e73565b995061563f60608e01614e73565b985061564d60808e01614ec9565b975061565b60a08e01614e7e565b965061566960c08e01614e7e565b955061567760e08e01614ea0565b94506101008d015193506101208d015192506156966101408e01614ea0565b91506156a56101608e01614ea0565b90509295989b509295989b509295989b565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156156fc5781516001600160a01b0316875295820195908201906001016156d7565b509495945050505050565b60008251615719818460208701615bd6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b60208152600061472160208301846156c4565b6040815260006157b860408301856156c4565b828103602084810191909152845180835285820192820190845b818110156157ee578451835293830193918301916001016157d2565b5090979650505050505050565b60208101600e831061581d57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152615842816040850160208701615bd6565b601f01601f19169190910160400192915050565b6020808252601490820152733837b7b6103430b9903737903837b9b4ba34b7b760611b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020808252600c908201526b125b9d985b1a59081c1bdbdb60a21b604082015260600190565b6020808252600c908201526b1a5b9d985b1a59081c1bdbdb60a21b604082015260600190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b815181526020808301516001600160801b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b600061016082019050615a7a8284516156b7565b6020830151615a8c60208401826156b7565b506040830151615aa3604084018262ffffff169052565b506060830151615ab8606084018260020b9052565b506080830151615acd608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151615b0b828501826156b7565b505061014092830151919092015290565b604051601f8201601f191681016001600160401b0381118282101715615b4457615b44615cbc565b604052919050565b60008219821115615b5f57615b5f615c90565b500190565b600082615b7357615b73615ca6565b500490565b6000816000190483118215151615615b9257615b92615c90565b500290565b60006001600160a01b0383811690831681811015615bb757615bb7615c90565b039392505050565b600082821015615bd157615bd1615c90565b500390565b60005b83811015615bf1578181015183820152602001615bd9565b838111156119835750506000910152565b6000600019821415615c1657615c16615c90565b5060010190565b600063ffffffff80831681811415615c3757615c37615c90565b6001019392505050565b600082615c5057615c50615ca6565b500690565b60008160020b627fffff19811415615c6f57615c6f615c90565b9003919050565b6000600160ff1b821415615c8c57615c8c615c90565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117db57600080fd5b80151581146117db57600080fd5b8060020b81146117db57600080fd5b62ffffff811681146117db57600080fdfea2646970667358221220bf5ae0aa3652a05e952ab794bbd9194cf98f48ed8eda399e9f53c25d327eef7c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPendingYield(uint32)": {
        "details": "use getPendingYieldDRO via callstatic instead"
      },
      "getPendingYieldBurn(uint32)": {
        "details": "don't run this on chain!!!"
      },
      "harvestYield()": {
        "details": "Harvests token yield from the integration"
      },
      "rebalancePool(uint32,(uint160,address,address,uint24,uint256,uint256))": {
        "params": {
          "params": "The swap parameters",
          "poolID": "The pool to change"
        }
      },
      "withdraw(address,uint256,uint32)": {
        "params": {
          "amount": "The amount of token in the pool to withdraw",
          "poolID": "the pool to withdraw from",
          "token": "the token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatePool(address,address,uint32)": {
        "notice": "Events"
      },
      "PoolCreated(uint32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "availableYield(uint32,address)": {
        "notice": "Autogenerated getter function definitions"
      },
      "createPool()": {
        "notice": "Functions"
      },
      "deposit(address,uint256,uint32)": {
        "notice": "IAMMInterface Functions"
      },
      "getPoolBalance(uint32)": {
        "notice": "Getter functions"
      },
      "initialize(address[],address,address,address,address)": {
        "notice": "Functions"
      },
      "poolIDCounter()": {
        "notice": "Autogenerated getter function definitions"
      },
      "positionManager()": {
        "notice": "State variables"
      },
      "rebalancePool(uint32,(uint160,address,address,uint24,uint256,uint256))": {
        "notice": "Changes the composition of deposits in preparation of a deploy"
      },
      "updateBalance(uint32,address,uint256,bool)": {
        "notice": "Management functions"
      }
    },
    "notice": "RULES - when we burn liquidity, we always withdraw the principal and leave the fees - when we claim fees, we know all the tokens we collect are fees - in other words, calling \"collect\" will always pull only fees unless we have just performed a liquidity burn",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13077,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)24442"
      },
      {
        "astId": 7548,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7551,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36264,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "positionManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(INonfungiblePositionManager)30080"
      },
      {
        "astId": 36267,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "factory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV3Factory)30163"
      },
      {
        "astId": 36270,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "swapRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUniswapV3SwapRouter)27300"
      },
      {
        "astId": 36273,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "poolIDCounter",
        "offset": 20,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 36280,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 36285,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "positionID",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 36292,
        "contract": "contracts/yield-integrations/DROIntegration.sol:DROIntegration",
        "label": "availableYield",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)24442": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_contract(INonfungiblePositionManager)30080": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Factory)30163": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3SwapRouter)27300": {
        "encoding": "inplace",
        "label": "contract IUniswapV3SwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}