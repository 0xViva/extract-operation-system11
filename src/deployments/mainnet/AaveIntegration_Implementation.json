{
  "address": "0x3e34e48DbE67863Fb75F556A842C5FfD340395dD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingTokenAddress",
          "type": "address"
        }
      ],
      "name": "getATokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPendingYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingPoolAddress_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "retrievePrincipal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f08b256533583102ba2a058cea71f2f850ada22fa26ab6a10a44866feddb342",
  "receipt": {
    "to": null,
    "from": "0xBf98f6DF65dfa2f2b50d4a806cF134A209C7D364",
    "contractAddress": "0x3e34e48DbE67863Fb75F556A842C5FfD340395dD",
    "transactionIndex": 348,
    "gasUsed": "1921668",
    "logsBloom": "0x
    "blockHash": "0x08410b7a995428c5372db02910c31b37557eef0779242d3b9a363771033d39d8",
    "transactionHash": "0x7f08b256533583102ba2a058cea71f2f850ada22fa26ab6a10a44866feddb342",
    "logs": [],
    "blockNumber": 13892201,
    "cumulativeGasUsed": "17425417",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ee9094f6d6ecb2a5ecb5b069bb618e82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingTokenAddress\",\"type\":\"address\"}],\"name\":\"getATokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingPoolAddress_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrievePrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"params\":{\"amount\":\"The amount of the token being deposited\",\"tokenAddress\":\"The address of the deposited token\"}},\"getATokenAddress(address)\":{\"params\":{\"underlyingTokenAddress\":\"The address of the underlying token\"},\"returns\":{\"_0\":\"The address of the corresponding aToken\"}},\"getBalance(address)\":{\"details\":\"This returns the total amount of the underlying token thathas been deposited to the integration contract\",\"params\":{\"tokenAddress\":\"The address of the deployed token\"},\"returns\":{\"_0\":\"The amount of the underlying token that can be withdrawn\"}},\"getPendingYield(address)\":{\"details\":\"Returns total amount of pending yield for the specified token in Aave\",\"params\":{\"token\":\"The of the token to check for available yield\"},\"returns\":{\"_0\":\"Amount of yield available for harvest\"}},\"initialize(address[],address,address)\":{\"params\":{\"controllers_\":\"The addresses of the controlling contracts\",\"lendingPoolAddress_\":\"The address of the Aave lending pool contract\",\"moduleMap_\":\"The address of the module map contract\"}},\"recoverTokens(address,uint256)\":{\"details\":\"This is used to recover lost funds from the contract to the KernelBe super careful not to transfer out the wrong tokens!We should make it a point to remove this function relatively soon\",\"params\":{\"tokenAddress\":\"The address of the token to recover\"}},\"retrievePrincipal(address)\":{\"params\":{\"tokenAddress\":\"The address of the underlying token to withdraw\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amoutn of the token to withdraw\",\"tokenAddress\":\"The address of the underlying token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy()\":{\"notice\":\"Deploys all available tokens to Aave\"},\"harvestYield()\":{\"notice\":\"Harvests all token yield from the Aave lending pool\"},\"retrievePrincipal(address)\":{\"notice\":\"Withdraws token from the integration\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws token from the integration\"}},\"notice\":\"Integrates 0x Nodes to the Aave lending poolThe Kernel contract should be added as the controller\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yield-integrations/AaveIntegration.sol\":\"AaveIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(\\n        address[] memory controllers_,\\n        address moduleMap_\\n    ) public initializer {\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender],\\n            \\\"Controlled::onlyController: Caller is not controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d695827316f9115bdeefad43183295fe65948c7ca5489ba6718fbbb01bfbcb8\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAaveLendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAaveLendingPool {\\n    struct ReserveConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    struct ReserveData {\\n        ReserveConfigurationMap configuration;\\n        uint128 liquidityIndex;\\n        uint128 variableBorrowIndex;\\n        uint128 currentLiquidityRate;\\n        uint128 currentVariableBorrowRate;\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        address interestRateStrategyAddress;\\n        uint8 id;\\n    }\\n\\n    /// @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n    /// @param asset The address of the underlying asset to deposit\\n    /// @param amount The amount to be deposited\\n    /// @param onBehalfOf The address that will receive the aTokens\\n    /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /// @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n    /// @param asset The address of the underlying asset to withdraw\\n    /// @param amount The underlying amount to be withdrawn\\n    /// @param to Address that will receive the underlying, same as msg.sender if the user\\n    /// @return The final amount withdrawn\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /// @dev Returns the state and configuration of the reserve\\n    /// @param asset The address of the underlying asset of the reserve\\n    /// @return The state of the reserve\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0x7ee8367ea6443a8a41e953e151b076dbc7ecd0484c3eb79ba3b392b7f611b607\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /// @param tokenAddress The address of the withdrawal token\\n    /// @param amount The amount of the token to withdraw\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n    function deploy() external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n\\n    /// @dev This returns the total amount of the underlying token that\\n    /// @dev has been deposited to the integration contract\\n    /// @param tokenAddress The address of the deployed token\\n    /// @return The amount of the underlying token that can be withdrawn\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /// @dev Returns the total amount of yield awaiting to be harvested\\n    /// @dev using the relevant integration's own function\\n    /// @param amount The amount of available yield for the specified token\\n    function getPendingYield(address) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xd92f51a22cbda8f9cbf06a31f798a76d946b82e82b1074cf7ade968125f58e01\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name)\\n        external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(\\n        address tokenAddress,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(\\n        address tokenAddress,\\n        uint256 targetLiquidityRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(\\n        address tokenAddress,\\n        uint256 transferFeeKValueNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum()\\n        external\\n        view\\n        returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x4a57712bb45de506f0e58f5d04714af48bfd391d8ae251ab9f599b02a081f410\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IKernel {\\n    event Withdraw(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] tokenAmounts,\\n        uint256 ethAmount\\n    );\\n    event ClaimEthRewards(address indexed user, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x510aabf6a9a2a4f10896501ce5e850d4b92f52413f09dd1a7379368de07af7f0\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects // 10\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x6c093d69ac78d7d864d031e64f2b3fecedd07dcbf4aa18533f045735cf9d3f62\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenSettings contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenSettings {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n}\\n\",\"keccak256\":\"0xa610706ba9d4134cf5afd5b23dc7db0aefff042c75c7d0aadd616e0bb50fc461\",\"license\":\"GPL-2.0-or-later\"},\"contracts/yield-integrations/AaveIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../core/Controlled.sol\\\";\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IAaveLendingPool.sol\\\";\\nimport \\\"../core/ModuleMapConsumer.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to the Aave lending pool\\n/// @notice The Kernel contract should be added as the controller\\ncontract AaveIntegration is\\n    Initializable,\\n    ModuleMapConsumer,\\n    Controlled,\\n    IIntegration\\n{\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    address private lendingPoolAddress;\\n    mapping(address => uint256) private balances;\\n\\n    /// @param controllers_ The addresses of the controlling contracts\\n    /// @param moduleMap_ The address of the module map contract\\n    /// @param lendingPoolAddress_ The address of the Aave lending pool contract\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address lendingPoolAddress_\\n    ) public initializer {\\n        __Controlled_init(controllers_, moduleMap_);\\n        lendingPoolAddress = lendingPoolAddress_;\\n    }\\n\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(address tokenAddress, uint256 amount)\\n        external\\n        override\\n        onlyController\\n    {\\n        balances[tokenAddress] += amount;\\n    }\\n\\n    /// @notice Withdraws token from the integration\\n    /// @param tokenAddress The address of the underlying token to withdraw\\n    function retrievePrincipal(address tokenAddress) external onlyManager {\\n        address aTokenAddress = getATokenAddress(tokenAddress);\\n        uint256 amount = IERC20MetadataUpgradeable(aTokenAddress).balanceOf(\\n            address(this)\\n        );\\n        _withdraw(tokenAddress, amount);\\n    }\\n\\n    /// @notice Withdraws token from the integration\\n    /// @param tokenAddress The address of the underlying token to withdraw\\n    /// @param amount The amoutn of the token to withdraw\\n    function withdraw(address tokenAddress, uint256 amount)\\n        public\\n        override\\n        onlyController\\n    {\\n        // Bypass for now...\\n        // require(\\n        //     amount <= balances[tokenAddress],\\n        //     \\\"AaveIntegration::withdraw: Withdraw amount exceeds balance\\\"\\n        // );\\n        _withdraw(tokenAddress, amount);\\n    }\\n\\n    /// @notice Withdraws token from the integration\\n    /// @param tokenAddress The address of the underlying token to withdraw\\n    /// @param amount The amoutn of the token to withdraw\\n    function _withdraw(address tokenAddress, uint256 amount) private {\\n        if (\\n            amount >\\n            IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this))\\n        ) {\\n            try\\n                IAaveLendingPool(lendingPoolAddress).withdraw(\\n                    tokenAddress,\\n                    amount,\\n                    address(this)\\n                )\\n            {} catch {}\\n        }\\n\\n        if (\\n            amount >\\n            IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this))\\n        ) {\\n            amount = IERC20MetadataUpgradeable(tokenAddress).balanceOf(\\n                address(this)\\n            );\\n        }\\n\\n        // balances are too low so need to allow the tokens to leave\\n        if (balances[tokenAddress] != 0) {\\n            if (amount > balances[tokenAddress]) {\\n                balances[tokenAddress] = 0;\\n            } else {\\n                balances[tokenAddress] -= amount;\\n            }\\n        }\\n\\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\\n            moduleMap.getModuleAddress(Modules.Kernel),\\n            amount\\n        );\\n    }\\n\\n    /// @notice Deploys all available tokens to Aave\\n    function deploy() external override onlyController {\\n        IIntegrationMap integrationMap = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        );\\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n\\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\\n                integrationMap.getTokenAddress(tokenId)\\n            );\\n            uint256 tokenAmount = token.balanceOf(address(this));\\n\\n            if (token.allowance(address(this), lendingPoolAddress) == 0) {\\n                token.safeApprove(lendingPoolAddress, type(uint256).max);\\n            }\\n\\n            if (tokenAmount > 0) {\\n                try\\n                    IAaveLendingPool(lendingPoolAddress).deposit(\\n                        address(token),\\n                        tokenAmount,\\n                        address(this),\\n                        0\\n                    )\\n                {} catch {}\\n            }\\n        }\\n    }\\n\\n    /// @notice Harvests all token yield from the Aave lending pool\\n    function harvestYield() external override onlyController {\\n        IIntegrationMap integrationMap = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        );\\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n\\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\\n            address aTokenAddress = getATokenAddress(tokenAddress);\\n            if (aTokenAddress != address(0)) {\\n                uint256 aTokenBalance = IERC20MetadataUpgradeable(aTokenAddress)\\n                    .balanceOf(address(this));\\n                if (aTokenBalance > balances[tokenAddress]) {\\n                    try\\n                        IAaveLendingPool(lendingPoolAddress).withdraw(\\n                            tokenAddress,\\n                            aTokenBalance - balances[tokenAddress],\\n                            address(\\n                                moduleMap.getModuleAddress(Modules.YieldManager)\\n                            )\\n                        )\\n                    {} catch {}\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev This returns the total amount of the underlying token that\\n    /// @dev has been deposited to the integration contract\\n    /// @param tokenAddress The address of the deployed token\\n    /// @return The amount of the underlying token that can be withdrawn\\n    function getBalance(address tokenAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balances[tokenAddress];\\n    }\\n\\n    /// @param underlyingTokenAddress The address of the underlying token\\n    /// @return The address of the corresponding aToken\\n    function getATokenAddress(address underlyingTokenAddress)\\n        public\\n        view\\n        returns (address)\\n    {\\n        IAaveLendingPool.ReserveData memory reserveData = IAaveLendingPool(\\n            lendingPoolAddress\\n        ).getReserveData(underlyingTokenAddress);\\n\\n        return reserveData.aTokenAddress;\\n    }\\n\\n    /// @dev This is used to recover lost funds from the contract to the Kernel\\n    /// @dev Be super careful not to transfer out the wrong tokens!\\n    /// @dev We should make it a point to remove this function relatively soon\\n    /// @param tokenAddress The address of the token to recover\\n    function recoverTokens(address tokenAddress, uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        require(tokenAddress == address(tokenAddress), \\\"Invalid tokenAddress\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\\n            tokenAddress\\n        );\\n        require(amount <= token.balanceOf(address(this)));\\n\\n        if (amount > 0) {\\n            // Send tokens back to Kernel\\n            token.safeTransfer(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                amount\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns total amount of pending yield for the specified token in Aave\\n    /// @param token The of the token to check for available yield\\n    /// @return Amount of yield available for harvest\\n    function getPendingYield(address token)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 aTokenBalance = IERC20MetadataUpgradeable(\\n            getATokenAddress(token)\\n        ).balanceOf(address(this));\\n        if (aTokenBalance > balances[token])\\n            return aTokenBalance - balances[token];\\n        else return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd1bb36cc0f654cbf7903dfc7d19108e7edfef208b24bac5be65b5d777c483ea8\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c8063069c9fae146100bf5780630f0a1c6f146100d457806347e7ef2414610103578063537bb13714610116578063711cc00514610137578063714f583b1461014a578063775c300c1461015d57806390482d721461016557806398c671ce14610178578063a7fc7a071461018b578063e8d991d11461019e578063e94b0dd2146101a6578063f3fef3a3146101b9578063f8b2cb4f146101cc575b600080fd5b6100d26100cd366004611cd2565b6101f5565b005b6000546100ed906201000090046001600160a01b031681565b6040516100fa9190611f05565b60405180910390f35b6100d2610111366004611cd2565b610499565b610129610124366004611c9a565b6104f9565b6040519081526020016100fa565b6100ed610145366004611c9a565b6105d6565b6100d2610158366004611c9a565b610667565b6100d2610861565b6100d2610173366004611d4c565b610bc3565b6100d2610186366004611cfd565b610c5d565b6100d2610199366004611c9a565b610d63565b6100d2610f5d565b6100ed6101b4366004611eb9565b611312565b6100d26101c7366004611cd2565b61133c565b6101296101da366004611c9a565b6001600160a01b031660009081526004602052604090205490565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161022a9190600401611f6f565b60206040518083038186803b15801561024257600080fd5b505afa158015610256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027a9190611cb6565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016102a59190611f05565b60206040518083038186803b1580156102bd57600080fd5b505afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190611dad565b61031a5760405162461bcd60e51b815260040161031190611fca565b60405180910390fd5b6000811161036a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610311565b6040516370a0823160e01b815282906001600160a01b038216906370a0823190610398903090600401611f05565b60206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611ed1565b8211156103f457600080fd5b811561049457600080546040516337c61fc560e11b815261049492620100009092046001600160a01b031691636f8c3f8a916104339190600401611f6f565b60206040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190611cb6565b6001600160a01b0383169084611375565b505050565b3360009081526001602052604090205460ff166104c85760405162461bcd60e51b815260040161031190612062565b6001600160a01b038216600090815260046020526040812080548392906104f09084906120df565b90915550505050565b600080610505836105d6565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105309190611f05565b60206040518083038186803b15801561054857600080fd5b505afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190611ed1565b6001600160a01b0384166000908152600460205260409020549091508111156105cd576001600160a01b0383166000908152600460205260409020546105c690826120f7565b9392505050565b50600092915050565b6003546040516335ea6a7560e01b815260009182916001600160a01b03909116906335ea6a759061060b908690600401611f05565b6101806040518083038186803b15801561062457600080fd5b505afa158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c9190611dcd565b60e001519392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161069c9190600401611f6f565b60206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611cb6565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016107179190611f05565b60206040518083038186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190611dad565b6107ca5760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b6064820152608401610311565b60006107d5826105d6565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108059190611f05565b60206040518083038186803b15801561081d57600080fd5b505afa158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190611ed1565b905061049483826113cb565b3360009081526001602052604090205460ff166108905760405162461bcd60e51b815260040161031190612062565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906108c790600390600401611f6f565b60206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109179190611cb6565b90506000816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190611ed1565b905060005b8181101561049457604051630cf99be760e31b8152600481018290526000906001600160a01b038516906367ccdf389060240160206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190611cb6565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a449190611f05565b60206040518083038186803b158015610a5c57600080fd5b505afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190611ed1565b600354604051636eb1769f60e11b81529192506001600160a01b038085169263dd62ed3e92610aca923092911690600401611f19565b60206040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a9190611ed1565b610b3a57600354610b3a906001600160a01b0384811691166000196116fd565b8015610bae5760035460405163e8eda9df60e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b158015610b9b57600080fd5b505af1925050508015610bac575060015b505b50508080610bbb9061213a565b915050610991565b600054610100900460ff16610bde5760005460ff1615610be2565b303b155b610bfe5760405162461bcd60e51b815260040161031190612014565b600054610100900460ff16158015610c20576000805461ffff19166101011790555b610c2a8484610c5d565b600380546001600160a01b0319166001600160a01b0384161790558015610c57576000805461ff00191690555b50505050565b600054610100900460ff16610c785760005460ff1615610c7c565b303b155b610c985760405162461bcd60e51b815260040161031190612014565b600054610100900460ff16158015610cba576000805461ffff19166101011790555b60005b8351811015610d2f576001806000868481518110610ceb57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610d278161213a565b915050610cbd565b508251610d43906002906020860190611aed565b50610d4d8261180f565b8015610494576000805461ff0019169055505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610d989190600401611f6f565b60206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190611cb6565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401610e139190611f05565b60206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190611dad565b610e7f5760405162461bcd60e51b815260040161031190611fca565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015610f075760028181548110610ed157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415610ef557600191505b80610eff8161213a565b915050610ea6565b5080610f5957600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b3360009081526001602052604090205460ff16610f8c5760405162461bcd60e51b815260040161031190612062565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610fc390600390600401611f6f565b60206040518083038186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190611cb6565b90506000816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190611ed1565b905060005b8181101561049457604051630cf99be760e31b8152600481018290526000906001600160a01b038516906367ccdf389060240160206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190611cb6565b9050600061111d826105d6565b90506001600160a01b038116156112fd576040516370a0823160e01b81526000906001600160a01b038316906370a082319061115d903090600401611f05565b60206040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ad9190611ed1565b6001600160a01b0384166000908152600460205260409020549091508111156112fb576003546001600160a01b038481166000908152600460205260409020549116906369328dec90859061120290856120f7565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061123890600290600401611f6f565b60206040518083038186803b15801561125057600080fd5b505afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190611cb6565b6040518463ffffffff1660e01b81526004016112a693929190611f4c565b602060405180830381600087803b1580156112c057600080fd5b505af19250505080156112f0575060408051601f3d908101601f191682019092526112ed91810190611ed1565b60015b6112f9576112fb565b505b505b5050808061130a9061213a565b91505061108d565b6002818154811061132257600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526001602052604090205460ff1661136b5760405162461bcd60e51b815260040161031190612062565b610f5982826113cb565b6104948363a9059cbb60e01b8484604051602401611394929190611f33565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118a3565b6040516370a0823160e01b81526001600160a01b038316906370a08231906113f7903090600401611f05565b60206040518083038186803b15801561140f57600080fd5b505afa158015611423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114479190611ed1565b8111156114d757600354604051631a4ca37b60e21b81526001600160a01b03909116906369328dec9061148290859085903090600401611f4c565b602060405180830381600087803b15801561149c57600080fd5b505af19250505080156114cc575060408051601f3d908101601f191682019092526114c991810190611ed1565b60015b6114d5576114d7565b505b6040516370a0823160e01b81526001600160a01b038316906370a0823190611503903090600401611f05565b60206040518083038186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190611ed1565b8111156115d9576040516370a0823160e01b81526001600160a01b038316906370a0823190611586903090600401611f05565b60206040518083038186803b15801561159e57600080fd5b505afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190611ed1565b90505b6001600160a01b03821660009081526004602052604090205415611663576001600160a01b038216600090815260046020526040902054811115611635576001600160a01b038216600090815260046020526040812055611663565b6001600160a01b0382166000908152600460205260408120805483929061165d9084906120f7565b90915550505b600080546040516337c61fc560e11b8152610f5992620100009092046001600160a01b031691636f8c3f8a9161169c9190600401611f6f565b60206040518083038186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190611cb6565b6001600160a01b0384169083611375565b8015806117855750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906117339030908690600401611f19565b60206040518083038186803b15801561174b57600080fd5b505afa15801561175f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117839190611ed1565b155b6117f05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610311565b6104948363095ea7b360e01b8484604051602401611394929190611f33565b600054610100900460ff1661182a5760005460ff161561182e565b303b155b61184a5760405162461bcd60e51b815260040161031190612014565b600054610100900460ff1615801561186c576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610f59576000805461ff00191690555050565b60006118f8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119759092919063ffffffff16565b80519091501561049457808060200190518101906119169190611dad565b6104945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610311565b6060611984848460008561198c565b949350505050565b6060824710156119ed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610311565b843b611a3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610311565b600080866001600160a01b03168587604051611a579190611ee9565b60006040518083038185875af1925050503d8060008114611a94576040519150601f19603f3d011682016040523d82523d6000602084013e611a99565b606091505b5091509150611aa9828286611ab4565b979650505050505050565b60608315611ac35750816105c6565b825115611ad35782518084602001fd5b8160405162461bcd60e51b81526004016103119190611f97565b828054828255906000526020600020908101928215611b42579160200282015b82811115611b4257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b0d565b50611b4e929150611b52565b5090565b5b80821115611b4e5760008155600101611b53565b8051611b7281612181565b919050565b600082601f830112611b87578081fd5b813560206001600160401b0380831115611ba357611ba361216b565b8260051b604051601f19603f83011681018181108482111715611bc857611bc861216b565b60405284815283810192508684018288018501891015611be6578687fd5b8692505b85831015611c11578035611bfd81612181565b845292840192600192909201918401611bea565b50979650505050505050565b600060208284031215611c2e578081fd5b604051602081016001600160401b0381118282101715611c5057611c5061216b565b6040529151825250919050565b80516001600160801b0381168114611b7257600080fd5b805164ffffffffff81168114611b7257600080fd5b805160ff81168114611b7257600080fd5b600060208284031215611cab578081fd5b81356105c681612181565b600060208284031215611cc7578081fd5b81516105c681612181565b60008060408385031215611ce4578081fd5b8235611cef81612181565b946020939093013593505050565b60008060408385031215611d0f578182fd5b82356001600160401b03811115611d24578283fd5b611d3085828601611b77565b9250506020830135611d4181612181565b809150509250929050565b600080600060608486031215611d60578081fd5b83356001600160401b03811115611d75578182fd5b611d8186828701611b77565b9350506020840135611d9281612181565b91506040840135611da281612181565b809150509250925092565b600060208284031215611dbe578081fd5b815180151581146105c6578182fd5b60006101808284031215611ddf578081fd5b611de76120b6565b611df18484611c1d565b8152611dff60208401611c5d565b6020820152611e1060408401611c5d565b6040820152611e2160608401611c5d565b6060820152611e3260808401611c5d565b6080820152611e4360a08401611c5d565b60a0820152611e5460c08401611c74565b60c0820152611e6560e08401611b67565b60e0820152610100611e78818501611b67565b90820152610120611e8a848201611b67565b90820152610140611e9c848201611b67565b90820152610160611eae848201611c89565b908201529392505050565b600060208284031215611eca578081fd5b5035919050565b600060208284031215611ee2578081fd5b5051919050565b60008251611efb81846020870161210e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60208101600b8310611f9157634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152611fb681604085016020870161210e565b601f01601f19169190910160400192915050565b6020808252602a908201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604082015269103737ba1037bbb732b960b11b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b60405161018081016001600160401b03811182821017156120d9576120d961216b565b60405290565b600082198211156120f2576120f2612155565b500190565b60008282101561210957612109612155565b500390565b60005b83811015612129578181015183820152602001612111565b83811115610c575750506000910152565b600060001982141561214e5761214e612155565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461219657600080fd5b5056fea264697066735822122082dfcfba5e81d79f72052e9f3e3fe666afb637fee12661a064007776bde1700c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ba5760003560e01c8063069c9fae146100bf5780630f0a1c6f146100d457806347e7ef2414610103578063537bb13714610116578063711cc00514610137578063714f583b1461014a578063775c300c1461015d57806390482d721461016557806398c671ce14610178578063a7fc7a071461018b578063e8d991d11461019e578063e94b0dd2146101a6578063f3fef3a3146101b9578063f8b2cb4f146101cc575b600080fd5b6100d26100cd366004611cd2565b6101f5565b005b6000546100ed906201000090046001600160a01b031681565b6040516100fa9190611f05565b60405180910390f35b6100d2610111366004611cd2565b610499565b610129610124366004611c9a565b6104f9565b6040519081526020016100fa565b6100ed610145366004611c9a565b6105d6565b6100d2610158366004611c9a565b610667565b6100d2610861565b6100d2610173366004611d4c565b610bc3565b6100d2610186366004611cfd565b610c5d565b6100d2610199366004611c9a565b610d63565b6100d2610f5d565b6100ed6101b4366004611eb9565b611312565b6100d26101c7366004611cd2565b61133c565b6101296101da366004611c9a565b6001600160a01b031660009081526004602052604090205490565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161022a9190600401611f6f565b60206040518083038186803b15801561024257600080fd5b505afa158015610256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027a9190611cb6565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016102a59190611f05565b60206040518083038186803b1580156102bd57600080fd5b505afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190611dad565b61031a5760405162461bcd60e51b815260040161031190611fca565b60405180910390fd5b6000811161036a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610311565b6040516370a0823160e01b815282906001600160a01b038216906370a0823190610398903090600401611f05565b60206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611ed1565b8211156103f457600080fd5b811561049457600080546040516337c61fc560e11b815261049492620100009092046001600160a01b031691636f8c3f8a916104339190600401611f6f565b60206040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190611cb6565b6001600160a01b0383169084611375565b505050565b3360009081526001602052604090205460ff166104c85760405162461bcd60e51b815260040161031190612062565b6001600160a01b038216600090815260046020526040812080548392906104f09084906120df565b90915550505050565b600080610505836105d6565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105309190611f05565b60206040518083038186803b15801561054857600080fd5b505afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190611ed1565b6001600160a01b0384166000908152600460205260409020549091508111156105cd576001600160a01b0383166000908152600460205260409020546105c690826120f7565b9392505050565b50600092915050565b6003546040516335ea6a7560e01b815260009182916001600160a01b03909116906335ea6a759061060b908690600401611f05565b6101806040518083038186803b15801561062457600080fd5b505afa158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c9190611dcd565b60e001519392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161069c9190600401611f6f565b60206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611cb6565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016107179190611f05565b60206040518083038186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190611dad565b6107ca5760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b6064820152608401610311565b60006107d5826105d6565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108059190611f05565b60206040518083038186803b15801561081d57600080fd5b505afa158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190611ed1565b905061049483826113cb565b3360009081526001602052604090205460ff166108905760405162461bcd60e51b815260040161031190612062565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906108c790600390600401611f6f565b60206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109179190611cb6565b90506000816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190611ed1565b905060005b8181101561049457604051630cf99be760e31b8152600481018290526000906001600160a01b038516906367ccdf389060240160206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190611cb6565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a449190611f05565b60206040518083038186803b158015610a5c57600080fd5b505afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190611ed1565b600354604051636eb1769f60e11b81529192506001600160a01b038085169263dd62ed3e92610aca923092911690600401611f19565b60206040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a9190611ed1565b610b3a57600354610b3a906001600160a01b0384811691166000196116fd565b8015610bae5760035460405163e8eda9df60e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b158015610b9b57600080fd5b505af1925050508015610bac575060015b505b50508080610bbb9061213a565b915050610991565b600054610100900460ff16610bde5760005460ff1615610be2565b303b155b610bfe5760405162461bcd60e51b815260040161031190612014565b600054610100900460ff16158015610c20576000805461ffff19166101011790555b610c2a8484610c5d565b600380546001600160a01b0319166001600160a01b0384161790558015610c57576000805461ff00191690555b50505050565b600054610100900460ff16610c785760005460ff1615610c7c565b303b155b610c985760405162461bcd60e51b815260040161031190612014565b600054610100900460ff16158015610cba576000805461ffff19166101011790555b60005b8351811015610d2f576001806000868481518110610ceb57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610d278161213a565b915050610cbd565b508251610d43906002906020860190611aed565b50610d4d8261180f565b8015610494576000805461ff0019169055505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610d989190600401611f6f565b60206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190611cb6565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401610e139190611f05565b60206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190611dad565b610e7f5760405162461bcd60e51b815260040161031190611fca565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015610f075760028181548110610ed157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415610ef557600191505b80610eff8161213a565b915050610ea6565b5080610f5957600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b3360009081526001602052604090205460ff16610f8c5760405162461bcd60e51b815260040161031190612062565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610fc390600390600401611f6f565b60206040518083038186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190611cb6565b90506000816001600160a01b031663f35823736040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190611ed1565b905060005b8181101561049457604051630cf99be760e31b8152600481018290526000906001600160a01b038516906367ccdf389060240160206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190611cb6565b9050600061111d826105d6565b90506001600160a01b038116156112fd576040516370a0823160e01b81526000906001600160a01b038316906370a082319061115d903090600401611f05565b60206040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ad9190611ed1565b6001600160a01b0384166000908152600460205260409020549091508111156112fb576003546001600160a01b038481166000908152600460205260409020549116906369328dec90859061120290856120f7565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061123890600290600401611f6f565b60206040518083038186803b15801561125057600080fd5b505afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190611cb6565b6040518463ffffffff1660e01b81526004016112a693929190611f4c565b602060405180830381600087803b1580156112c057600080fd5b505af19250505080156112f0575060408051601f3d908101601f191682019092526112ed91810190611ed1565b60015b6112f9576112fb565b505b505b5050808061130a9061213a565b91505061108d565b6002818154811061132257600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526001602052604090205460ff1661136b5760405162461bcd60e51b815260040161031190612062565b610f5982826113cb565b6104948363a9059cbb60e01b8484604051602401611394929190611f33565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118a3565b6040516370a0823160e01b81526001600160a01b038316906370a08231906113f7903090600401611f05565b60206040518083038186803b15801561140f57600080fd5b505afa158015611423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114479190611ed1565b8111156114d757600354604051631a4ca37b60e21b81526001600160a01b03909116906369328dec9061148290859085903090600401611f4c565b602060405180830381600087803b15801561149c57600080fd5b505af19250505080156114cc575060408051601f3d908101601f191682019092526114c991810190611ed1565b60015b6114d5576114d7565b505b6040516370a0823160e01b81526001600160a01b038316906370a0823190611503903090600401611f05565b60206040518083038186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190611ed1565b8111156115d9576040516370a0823160e01b81526001600160a01b038316906370a0823190611586903090600401611f05565b60206040518083038186803b15801561159e57600080fd5b505afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190611ed1565b90505b6001600160a01b03821660009081526004602052604090205415611663576001600160a01b038216600090815260046020526040902054811115611635576001600160a01b038216600090815260046020526040812055611663565b6001600160a01b0382166000908152600460205260408120805483929061165d9084906120f7565b90915550505b600080546040516337c61fc560e11b8152610f5992620100009092046001600160a01b031691636f8c3f8a9161169c9190600401611f6f565b60206040518083038186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190611cb6565b6001600160a01b0384169083611375565b8015806117855750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906117339030908690600401611f19565b60206040518083038186803b15801561174b57600080fd5b505afa15801561175f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117839190611ed1565b155b6117f05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610311565b6104948363095ea7b360e01b8484604051602401611394929190611f33565b600054610100900460ff1661182a5760005460ff161561182e565b303b155b61184a5760405162461bcd60e51b815260040161031190612014565b600054610100900460ff1615801561186c576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610f59576000805461ff00191690555050565b60006118f8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119759092919063ffffffff16565b80519091501561049457808060200190518101906119169190611dad565b6104945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610311565b6060611984848460008561198c565b949350505050565b6060824710156119ed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610311565b843b611a3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610311565b600080866001600160a01b03168587604051611a579190611ee9565b60006040518083038185875af1925050503d8060008114611a94576040519150601f19603f3d011682016040523d82523d6000602084013e611a99565b606091505b5091509150611aa9828286611ab4565b979650505050505050565b60608315611ac35750816105c6565b825115611ad35782518084602001fd5b8160405162461bcd60e51b81526004016103119190611f97565b828054828255906000526020600020908101928215611b42579160200282015b82811115611b4257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b0d565b50611b4e929150611b52565b5090565b5b80821115611b4e5760008155600101611b53565b8051611b7281612181565b919050565b600082601f830112611b87578081fd5b813560206001600160401b0380831115611ba357611ba361216b565b8260051b604051601f19603f83011681018181108482111715611bc857611bc861216b565b60405284815283810192508684018288018501891015611be6578687fd5b8692505b85831015611c11578035611bfd81612181565b845292840192600192909201918401611bea565b50979650505050505050565b600060208284031215611c2e578081fd5b604051602081016001600160401b0381118282101715611c5057611c5061216b565b6040529151825250919050565b80516001600160801b0381168114611b7257600080fd5b805164ffffffffff81168114611b7257600080fd5b805160ff81168114611b7257600080fd5b600060208284031215611cab578081fd5b81356105c681612181565b600060208284031215611cc7578081fd5b81516105c681612181565b60008060408385031215611ce4578081fd5b8235611cef81612181565b946020939093013593505050565b60008060408385031215611d0f578182fd5b82356001600160401b03811115611d24578283fd5b611d3085828601611b77565b9250506020830135611d4181612181565b809150509250929050565b600080600060608486031215611d60578081fd5b83356001600160401b03811115611d75578182fd5b611d8186828701611b77565b9350506020840135611d9281612181565b91506040840135611da281612181565b809150509250925092565b600060208284031215611dbe578081fd5b815180151581146105c6578182fd5b60006101808284031215611ddf578081fd5b611de76120b6565b611df18484611c1d565b8152611dff60208401611c5d565b6020820152611e1060408401611c5d565b6040820152611e2160608401611c5d565b6060820152611e3260808401611c5d565b6080820152611e4360a08401611c5d565b60a0820152611e5460c08401611c74565b60c0820152611e6560e08401611b67565b60e0820152610100611e78818501611b67565b90820152610120611e8a848201611b67565b90820152610140611e9c848201611b67565b90820152610160611eae848201611c89565b908201529392505050565b600060208284031215611eca578081fd5b5035919050565b600060208284031215611ee2578081fd5b5051919050565b60008251611efb81846020870161210e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60208101600b8310611f9157634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152611fb681604085016020870161210e565b601f01601f19169190910160400192915050565b6020808252602a908201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604082015269103737ba1037bbb732b960b11b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b60405161018081016001600160401b03811182821017156120d9576120d961216b565b60405290565b600082198211156120f2576120f2612155565b500190565b60008282101561210957612109612155565b500390565b60005b83811015612129578181015183820152602001612111565b83811115610c575750506000910152565b600060001982141561214e5761214e612155565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461219657600080fd5b5056fea264697066735822122082dfcfba5e81d79f72052e9f3e3fe666afb637fee12661a064007776bde1700c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "params": {
          "amount": "The amount of the token being deposited",
          "tokenAddress": "The address of the deposited token"
        }
      },
      "getATokenAddress(address)": {
        "params": {
          "underlyingTokenAddress": "The address of the underlying token"
        },
        "returns": {
          "_0": "The address of the corresponding aToken"
        }
      },
      "getBalance(address)": {
        "details": "This returns the total amount of the underlying token thathas been deposited to the integration contract",
        "params": {
          "tokenAddress": "The address of the deployed token"
        },
        "returns": {
          "_0": "The amount of the underlying token that can be withdrawn"
        }
      },
      "getPendingYield(address)": {
        "details": "Returns total amount of pending yield for the specified token in Aave",
        "params": {
          "token": "The of the token to check for available yield"
        },
        "returns": {
          "_0": "Amount of yield available for harvest"
        }
      },
      "initialize(address[],address,address)": {
        "params": {
          "controllers_": "The addresses of the controlling contracts",
          "lendingPoolAddress_": "The address of the Aave lending pool contract",
          "moduleMap_": "The address of the module map contract"
        }
      },
      "recoverTokens(address,uint256)": {
        "details": "This is used to recover lost funds from the contract to the KernelBe super careful not to transfer out the wrong tokens!We should make it a point to remove this function relatively soon",
        "params": {
          "tokenAddress": "The address of the token to recover"
        }
      },
      "retrievePrincipal(address)": {
        "params": {
          "tokenAddress": "The address of the underlying token to withdraw"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amoutn of the token to withdraw",
          "tokenAddress": "The address of the underlying token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy()": {
        "notice": "Deploys all available tokens to Aave"
      },
      "harvestYield()": {
        "notice": "Harvests all token yield from the Aave lending pool"
      },
      "retrievePrincipal(address)": {
        "notice": "Withdraws token from the integration"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws token from the integration"
      }
    },
    "notice": "Integrates 0x Nodes to the Aave lending poolThe Kernel contract should be added as the controller",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 723,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 726,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8327,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)17407"
      },
      {
        "astId": 3495,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3498,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21275,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "lendingPoolAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 21279,
        "contract": "contracts/yield-integrations/AaveIntegration.sol:AaveIntegration",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)17407": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}