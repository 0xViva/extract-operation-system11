{
  "language": "Solidity",
  "sources": {
    "contracts/core/BiosRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"../interfaces/IBiosRewards.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\ncontract BiosRewards is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IBiosRewards\n{\n    uint256 private totalBiosRewards;\n    uint256 private totalClaimedBiosRewards;\n    mapping(address => uint256) private totalUserClaimedBiosRewards;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenPaid;\n    mapping(address => mapping(address => uint256)) public rewards;\n\n    event RewardAdded(address indexed token, uint256 reward, uint32 duration);\n\n    function initialize(address[] memory controllers_, address moduleMap_)\n        public\n        initializer\n    {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    modifier updateReward(address token, address account) {\n        rewardPerTokenStored[token] = rewardPerToken(token);\n        lastUpdateTime[token] = lastTimeRewardApplicable(token);\n        if (account != address(0)) {\n            rewards[token][account] = earned(token, account);\n            userRewardPerTokenPaid[token][account] = rewardPerTokenStored[\n                token\n            ];\n        }\n        _;\n    }\n\n    /// @param token The address of the ERC20 token contract\n    /// @param reward The updated reward amount\n    /// @param duration The duration of the rewards period\n    function notifyRewardAmount(\n        address token,\n        uint256 reward,\n        uint32 duration\n    ) external override onlyController updateReward(token, address(0)) {\n        if (block.timestamp >= periodFinish[token]) {\n            rewardRate[token] = reward / duration;\n        } else {\n            uint256 remaining = periodFinish[token] - block.timestamp;\n            uint256 leftover = remaining * rewardRate[token];\n            rewardRate[token] = (reward + leftover) / duration;\n        }\n        lastUpdateTime[token] = block.timestamp;\n        periodFinish[token] = block.timestamp + duration;\n        totalBiosRewards += reward;\n        emit RewardAdded(token, reward, duration);\n    }\n\n    function increaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) public override onlyController updateReward(token, account) {\n        require(amount > 0, \"BiosRewards::increaseRewards: Cannot increase 0\");\n    }\n\n    function decreaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) public override onlyController updateReward(token, account) {\n        require(amount > 0, \"BiosRewards::decreaseRewards: Cannot decrease 0\");\n    }\n\n    function claimReward(address token, address account)\n        public\n        override\n        onlyController\n        updateReward(token, account)\n        returns (uint256 reward)\n    {\n        reward = earned(token, account);\n        if (reward > 0) {\n            rewards[token][account] = 0;\n            totalBiosRewards -= reward;\n            totalClaimedBiosRewards += reward;\n            totalUserClaimedBiosRewards[account] += reward;\n        }\n        return reward;\n    }\n\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return MathUpgradeable.min(block.timestamp, periodFinish[token]);\n    }\n\n    function rewardPerToken(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 totalSupply = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).totalTokenBalance(token);\n        if (totalSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) - lastUpdateTime[token]) *\n                rewardRate[token] *\n                1e18) / totalSupply);\n    }\n\n    function earned(address token, address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        IUserPositions userPositions = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        );\n        return\n            ((userPositions.userTokenBalance(token, account) *\n                (rewardPerToken(token) -\n                    userRewardPerTokenPaid[token][account])) / 1e18) +\n            rewards[token][account];\n    }\n\n    function getUserBiosRewards(address account)\n        external\n        view\n        override\n        returns (uint256 userBiosRewards)\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n\n        for (\n            uint256 tokenId;\n            tokenId < integrationMap.getTokenAddressesLength();\n            tokenId++\n        ) {\n            userBiosRewards += earned(\n                integrationMap.getTokenAddress(tokenId),\n                account\n            );\n        }\n    }\n\n    function getTotalClaimedBiosRewards()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return totalClaimedBiosRewards;\n    }\n\n    function getTotalUserClaimedBiosRewards(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return totalUserClaimedBiosRewards[account];\n    }\n\n    function getBiosRewards() external view override returns (uint256) {\n        return totalBiosRewards;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/interfaces/IBiosRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IBiosRewards {\n    /// @param token The address of the ERC20 token contract\n    /// @param reward The updated reward amount\n    /// @param duration The duration of the rewards period\n    function notifyRewardAmount(\n        address token,\n        uint256 reward,\n        uint32 duration\n    ) external;\n\n    function increaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) external;\n\n    function decreaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) external;\n\n    function claimReward(address asset, address account)\n        external\n        returns (uint256 reward);\n\n    function lastTimeRewardApplicable(address token)\n        external\n        view\n        returns (uint256);\n\n    function rewardPerToken(address token) external view returns (uint256);\n\n    function earned(address token, address account)\n        external\n        view\n        returns (uint256);\n\n    function getUserBiosRewards(address account)\n        external\n        view\n        returns (uint256 userBiosRewards);\n\n    function getTotalClaimedBiosRewards() external view returns (uint256);\n\n    function getTotalUserClaimedBiosRewards(address account)\n        external\n        view\n        returns (uint256);\n\n    function getBiosRewards() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUserPositions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"./IStrategyMap.sol\";\n\ninterface IUserPositions {\n    // ##### Structs\n    struct TokenMovement {\n        address token;\n        uint256 amount;\n    }\n\n    struct StrategyRecord {\n        uint256 strategyId;\n        uint256 timestamp;\n    }\n    struct MigrateStrategy {\n        address user;\n        TokenMovement[] tokens;\n    }\n    // ##### Events\n    event EnterStrategy(\n        uint256 indexed id,\n        address indexed user,\n        TokenMovement[] tokens\n    );\n    event ExitStrategy(\n        uint256 indexed id,\n        address indexed user,\n        TokenMovement[] tokens\n    );\n    event Deposit(\n        address indexed user,\n        address[] tokens,\n        uint256[] tokenAmounts,\n        uint256 ethAmount\n    );\n\n    // ##### Functions\n\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_) external;\n\n    /// @param sender The account seeding BIOS rewards\n    /// @param biosAmount The amount of BIOS to add to rewards\n    function seedBiosRewards(address sender, uint256 biosAmount) external;\n\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\n    function increaseBiosRewards() external;\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param depositor Address of the account depositing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param ethAmount The amount of ETH sent with the deposit\n    /// @param migration flag if this is a migration from the old system\n    function deposit(\n        address depositor,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256 ethAmount,\n        bool migration\n    ) external;\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param recipient The address of the user withdrawing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function withdraw(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) external returns (uint256 ethWithdrawn);\n\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\n    /// @param recipient The address of the user withdrawing tokens\n    /// @param tokens Array of token address that user is exiting positions from\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    /// @return tokenAmounts The amounts of each token being withdrawn\n    /// @return ethWithdrawn The amount of ETH being withdrawn\n    /// @return ethClaimed The amount of ETH being claimed from rewards\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\n    function withdrawAllAndClaim(\n        address recipient,\n        address[] memory tokens,\n        bool withdrawWethAsEth\n    )\n        external\n        returns (\n            uint256[] memory tokenAmounts,\n            uint256 ethWithdrawn,\n            uint256 ethClaimed,\n            uint256 biosClaimed\n        );\n\n    /// @param user The address of the user claiming ETH rewards\n    function claimEthRewards(address user)\n        external\n        returns (uint256 ethClaimed);\n\n    /// @notice Allows users to claim their BIOS rewards for each token\n    /// @param recipient The address of the usuer claiming BIOS rewards\n    function claimBiosRewards(address recipient)\n        external\n        returns (uint256 biosClaimed);\n\n    /// @param asset Address of the ERC20 token contract\n    /// @return The total balance of the asset deposited in the system\n    function totalTokenBalance(address asset) external view returns (uint256);\n\n    /// @notice Returns the amount that a user has deposited, but that isn't in a strategy\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userTokenBalance(address asset, address account)\n        external\n        view\n        returns (uint256);\n\n    /// @return The Bios Rewards Duration\n    function getBiosRewardsDuration() external view returns (uint32);\n\n    /**\n    @notice Adds a user's funds to a strategy to be deployed\n    @param strategyID  The strategy to enter\n    @param tokens  The tokens and amounts to enter into the strategy\n     */\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\n        external;\n\n    /**\n    @notice Marks a user's funds as withdrawable\n    @param strategyID  The strategy to withdrawfrom\n    @param tokens  The tokens and amounts to withdraw\n     */\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\n        external;\n\n    /**\n    @notice returns the amount of a given token a user has invested in a given strategy\n    @param id  the strategy id\n    @param token  the token address\n    @param user  the user who holds the funds\n    @return amount  the amount of token that the user has invested in the strategy \n     */\n    function getUserStrategyBalanceByToken(\n        uint256 id,\n        address token,\n        address user\n    ) external view returns (uint256 amount);\n\n    /**\n    @notice Returns the amount of a given token that a user has invested across all strategies\n    @param token  the token address\n    @param user  the user holding the funds\n    @return amount  the amount of tokens the user has invested across all strategies\n     */\n    function getUserInvestedAmountByToken(address token, address user)\n        external\n        view\n        returns (uint256 amount);\n\n    /**\n    @notice Returns a user's balances for requested strategies, and the users total invested amounts for each token requested\n    @param user  the user to request for\n    @param _strategies  the strategies to get balances for\n    @param _tokens  the tokens to get balances for\n    @return userStrategyBalances  The user's invested funds in the strategies\n    @return userBalance  User total token balances\n     */\n    function getUserBalances(\n        address user,\n        uint256[] calldata _strategies,\n        address[] calldata _tokens\n    )\n        external\n        view\n        returns (\n            IStrategyMap.StrategyBalance[] memory userStrategyBalances,\n            IStrategyMap.GeneralBalance[] memory userBalance\n        );\n\n    /**\n    @notice Migrates user strategy positions to the new system\n    @param users  the user data to add to the strategy\n     */\n    function migrateUser(uint256 strategyId, MigrateStrategy[] calldata users)\n        external;\n}\n"
    },
    "contracts/interfaces/IIntegrationMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IIntegrationMap {\n    struct Integration {\n        bool added;\n        string name;\n    }\n\n    struct Token {\n        uint256 id;\n        bool added;\n        bool acceptingDeposits;\n        bool acceptingWithdrawals;\n        uint256 biosRewardWeight;\n        uint256 reserveRatioNumerator;\n    }\n\n    /// @param contractAddress The address of the integration contract\n    /// @param name The name of the protocol being integrated to\n    function addIntegration(address contractAddress, string memory name)\n        external;\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator\n    ) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenDeposits(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenDeposits(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenWithdrawals(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenWithdrawals(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @param rewardWeight The updated token BIOS reward weight\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\n        external;\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function updateTokenReserveRatioNumerator(\n        address tokenAddress,\n        uint256 reserveRatioNumerator\n    ) external;\n\n    /// @param integrationId The ID of the integration\n    /// @return The address of the integration contract\n    function getIntegrationAddress(uint256 integrationId)\n        external\n        view\n        returns (address);\n\n    /// @param integrationAddress The address of the integration contract\n    /// @return The name of the of the protocol being integrated to\n    function getIntegrationName(address integrationAddress)\n        external\n        view\n        returns (string memory);\n\n    /// @return The address of the WETH token\n    function getWethTokenAddress() external view returns (address);\n\n    /// @return The address of the BIOS token\n    function getBiosTokenAddress() external view returns (address);\n\n    /// @param tokenId The ID of the token\n    /// @return The address of the token ERC20 contract\n    function getTokenAddress(uint256 tokenId) external view returns (address);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The index of the token in the tokens array\n    function getTokenId(address tokenAddress) external view returns (uint256);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The token BIOS reward weight\n    function getTokenBiosRewardWeight(address tokenAddress)\n        external\n        view\n        returns (uint256);\n\n    /// @return rewardWeightSum reward weight of depositable tokens\n    function getBiosRewardWeightSum()\n        external\n        view\n        returns (uint256 rewardWeightSum);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether depositing this token is currently enabled\n    function getTokenAcceptingDeposits(address tokenAddress)\n        external\n        view\n        returns (bool);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether withdrawing this token is currently enabled\n    function getTokenAcceptingWithdrawals(address tokenAddress)\n        external\n        view\n        returns (bool);\n\n    // @param tokenAddress The address of the token ERC20 contract\n    // @return bool indicating whether the token has been added\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\n\n    // @param integrationAddress The address of the integration contract\n    // @return bool indicating whether the integration has been added\n    function getIsIntegrationAdded(address tokenAddress)\n        external\n        view\n        returns (bool);\n\n    /// @notice get the length of supported tokens\n    /// @return The quantity of tokens added\n    function getTokenAddressesLength() external view returns (uint256);\n\n    /// @notice get the length of supported integrations\n    /// @return The quantity of integrations added\n    function getIntegrationAddressesLength() external view returns (uint256);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The value that gets divided by the reserve ratio denominator\n    function getTokenReserveRatioNumerator(address tokenAddress)\n        external\n        view\n        returns (uint256);\n\n    /// @return The token reserve ratio denominator\n    function getReserveRatioDenominator() external view returns (uint32);\n}\n"
    },
    "contracts/core/Controlled.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/IKernel.sol\";\n\nabstract contract Controlled is Initializable, ModuleMapConsumer {\n    // controller address => is a controller\n    mapping(address => bool) internal _controllers;\n    address[] public controllers;\n\n    function __Controlled_init(\n        address[] memory controllers_,\n        address moduleMap_\n    ) public initializer {\n        for (uint256 i; i < controllers_.length; i++) {\n            _controllers[controllers_[i]] = true;\n        }\n        controllers = controllers_;\n        __ModuleMapConsumer_init(moduleMap_);\n    }\n\n    function addController(address controller) external onlyOwner {\n        _controllers[controller] = true;\n        bool added;\n        for (uint256 i; i < controllers.length; i++) {\n            if (controller == controllers[i]) {\n                added = true;\n            }\n        }\n        if (!added) {\n            controllers.push(controller);\n        }\n    }\n\n    modifier onlyOwner() {\n        require(\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\n                msg.sender\n            ),\n            \"Controlled::onlyOwner: Caller is not owner\"\n        );\n        _;\n    }\n\n    modifier onlyManager() {\n        require(\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\n                msg.sender\n            ),\n            \"Controlled::onlyManager: Caller is not manager\"\n        );\n        _;\n    }\n\n    modifier onlyController() {\n        require(\n            _controllers[msg.sender],\n            \"Controlled::onlyController: Caller is not controller\"\n        );\n        _;\n    }\n}\n"
    },
    "contracts/core/ModuleMapConsumer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IModuleMap.sol\";\n\nabstract contract ModuleMapConsumer is Initializable {\n    IModuleMap public moduleMap;\n\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\n        moduleMap = IModuleMap(moduleMap_);\n    }\n}\n"
    },
    "contracts/interfaces/IStrategyMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"../interfaces/IIntegration.sol\";\nimport \"./IUserPositions.sol\";\n\ninterface IStrategyMap {\n    // #### Structs\n    struct Integration {\n        address integration;\n        uint32 ammPoolID;\n    }\n    struct Token {\n        uint256 integrationPairIdx;\n        address token;\n        uint32 weight;\n    }\n\n    struct TokenDeploy {\n        address integration;\n        uint32 ammPoolID;\n        address token;\n        uint256 amount;\n    }\n\n    struct Strategy {\n        string name;\n        Integration[] integrations;\n        Token[] tokens;\n        mapping(address => bool) availableTokens;\n    }\n\n    struct StrategySummary {\n        string name;\n        Integration[] integrations;\n        Token[] tokens;\n    }\n\n    struct StrategyBalance {\n        uint256 strategyID;\n        GeneralBalance[] tokens;\n    }\n\n    struct GeneralBalance {\n        address token;\n        uint256 balance;\n    }\n\n    struct ClosablePosition {\n        address integration;\n        uint32 ammPoolID;\n        uint256 amount;\n    }\n\n    // #### Events\n    // NewStrategy, UpdateName, UpdateStrategy, DeleteStrategy\n    event NewStrategy(\n        uint256 indexed id,\n        Integration[] integrations,\n        Token[] tokens,\n        string name\n    );\n    event UpdateName(uint256 indexed id, string name);\n    event UpdateStrategy(\n        uint256 indexed id,\n        Integration[] integrations,\n        Token[] tokens\n    );\n    event DeleteStrategy(uint256 indexed id);\n\n    // #### Functions\n    /**\n     @notice Adds a new strategy to the list of available strategies\n     @param name  the name of the new strategy\n     @param integrations  the integrations and weights that form the strategy\n     */\n    function addStrategy(\n        string calldata name,\n        Integration[] calldata integrations,\n        Token[] calldata tokens\n    ) external;\n\n    /**\n    @notice Updates the strategy name\n    @param name  the new name\n     */\n    function updateName(uint256 id, string calldata name) external;\n\n    /**\n    @notice Updates a strategy's integrations and tokens\n    @param id  the strategy to update\n    @param integrations  the new integrations that will be used\n    @param tokens  the tokens accepted for new entries\n    */\n    function updateStrategy(\n        uint256 id,\n        Integration[] calldata integrations,\n        Token[] calldata tokens\n    ) external;\n\n    /**\n    @notice Deletes a strategy\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\n    @dev To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\n    @param id  the strategy to delete\n     */\n    function deleteStrategy(uint256 id) external;\n\n    /**\n    @notice Increases the amount of a set of tokens in a strategy\n    @param id  the strategy to deposit into\n    @param tokens  the tokens to deposit\n     */\n    function increaseStrategy(\n        uint256 id,\n        IUserPositions.TokenMovement[] calldata tokens\n    ) external;\n\n    /**\n    @notice Decreases the amount of a set of tokens invested in a strategy\n    @param id  the strategy to withdraw assets from\n    @param tokens  details of the tokens being deposited\n     */\n    function decreaseStrategy(\n        uint256 id,\n        IUserPositions.TokenMovement[] calldata tokens\n    ) external;\n\n    /**\n    @notice Getter function to return the nested arrays as well as the name\n    @param id  the strategy to return\n     */\n    function getStrategy(uint256 id)\n        external\n        view\n        returns (StrategySummary memory);\n\n    /**\n    @notice Decreases the deployable amount after a deployment/withdrawal\n    @param integration  the integration that was changed\n    @param poolID  the pool within the integration that handled the tokens\n    @param token  the token to decrease for\n    @param amount  the amount to reduce the vector by\n     */\n    function decreaseDeployAmountChange(\n        address integration,\n        uint32 poolID,\n        address token,\n        uint256 amount\n    ) external;\n\n    /**\n    @notice Returns the amount of a given token currently invested in a strategy\n    @param id  the strategy id to check\n    @param token  The token to retrieve the balance for\n    @return amount  the amount of token that is invested in the strategy\n     */\n    function getStrategyTokenBalance(uint256 id, address token)\n        external\n        view\n        returns (uint256 amount);\n\n    /**\n    @notice Returns the total amount of a token invested across all strategies\n    @param token  the token to fetch the balance for\n    @return amount  the amount of the token currently invested\n    */\n    function getTokenTotalBalance(address token)\n        external\n        view\n        returns (uint256 amount);\n\n    /**\n    @notice Returns the current amount awaiting deployment\n    @param integration  the integration to deploy to\n    @param poolID  the pool within the integration that should receive the tokens\n    @param token  the token to be deployed\n    @return the pending deploy amount\n     */\n    function getDeployAmount(\n        address integration,\n        uint32 poolID,\n        address token\n    ) external view returns (int256);\n\n    /**\n    @notice Returns balances per strategy, and total invested balances\n    @param _strategies  The strategies to retrieve balances for\n    @param _tokens  The tokens to retrieve\n     */\n    function getStrategyBalances(\n        uint256[] calldata _strategies,\n        address[] calldata _tokens\n    )\n        external\n        view\n        returns (\n            StrategyBalance[] memory strategyBalances,\n            GeneralBalance[] memory generalBalances\n        );\n\n    /**\n  @notice Returns 1 or more strategies in a single call.\n  @param ids  The ids of the strategies to return.\n   */\n    function getMultipleStrategies(uint256[] calldata ids)\n        external\n        view\n        returns (StrategySummary[] memory);\n\n    /// @notice autogenerated getter definition\n    function idCounter() external view returns (uint256);\n\n    /**\n    @notice returns the length of the tokens array in a strategy\n    @param strategy  the strategy to look up\n    @return the length\n    */\n    function getStrategyTokenLength(uint256 strategy)\n        external\n        view\n        returns (uint256);\n\n    /**\n    @notice Clears the list of positions that can be closed to supply a token\n    @param tokens  The list of tokens to clear\n     */\n    function clearClosablePositions(address[] calldata tokens) external;\n\n    /**\n    @notice Closes enough positions to provide a requested amount of a token\n    @param token  the token to source\n    @param amount  the amount to source\n     */\n    function closePositionsForWithdrawal(address token, uint256 amount)\n        external;\n\n    /**\n@notice Increases strategy balances without increasing the deploy amount\n@param id  The strategy id\n@param tokens  the tokens and amounts \n */\n    function increaseTokenBalance(\n        uint256 id,\n        IUserPositions.TokenMovement[] calldata tokens\n    ) external;\n}\n"
    },
    "contracts/interfaces/IIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IIntegration {\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount) external;\n\n    /// @param tokenAddress The address of the withdrawal token\n    /// @param amount The amount of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount) external;\n\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\n    function deploy() external;\n\n    /// @dev Harvests token yield from the integration\n    function harvestYield() external;\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @param tokenAddress The address of the deployed token\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address tokenAddress) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IKernel.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IKernel {\n    /// @param account The address of the account to check if they are a manager\n    /// @return Bool indicating whether the account is a manger\n    function isManager(address account) external view returns (bool);\n\n    /// @param account The address of the account to check if they are an owner\n    /// @return Bool indicating whether the account is an owner\n    function isOwner(address account) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IModuleMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nenum Modules {\n    Kernel, // 0\n    UserPositions, // 1\n    YieldManager, // 2\n    IntegrationMap, // 3\n    BiosRewards, // 4\n    EtherRewards, // 5\n    SushiSwapTrader, // 6\n    UniswapTrader, // 7\n    StrategyMap, // 8\n    StrategyManager // 9\n}\n\ninterface IModuleMap {\n    function getModuleAddress(Modules key) external view returns (address);\n}\n"
    },
    "contracts/yield-integrations/YearnIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IYearnRegistry.sol\";\nimport \"../interfaces/IYearnVault.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\n\n/// @notice Integrates 0x Nodes to Yearn v2 vaults\ncontract YearnIntegration is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IIntegration\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private yearnRegistryAddress;\n    mapping(address => uint256) private balances;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param yearnRegistryAddress_ The address of the Yearn registry contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address yearnRegistryAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        yearnRegistryAddress = yearnRegistryAddress_;\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        balances[tokenAddress] += amount;\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount)\n        public\n        override\n        onlyController\n    {\n        require(\n            amount <= balances[tokenAddress],\n            \"YearnIntegration::withdraw: Withdraw amount exceeds balance\"\n        );\n        address vaultAddress = getVaultAddress(tokenAddress);\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n\n        if (token.balanceOf(address(this)) < amount) {\n            // Need to withdraw tokens from Yearn vault\n            uint256 vaultWithdrawableAmount = getVaultWithdrawableAmount(\n                tokenAddress\n            );\n            if (vaultWithdrawableAmount > 0) {\n                // Add 1% to shares amount to withdraw to account for fees\n                uint256 sharesAmount = (101 *\n                    amount *\n                    IERC20MetadataUpgradeable(vaultAddress).balanceOf(\n                        address(this)\n                    )) /\n                    vaultWithdrawableAmount /\n                    100;\n\n                if (\n                    sharesAmount >\n                    IERC20MetadataUpgradeable(vaultAddress).balanceOf(\n                        address(this)\n                    )\n                ) {\n                    sharesAmount = IERC20MetadataUpgradeable(vaultAddress)\n                        .balanceOf(address(this));\n                }\n\n                try IYearnVault(vaultAddress).withdraw(sharesAmount) {} catch {}\n            }\n        }\n\n        // If there still isn't enough of the withdrawn token, change\n        // The withdraw amount to the balance of this contract\n        if (token.balanceOf(address(this)) < amount) {\n            amount = token.balanceOf(address(this));\n        }\n\n        balances[tokenAddress] -= amount;\n        token.safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n    }\n\n    /// @notice Deploys all available tokens to Aave\n    function deploy() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                integrationMap.getTokenAddress(tokenId)\n            );\n            uint256 tokenAmount = token.balanceOf(address(this));\n            address vaultAddress = getVaultAddress(address(token));\n\n            // Check if a vault for this token exists\n            if (vaultAddress != address(0)) {\n                if (token.allowance(address(this), vaultAddress) == 0) {\n                    token.safeApprove(vaultAddress, type(uint256).max);\n                }\n\n                if (tokenAmount > 0) {\n                    try\n                        IYearnVault(vaultAddress).deposit(\n                            tokenAmount,\n                            address(this)\n                        )\n                    {} catch {}\n                }\n            }\n        }\n    }\n\n    /// @notice Harvests all token yield from the Aave lending pool\n    function harvestYield() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                integrationMap.getTokenAddress(tokenId)\n            );\n            address vaultAddress = getVaultAddress(address(token));\n\n            // Check if a vault exists for the current token\n            if (vaultAddress != address(0)) {\n                uint256 availableYieldInShares = getAvailableYieldInShares(\n                    address(token)\n                );\n                if (availableYieldInShares > 0) {\n                    uint256 balanceBefore = token.balanceOf(address(this));\n\n                    // Harvest the available yield from Yearn vault\n                    try\n                        IYearnVault(getVaultAddress(address(token))).withdraw(\n                            availableYieldInShares\n                        )\n                    {\n                        uint256 harvestedAmount = token.balanceOf(\n                            address(this)\n                        ) - balanceBefore;\n                        if (harvestedAmount > 0) {\n                            // Yield has been harvested, transfer it to the Yield Manager\n                            token.safeTransfer(\n                                moduleMap.getModuleAddress(\n                                    Modules.YieldManager\n                                ),\n                                harvestedAmount\n                            );\n                        }\n                    } catch {}\n                }\n            }\n        }\n    }\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @param token The address of the deployed token\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address token)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[token];\n    }\n\n    /// @param token The address of the token\n    /// @return The address of the vault for the specified token\n    function getVaultAddress(address token) public view returns (address) {\n        try IYearnRegistry(yearnRegistryAddress).latestVault(token) returns (\n            address vaultAddress\n        ) {\n            return vaultAddress;\n        } catch {\n            return address(0);\n        }\n    }\n\n    /// @param token The address of the deposited token\n    /// @return The price per vault share in the underlying asset\n    function getPricePerShare(address token) public view returns (uint256) {\n        return IYearnVault(getVaultAddress(token)).pricePerShare();\n    }\n\n    /// @param token The address of the deposited token\n    /// @return The amount of available yield to be harvested in value of the share token\n    function getAvailableYieldInShares(address token)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 vaultWithdrawableAmount = getVaultWithdrawableAmount(token);\n\n        if (vaultWithdrawableAmount > balances[token]) {\n            return vaultWithdrawableAmount - balances[token];\n        } else {\n            return 0;\n        }\n    }\n\n    /// @param token The address of the deposited token\n    /// @return The amount of the deposited token that can be withdrawn from the vault\n    function getVaultWithdrawableAmount(address token)\n        public\n        view\n        returns (uint256)\n    {\n        IERC20MetadataUpgradeable shareToken = IERC20MetadataUpgradeable(\n            getVaultAddress(token)\n        );\n\n        return\n            (getPricePerShare(token) * shareToken.balanceOf(address(this))) /\n            (10**shareToken.decimals());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IYearnRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IYearnRegistry {\n    /// @notice Gets the vault to use for the specified token\n    /// @param token The address of the token\n    /// @return The address of the vault\n    function latestVault(address token) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IYearnVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IYearnVault {\n    function deposit(uint256 amount, address recipient)\n        external\n        returns (uint256 shares);\n\n    function withdraw(uint256 shares) external;\n\n    function pricePerShare() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/yield-integrations/UniswapIntegrationDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/IUniswapFactory.sol\";\nimport \"../interfaces/IUniswapPositionManager.sol\";\nimport \"../interfaces/IUniswapSwapRouter.sol\";\nimport \"../interfaces/IUniswapIntegration.sol\";\nimport \"../interfaces/IUniswapPool.sol\";\nimport \"../interfaces/IUniswapIntegrationDeployer.sol\";\nimport \"../interfaces/IUniswapIntegration.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\nimport \"../libraries/TickMath.sol\";\n\n/// @notice Integrates 0x Nodes to Uniswap v3\n/// @notice tokenA/tokenB naming implies tokens are unordered\n/// @notice token0/token1 naming implies tokens are ordered\ncontract UniswapIntegrationDeployer is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IUniswapIntegrationDeployer\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private factoryAddress;\n    address private positionManagerAddress;\n    IUniswapIntegration private uniswapIntegration;\n\n    /// @param controllers_ Array of controller addresses\n    /// @param moduleMap_ The address of the module map contract\n    /// @param factoryAddress_ The address of the Uniswap v3 factory\n    /// @param positionManagerAddress_ The address of the Uniswap v3 position manager\n    /// @param uniswapIntegrationAddress_ The address of the Uniswap Integration contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address positionManagerAddress_,\n        address uniswapIntegrationAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        positionManagerAddress = positionManagerAddress_;\n        uniswapIntegration = IUniswapIntegration(uniswapIntegrationAddress_);\n    }\n\n    /// @param token The address of the token to approve transfers for\n    function tokenApprovals(address token) external override onlyController {\n        if (\n            IERC20MetadataUpgradeable(token).allowance(\n                address(this),\n                address(uniswapIntegration)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(token).safeApprove(\n                address(uniswapIntegration),\n                type(uint256).max\n            );\n        }\n\n        if (\n            IERC20MetadataUpgradeable(token).allowance(\n                address(this),\n                positionManagerAddress\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(token).safeApprove(\n                positionManagerAddress,\n                type(uint256).max\n            );\n        }\n    }\n\n    /// @param tokenDesiredAmounts Array of the desired amounts of each token\n    function swapExcessTokensForBaseStablecoin(\n        uint256[] memory tokenDesiredAmounts\n    ) public override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IUniswapTrader uniswapTrader = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        );\n        address baseStablecoinAddress = uniswapIntegration\n            .getBaseStablecoinAddress();\n\n        for (uint256 tokenId; tokenId < tokenDesiredAmounts.length; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n\n            if (tokenAddress != baseStablecoinAddress) {\n                IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                    tokenAddress\n                );\n                uint256 tokenBalance = token.balanceOf(address(this));\n\n                if (tokenBalance > tokenDesiredAmounts[tokenId]) {\n                    IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\n                        address(uniswapTrader),\n                        tokenBalance - tokenDesiredAmounts[tokenId]\n                    );\n                    uniswapTrader.swapExactInput(\n                        tokenAddress,\n                        baseStablecoinAddress,\n                        address(this),\n                        tokenBalance - tokenDesiredAmounts[tokenId]\n                    );\n                }\n            }\n        }\n    }\n\n    /// @param tokenDesiredAmounts Array of the desired amounts of each token\n    function swapExcessBaseStablecoinForTokens(\n        uint256[] memory tokenDesiredAmounts\n    ) external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IUniswapTrader uniswapTrader = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        );\n        address baseStablecoinAddress = uniswapIntegration\n            .getBaseStablecoinAddress();\n\n        for (uint256 tokenId; tokenId < tokenDesiredAmounts.length; tokenId++) {\n            if (\n                integrationMap.getTokenAddress(tokenId) != baseStablecoinAddress\n            ) {\n                address tokenAddress = integrationMap.getTokenAddress(tokenId);\n                IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                    tokenAddress\n                );\n                uint256 tokenBalance = token.balanceOf(address(this));\n\n                if (tokenBalance < tokenDesiredAmounts[tokenId]) {\n                    uint256 baseStablecoinAmount = uniswapIntegration\n                        .getTokenValueInBaseStablecoin(\n                            tokenAddress,\n                            tokenDesiredAmounts[tokenId] - tokenBalance\n                        );\n                    if (\n                        baseStablecoinAmount >\n                        IERC20MetadataUpgradeable(baseStablecoinAddress)\n                            .balanceOf(address(this))\n                    ) {\n                        baseStablecoinAmount = IERC20MetadataUpgradeable(\n                            baseStablecoinAddress\n                        ).balanceOf(address(this));\n                    }\n\n                    IERC20MetadataUpgradeable(baseStablecoinAddress)\n                        .safeTransfer(\n                            address(uniswapTrader),\n                            baseStablecoinAmount\n                        );\n                    uniswapTrader.swapExactInput(\n                        baseStablecoinAddress,\n                        tokenAddress,\n                        address(this),\n                        baseStablecoinAmount\n                    );\n                }\n            }\n        }\n    }\n\n    /// @param token0 The address of token0 of the liquidity position\n    /// @param token1 The address of token1 of the liquidity position\n    /// @param fee The liquidity position pool fee\n    /// @param tickLower The liquidity position lower tick\n    /// @param tickUpper The liquidity position upper tick\n    /// @param amount0Desired The desired amount of token0 to mint into the position\n    /// @param amount1Desired The desired amount of token1 to mint into the position\n    /// @return success Bool indicating whether the mint succeeded\n    /// @return liquidityPositionId The token ID of the minted liquidity position\n    function mintLiquidityPosition(\n        address token0,\n        address token1,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    )\n        external\n        override\n        onlyController\n        returns (bool success, uint256 liquidityPositionId)\n    {\n        if (\n            amount0Desired >\n            IERC20MetadataUpgradeable(token0).balanceOf(address(this))\n        ) {\n            amount0Desired = IERC20MetadataUpgradeable(token0).balanceOf(\n                address(this)\n            );\n        }\n\n        if (\n            amount1Desired >\n            IERC20MetadataUpgradeable(token1).balanceOf(address(this))\n        ) {\n            amount1Desired = IERC20MetadataUpgradeable(token1).balanceOf(\n                address(this)\n            );\n        }\n\n        IUniswapPositionManager.MintParams memory mintParams;\n\n        mintParams.token0 = token0;\n        mintParams.token1 = token1;\n        mintParams.fee = fee;\n        mintParams.tickLower = tickLower;\n        mintParams.tickUpper = tickUpper;\n        mintParams.amount0Desired = amount0Desired;\n        mintParams.amount1Desired = amount1Desired;\n        mintParams.amount0Min = 0;\n        mintParams.amount1Min = 0;\n        mintParams.recipient = address(this);\n        mintParams.deadline = block.timestamp;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).mint(mintParams)\n        returns (\n            uint256 returnedLiquidityPositionId,\n            uint128,\n            uint256,\n            uint256\n        ) {\n            success = true;\n            liquidityPositionId = returnedLiquidityPositionId;\n        } catch {\n            success = false;\n            liquidityPositionId = 0;\n        }\n    }\n\n    /// @param liquidityPositionId The token ID of the liquidity position\n    /// @param token0 The address of token0 of the liquidity position\n    /// @param token1 The address of token1 of the liquidity position\n    /// @param amount0Desired The desired amount of token0 to add to the liquidity position\n    /// @param amount1Desired The desired amount of token1 to add to the liquidity position\n    /// @return success Bool indicating whether the increase succeeded\n    function increaseLiquidityPosition(\n        uint256 liquidityPositionId,\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external override onlyController returns (bool success) {\n        if (\n            amount0Desired >\n            IERC20MetadataUpgradeable(token0).balanceOf(address(this))\n        ) {\n            amount0Desired = IERC20MetadataUpgradeable(token0).balanceOf(\n                address(this)\n            );\n        }\n        if (\n            amount1Desired >\n            IERC20MetadataUpgradeable(token1).balanceOf(address(this))\n        ) {\n            amount1Desired = IERC20MetadataUpgradeable(token1).balanceOf(\n                address(this)\n            );\n        }\n\n        IUniswapPositionManager.IncreaseLiquidityParams\n            memory increaseLiquidityParams;\n\n        increaseLiquidityParams.tokenId = liquidityPositionId;\n        increaseLiquidityParams.amount0Desired = amount0Desired;\n        increaseLiquidityParams.amount1Desired = amount1Desired;\n        increaseLiquidityParams.amount0Min = 0;\n        increaseLiquidityParams.amount1Min = 0;\n        increaseLiquidityParams.deadline = block.timestamp;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).increaseLiquidity(\n                increaseLiquidityParams\n            )\n        {\n            success = true;\n        } catch {\n            success = false;\n        }\n    }\n\n    /// @notice This function closes liquidity positions until the specified amount of the\n    /// @notice token has been obtained, or until all liquidity positions have been closed\n    /// @param tokenAddress The address of the token being withdrawn\n    /// @param amount The amount of the token being withdrawn needed\n    function closePositionsForWithdrawal(address tokenAddress, uint256 amount)\n        public\n        override\n        onlyController\n    {\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n        bool doneClosingPositions;\n        uint256 liquidityPositionIndex;\n        uint256 withdrawalAmountInBaseStablecoinValue = uniswapIntegration\n            .getTokenValueInBaseStablecoin(tokenAddress, amount);\n\n        // Close liquidity positions until enough of token has been withdrawn\n        while (!doneClosingPositions) {\n            if (\n                uniswapIntegration.getPositionBaseStablecoinValue(\n                    liquidityPositionIndex\n                ) +\n                    uniswapIntegration.getTokenValueInBaseStablecoin(\n                        tokenAddress,\n                        token.balanceOf(address(this))\n                    ) <=\n                withdrawalAmountInBaseStablecoinValue\n            ) {\n                // Need to fully close the position\n                decreaseLiquidityPosition(\n                    liquidityPositionIndex,\n                    uniswapIntegration.getPositionBaseStablecoinValue(\n                        liquidityPositionIndex\n                    )\n                );\n                swapReservesForWithdrawalToken(tokenAddress);\n                if (token.balanceOf(address(this)) >= amount) {\n                    doneClosingPositions = true;\n                }\n            } else {\n                // Partially close position for 2% more of value needed to account for slippage\n                decreaseLiquidityPosition(\n                    liquidityPositionIndex,\n                    (102 *\n                        (withdrawalAmountInBaseStablecoinValue -\n                            uniswapIntegration.getTokenValueInBaseStablecoin(\n                                tokenAddress,\n                                token.balanceOf(address(this))\n                            ))) / 100\n                );\n                swapReservesForWithdrawalToken(tokenAddress);\n\n                // Check if the new token balance is enough for withdrawal\n                if (token.balanceOf(address(this)) >= amount) {\n                    // Token balance is enough for withdrawal, done closing positions\n                    doneClosingPositions = true;\n                } else {\n                    // Partial position closure was not enough, fully close the position\n                    decreaseLiquidityPosition(\n                        liquidityPositionIndex,\n                        uniswapIntegration.getPositionBaseStablecoinValue(\n                            liquidityPositionIndex\n                        )\n                    );\n                    swapReservesForWithdrawalToken(tokenAddress);\n                    if (token.balanceOf(address(this)) >= amount) {\n                        doneClosingPositions = true;\n                    }\n                }\n            }\n\n            // Check if the final liquidity position has been reached\n            if (\n                liquidityPositionIndex ==\n                uniswapIntegration.getLiquidityPositionsCount() - 1\n            ) {\n                doneClosingPositions = true;\n            }\n\n            // Increment to the next liquidity position\n            liquidityPositionIndex++;\n        }\n    }\n\n    /// @param tokenAddress The address of the token being withdrawn\n    function swapReservesForWithdrawalToken(address tokenAddress)\n        public\n        override\n        onlyController\n    {\n        uint256 tokenCount = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        ).getTokenAddressesLength();\n        uint256[] memory tokenDesiredAmounts = new uint256[](tokenCount);\n        swapExcessTokensForBaseStablecoin(tokenDesiredAmounts);\n        IERC20MetadataUpgradeable baseStablecoin = IERC20MetadataUpgradeable(\n            uniswapIntegration.getBaseStablecoinAddress()\n        );\n        if (tokenAddress != address(baseStablecoin)) {\n            baseStablecoin.safeTransfer(\n                moduleMap.getModuleAddress(Modules.UniswapTrader),\n                baseStablecoin.balanceOf(address(this))\n            );\n            IUniswapTrader(moduleMap.getModuleAddress(Modules.UniswapTrader))\n                .swapExactInput(\n                    address(baseStablecoin),\n                    tokenAddress,\n                    address(this),\n                    baseStablecoin.balanceOf(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    )\n                );\n        }\n    }\n\n    function decreaseLiquidityPosition(\n        uint256 liquidityPositionIndex,\n        uint256 baseStablecoinValue\n    ) public override onlyController returns (bool success) {\n        (, , , , , , uint256 liquidityPositionId, ) = uniswapIntegration\n            .getLiquidityPosition(liquidityPositionIndex);\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            uint128 currentLiquidity,\n            ,\n            ,\n            uint128 tokensOwed0Before,\n            uint128 tokensOwed1Before\n        ) = IUniswapPositionManager(positionManagerAddress).positions(\n                liquidityPositionId\n            );\n\n        if (\n            uniswapIntegration.getPositionBaseStablecoinValue(\n                liquidityPositionIndex\n            ) > 0\n        ) {\n            uint128 reduceLiquidityAmount = uint128(\n                ((baseStablecoinValue) * currentLiquidity) /\n                    uniswapIntegration.getPositionBaseStablecoinValue(\n                        liquidityPositionIndex\n                    )\n            );\n\n            if (reduceLiquidityAmount > currentLiquidity) {\n                reduceLiquidityAmount = currentLiquidity;\n            }\n\n            IUniswapPositionManager.DecreaseLiquidityParams\n                memory decreaseLiquidityParams;\n\n            decreaseLiquidityParams.tokenId = liquidityPositionId;\n            decreaseLiquidityParams.liquidity = reduceLiquidityAmount;\n            decreaseLiquidityParams.amount0Min = 0;\n            decreaseLiquidityParams.amount1Min = 0;\n            decreaseLiquidityParams.deadline = block.timestamp;\n\n            try\n                IUniswapPositionManager(positionManagerAddress)\n                    .decreaseLiquidity(decreaseLiquidityParams)\n            {\n                success = true;\n            } catch {\n                success = false;\n            }\n\n            (\n                ,\n                ,\n                ,\n                ,\n                ,\n                ,\n                ,\n                ,\n                ,\n                ,\n                uint128 tokensOwed0After,\n                uint128 tokensOwed1After\n            ) = IUniswapPositionManager(positionManagerAddress).positions(\n                    liquidityPositionId\n                );\n\n            // Collect tokens from decreased position while leaving previous yield for future collection\n            collectTokensFromPosition(\n                liquidityPositionId,\n                tokensOwed0After - tokensOwed0Before,\n                tokensOwed1After - tokensOwed1Before\n            );\n        } else {\n            success = false;\n        }\n    }\n\n    // Harvests all available yield and transfers to the YieldManager\n    function harvestYield() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        address baseStablecoinAddress = uniswapIntegration\n            .getBaseStablecoinAddress();\n\n        uint256[] memory tokensHarvestedYield = new uint256[](tokenCount);\n\n        uint256 baseStablecoinBalanceBefore = IERC20MetadataUpgradeable(\n            baseStablecoinAddress\n        ).balanceOf(address(this));\n\n        // Collect all available yield for liquidity positions\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex <\n            uniswapIntegration.getLiquidityPositionsCount();\n            liquidityPositionIndex++\n        ) {\n            (\n                address token0,\n                address token1,\n                ,\n                ,\n                ,\n                bool minted,\n                uint256 liquidityPositionId,\n\n            ) = uniswapIntegration.getLiquidityPosition(liquidityPositionIndex);\n            if (minted) {\n                uint256 token0Id = integrationMap.getTokenId(token0);\n                uint256 token1Id = integrationMap.getTokenId(token1);\n\n                (\n                    bool success,\n                    uint256 amount0,\n                    uint256 amount1\n                ) = collectTokensFromPosition(\n                        liquidityPositionId,\n                        2**127,\n                        2**127\n                    );\n\n                if (success) {\n                    tokensHarvestedYield[token0Id] += amount0;\n                    tokensHarvestedYield[token1Id] += amount1;\n                }\n            }\n        }\n\n        uint256 totalBalanceBaseStablecoinValue;\n        uint256[] memory tokenBalancesBaseStablecoinValue = new uint256[](\n            tokenCount\n        );\n\n        // Swap harvested yield for base stablecoin\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            if (tokensHarvestedYield[tokenId] > 0) {\n                address tokenAddress = integrationMap.getTokenAddress(tokenId);\n\n                // Check that the token is the baseStablecoin, or a pool has been setup between the token and the base stablecoin\n                if (\n                    tokenAddress == baseStablecoinAddress ||\n                    IUniswapTrader(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    ).getTokenPairPoolsLength(\n                            tokenAddress,\n                            baseStablecoinAddress\n                        ) >\n                    0\n                ) {\n                    uint256 tokenBalanceBaseStablecoinValue = uniswapIntegration\n                        .getTokenValueInBaseStablecoin(\n                            tokenAddress,\n                            uniswapIntegration.getBalance(tokenAddress)\n                        );\n                    tokenBalancesBaseStablecoinValue[\n                        tokenId\n                    ] = tokenBalanceBaseStablecoinValue;\n                    totalBalanceBaseStablecoinValue += tokenBalanceBaseStablecoinValue;\n\n                    if (tokenAddress != baseStablecoinAddress) {\n                        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\n                            moduleMap.getModuleAddress(Modules.UniswapTrader),\n                            tokensHarvestedYield[tokenId]\n                        );\n                        IUniswapTrader(\n                            moduleMap.getModuleAddress(Modules.UniswapTrader)\n                        ).swapExactInput(\n                                tokenAddress,\n                                baseStablecoinAddress,\n                                address(this),\n                                tokensHarvestedYield[tokenId]\n                            );\n                    }\n                }\n            }\n        }\n\n        uint256 baseStablecoinHarvested = IERC20MetadataUpgradeable(\n            baseStablecoinAddress\n        ).balanceOf(address(this)) - baseStablecoinBalanceBefore;\n\n        // Swap base stablecoin for yield tokens and transfer to YieldManager in proportion\n        // to token deposit values into this integration\n        if (\n            baseStablecoinHarvested > 0 && totalBalanceBaseStablecoinValue > 0\n        ) {\n            for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n                address tokenAddress = integrationMap.getTokenAddress(tokenId);\n                uint256 baseStablecoinAmount = (baseStablecoinHarvested *\n                    tokenBalancesBaseStablecoinValue[tokenId]) /\n                    totalBalanceBaseStablecoinValue;\n\n                if (baseStablecoinAmount > 0) {\n                    if (tokenAddress != baseStablecoinAddress) {\n                        IERC20MetadataUpgradeable(baseStablecoinAddress)\n                            .safeTransfer(\n                                moduleMap.getModuleAddress(\n                                    Modules.UniswapTrader\n                                ),\n                                baseStablecoinAmount\n                            );\n\n                        IUniswapTrader(\n                            moduleMap.getModuleAddress(Modules.UniswapTrader)\n                        ).swapExactInput(\n                                baseStablecoinAddress,\n                                tokenAddress,\n                                moduleMap.getModuleAddress(\n                                    Modules.YieldManager\n                                ),\n                                baseStablecoinAmount\n                            );\n                    } else {\n                        IERC20MetadataUpgradeable(baseStablecoinAddress)\n                            .safeTransfer(\n                                moduleMap.getModuleAddress(\n                                    Modules.YieldManager\n                                ),\n                                baseStablecoinAmount\n                            );\n                    }\n                }\n            }\n        }\n    }\n\n    function collectTokensFromPosition(\n        uint256 liquidityPositionId,\n        uint128 amount0Max,\n        uint128 amount1Max\n    )\n        public\n        override\n        onlyController\n        returns (\n            bool success,\n            uint256 amount0Collected,\n            uint256 amount1Collected\n        )\n    {\n        IUniswapPositionManager.CollectParams memory collectParams;\n\n        collectParams.tokenId = liquidityPositionId;\n        collectParams.recipient = address(this);\n        collectParams.amount0Max = amount0Max;\n        collectParams.amount1Max = amount1Max;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).collect(\n                collectParams\n            )\n        returns (uint256 returnedAmount0, uint256 returnedAmount1) {\n            success = true;\n            amount0Collected = returnedAmount0;\n            amount1Collected = returnedAmount1;\n        } catch {\n            success = false;\n            amount0Collected = 0;\n            amount1Collected = 0;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapTrader {\n    struct Path {\n        address tokenOut;\n        uint256 firstPoolFee;\n        address tokenInTokenOut;\n        uint256 secondPoolFee;\n        address tokenIn;\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @param fee The Uniswap pool fee\n    /// @param slippageNumerator The value divided by the slippage denominator\n    /// to calculate the allowable slippage\n    function addPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee,\n        uint24 slippageNumerator\n    ) external;\n\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param poolIndex The index of the pool for the specified token pair\n    /// @param slippageNumerator The new slippage numerator to update the pool\n    function updatePoolSlippageNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolIndex,\n        uint24 slippageNumerator\n    ) external;\n\n    /// @notice Changes which Uniswap pool to use as the default pool\n    /// @notice when swapping between token0 and token1\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\n    function updatePairPrimaryPool(\n        address tokenA,\n        address tokenB,\n        uint256 primaryPoolIndex\n    ) external;\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountIn The exact amount of the input to swap\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) external returns (bool tradeSuccess);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountOut The exact amount of the output token to receive\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactOutput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountOut\n    ) external returns (bool tradeSuccess);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountOut The exact amount of token being swapped for\n    /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\n    function getAmountInMaximum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut\n    ) external view returns (uint256 amountInMaximum);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getEstimatedTokenOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external view returns (uint256 amountOut);\n\n    function getPathFor(address tokenOut, address tokenIn)\n        external\n        view\n        returns (Path memory);\n\n    function setPathFor(\n        address tokenOut,\n        address tokenIn,\n        uint256 firstPoolFee,\n        address tokenInTokenOut,\n        uint256 secondPoolFee\n    ) external;\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of the sorted token0\n    /// @return token1 The address of the sorted token1\n    function getTokensSorted(address tokenA, address tokenB)\n        external\n        pure\n        returns (address token0, address token1);\n\n    /// @return The number of token pairs configured\n    function getTokenPairsLength() external view returns (uint256);\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return The quantity of pools configured for the specified token pair\n    function getTokenPairPoolsLength(address tokenA, address tokenB)\n        external\n        view\n        returns (uint256);\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param poolId The index of the pool in the pools mapping\n    /// @return feeNumerator The numerator that gets divided by the fee denominator\n    function getPoolFeeNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolId\n    ) external view returns (uint24 feeNumerator);\n\n    function getPoolAddress(address tokenA, address tokenB)\n        external\n        view\n        returns (address pool);\n}\n"
    },
    "contracts/interfaces/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapFactory {\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n}\n"
    },
    "contracts/interfaces/IUniswapPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapPositionManager {\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n}\n"
    },
    "contracts/interfaces/IUniswapSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapSwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n\n    function exactInput(ExactInputParams calldata params)\n        external\n        returns (uint256 amountOut);\n\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        returns (uint256 amountIn);\n}\n"
    },
    "contracts/interfaces/IUniswapIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"./IIntegration.sol\";\n\ninterface IUniswapIntegration is IIntegration {\n    /// @param uniswapIntegrationDeployerAddress The address of the Uniswap Integration Deployer contract\n    function setUniswapIntegrationDeployer(\n        address uniswapIntegrationDeployerAddress\n    ) external;\n\n    /// @param baseStablecoinAddress_ The base stablecoin token that the Uniswap Integration uses for swaps\n    function setBaseStablecoin(address baseStablecoinAddress_) external;\n\n    /// @param liquidityPositionIndex The index of the liquidity position\n    /// @return token0 The address of token0 of the liquidity position\n    /// @return token1 The address of token1 of the liquidity position\n    /// @return feeNumerator The fee of the liquidity position\n    /// @return tickLower The lower tick bound of the liquidity position\n    /// @return tickUpper The upper tick bound of the liquidity position\n    /// @return minted Boolean indicating whether the position has been minted yet\n    /// @return id The token ID of the liquidity position\n    /// @return weight The relative weight of the liquidity position\n    function getLiquidityPosition(uint256 liquidityPositionIndex)\n        external\n        view\n        returns (\n            address token0,\n            address token1,\n            uint24 feeNumerator,\n            int24 tickLower,\n            int24 tickUpper,\n            bool minted,\n            uint256 id,\n            uint256 weight\n        );\n\n    /// @return The address of the base stablecoin\n    function getBaseStablecoinAddress() external view returns (address);\n\n    /// @param tokenAddress The address of the token\n    /// @param amount The amount of the token\n    /// @return tokenValueInBaseStablecoin The value of the amount of the token converted to the base stablecoin\n    function getTokenValueInBaseStablecoin(address tokenAddress, uint256 amount)\n        external\n        view\n        returns (uint256 tokenValueInBaseStablecoin);\n\n    /// @return The number of configured liquidity positions\n    function getLiquidityPositionsCount() external view returns (uint256);\n\n    /// @param liquidityPositionIndex The index of the liquidity position\n    /// @return positionBaseStablecoinValue The value of the liquidity position converted to the base stablecoin\n    function getPositionBaseStablecoinValue(uint256 liquidityPositionIndex)\n        external\n        view\n        returns (uint256 positionBaseStablecoinValue);\n}\n"
    },
    "contracts/interfaces/IUniswapPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapPool {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n}\n"
    },
    "contracts/interfaces/IUniswapIntegrationDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapIntegrationDeployer {\n    function tokenApprovals(address token) external;\n\n    function closePositionsForWithdrawal(address tokenAddress, uint256 amount)\n        external;\n\n    function swapExcessTokensForBaseStablecoin(\n        uint256[] memory tokenDesiredAmounts\n    ) external;\n\n    function swapExcessBaseStablecoinForTokens(\n        uint256[] memory tokenDesiredAmounts\n    ) external;\n\n    function swapReservesForWithdrawalToken(address tokenAddress) external;\n\n    function harvestYield() external;\n\n    function mintLiquidityPosition(\n        address token0,\n        address token1,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external returns (bool success, uint256 liquidityPositionId);\n\n    function increaseLiquidityPosition(\n        uint256 liquidityPositionId,\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external returns (bool success);\n\n    function decreaseLiquidityPosition(\n        uint256 liquidityPositionIndex,\n        uint256 baseStablecoinValue\n    ) external returns (bool success);\n\n    function collectTokensFromPosition(\n        uint256 liquidityPositionId,\n        uint128 amount0Max,\n        uint128 amount1Max\n    )\n        external\n        returns (\n            bool success,\n            uint256 amount0Collected,\n            uint256 amount1Collected\n        );\n}\n"
    },
    "contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(\n            sqrtRatioAX96,\n            sqrtRatioBX96,\n            FixedPoint96.Q96\n        );\n        return\n            toUint128(\n                FullMath.mulDiv(\n                    amount0,\n                    intermediate,\n                    sqrtRatioBX96 - sqrtRatioAX96\n                )\n            );\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return\n            toUint128(\n                FullMath.mulDiv(\n                    amount1,\n                    FixedPoint96.Q96,\n                    sqrtRatioBX96 - sqrtRatioAX96\n                )\n            );\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                amount0\n            );\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(\n                sqrtRatioX96,\n                sqrtRatioBX96,\n                amount0\n            );\n            uint128 liquidity1 = getLiquidityForAmount1(\n                sqrtRatioAX96,\n                sqrtRatioX96,\n                amount1\n            );\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                amount1\n            );\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                liquidity,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                FixedPoint96.Q96\n            );\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                liquidity\n            );\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(\n                sqrtRatioX96,\n                sqrtRatioBX96,\n                liquidity\n            );\n            amount1 = getAmount1ForLiquidity(\n                sqrtRatioAX96,\n                sqrtRatioX96,\n                liquidity\n            );\n        } else {\n            amount1 = getAmount1ForLiquidity(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                liquidity\n            );\n        }\n    }\n}\n"
    },
    "contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO =\n        1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick)\n        internal\n        pure\n        returns (uint160 sqrtPriceX96)\n    {\n        uint256 absTick = tick < 0\n            ? uint256(-int256(tick))\n            : uint256(int256(tick));\n        require(absTick <= uint256(int256(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\n            : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0)\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0)\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0)\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0)\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0)\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0)\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0)\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0)\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0)\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0)\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0)\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0)\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0)\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0)\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0)\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0)\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0)\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0)\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0)\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160(\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\n        );\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\n        internal\n        pure\n        returns (int24 tick)\n    {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\n            \"R\"\n        );\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24(\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\n        );\n        int24 tickHi = int24(\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\n        );\n\n        tick = tickLow == tickHi\n            ? tickLow\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\n            ? tickHi\n            : tickLow;\n    }\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity >=0.7.6;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = denominator & (~denominator + 1);\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/yield-integrations/UniswapIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/IUniswapFactory.sol\";\nimport \"../interfaces/IUniswapPositionManager.sol\";\nimport \"../interfaces/IUniswapSwapRouter.sol\";\nimport \"../interfaces/IUniswapIntegration.sol\";\nimport \"../interfaces/IUniswapIntegrationDeployer.sol\";\nimport \"../interfaces/IUniswapPool.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\nimport \"../libraries/TickMath.sol\";\n\n/// @notice Integrates 0x Nodes to Uniswap v3\n/// @notice tokenA/tokenB naming implies tokens are unordered\n/// @notice token0/token1 naming implies tokens are ordered\ncontract UniswapIntegration is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IUniswapIntegration\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    struct LiquidityPosition {\n        address token0;\n        address token1;\n        uint24 feeNumerator;\n        int24 tickLower;\n        int24 tickUpper;\n        bool minted;\n        uint256 id;\n        uint256 weight;\n    }\n\n    LiquidityPosition[] private liquidityPositions;\n    mapping(address => uint256) private balances;\n    IUniswapIntegrationDeployer uniswapIntegrationDeployer;\n\n    address private factoryAddress;\n    address private positionManagerAddress;\n    address private baseStablecoinAddress;\n\n    event BaseStablecoinUpdated(address newBaseStablecoin);\n    event LiquidityPositionConfigured(\n        address token0,\n        address token1,\n        uint24 feeNumerator,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 weight\n    );\n    event liquidityPositionWeightUpdated(\n        uint256 liquidityPositionIndex,\n        uint256 weight,\n        bool triggerRebalance\n    );\n\n    /// @param controllers_ Array of controller addresses\n    /// @param moduleMap_ The address of the module map contract\n    /// @param factoryAddress_ The address of the Uniswap v3 factory\n    /// @param positionManagerAddress_ The address of the Uniswap v3 position manager\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address positionManagerAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        positionManagerAddress = positionManagerAddress_;\n    }\n\n    /// @param uniswapIntegrationDeployerAddress The address of the Uniswap Integration Deployer contract\n    function setUniswapIntegrationDeployer(\n        address uniswapIntegrationDeployerAddress\n    ) external override onlyOwner {\n        uniswapIntegrationDeployer = IUniswapIntegrationDeployer(\n            uniswapIntegrationDeployerAddress\n        );\n    }\n\n    /// @param baseStablecoinAddress_ The base stablecoin token that the Uniswap Integration uses for swaps\n    function setBaseStablecoin(address baseStablecoinAddress_)\n        external\n        override\n        onlyManager\n    {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getIsTokenAdded(baseStablecoinAddress_),\n            \"UniswapIntegration::setBaseStablecoin: Token has not been added to IntegrationMap\"\n        );\n        require(\n            baseStablecoinAddress_ != baseStablecoinAddress,\n            \"UniswapIntegration::setBaseStablecoin: Address is already the base stablecoin\"\n        );\n        baseStablecoinAddress = baseStablecoinAddress_;\n\n        emit BaseStablecoinUpdated(baseStablecoinAddress_);\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @param feeNumerator The Uniswap pool fee numerator\n    /// @param tickLower The tick of the lower liquidity bound\n    /// @param tickUpper The tick of the upper liquidity bound\n    /// @param weight The relative weight of funds to deploy to the liquidity position\n    function configureLiquidityPosition(\n        address tokenA,\n        address tokenB,\n        uint24 feeNumerator,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 weight\n    ) external onlyManager {\n        (address token0, address token1) = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        ).getTokensSorted(tokenA, tokenB);\n\n        require(\n            IUniswapTrader(moduleMap.getModuleAddress(Modules.UniswapTrader))\n                .getPoolFeeNumerator(tokenA, tokenB, 0) != 0,\n            \"UniswapIntegration::configureLiquidityPosition: A pool for this token pair has not be created in the UniswapTrader contract\"\n        );\n        require(\n            tickLower < tickUpper,\n            \"UniswapIntegration::configureLiquidityPosition: tickLower must be less than tickUpper\"\n        );\n        require(\n            address(uniswapIntegrationDeployer) != address(0),\n            \"UniswapIntegration::configureLiquidityPosition: Uniswap Integration Deployer contract address has not been set yet\"\n        );\n        require(\n            baseStablecoinAddress != address(0),\n            \"UniswapIntegration::configureLiquidityPosition: Base stablecoin address has not been set yet\"\n        );\n\n        LiquidityPosition memory liquidityPosition;\n        liquidityPosition.token0 = token0;\n        liquidityPosition.token1 = token1;\n        liquidityPosition.feeNumerator = feeNumerator;\n        liquidityPosition.tickLower = tickLower;\n        liquidityPosition.tickUpper = tickUpper;\n        liquidityPosition.minted = false;\n        liquidityPosition.id = 0;\n        liquidityPosition.weight = weight;\n\n        liquidityPositions.push(liquidityPosition);\n\n        uniswapIntegrationDeployer.tokenApprovals(token0);\n        uniswapIntegrationDeployer.tokenApprovals(token1);\n\n        emit LiquidityPositionConfigured(\n            token0,\n            token1,\n            feeNumerator,\n            tickLower,\n            tickUpper,\n            weight\n        );\n    }\n\n    /// @param liquidityPositionIndex The index of the liquidity position to update\n    /// @param weight The new weight to assign to the liquidity position\n    /// @param triggerRebalance Boolean that triggers a rebalance after weight update\n    function updateLiquidityPositionWeight(\n        uint256 liquidityPositionIndex,\n        uint256 weight,\n        bool triggerRebalance\n    ) external onlyManager {\n        require(\n            liquidityPositionIndex < liquidityPositions.length,\n            \"UniswapIntegration::updateLiquidityPositionWeight: Liquidity position does not exist\"\n        );\n        liquidityPositions[liquidityPositionIndex].weight = weight;\n        if (triggerRebalance) {\n            rebalance();\n        }\n\n        emit liquidityPositionWeightUpdated(\n            liquidityPositionIndex,\n            weight,\n            triggerRebalance\n        );\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        balances[tokenAddress] += amount;\n    }\n\n    /// @param tokenAddress The address of the token being withdrawn\n    /// @param amount The amount of the token being withdrawn\n    function withdraw(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        require(\n            amount <= balances[tokenAddress],\n            \"UniswapIntegration::withdraw: Withdraw amount is greater than balance\"\n        );\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n\n        if (amount <= token.balanceOf(address(uniswapIntegrationDeployer))) {\n            // Don't need to make any swaps or close any positions\n            _withdraw(address(token), amount);\n        } else {\n            // Need to make swaps and / or close positions\n            uint256 withdrawalAmountInBaseStablecoinValue = getTokenValueInBaseStablecoin(\n                    tokenAddress,\n                    amount\n                );\n            uint256 stablecoinReserveBalance = getBaseStablecoinReserveBalance();\n\n            if (\n                stablecoinReserveBalance > withdrawalAmountInBaseStablecoinValue\n            ) {\n                // Only need to make swaps, don't need to close any positions\n                uniswapIntegrationDeployer.swapReservesForWithdrawalToken(\n                    tokenAddress\n                );\n                if (\n                    amount <=\n                    token.balanceOf(address(uniswapIntegrationDeployer))\n                ) {\n                    _withdraw(address(token), amount);\n                } else {\n                    uniswapIntegrationDeployer.closePositionsForWithdrawal(\n                        tokenAddress,\n                        amount\n                    );\n                    if (\n                        token.balanceOf(address(uniswapIntegrationDeployer)) >=\n                        amount\n                    ) {\n                        _withdraw(address(token), amount);\n                    } else {\n                        _withdraw(\n                            address(token),\n                            token.balanceOf(address(uniswapIntegrationDeployer))\n                        );\n                    }\n                }\n            } else {\n                // Need to close positions to satisfy withdrawal amount\n                uniswapIntegrationDeployer.closePositionsForWithdrawal(\n                    tokenAddress,\n                    amount\n                );\n\n                if (\n                    token.balanceOf(address(uniswapIntegrationDeployer)) >=\n                    amount\n                ) {\n                    _withdraw(address(token), amount);\n                } else {\n                    _withdraw(\n                        address(token),\n                        token.balanceOf(address(uniswapIntegrationDeployer))\n                    );\n                }\n            }\n        }\n    }\n\n    /// @notice Wraps _deploy since it needs to be called internally\n    function deploy() public override onlyController {\n        _deploy();\n    }\n\n    /// @notice Harvest available yield for all liquidity positions\n    function harvestYield() external override onlyController {\n        uniswapIntegrationDeployer.harvestYield();\n    }\n\n    /// @notice Deploys all available tokens to liquidity positions\n    function _deploy() private {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 liquidityPositionsWeightSum = getLiquidityPositionsWeightSum();\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        uint256[] memory liquidityPositionDesiredDeployAmounts = new uint256[](\n            liquidityPositions.length\n        );\n        uint256[] memory tokenDesiredAmounts = new uint256[](tokenCount);\n\n        // Transfers all tokens from this contract to the UniswapIntegrationDeployer contract\n        transferTokensToUniswapIntegrationDeployer();\n\n        uint256 totalBaseStablecoinValue = getBaseStablecoinReserveBalance() +\n            getAllPositionsBaseStablecoinValue();\n\n        // Calculate desired token amounts\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositions.length;\n            liquidityPositionIndex++\n        ) {\n            uint256 positionDesiredBaseStablecoinValue = (totalBaseStablecoinValue *\n                    liquidityPositions[liquidityPositionIndex].weight) /\n                    liquidityPositionsWeightSum;\n            uint256 positionActualBaseStablecoinValue = getPositionBaseStablecoinValue(\n                    liquidityPositionIndex\n                );\n\n            if (\n                positionActualBaseStablecoinValue <\n                positionDesiredBaseStablecoinValue\n            ) {\n                liquidityPositionDesiredDeployAmounts[liquidityPositionIndex] =\n                    positionDesiredBaseStablecoinValue -\n                    positionActualBaseStablecoinValue;\n            }\n\n            uint256 token0Id = integrationMap.getTokenId(\n                liquidityPositions[liquidityPositionIndex].token0\n            );\n            uint256 token1Id = integrationMap.getTokenId(\n                liquidityPositions[liquidityPositionIndex].token1\n            );\n            (\n                uint256 desiredAmount0,\n                uint256 desiredAmount1\n            ) = getIncreaseLiquidityAmounts(\n                    liquidityPositionIndex,\n                    liquidityPositionDesiredDeployAmounts[\n                        liquidityPositionIndex\n                    ]\n                );\n            tokenDesiredAmounts[token0Id] += desiredAmount0;\n            tokenDesiredAmounts[token1Id] += desiredAmount1;\n        }\n\n        // Swap excess tokens for base stablecoin\n        uniswapIntegrationDeployer.swapExcessTokensForBaseStablecoin(\n            tokenDesiredAmounts\n        );\n\n        // Swap excess base stablecoin for desired token amounts\n        uniswapIntegrationDeployer.swapExcessBaseStablecoinForTokens(\n            tokenDesiredAmounts\n        );\n\n        // Increase liquidity positions with available tokens\n        increaseLiquidityPositions(liquidityPositionDesiredDeployAmounts);\n    }\n\n    /// @param tokenAddress The address of the token being transferred from the integration\n    /// @param amount The amount of the token being transferred from the integration\n    function _withdraw(address tokenAddress, uint256 amount) private {\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n        uint256 balanceBefore = token.balanceOf(\n            address(uniswapIntegrationDeployer)\n        );\n\n        IERC20MetadataUpgradeable(token).safeTransferFrom(\n            address(uniswapIntegrationDeployer),\n            moduleMap.getModuleAddress(Modules.Kernel),\n            amount\n        );\n\n        balances[tokenAddress] -= (balanceBefore -\n            token.balanceOf(address(uniswapIntegrationDeployer)));\n    }\n\n    /// @notice rebalances liquidity positions according to weights\n    function rebalance() private {\n        transferTokensToUniswapIntegrationDeployer();\n        closeExcessLiquidityPositions();\n        _deploy();\n    }\n\n    /// @notice Transfers all tokens in this contract to the Uniswap Integration Deployer contract\n    function transferTokensToUniswapIntegrationDeployer() private {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                integrationMap.getTokenAddress(tokenId)\n            );\n\n            if (token.balanceOf(address(this)) > 0) {\n                if (\n                    token.allowance(\n                        address(uniswapIntegrationDeployer),\n                        address(this)\n                    ) == 0\n                ) {\n                    uniswapIntegrationDeployer.tokenApprovals(address(token));\n                }\n\n                token.safeTransfer(\n                    address(uniswapIntegrationDeployer),\n                    token.balanceOf(address(this))\n                );\n            }\n        }\n    }\n\n    /// @param liquidityPositionDesiredDeployAmounts The desired deploy amounts in terms of the base stablecoin per liquidity position\n    function increaseLiquidityPositions(\n        uint256[] memory liquidityPositionDesiredDeployAmounts\n    ) private {\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositions.length;\n            liquidityPositionIndex++\n        ) {\n            if (liquidityPositions[liquidityPositionIndex].minted) {\n                // The liquidity position has already been minted, so increase liquidity amount\n                (\n                    uint256 amount0Desired,\n                    uint256 amount1Desired\n                ) = getIncreaseLiquidityAmounts(\n                        liquidityPositionIndex,\n                        liquidityPositionDesiredDeployAmounts[\n                            liquidityPositionIndex\n                        ]\n                    );\n\n                if (amount0Desired > 0 || amount1Desired > 0) {\n                    uniswapIntegrationDeployer.increaseLiquidityPosition(\n                        liquidityPositions[liquidityPositionIndex].id,\n                        liquidityPositions[liquidityPositionIndex].token0,\n                        liquidityPositions[liquidityPositionIndex].token1,\n                        amount0Desired,\n                        amount1Desired\n                    );\n                }\n            } else {\n                // The liquidity position has not been minted, mint it with desired amounts\n                (\n                    uint256 amount0Desired,\n                    uint256 amount1Desired\n                ) = getIncreaseLiquidityAmounts(\n                        liquidityPositionIndex,\n                        liquidityPositionDesiredDeployAmounts[\n                            liquidityPositionIndex\n                        ]\n                    );\n\n                if (amount0Desired > 0 || amount1Desired > 0) {\n                    (\n                        bool success,\n                        uint256 liquidityPositionId\n                    ) = uniswapIntegrationDeployer.mintLiquidityPosition(\n                            liquidityPositions[liquidityPositionIndex].token0,\n                            liquidityPositions[liquidityPositionIndex].token1,\n                            liquidityPositions[liquidityPositionIndex]\n                                .feeNumerator,\n                            liquidityPositions[liquidityPositionIndex]\n                                .tickLower,\n                            liquidityPositions[liquidityPositionIndex]\n                                .tickUpper,\n                            amount0Desired,\n                            amount1Desired\n                        );\n\n                    // If the mint succeeded, update the liquidity position data\n                    if (success) {\n                        liquidityPositions[liquidityPositionIndex]\n                            .minted = true;\n                        liquidityPositions[liquidityPositionIndex]\n                            .id = liquidityPositionId;\n                    }\n                }\n            }\n        }\n    }\n\n    /// @notice Partially closes liquidity positions if their value exceeds their relative weight, used for rebalancing\n    function closeExcessLiquidityPositions() private {\n        uint256 totalBaseStablecoinValue = getBaseStablecoinReserveBalance() +\n            getAllPositionsBaseStablecoinValue();\n        uint256 liquidityPositionsWeightSum = getLiquidityPositionsWeightSum();\n\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositions.length;\n            liquidityPositionIndex++\n        ) {\n            uint256 positionDesiredBaseStablecoinValue = (totalBaseStablecoinValue *\n                    liquidityPositions[liquidityPositionIndex].weight) /\n                    liquidityPositionsWeightSum;\n            uint256 positionActualBaseStablecoinValue = getPositionBaseStablecoinValue(\n                    liquidityPositionIndex\n                );\n\n            if (\n                positionActualBaseStablecoinValue >\n                positionDesiredBaseStablecoinValue\n            ) {\n                uniswapIntegrationDeployer.decreaseLiquidityPosition(\n                    liquidityPositionIndex,\n                    positionActualBaseStablecoinValue -\n                        positionDesiredBaseStablecoinValue\n                );\n            }\n        }\n    }\n\n    /// @param liquidityPositionIndex The index of the liquidity position\n    /// @return token0 The address of token0 of the liquidity position\n    /// @return token1 The address of token1 of the liquidity position\n    /// @return feeNumerator The fee of the liquidity position\n    /// @return tickLower The lower tick bound of the liquidity position\n    /// @return tickUpper The upper tick bound of the liquidity position\n    /// @return minted Boolean indicating whether the position has been minted yet\n    /// @return id The token ID of the liquidity position\n    /// @return weight The relative weight of the liquidity position\n    function getLiquidityPosition(uint256 liquidityPositionIndex)\n        public\n        view\n        override\n        returns (\n            address token0,\n            address token1,\n            uint24 feeNumerator,\n            int24 tickLower,\n            int24 tickUpper,\n            bool minted,\n            uint256 id,\n            uint256 weight\n        )\n    {\n        token0 = liquidityPositions[liquidityPositionIndex].token0;\n        token1 = liquidityPositions[liquidityPositionIndex].token1;\n        feeNumerator = liquidityPositions[liquidityPositionIndex].feeNumerator;\n        tickLower = liquidityPositions[liquidityPositionIndex].tickLower;\n        tickUpper = liquidityPositions[liquidityPositionIndex].tickUpper;\n        minted = liquidityPositions[liquidityPositionIndex].minted;\n        id = liquidityPositions[liquidityPositionIndex].id;\n        weight = liquidityPositions[liquidityPositionIndex].weight;\n    }\n\n    /// @param liquidityPositionIndex The index of the liquidity position\n    /// @return liquidityAmount The liquidity Amount of the position\n    function getLiquidityPositionLiquidityAmount(uint256 liquidityPositionIndex)\n        public\n        view\n        returns (uint128 liquidityAmount)\n    {\n        if (liquidityPositions[liquidityPositionIndex].minted) {\n            (, , , , , , , liquidityAmount, , , , ) = IUniswapPositionManager(\n                positionManagerAddress\n            ).positions(liquidityPositions[liquidityPositionIndex].id);\n        } else {\n            liquidityAmount = 0;\n        }\n    }\n\n    /// @return baseStablecoinReserveBalance The value of all stablecoins in reserves, to value of base stablecoin\n    function getBaseStablecoinReserveBalance()\n        public\n        view\n        returns (uint256 baseStablecoinReserveBalance)\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n            if (tokenAddress != getBaseStablecoinAddress()) {\n                if (\n                    IUniswapTrader(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    ).getTokenPairPoolsLength(\n                            tokenAddress,\n                            getBaseStablecoinAddress()\n                        ) > 0\n                ) {\n                    baseStablecoinReserveBalance += getTokenValueInBaseStablecoin(\n                        tokenAddress,\n                        IERC20MetadataUpgradeable(tokenAddress).balanceOf(\n                            address(uniswapIntegrationDeployer)\n                        )\n                    );\n                }\n            } else {\n                baseStablecoinReserveBalance += IERC20MetadataUpgradeable(\n                    tokenAddress\n                ).balanceOf(address(uniswapIntegrationDeployer));\n            }\n        }\n    }\n\n    /// @return liquidityPositionsWeightSum The sum of the weights of all liquidity positions\n    function getLiquidityPositionsWeightSum()\n        public\n        view\n        returns (uint256 liquidityPositionsWeightSum)\n    {\n        uint256 liquidityPositionsCount = liquidityPositions.length;\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionsCount;\n            liquidityPositionIndex++\n        ) {\n            liquidityPositionsWeightSum += liquidityPositions[\n                liquidityPositionIndex\n            ].weight;\n        }\n    }\n\n    /// @return The number of configured liquidity positions\n    function getLiquidityPositionsCount()\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return liquidityPositions.length;\n    }\n\n    /// @return baseStablecoinValue The total value of tokens in liquidity positions converted to the base stablecoin\n    function getAllPositionsBaseStablecoinValue()\n        public\n        view\n        returns (uint256 baseStablecoinValue)\n    {\n        uint256 liquidityPositionsCount = liquidityPositions.length;\n\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionsCount;\n            liquidityPositionIndex++\n        ) {\n            baseStablecoinValue += getPositionBaseStablecoinValue(\n                liquidityPositionIndex\n            );\n        }\n    }\n\n    /// @param liquidityPositionIndex The index of the liquidity position\n    /// @return positionBaseStablecoinValue The value of the liquidity position converted to the base stablecoin\n    function getPositionBaseStablecoinValue(uint256 liquidityPositionIndex)\n        public\n        view\n        override\n        returns (uint256 positionBaseStablecoinValue)\n    {\n        address token0 = liquidityPositions[liquidityPositionIndex].token0;\n        address token1 = liquidityPositions[liquidityPositionIndex].token1;\n        uint128 liquidityAmount = getLiquidityPositionLiquidityAmount(\n            liquidityPositionIndex\n        );\n\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts\n            .getAmountsForLiquidity(\n                getSqrtPriceX96(\n                    token0,\n                    token1,\n                    liquidityPositions[liquidityPositionIndex].feeNumerator\n                ),\n                TickMath.getSqrtRatioAtTick(\n                    liquidityPositions[liquidityPositionIndex].tickLower\n                ),\n                TickMath.getSqrtRatioAtTick(\n                    liquidityPositions[liquidityPositionIndex].tickUpper\n                ),\n                liquidityAmount\n            );\n\n        positionBaseStablecoinValue =\n            getTokenValueInBaseStablecoin(token0, amount0) +\n            getTokenValueInBaseStablecoin(token1, amount1);\n    }\n\n    /// @param tokenAddress The address of the token\n    /// @param amount The amount of the token\n    /// @return tokenValueInBaseStablecoin The value of the amount of the token converted to the base stablecoin\n    function getTokenValueInBaseStablecoin(address tokenAddress, uint256 amount)\n        public\n        view\n        override\n        returns (uint256 tokenValueInBaseStablecoin)\n    {\n        if (tokenAddress != getBaseStablecoinAddress()) {\n            tokenValueInBaseStablecoin = IUniswapTrader(\n                moduleMap.getModuleAddress(Modules.UniswapTrader)\n            ).getEstimatedTokenOut(\n                    tokenAddress,\n                    getBaseStablecoinAddress(),\n                    amount\n                );\n        } else {\n            tokenValueInBaseStablecoin = amount;\n        }\n    }\n\n    /// @param tokenAddress The address of the token\n    /// @param amount The amount of the base stablecoin token\n    /// @return baseStablecoinValueInToken The value of the base stablecoin amount in terms of the specified token\n    function getBaseStablecoinValueInToken(address tokenAddress, uint256 amount)\n        public\n        view\n        returns (uint256 baseStablecoinValueInToken)\n    {\n        require(\n            baseStablecoinAddress != address(0),\n            \"UniswapIntegration::getBaseStablecoinValueInToken: Base stablecoin has not been set\"\n        );\n\n        if (tokenAddress != baseStablecoinAddress) {\n            baseStablecoinValueInToken = IUniswapTrader(\n                moduleMap.getModuleAddress(Modules.UniswapTrader)\n            ).getEstimatedTokenOut(baseStablecoinAddress, tokenAddress, amount);\n        } else {\n            baseStablecoinValueInToken = amount;\n        }\n    }\n\n    /// @return The address of the base stablecoin\n    function getBaseStablecoinAddress() public view override returns (address) {\n        require(\n            baseStablecoinAddress != address(0),\n            \"UniswapIntegration::getBaseStablecoinAddress: Base stablecoin has not been added yet\"\n        );\n        return baseStablecoinAddress;\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[tokenAddress];\n    }\n\n    /// @param liquidityPositionIndex The index of the liquidity position\n    /// @param desiredBaseStablecoinValue The desired amount to increase liquidity position value by\n    /// in terms of base stablecoin value\n    /// @return token0Amount The amount of token0 to add to liquidity position\n    /// @return token1Amount The amount of token1 to add to liquidity position\n    function getIncreaseLiquidityAmounts(\n        uint256 liquidityPositionIndex,\n        uint256 desiredBaseStablecoinValue\n    ) public view returns (uint256 token0Amount, uint256 token1Amount) {\n        address token0 = liquidityPositions[liquidityPositionIndex].token0;\n        address token1 = liquidityPositions[liquidityPositionIndex].token1;\n\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(\n            liquidityPositions[liquidityPositionIndex].tickLower\n        );\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(\n            liquidityPositions[liquidityPositionIndex].tickUpper\n        );\n\n        uint128 arbitraryLiquidityAmount = LiquidityAmounts\n            .getLiquidityForAmount0(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                getBaseStablecoinValueInToken(\n                    token0,\n                    desiredBaseStablecoinValue\n                )\n            );\n\n        // Arbitrary amounts are used to get the required ratio of token0 and token1 to add liquidity\n        (uint256 arbitraryAmount0, uint256 arbitraryAmount1) = LiquidityAmounts\n            .getAmountsForLiquidity(\n                getSqrtPriceX96(\n                    token0,\n                    token1,\n                    liquidityPositions[liquidityPositionIndex].feeNumerator\n                ),\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                arbitraryLiquidityAmount\n            );\n\n        uint256 arbitraryBaseStablecoinValue = getTokenValueInBaseStablecoin(\n            token0,\n            arbitraryAmount0\n        ) + getTokenValueInBaseStablecoin(token1, arbitraryAmount1);\n        if (arbitraryBaseStablecoinValue > 0) {\n            token0Amount =\n                (arbitraryAmount0 * desiredBaseStablecoinValue) /\n                arbitraryBaseStablecoinValue;\n            token1Amount =\n                (arbitraryAmount1 * desiredBaseStablecoinValue) /\n                arbitraryBaseStablecoinValue;\n        } else {\n            token0Amount = 0;\n            token1Amount = 0;\n        }\n    }\n\n    /// @param token0 The address of token0 of the pool\n    /// @param token1 The address of token1 of the pool\n    /// @param feeNumerator The fee numerator of the pool\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    function getSqrtPriceX96(\n        address token0,\n        address token1,\n        uint24 feeNumerator\n    ) public view returns (uint160 sqrtPriceX96) {\n        (sqrtPriceX96, , , , , , ) = IUniswapPool(\n            IUniswapFactory(factoryAddress).getPool(\n                token0,\n                token1,\n                feeNumerator\n            )\n        ).slot0();\n    }\n}\n"
    },
    "contracts/yield-integrations/DynamicRangeOrdersIntegrationDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/IUniswapFactory.sol\";\nimport \"../interfaces/IUniswapPositionManager.sol\";\nimport \"../interfaces/IUniswapSwapRouter.sol\";\nimport \"../interfaces/IUniswapPool.sol\";\nimport \"../interfaces/IDynamicRangeOrdersIntegrationDeployer.sol\";\nimport \"../interfaces/IDynamicRangeOrdersIntegration.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\nimport \"../libraries/TickMath.sol\";\n\n/// @notice Integrates 0x Nodes to Uniswap v3\n/// @notice tokenA/tokenB naming implies tokens are unordered\n/// @notice token0/token1 naming implies tokens are ordered\ncontract DynamicRangeOrdersIntegrationDeployer is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IDynamicRangeOrdersIntegrationDeployer\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private factoryAddress;\n    address private positionManagerAddress;\n    IDynamicRangeOrdersIntegration private dynamicRangeOrdersIntegration;\n\n    /// @param controllers_ Array of controller addresses\n    /// @param moduleMap_ The address of the module map contract\n    /// @param factoryAddress_ The address of the Uniswap v3 factory\n    /// @param positionManagerAddress_ The address of the Uniswap v3 position manager\n    /// @param dynamicRangeOrdersIntegrationAddress_ The address of the Uniswap Integration contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address positionManagerAddress_,\n        address dynamicRangeOrdersIntegrationAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        positionManagerAddress = positionManagerAddress_;\n        dynamicRangeOrdersIntegration = IDynamicRangeOrdersIntegration(\n            dynamicRangeOrdersIntegrationAddress_\n        );\n    }\n\n    /// @param token The address of the token to approve transfers for\n    function tokenApprovals(address token) external override onlyController {\n        if (\n            IERC20MetadataUpgradeable(token).allowance(\n                address(this),\n                address(dynamicRangeOrdersIntegration)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(token).safeApprove(\n                address(dynamicRangeOrdersIntegration),\n                type(uint256).max\n            );\n        }\n\n        if (\n            IERC20MetadataUpgradeable(token).allowance(\n                address(this),\n                positionManagerAddress\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(token).safeApprove(\n                positionManagerAddress,\n                type(uint256).max\n            );\n        }\n    }\n\n    /// @param tokenDesiredAmounts Array of the desired amounts of each token\n    function swapExcessTokensForBaseStablecoin(\n        uint256[] memory tokenDesiredAmounts\n    ) public override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IUniswapTrader uniswapTrader = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        );\n        address baseStablecoinAddress = dynamicRangeOrdersIntegration\n            .getBaseStablecoinAddress();\n\n        for (uint256 tokenId; tokenId < tokenDesiredAmounts.length; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n\n            if (tokenAddress != baseStablecoinAddress) {\n                IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                    tokenAddress\n                );\n                uint256 tokenBalance = token.balanceOf(address(this));\n\n                if (tokenBalance > tokenDesiredAmounts[tokenId]) {\n                    IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\n                        address(uniswapTrader),\n                        tokenBalance - tokenDesiredAmounts[tokenId]\n                    );\n                    uniswapTrader.swapExactInput(\n                        tokenAddress,\n                        baseStablecoinAddress,\n                        address(this),\n                        tokenBalance - tokenDesiredAmounts[tokenId]\n                    );\n                }\n            }\n        }\n    }\n\n    /// @param tokenDesiredAmounts Array of the desired amounts of each token\n    function swapExcessBaseStablecoinForTokens(\n        uint256[] memory tokenDesiredAmounts\n    ) external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IUniswapTrader uniswapTrader = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        );\n        address baseStablecoinAddress = dynamicRangeOrdersIntegration\n            .getBaseStablecoinAddress();\n\n        for (uint256 tokenId; tokenId < tokenDesiredAmounts.length; tokenId++) {\n            if (\n                integrationMap.getTokenAddress(tokenId) != baseStablecoinAddress\n            ) {\n                address tokenAddress = integrationMap.getTokenAddress(tokenId);\n                IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                    tokenAddress\n                );\n                uint256 tokenBalance = token.balanceOf(address(this));\n\n                if (tokenBalance < tokenDesiredAmounts[tokenId]) {\n                    uint256 baseStablecoinAmount = dynamicRangeOrdersIntegration\n                        .getTokenValueInBaseStablecoin(\n                            tokenAddress,\n                            tokenDesiredAmounts[tokenId] - tokenBalance\n                        );\n                    if (\n                        baseStablecoinAmount >\n                        IERC20MetadataUpgradeable(baseStablecoinAddress)\n                            .balanceOf(address(this))\n                    ) {\n                        baseStablecoinAmount = IERC20MetadataUpgradeable(\n                            baseStablecoinAddress\n                        ).balanceOf(address(this));\n                    }\n\n                    IERC20MetadataUpgradeable(baseStablecoinAddress)\n                        .safeTransfer(\n                            address(uniswapTrader),\n                            baseStablecoinAmount\n                        );\n                    uniswapTrader.swapExactInput(\n                        baseStablecoinAddress,\n                        tokenAddress,\n                        address(this),\n                        baseStablecoinAmount\n                    );\n                }\n            }\n        }\n    }\n\n    /// @param token0 The address of token0 of the liquidity position\n    /// @param token1 The address of token1 of the liquidity position\n    /// @param fee The liquidity position pool fee\n    /// @param tickLower The liquidity position lower tick\n    /// @param tickUpper The liquidity position upper tick\n    /// @param amount0Desired The desired amount of token0 to mint into the position\n    /// @param amount1Desired The desired amount of token1 to mint into the position\n    /// @return success Bool indicating whether the mint succeeded\n    /// @return liquidityPositionId The token ID of the minted liquidity position\n    function mintLiquidityPosition(\n        address token0,\n        address token1,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    )\n        external\n        override\n        onlyController\n        returns (bool success, uint256 liquidityPositionId)\n    {\n        if (\n            amount0Desired >\n            IERC20MetadataUpgradeable(token0).balanceOf(address(this))\n        ) {\n            amount0Desired = IERC20MetadataUpgradeable(token0).balanceOf(\n                address(this)\n            );\n        }\n\n        if (\n            amount1Desired >\n            IERC20MetadataUpgradeable(token1).balanceOf(address(this))\n        ) {\n            amount1Desired = IERC20MetadataUpgradeable(token1).balanceOf(\n                address(this)\n            );\n        }\n\n        IUniswapPositionManager.MintParams memory mintParams;\n\n        mintParams.token0 = token0;\n        mintParams.token1 = token1;\n        mintParams.fee = fee;\n        mintParams.tickLower = tickLower;\n        mintParams.tickUpper = tickUpper;\n        mintParams.amount0Desired = amount0Desired;\n        mintParams.amount1Desired = amount1Desired;\n        mintParams.amount0Min = 0;\n        mintParams.amount1Min = 0;\n        mintParams.recipient = address(this);\n        mintParams.deadline = block.timestamp;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).mint(mintParams)\n        returns (\n            uint256 returnedLiquidityPositionId,\n            uint128,\n            uint256,\n            uint256\n        ) {\n            success = true;\n            liquidityPositionId = returnedLiquidityPositionId;\n        } catch {\n            success = false;\n            liquidityPositionId = 0;\n        }\n    }\n\n    /// @param liquidityPositionId The token ID of the liquidity position\n    /// @param token0 The address of token0 of the liquidity position\n    /// @param token1 The address of token1 of the liquidity position\n    /// @param amount0Desired The desired amount of token0 to add to the liquidity position\n    /// @param amount1Desired The desired amount of token1 to add to the liquidity position\n    /// @return success Bool indicating whether the increase succeeded\n    function increaseLiquidityPosition(\n        uint256 liquidityPositionId,\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external override onlyController returns (bool success) {\n        if (\n            amount0Desired >\n            IERC20MetadataUpgradeable(token0).balanceOf(address(this))\n        ) {\n            amount0Desired = IERC20MetadataUpgradeable(token0).balanceOf(\n                address(this)\n            );\n        }\n        if (\n            amount1Desired >\n            IERC20MetadataUpgradeable(token1).balanceOf(address(this))\n        ) {\n            amount1Desired = IERC20MetadataUpgradeable(token1).balanceOf(\n                address(this)\n            );\n        }\n\n        IUniswapPositionManager.IncreaseLiquidityParams\n            memory increaseLiquidityParams;\n\n        increaseLiquidityParams.tokenId = liquidityPositionId;\n        increaseLiquidityParams.amount0Desired = amount0Desired;\n        increaseLiquidityParams.amount1Desired = amount1Desired;\n        increaseLiquidityParams.amount0Min = 0;\n        increaseLiquidityParams.amount1Min = 0;\n        increaseLiquidityParams.deadline = block.timestamp;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).increaseLiquidity(\n                increaseLiquidityParams\n            )\n        {\n            success = true;\n        } catch {\n            success = false;\n        }\n    }\n\n    /// @notice This function closes liquidity positions until the specified amount of the\n    /// @notice token has been obtained, or until all liquidity positions have been closed\n    /// @param tokenAddress The address of the token being withdrawn\n    /// @param amount The amount of the token being withdrawn needed\n    function closePositionsForWithdrawal(\n        bytes32[] memory liquidityPositionKeys,\n        address tokenAddress,\n        uint256 amount\n    ) public override onlyController {\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n        bool doneClosingPositions;\n        uint256 liquidityPositionIndex;\n        uint256 withdrawalAmountInBaseStablecoinValue = dynamicRangeOrdersIntegration\n                .getTokenValueInBaseStablecoin(tokenAddress, amount);\n\n        // Close liquidity positions until enough of token has been withdrawn\n        while (!doneClosingPositions) {\n            if (\n                dynamicRangeOrdersIntegration.getPositionBaseStablecoinValue(\n                    liquidityPositionKeys[liquidityPositionIndex]\n                ) +\n                    dynamicRangeOrdersIntegration.getTokenValueInBaseStablecoin(\n                            tokenAddress,\n                            token.balanceOf(address(this))\n                        ) <=\n                withdrawalAmountInBaseStablecoinValue\n            ) {\n                // Need to fully close the position\n                decreaseLiquidityPosition(\n                    liquidityPositionKeys[liquidityPositionIndex],\n                    dynamicRangeOrdersIntegration\n                        .getPositionBaseStablecoinValue(\n                            liquidityPositionKeys[liquidityPositionIndex]\n                        )\n                );\n                swapReservesForWithdrawalToken(tokenAddress);\n                if (token.balanceOf(address(this)) >= amount) {\n                    doneClosingPositions = true;\n                }\n            } else {\n                // Partially close position for 2% more of value needed to account for slippage\n                decreaseLiquidityPosition(\n                    liquidityPositionKeys[liquidityPositionIndex],\n                    (102 *\n                        (withdrawalAmountInBaseStablecoinValue -\n                            dynamicRangeOrdersIntegration\n                                .getTokenValueInBaseStablecoin(\n                                    tokenAddress,\n                                    token.balanceOf(address(this))\n                                ))) / 100\n                );\n                swapReservesForWithdrawalToken(tokenAddress);\n\n                // Check if the new token balance is enough for withdrawal\n                if (token.balanceOf(address(this)) >= amount) {\n                    // Token balance is enough for withdrawal, done closing positions\n                    doneClosingPositions = true;\n                } else {\n                    // Partial position closure was not enough, fully close the position\n                    decreaseLiquidityPosition(\n                        liquidityPositionKeys[liquidityPositionIndex],\n                        dynamicRangeOrdersIntegration\n                            .getPositionBaseStablecoinValue(\n                                liquidityPositionKeys[liquidityPositionIndex]\n                            )\n                    );\n                    swapReservesForWithdrawalToken(tokenAddress);\n                    if (token.balanceOf(address(this)) >= amount) {\n                        doneClosingPositions = true;\n                    }\n                }\n            }\n\n            // Check if the final liquidity position has been reached\n            if (\n                liquidityPositionIndex ==\n                dynamicRangeOrdersIntegration.getLiquidityPositionsCount() - 1\n            ) {\n                doneClosingPositions = true;\n            }\n\n            // Increment to the next liquidity position\n            liquidityPositionIndex++;\n        }\n    }\n\n    /// @param tokenAddress The address of the token being withdrawn\n    function swapReservesForWithdrawalToken(address tokenAddress)\n        public\n        override\n        onlyController\n    {\n        uint256 tokenCount = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        ).getTokenAddressesLength();\n        uint256[] memory tokenDesiredAmounts = new uint256[](tokenCount);\n        swapExcessTokensForBaseStablecoin(tokenDesiredAmounts);\n        IERC20MetadataUpgradeable baseStablecoin = IERC20MetadataUpgradeable(\n            dynamicRangeOrdersIntegration.getBaseStablecoinAddress()\n        );\n        if (tokenAddress != address(baseStablecoin)) {\n            baseStablecoin.safeTransfer(\n                moduleMap.getModuleAddress(Modules.UniswapTrader),\n                baseStablecoin.balanceOf(address(this))\n            );\n            IUniswapTrader(moduleMap.getModuleAddress(Modules.UniswapTrader))\n                .swapExactInput(\n                    address(baseStablecoin),\n                    tokenAddress,\n                    address(this),\n                    baseStablecoin.balanceOf(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    )\n                );\n        }\n    }\n\n    function decreaseLiquidityPosition(\n        bytes32 liquidityPositionKey,\n        uint256 baseStablecoinValue\n    ) public override onlyController returns (bool success) {\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            uint256 liquidityPositionId,\n\n        ) = dynamicRangeOrdersIntegration.getLiquidityPosition(\n                liquidityPositionKey\n            );\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            uint128 currentLiquidity,\n            ,\n            ,\n            uint128 tokensOwed0Before,\n            uint128 tokensOwed1Before\n        ) = IUniswapPositionManager(positionManagerAddress).positions(\n                liquidityPositionId\n            );\n\n        uint128 reduceLiquidityAmount = uint128(\n            ((baseStablecoinValue) * currentLiquidity) /\n                dynamicRangeOrdersIntegration.getPositionBaseStablecoinValue(\n                    liquidityPositionKey\n                )\n        );\n\n        if (reduceLiquidityAmount > currentLiquidity) {\n            reduceLiquidityAmount = currentLiquidity;\n        }\n\n        IUniswapPositionManager.DecreaseLiquidityParams\n            memory decreaseLiquidityParams;\n\n        decreaseLiquidityParams.tokenId = liquidityPositionId;\n        decreaseLiquidityParams.liquidity = reduceLiquidityAmount;\n        decreaseLiquidityParams.amount0Min = 0;\n        decreaseLiquidityParams.amount1Min = 0;\n        decreaseLiquidityParams.deadline = block.timestamp;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).decreaseLiquidity(\n                decreaseLiquidityParams\n            )\n        {\n            success = true;\n        } catch {\n            success = false;\n        }\n\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            uint128 tokensOwed0After,\n            uint128 tokensOwed1After\n        ) = IUniswapPositionManager(positionManagerAddress).positions(\n                liquidityPositionId\n            );\n\n        // Collect tokens from decreased position while leaving previous yield for future collection\n        collectTokensFromPosition(\n            liquidityPositionId,\n            tokensOwed0After - tokensOwed0Before,\n            tokensOwed1After - tokensOwed1Before\n        );\n    }\n\n    // Harvests all available yield and transfers to the YieldManager\n    function harvestYield(bytes32[] memory liquidityPositionKeys)\n        external\n        override\n        onlyController\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        address baseStablecoinAddress = dynamicRangeOrdersIntegration\n            .getBaseStablecoinAddress();\n\n        uint256[] memory tokensHarvestedYield = new uint256[](tokenCount);\n\n        uint256 baseStablecoinBalanceBefore = IERC20MetadataUpgradeable(\n            baseStablecoinAddress\n        ).balanceOf(address(this));\n\n        // Collect all available yield for liquidity positions\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex <\n            dynamicRangeOrdersIntegration.getLiquidityPositionsCount();\n            liquidityPositionIndex++\n        ) {\n            (\n                address token0,\n                address token1,\n                ,\n                ,\n                ,\n                ,\n                uint256 liquidityPositionId,\n\n            ) = dynamicRangeOrdersIntegration.getLiquidityPosition(\n                    liquidityPositionKeys[liquidityPositionIndex]\n                );\n\n            uint256 token0Id = integrationMap.getTokenId(token0);\n            uint256 token1Id = integrationMap.getTokenId(token1);\n\n            (\n                bool success,\n                uint256 amount0,\n                uint256 amount1\n            ) = collectTokensFromPosition(liquidityPositionId, 2**127, 2**127);\n\n            if (success) {\n                tokensHarvestedYield[token0Id] += amount0;\n                tokensHarvestedYield[token1Id] += amount1;\n            }\n        }\n\n        uint256 totalBalanceBaseStablecoinValue;\n        uint256[] memory tokenBalancesBaseStablecoinValue = new uint256[](\n            tokenCount\n        );\n\n        // Swap harvested yield for base stablecoin\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            if (tokensHarvestedYield[tokenId] > 0) {\n                address tokenAddress = integrationMap.getTokenAddress(tokenId);\n\n                // Check that the token is the baseStablecoin, or a pool has been setup between the token and the base stablecoin\n                if (\n                    tokenAddress == baseStablecoinAddress ||\n                    IUniswapTrader(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    ).getTokenPairPoolsLength(\n                            tokenAddress,\n                            baseStablecoinAddress\n                        ) >\n                    0\n                ) {\n                    uint256 tokenBalanceBaseStablecoinValue = dynamicRangeOrdersIntegration\n                            .getTokenValueInBaseStablecoin(\n                                tokenAddress,\n                                dynamicRangeOrdersIntegration.getBalance(\n                                    tokenAddress\n                                )\n                            );\n                    tokenBalancesBaseStablecoinValue[\n                        tokenId\n                    ] = tokenBalanceBaseStablecoinValue;\n                    totalBalanceBaseStablecoinValue += tokenBalanceBaseStablecoinValue;\n\n                    if (tokenAddress != baseStablecoinAddress) {\n                        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\n                            moduleMap.getModuleAddress(Modules.UniswapTrader),\n                            tokensHarvestedYield[tokenId]\n                        );\n                        IUniswapTrader(\n                            moduleMap.getModuleAddress(Modules.UniswapTrader)\n                        ).swapExactInput(\n                                tokenAddress,\n                                baseStablecoinAddress,\n                                address(this),\n                                tokensHarvestedYield[tokenId]\n                            );\n                    }\n                }\n            }\n        }\n\n        uint256 baseStablecoinHarvested = IERC20MetadataUpgradeable(\n            baseStablecoinAddress\n        ).balanceOf(address(this)) - baseStablecoinBalanceBefore;\n\n        // Swap base stablecoin for yield tokens and transfer to YieldManager in proportion\n        // to token deposit values into this integration\n        if (\n            baseStablecoinHarvested > 0 && totalBalanceBaseStablecoinValue > 0\n        ) {\n            for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n                address tokenAddress = integrationMap.getTokenAddress(tokenId);\n                uint256 baseStablecoinAmount = (baseStablecoinHarvested *\n                    tokenBalancesBaseStablecoinValue[tokenId]) /\n                    totalBalanceBaseStablecoinValue;\n\n                if (baseStablecoinAmount > 0) {\n                    if (tokenAddress != baseStablecoinAddress) {\n                        IERC20MetadataUpgradeable(baseStablecoinAddress)\n                            .safeTransfer(\n                                moduleMap.getModuleAddress(\n                                    Modules.UniswapTrader\n                                ),\n                                baseStablecoinAmount\n                            );\n\n                        IUniswapTrader(\n                            moduleMap.getModuleAddress(Modules.UniswapTrader)\n                        ).swapExactInput(\n                                baseStablecoinAddress,\n                                tokenAddress,\n                                moduleMap.getModuleAddress(\n                                    Modules.YieldManager\n                                ),\n                                baseStablecoinAmount\n                            );\n                    } else {\n                        IERC20MetadataUpgradeable(baseStablecoinAddress)\n                            .safeTransfer(\n                                moduleMap.getModuleAddress(\n                                    Modules.YieldManager\n                                ),\n                                baseStablecoinAmount\n                            );\n                    }\n                }\n            }\n        }\n    }\n\n    function collectTokensFromPosition(\n        uint256 liquidityPositionId,\n        uint128 amount0Max,\n        uint128 amount1Max\n    )\n        public\n        override\n        onlyController\n        returns (\n            bool success,\n            uint256 amount0Collected,\n            uint256 amount1Collected\n        )\n    {\n        IUniswapPositionManager.CollectParams memory collectParams;\n\n        collectParams.tokenId = liquidityPositionId;\n        collectParams.recipient = address(this);\n        collectParams.amount0Max = amount0Max;\n        collectParams.amount1Max = amount1Max;\n\n        try\n            IUniswapPositionManager(positionManagerAddress).collect(\n                collectParams\n            )\n        returns (uint256 returnedAmount0, uint256 returnedAmount1) {\n            success = true;\n            amount0Collected = returnedAmount0;\n            amount1Collected = returnedAmount1;\n        } catch {\n            success = false;\n            amount0Collected = 0;\n            amount1Collected = 0;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDynamicRangeOrdersIntegrationDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IDynamicRangeOrdersIntegrationDeployer {\n    function tokenApprovals(address token) external;\n\n    function closePositionsForWithdrawal(\n        bytes32[] memory liquidityPositionKeys,\n        address tokenAddress,\n        uint256 amount\n    ) external;\n\n    function swapExcessTokensForBaseStablecoin(\n        uint256[] memory tokenDesiredAmounts\n    ) external;\n\n    function swapExcessBaseStablecoinForTokens(\n        uint256[] memory tokenDesiredAmounts\n    ) external;\n\n    function swapReservesForWithdrawalToken(address tokenAddress) external;\n\n    function harvestYield(bytes32[] memory liquidityPositionKeys) external;\n\n    function mintLiquidityPosition(\n        address token0,\n        address token1,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external returns (bool success, uint256 liquidityPositionId);\n\n    function increaseLiquidityPosition(\n        uint256 liquidityPositionId,\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external returns (bool success);\n\n    function decreaseLiquidityPosition(\n        bytes32 liquidityPositionIndex,\n        uint256 baseStablecoinValue\n    ) external returns (bool success);\n\n    function collectTokensFromPosition(\n        uint256 liquidityPositionId,\n        uint128 amount0Max,\n        uint128 amount1Max\n    )\n        external\n        returns (\n            bool success,\n            uint256 amount0Collected,\n            uint256 amount1Collected\n        );\n}\n"
    },
    "contracts/interfaces/IDynamicRangeOrdersIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IIntegration.sol\";\n\ninterface IDynamicRangeOrdersIntegration is IIntegration {\n    /// @param dynamicRangeOrdersIntegrationDeployerAddress The address of the Uniswap Integration Deployer contract\n    function setDynamicRangeOrdersIntegrationDeployer(\n        address dynamicRangeOrdersIntegrationDeployerAddress\n    ) external;\n\n    /// @param baseStablecoinAddress_ The base stablecoin token that the Uniswap Integration uses for swaps\n    function setBaseStablecoin(address baseStablecoinAddress_) external;\n\n    /// @param liquidityPositionKey The key of the liquidity position\n    /// @return token0 The address of token0 of the liquidity position\n    /// @return token1 The address of token1 of the liquidity position\n    /// @return feeNumerator The fee of the liquidity position\n    /// @return tickLower The lower tick bound of the liquidity position\n    /// @return tickUpper The upper tick bound of the liquidity position\n    /// @return minted Boolean indicating whether the position has been minted yet\n    /// @return id The token ID of the liquidity position\n    /// @return weight The relative weight of the liquidity position\n    function getLiquidityPosition(bytes32 liquidityPositionKey)\n        external\n        view\n        returns (\n            address token0,\n            address token1,\n            uint24 feeNumerator,\n            int24 tickLower,\n            int24 tickUpper,\n            bool minted,\n            uint256 id,\n            uint256 weight\n        );\n\n    /// @return The address of the base stablecoin\n    function getBaseStablecoinAddress() external view returns (address);\n\n    /// @param tokenAddress The address of the token\n    /// @param amount The amount of the token\n    /// @return tokenValueInBaseStablecoin The value of the amount of the token converted to the base stablecoin\n    function getTokenValueInBaseStablecoin(address tokenAddress, uint256 amount)\n        external\n        view\n        returns (uint256 tokenValueInBaseStablecoin);\n\n    /// @return The number of configured liquidity positions\n    function getLiquidityPositionsCount() external view returns (uint256);\n\n    /// @param liquidityPositionKey The key of the liquidity position\n    /// @return positionBaseStablecoinValue The value of the liquidity position converted to the base stablecoin\n    function getPositionBaseStablecoinValue(bytes32 liquidityPositionKey)\n        external\n        view\n        returns (uint256 positionBaseStablecoinValue);\n}\n"
    },
    "contracts/yield-integrations/DynamicRangeOrdersIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/IUniswapFactory.sol\";\nimport \"../interfaces/IUniswapPositionManager.sol\";\nimport \"../interfaces/IUniswapSwapRouter.sol\";\nimport \"../interfaces/IDynamicRangeOrdersIntegration.sol\";\nimport \"../interfaces/IDynamicRangeOrdersIntegrationDeployer.sol\";\nimport \"../interfaces/IUniswapPool.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\nimport \"../libraries/TickMath.sol\";\n\n/// @notice Integrates 0x Nodes to Uniswap v3\n/// @notice tokenA/tokenB naming implies tokens are unordered\n/// @notice token0/token1 naming implies tokens are ordered\ncontract DynamicRangeOrdersIntegration is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IDynamicRangeOrdersIntegration\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    struct LiquidityPosition {\n        address token0;\n        address token1;\n        uint24 feeNumerator;\n        int24 tickLower;\n        int24 tickUpper;\n        bool minted;\n        uint256 id;\n        uint256 weight;\n        address pool;\n    }\n\n    mapping(bytes32 => LiquidityPosition) public liquidityPositions;\n    bytes32[] private liquidityPositionKeys;\n    mapping(bytes32 => uint256) liquidityPositionKeyIndexes;\n    mapping(bytes32 => uint256) lastRerangeTimestamp;\n    mapping(address => uint256) private balances;\n    IDynamicRangeOrdersIntegrationDeployer dynamicRangeOrdersIntegrationDeployer;\n\n    address private factoryAddress;\n    address private positionManagerAddress;\n    address private baseStablecoinAddress;\n\n    /// @param controllers_ Array of controller addresses\n    /// @param moduleMap_ The address of the module map contract\n    /// @param factoryAddress_ The address of the Uniswap v3 factory\n    /// @param positionManagerAddress_ The address of the Uniswap v3 position manager\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address positionManagerAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        positionManagerAddress = positionManagerAddress_;\n    }\n\n    /// @param dynamicRangeOrdersIntegrationDeployerAddress The address of the Uniswap Integration Deployer contract\n    function setDynamicRangeOrdersIntegrationDeployer(\n        address dynamicRangeOrdersIntegrationDeployerAddress\n    ) external override onlyOwner {\n        dynamicRangeOrdersIntegrationDeployer = IDynamicRangeOrdersIntegrationDeployer(\n            dynamicRangeOrdersIntegrationDeployerAddress\n        );\n    }\n\n    /// @param baseStablecoinAddress_ The base stablecoin token that the Uniswap Integration uses for swaps\n    function setBaseStablecoin(address baseStablecoinAddress_)\n        external\n        override\n        onlyManager\n    {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getIsTokenAdded(baseStablecoinAddress_),\n            \"DROIntegration::setBaseStablecoin: Token has not been added to IntegrationMap\"\n        );\n        require(\n            baseStablecoinAddress_ != baseStablecoinAddress,\n            \"DROIntegration::setBaseStablecoin: Address is already the base stablecoin\"\n        );\n        baseStablecoinAddress = baseStablecoinAddress_;\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @param feeNumerator The Uniswap pool fee numerator\n    /// @param tickLower The tick of the lower liquidity bound\n    /// @param tickUpper The tick of the upper liquidity bound\n    /// @param weight The relative weight of funds to deploy to the liquidity position\n    function configureLiquidityPosition(\n        address tokenA,\n        address tokenB,\n        uint24 feeNumerator,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 weight\n    ) external onlyController {\n        (address token0, address token1) = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        ).getTokensSorted(tokenA, tokenB);\n\n        require(\n            IUniswapTrader(moduleMap.getModuleAddress(Modules.UniswapTrader))\n                .getPoolFeeNumerator(tokenA, tokenB, 0) != 0,\n            \"DROIntegration::configureLiquidityPosition: A pool for this token pair has not be created in the UniswapTrader contract\"\n        );\n        require(\n            address(dynamicRangeOrdersIntegrationDeployer) != address(0),\n            \"DROIntegration::configureLiquidityPosition: DRO Integration Deployer contract address has not been set yet\"\n        );\n        require(\n            baseStablecoinAddress != address(0),\n            \"DROIntegration::configureLiquidityPosition: Base stablecoin address has not been set yet\"\n        );\n\n        LiquidityPosition memory liquidityPosition;\n        liquidityPosition.token0 = token0;\n        liquidityPosition.token1 = token1;\n        liquidityPosition.feeNumerator = feeNumerator;\n        liquidityPosition.tickLower = tickLower;\n        liquidityPosition.tickUpper = tickUpper;\n        liquidityPosition.weight = weight;\n        liquidityPosition.pool = IUniswapTrader(\n            moduleMap.getModuleAddress(Modules.UniswapTrader)\n        ).getPoolAddress(token0, token1);\n\n        bytes32 liquidityPositionKey = keccak256(\n            abi.encodePacked(token0, token1, feeNumerator)\n        );\n\n        if (liquidityPositions[liquidityPositionKey].feeNumerator == 0) {\n            liquidityPositionKeys.push(liquidityPositionKey);\n        }\n\n        liquidityPositions[liquidityPositionKey] = liquidityPosition;\n    }\n\n    /// @param liquidityPositionKey The key of the liquidity position to update\n    /// @param weight The new weight to assign to the liquidity position\n    /// @param triggerRebalance Boolean that triggers a rebalance after weight update\n    function updateLiquidityPositionWeight(\n        bytes32 liquidityPositionKey,\n        uint256 weight,\n        bool triggerRebalance\n    ) external onlyManager {\n        require(\n            liquidityPositions[liquidityPositionKey].feeNumerator != 0,\n            \"DROIntegration::updateLiquidityPositionWeight: Liquidity position does not exist\"\n        );\n        liquidityPositions[liquidityPositionKey].weight = weight;\n        if (triggerRebalance) {\n            rebalance();\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        balances[tokenAddress] += amount;\n    }\n\n    /// @param tokenAddress The address of the token being withdrawn\n    /// @param amount The amount of the token being withdrawn\n    function withdraw(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        require(\n            amount <= balances[tokenAddress],\n            \"DROIntegration::withdraw: Withdraw amount is greater than balance\"\n        );\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n\n        if (\n            amount <=\n            token.balanceOf(address(dynamicRangeOrdersIntegrationDeployer))\n        ) {\n            // Don't need to make any swaps or close any positions\n            _withdraw(address(token), amount);\n        } else {\n            // Need to make swaps and / or close positions\n            uint256 withdrawalAmountInBaseStablecoinValue = getTokenValueInBaseStablecoin(\n                    tokenAddress,\n                    amount\n                );\n            uint256 stablecoinReserveBalance = getBaseStablecoinReserveBalance();\n\n            if (\n                stablecoinReserveBalance > withdrawalAmountInBaseStablecoinValue\n            ) {\n                // Only need to make swaps, don't need to close any positions\n                dynamicRangeOrdersIntegrationDeployer\n                    .swapReservesForWithdrawalToken(tokenAddress);\n                if (\n                    amount <=\n                    token.balanceOf(\n                        address(dynamicRangeOrdersIntegrationDeployer)\n                    )\n                ) {\n                    _withdraw(address(token), amount);\n                } else {\n                    dynamicRangeOrdersIntegrationDeployer\n                        .closePositionsForWithdrawal(\n                            liquidityPositionKeys,\n                            tokenAddress,\n                            amount\n                        );\n                    if (\n                        token.balanceOf(\n                            address(dynamicRangeOrdersIntegrationDeployer)\n                        ) >= amount\n                    ) {\n                        _withdraw(address(token), amount);\n                    } else {\n                        _withdraw(\n                            address(token),\n                            token.balanceOf(\n                                address(dynamicRangeOrdersIntegrationDeployer)\n                            )\n                        );\n                    }\n                }\n            } else {\n                // Need to close positions to satisfy withdrawal amount\n                dynamicRangeOrdersIntegrationDeployer\n                    .closePositionsForWithdrawal(\n                        liquidityPositionKeys,\n                        tokenAddress,\n                        amount\n                    );\n\n                if (\n                    token.balanceOf(\n                        address(dynamicRangeOrdersIntegrationDeployer)\n                    ) >= amount\n                ) {\n                    _withdraw(address(token), amount);\n                } else {\n                    _withdraw(\n                        address(token),\n                        token.balanceOf(\n                            address(dynamicRangeOrdersIntegrationDeployer)\n                        )\n                    );\n                }\n            }\n        }\n    }\n\n    /// @notice Wraps _deploy since it needs to be called internally\n    function deploy() public override onlyController {\n        _deploy();\n    }\n\n    /// @notice Harvest available yield for all liquidity positions\n    function harvestYield() external override onlyController {\n        dynamicRangeOrdersIntegrationDeployer.harvestYield(\n            liquidityPositionKeys\n        );\n    }\n\n    /// @notice Deploys all available tokens to liquidity positions\n    function _deploy() private {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 liquidityPositionsWeightSum = getLiquidityPositionsWeightSum();\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        uint256[] memory liquidityPositionDesiredDeployAmounts = new uint256[](\n            liquidityPositionKeys.length\n        );\n        uint256[] memory tokenDesiredAmounts = new uint256[](tokenCount);\n\n        // Transfers all tokens from this contract to the dynamicRangeOrdersIntegrationDeployer contract\n        transferTokensTodynamicRangeOrdersIntegrationDeployer();\n\n        uint256 totalBaseStablecoinValue = getBaseStablecoinReserveBalance() +\n            getAllPositionsBaseStablecoinValue();\n\n        // Calculate desired token amounts\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionKeys.length;\n            liquidityPositionIndex++\n        ) {\n            uint256 positionDesiredBaseStablecoinValue = (totalBaseStablecoinValue *\n                    liquidityPositions[\n                        liquidityPositionKeys[liquidityPositionIndex]\n                    ].weight) / liquidityPositionsWeightSum;\n            uint256 positionActualBaseStablecoinValue = getPositionBaseStablecoinValue(\n                    liquidityPositionKeys[liquidityPositionIndex]\n                );\n\n            if (\n                positionActualBaseStablecoinValue <\n                positionDesiredBaseStablecoinValue\n            ) {\n                liquidityPositionDesiredDeployAmounts[liquidityPositionIndex] =\n                    positionDesiredBaseStablecoinValue -\n                    positionActualBaseStablecoinValue;\n            }\n\n            uint256 token0Id = integrationMap.getTokenId(\n                liquidityPositions[\n                    liquidityPositionKeys[liquidityPositionIndex]\n                ].token0\n            );\n            uint256 token1Id = integrationMap.getTokenId(\n                liquidityPositions[\n                    liquidityPositionKeys[liquidityPositionIndex]\n                ].token1\n            );\n\n            (\n                uint256 desiredAmount0,\n                uint256 desiredAmount1\n            ) = getIncreaseLiquidityAmounts(\n                    liquidityPositionKeys[liquidityPositionIndex],\n                    liquidityPositionDesiredDeployAmounts[\n                        liquidityPositionIndex\n                    ]\n                );\n            tokenDesiredAmounts[token0Id] += desiredAmount0;\n            tokenDesiredAmounts[token1Id] += desiredAmount1;\n        }\n\n        // Swap excess tokens for base stablecoin\n        dynamicRangeOrdersIntegrationDeployer.swapExcessTokensForBaseStablecoin(\n                tokenDesiredAmounts\n            );\n\n        // Swap excess base stablecoin for desired token amounts\n        dynamicRangeOrdersIntegrationDeployer.swapExcessBaseStablecoinForTokens(\n                tokenDesiredAmounts\n            );\n\n        // Increase liquidity positions with available tokens\n        increaseLiquidityPositions(liquidityPositionDesiredDeployAmounts);\n    }\n\n    /// @param tokenAddress The address of the token being transferred from the integration\n    /// @param amount The amount of the token being transferred from the integration\n    function _withdraw(address tokenAddress, uint256 amount) private {\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n        uint256 balanceBefore = token.balanceOf(\n            address(dynamicRangeOrdersIntegrationDeployer)\n        );\n\n        IERC20MetadataUpgradeable(token).safeTransferFrom(\n            address(dynamicRangeOrdersIntegrationDeployer),\n            moduleMap.getModuleAddress(Modules.Kernel),\n            amount\n        );\n\n        balances[tokenAddress] -= (balanceBefore -\n            token.balanceOf(address(dynamicRangeOrdersIntegrationDeployer)));\n    }\n\n    /// @notice rebalances liquidity positions according to weights\n    function rebalance() private {\n        transferTokensTodynamicRangeOrdersIntegrationDeployer();\n        closeExcessLiquidityPositions();\n        _deploy();\n    }\n\n    /// @notice Transfers all tokens in this contract to the Uniswap Integration Deployer contract\n    function transferTokensTodynamicRangeOrdersIntegrationDeployer() private {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                integrationMap.getTokenAddress(tokenId)\n            );\n\n            if (\n                token.allowance(\n                    address(dynamicRangeOrdersIntegrationDeployer),\n                    address(this)\n                ) == 0\n            ) {\n                dynamicRangeOrdersIntegrationDeployer.tokenApprovals(\n                    address(token)\n                );\n            }\n\n            if (token.balanceOf(address(this)) > 0) {\n                token.safeTransfer(\n                    address(dynamicRangeOrdersIntegrationDeployer),\n                    token.balanceOf(address(this))\n                );\n            }\n        }\n    }\n\n    /// @param liquidityPositionDesiredDeployAmounts The desired deploy amounts in terms of the base stablecoin per liquidity position\n    function increaseLiquidityPositions(\n        uint256[] memory liquidityPositionDesiredDeployAmounts\n    ) private {\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionKeys.length;\n            liquidityPositionIndex++\n        ) {\n            if (\n                liquidityPositions[\n                    liquidityPositionKeys[liquidityPositionIndex]\n                ].minted\n            ) {\n                // The liquidity position has already been minted, so increase liquidity amount\n                (\n                    uint256 amount0Desired,\n                    uint256 amount1Desired\n                ) = getIncreaseLiquidityAmounts(\n                        liquidityPositionKeys[liquidityPositionIndex],\n                        liquidityPositionDesiredDeployAmounts[\n                            liquidityPositionIndex\n                        ]\n                    );\n                if (amount0Desired > 0 || amount1Desired > 0) {\n                    dynamicRangeOrdersIntegrationDeployer\n                        .increaseLiquidityPosition(\n                            liquidityPositions[\n                                liquidityPositionKeys[liquidityPositionIndex]\n                            ].id,\n                            liquidityPositions[\n                                liquidityPositionKeys[liquidityPositionIndex]\n                            ].token0,\n                            liquidityPositions[\n                                liquidityPositionKeys[liquidityPositionIndex]\n                            ].token1,\n                            amount0Desired,\n                            amount1Desired\n                        );\n                }\n            } else {\n                // The liquidity position has not been minted, mint it with desired amounts\n                (\n                    uint256 amount0Desired,\n                    uint256 amount1Desired\n                ) = getIncreaseLiquidityAmounts(\n                        liquidityPositionKeys[liquidityPositionIndex],\n                        liquidityPositionDesiredDeployAmounts[\n                            liquidityPositionIndex\n                        ]\n                    );\n\n                if (amount0Desired > 0 || amount1Desired > 0) {\n                    (\n                        bool success,\n                        uint256 liquidityPositionId\n                    ) = dynamicRangeOrdersIntegrationDeployer\n                            .mintLiquidityPosition(\n                                liquidityPositions[\n                                    liquidityPositionKeys[\n                                        liquidityPositionIndex\n                                    ]\n                                ].token0,\n                                liquidityPositions[\n                                    liquidityPositionKeys[\n                                        liquidityPositionIndex\n                                    ]\n                                ].token1,\n                                liquidityPositions[\n                                    liquidityPositionKeys[\n                                        liquidityPositionIndex\n                                    ]\n                                ].feeNumerator,\n                                liquidityPositions[\n                                    liquidityPositionKeys[\n                                        liquidityPositionIndex\n                                    ]\n                                ].tickLower,\n                                liquidityPositions[\n                                    liquidityPositionKeys[\n                                        liquidityPositionIndex\n                                    ]\n                                ].tickUpper,\n                                amount0Desired,\n                                amount1Desired\n                            );\n\n                    // If the mint succeeded, update the liquidity position data\n                    if (success) {\n                        liquidityPositions[\n                            liquidityPositionKeys[liquidityPositionIndex]\n                        ].minted = true;\n                        liquidityPositions[\n                            liquidityPositionKeys[liquidityPositionIndex]\n                        ].id = liquidityPositionId;\n                    }\n                }\n            }\n        }\n    }\n\n    /// @return The timestamp the rerange function was last called\n    function getLastRerangeTimestamp(bytes32 liquidityPositionKey)\n        external\n        view\n        returns (uint256)\n    {\n        return lastRerangeTimestamp[liquidityPositionKey];\n    }\n\n    function rerangeLiquidityPosition(bytes32 liquidityPositionKey)\n        public\n        onlyController\n    {\n        uint256 positionActualBaseStablecoinValue = getPositionBaseStablecoinValue(\n                liquidityPositionKey\n            );\n        dynamicRangeOrdersIntegrationDeployer.decreaseLiquidityPosition(\n            liquidityPositionKey,\n            positionActualBaseStablecoinValue\n        );\n\n        (\n            uint256 amount0Desired,\n            uint256 amount1Desired\n        ) = getIncreaseLiquidityAmounts(\n                liquidityPositionKey,\n                liquidityPositionKeyIndexes[liquidityPositionKey]\n            );\n\n        if (amount0Desired > 0 || amount1Desired > 0) {\n            (\n                bool success,\n                uint256 liquidityPositionId\n            ) = dynamicRangeOrdersIntegrationDeployer.mintLiquidityPosition(\n                    liquidityPositions[liquidityPositionKey].token0,\n                    liquidityPositions[liquidityPositionKey].token1,\n                    liquidityPositions[liquidityPositionKey].feeNumerator,\n                    liquidityPositions[liquidityPositionKey].tickLower,\n                    liquidityPositions[liquidityPositionKey].tickUpper,\n                    amount0Desired,\n                    amount1Desired\n                );\n\n            // If the mint succeeded, update the liquidity position data\n            if (success) {\n                liquidityPositions[liquidityPositionKey].minted = true;\n                liquidityPositions[liquidityPositionKey]\n                    .id = liquidityPositionId;\n            }\n        }\n\n        lastRerangeTimestamp[liquidityPositionKey] = block.timestamp;\n    }\n\n    /// @notice Partially closes liquidity positions if their value exceeds their relative weight, used for rebalancing\n    function closeExcessLiquidityPositions() private {\n        uint256 totalBaseStablecoinValue = getBaseStablecoinReserveBalance() +\n            getAllPositionsBaseStablecoinValue();\n        uint256 liquidityPositionsWeightSum = getLiquidityPositionsWeightSum();\n\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionKeys.length;\n            liquidityPositionIndex++\n        ) {\n            uint256 positionDesiredBaseStablecoinValue = (totalBaseStablecoinValue *\n                    liquidityPositions[\n                        liquidityPositionKeys[liquidityPositionIndex]\n                    ].weight) / liquidityPositionsWeightSum;\n            uint256 positionActualBaseStablecoinValue = getPositionBaseStablecoinValue(\n                    liquidityPositionKeys[liquidityPositionIndex]\n                );\n\n            if (\n                positionActualBaseStablecoinValue >\n                positionDesiredBaseStablecoinValue\n            ) {\n                dynamicRangeOrdersIntegrationDeployer.decreaseLiquidityPosition(\n                        liquidityPositionKeys[liquidityPositionIndex],\n                        positionActualBaseStablecoinValue -\n                            positionDesiredBaseStablecoinValue\n                    );\n            }\n        }\n    }\n\n    /// @param liquidityPositionKey The key of the liquidity position\n    /// @return token0 The address of token0 of the liquidity position\n    /// @return token1 The address of token1 of the liquidity position\n    /// @return feeNumerator The fee of the liquidity position\n    /// @return tickLower The lower tick bound of the liquidity position\n    /// @return tickUpper The upper tick bound of the liquidity position\n    /// @return minted Boolean indicating whether the position has been minted yet\n    /// @return id The token ID of the liquidity position\n    /// @return weight The relative weight of the liquidity position\n    function getLiquidityPosition(bytes32 liquidityPositionKey)\n        public\n        view\n        override\n        returns (\n            address token0,\n            address token1,\n            uint24 feeNumerator,\n            int24 tickLower,\n            int24 tickUpper,\n            bool minted,\n            uint256 id,\n            uint256 weight\n        )\n    {\n        token0 = liquidityPositions[liquidityPositionKey].token0;\n        token1 = liquidityPositions[liquidityPositionKey].token1;\n        feeNumerator = liquidityPositions[liquidityPositionKey].feeNumerator;\n        tickLower = liquidityPositions[liquidityPositionKey].tickLower;\n        tickUpper = liquidityPositions[liquidityPositionKey].tickUpper;\n        minted = liquidityPositions[liquidityPositionKey].minted;\n        id = liquidityPositions[liquidityPositionKey].id;\n        weight = liquidityPositions[liquidityPositionKey].weight;\n    }\n\n    /// @param liquidityPositionKey The key of the liquidity position\n    /// @return liquidityAmount The liquidity Amount of the position\n    function getLiquidityPositionLiquidityAmount(bytes32 liquidityPositionKey)\n        public\n        view\n        returns (uint128 liquidityAmount)\n    {\n        if (liquidityPositions[liquidityPositionKey].minted) {\n            (, , , , , , , liquidityAmount, , , , ) = IUniswapPositionManager(\n                positionManagerAddress\n            ).positions(liquidityPositions[liquidityPositionKey].id);\n        } else {\n            liquidityAmount = 0;\n        }\n    }\n\n    /// @return baseStablecoinReserveBalance The value of all assets in reserves, to value of base stablecoin\n    function getBaseStablecoinReserveBalance()\n        public\n        view\n        returns (uint256 baseStablecoinReserveBalance)\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n            if (tokenAddress != getBaseStablecoinAddress()) {\n                if (\n                    IUniswapTrader(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    ).getTokenPairPoolsLength(\n                            tokenAddress,\n                            getBaseStablecoinAddress()\n                        ) > 0\n                ) {\n                    baseStablecoinReserveBalance += getTokenValueInBaseStablecoin(\n                        tokenAddress,\n                        IERC20MetadataUpgradeable(tokenAddress).balanceOf(\n                            address(dynamicRangeOrdersIntegrationDeployer)\n                        )\n                    );\n                }\n            } else {\n                baseStablecoinReserveBalance += IERC20MetadataUpgradeable(\n                    tokenAddress\n                ).balanceOf(address(dynamicRangeOrdersIntegrationDeployer));\n            }\n        }\n    }\n\n    /// @return liquidityPositionsWeightSum The sum of the weights of all liquidity positions\n    function getLiquidityPositionsWeightSum()\n        public\n        view\n        returns (uint256 liquidityPositionsWeightSum)\n    {\n        uint256 liquidityPositionsCount = liquidityPositionKeys.length;\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionsCount;\n            liquidityPositionIndex++\n        ) {\n            liquidityPositionsWeightSum += liquidityPositions[\n                liquidityPositionKeys[liquidityPositionIndex]\n            ].weight;\n        }\n    }\n\n    /// @return The number of configured liquidity positions\n    function getLiquidityPositionsCount()\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return liquidityPositionKeys.length;\n    }\n\n    function getLiquidityPositions() public view returns (bytes32[] memory) {\n        return liquidityPositionKeys;\n    }\n\n    /// @return baseStablecoinValue The total value of tokens in liquidity positions converted to the base stablecoin\n    function getAllPositionsBaseStablecoinValue()\n        public\n        view\n        returns (uint256 baseStablecoinValue)\n    {\n        uint256 liquidityPositionsCount = liquidityPositionKeys.length;\n\n        for (\n            uint256 liquidityPositionIndex;\n            liquidityPositionIndex < liquidityPositionsCount;\n            liquidityPositionIndex++\n        ) {\n            baseStablecoinValue += getPositionBaseStablecoinValue(\n                liquidityPositionKeys[liquidityPositionIndex]\n            );\n        }\n    }\n\n    /// @param liquidityPositionKey The index of the liquidity position\n    /// @return positionBaseStablecoinValue The value of the liquidity position converted to the base stablecoin\n    function getPositionBaseStablecoinValue(bytes32 liquidityPositionKey)\n        public\n        view\n        override\n        returns (uint256 positionBaseStablecoinValue)\n    {\n        address token0 = liquidityPositions[liquidityPositionKey].token0;\n        address token1 = liquidityPositions[liquidityPositionKey].token1;\n        uint128 liquidityAmount = getLiquidityPositionLiquidityAmount(\n            liquidityPositionKey\n        );\n\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts\n            .getAmountsForLiquidity(\n                getSqrtPriceX96(\n                    token0,\n                    token1,\n                    liquidityPositions[liquidityPositionKey].feeNumerator\n                ),\n                TickMath.getSqrtRatioAtTick(\n                    liquidityPositions[liquidityPositionKey].tickLower\n                ),\n                TickMath.getSqrtRatioAtTick(\n                    liquidityPositions[liquidityPositionKey].tickUpper\n                ),\n                liquidityAmount\n            );\n\n        positionBaseStablecoinValue =\n            getTokenValueInBaseStablecoin(token0, amount0) +\n            getTokenValueInBaseStablecoin(token1, amount1);\n    }\n\n    /// @param tokenAddress The address of the token\n    /// @param amount The amount of the token\n    /// @return tokenValueInBaseStablecoin The value of the amount of the token converted to the base stablecoin\n    function getTokenValueInBaseStablecoin(address tokenAddress, uint256 amount)\n        public\n        view\n        override\n        returns (uint256 tokenValueInBaseStablecoin)\n    {\n        if (tokenAddress != getBaseStablecoinAddress()) {\n            tokenValueInBaseStablecoin = IUniswapTrader(\n                moduleMap.getModuleAddress(Modules.UniswapTrader)\n            ).getEstimatedTokenOut(\n                    tokenAddress,\n                    getBaseStablecoinAddress(),\n                    amount\n                );\n        } else {\n            tokenValueInBaseStablecoin = amount;\n        }\n    }\n\n    /// @param tokenAddress The address of the token\n    /// @param amount The amount of the base stablecoin token\n    /// @return baseStablecoinValueInToken The value of the base stablecoin amount in terms of the specified token\n    function getBaseStablecoinValueInToken(address tokenAddress, uint256 amount)\n        public\n        view\n        returns (uint256 baseStablecoinValueInToken)\n    {\n        require(\n            baseStablecoinAddress != address(0),\n            \"DROIntegration::getBaseStablecoinValueInToken: Base stablecoin has not been set\"\n        );\n\n        if (tokenAddress != baseStablecoinAddress) {\n            baseStablecoinValueInToken = IUniswapTrader(\n                moduleMap.getModuleAddress(Modules.UniswapTrader)\n            ).getEstimatedTokenOut(baseStablecoinAddress, tokenAddress, amount);\n        } else {\n            baseStablecoinValueInToken = amount;\n        }\n    }\n\n    /// @return The address of the base stablecoin\n    function getBaseStablecoinAddress() public view override returns (address) {\n        require(\n            baseStablecoinAddress != address(0),\n            \"DROIntegration::getBaseStablecoinAddress: Base stablecoin has not been added yet\"\n        );\n        return baseStablecoinAddress;\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[tokenAddress];\n    }\n\n    /// @param liquidityPositionKey The key of the liquidity position\n    /// @param desiredBaseStablecoinValue The desired amount to increase liquidity position value by\n    /// in terms of base stablecoin value\n    /// @return token0Amount The amount of token0 to add to liquidity position\n    /// @return token1Amount The amount of token1 to add to liquidity position\n    function getIncreaseLiquidityAmounts(\n        bytes32 liquidityPositionKey,\n        uint256 desiredBaseStablecoinValue\n    ) public view returns (uint256 token0Amount, uint256 token1Amount) {\n        LiquidityPosition memory liquidityPosition = liquidityPositions[\n            liquidityPositionKey\n        ];\n\n        address token0 = liquidityPosition.token0;\n        address token1 = liquidityPosition.token1;\n\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(\n            liquidityPosition.tickLower\n        );\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(\n            liquidityPosition.tickUpper\n        );\n\n        uint128 arbitraryLiquidityAmount = LiquidityAmounts\n            .getLiquidityForAmount0(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                token0 == baseStablecoinAddress\n                    ? desiredBaseStablecoinValue\n                    : IUniswapTrader(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    ).getEstimatedTokenOut(\n                            baseStablecoinAddress,\n                            token0,\n                            desiredBaseStablecoinValue\n                        )\n            );\n        // Arbitrary amounts are used to get the required ratio of token0 and token1 to add liquidity\n        (uint256 arbitraryAmount0, uint256 arbitraryAmount1) = LiquidityAmounts\n            .getAmountsForLiquidity(\n                getSqrtPriceX96(token0, token1, liquidityPosition.feeNumerator),\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                arbitraryLiquidityAmount\n            );\n\n        uint256 arbitraryBaseStablecoinValue = getTokenValueInBaseStablecoin(\n            token0,\n            arbitraryAmount0\n        ) + getTokenValueInBaseStablecoin(token1, arbitraryAmount1);\n\n        if (arbitraryBaseStablecoinValue > 0) {\n            token0Amount =\n                (arbitraryAmount0 * desiredBaseStablecoinValue) /\n                arbitraryBaseStablecoinValue;\n            token1Amount =\n                (arbitraryAmount1 * desiredBaseStablecoinValue) /\n                arbitraryBaseStablecoinValue;\n        } else {\n            token0Amount = 0;\n            token1Amount = 0;\n        }\n    }\n\n    /// @param token0 The address of token0 of the pool\n    /// @param token1 The address of token1 of the pool\n    /// @param feeNumerator The fee numerator of the pool\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    function getSqrtPriceX96(\n        address token0,\n        address token1,\n        uint24 feeNumerator\n    ) public view returns (uint160 sqrtPriceX96) {\n        (sqrtPriceX96, , , , , , ) = IUniswapPool(\n            IUniswapFactory(factoryAddress).getPool(\n                token0,\n                token1,\n                feeNumerator\n            )\n        ).slot0();\n    }\n}\n"
    },
    "contracts/yield-integrations/AaveIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IAaveLendingPool.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\n\n/// @notice Integrates 0x Nodes to the Aave lending pool\n/// @notice The Kernel contract should be added as the controller\ncontract AaveIntegration is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IIntegration\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private lendingPoolAddress;\n    mapping(address => uint256) private balances;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param lendingPoolAddress_ The address of the Aave lending pool contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address lendingPoolAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        lendingPoolAddress = lendingPoolAddress_;\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        balances[tokenAddress] += amount;\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount)\n        public\n        override\n        onlyController\n    {\n        require(\n            amount <= balances[tokenAddress],\n            \"AaveIntegration::withdraw: Withdraw amount exceeds balance\"\n        );\n\n        if (\n            amount >\n            IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this))\n        ) {\n            try\n                IAaveLendingPool(lendingPoolAddress).withdraw(\n                    tokenAddress,\n                    amount,\n                    address(this)\n                )\n            {} catch {}\n        }\n\n        if (\n            amount >\n            IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this))\n        ) {\n            amount = IERC20MetadataUpgradeable(tokenAddress).balanceOf(\n                address(this)\n            );\n        }\n\n        balances[tokenAddress] -= amount;\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\n            moduleMap.getModuleAddress(Modules.Kernel),\n            amount\n        );\n    }\n\n    /// @notice Deploys all available tokens to Aave\n    function deploy() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                integrationMap.getTokenAddress(tokenId)\n            );\n            uint256 tokenAmount = token.balanceOf(address(this));\n\n            if (token.allowance(address(this), lendingPoolAddress) == 0) {\n                token.safeApprove(lendingPoolAddress, type(uint256).max);\n            }\n\n            if (tokenAmount > 0) {\n                try\n                    IAaveLendingPool(lendingPoolAddress).deposit(\n                        address(token),\n                        tokenAmount,\n                        address(this),\n                        0\n                    )\n                {} catch {}\n            }\n        }\n    }\n\n    /// @notice Harvests all token yield from the Aave lending pool\n    function harvestYield() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n            address aTokenAddress = getATokenAddress(tokenAddress);\n            if (aTokenAddress != address(0)) {\n                uint256 aTokenBalance = IERC20MetadataUpgradeable(aTokenAddress)\n                    .balanceOf(address(this));\n                if (aTokenBalance > balances[tokenAddress]) {\n                    try\n                        IAaveLendingPool(lendingPoolAddress).withdraw(\n                            tokenAddress,\n                            aTokenBalance - balances[tokenAddress],\n                            address(\n                                moduleMap.getModuleAddress(Modules.YieldManager)\n                            )\n                        )\n                    {} catch {}\n                }\n            }\n        }\n    }\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @param tokenAddress The address of the deployed token\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[tokenAddress];\n    }\n\n    /// @param underlyingTokenAddress The address of the underlying token\n    /// @return The address of the corresponding aToken\n    function getATokenAddress(address underlyingTokenAddress)\n        public\n        view\n        returns (address)\n    {\n        IAaveLendingPool.ReserveData memory reserveData = IAaveLendingPool(\n            lendingPoolAddress\n        ).getReserveData(underlyingTokenAddress);\n\n        return reserveData.aTokenAddress;\n    }\n}\n"
    },
    "contracts/interfaces/IAaveLendingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IAaveLendingPool {\n    struct ReserveConfigurationMap {\n        uint256 data;\n    }\n\n    struct ReserveData {\n        ReserveConfigurationMap configuration;\n        uint128 liquidityIndex;\n        uint128 variableBorrowIndex;\n        uint128 currentLiquidityRate;\n        uint128 currentVariableBorrowRate;\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        address interestRateStrategyAddress;\n        uint8 id;\n    }\n\n    /// @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n    /// @param asset The address of the underlying asset to deposit\n    /// @param amount The amount to be deposited\n    /// @param onBehalfOf The address that will receive the aTokens\n    /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /// @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n    /// @param asset The address of the underlying asset to withdraw\n    /// @param amount The underlying amount to be withdrawn\n    /// @param to Address that will receive the underlying, same as msg.sender if the user\n    /// @return The final amount withdrawn\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /// @dev Returns the state and configuration of the reserve\n    /// @param asset The address of the underlying asset of the reserve\n    /// @return The state of the reserve\n    function getReserveData(address asset)\n        external\n        view\n        returns (ReserveData memory);\n}\n"
    },
    "contracts/yield-integrations/SushiSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapIntegration.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISushiSwapMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\n\n/// @notice Integrates 0x Nodes to SushiSwap\ncontract SushiSwapIntegration is Controlled, ISushiSwapIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint256 private constant MULTIPLIER = 10**18;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address sushi;\n    address wethAddress;\n\n    mapping(uint256 => InnerPool) private pools;\n    uint256[] private poolIds;\n\n    mapping(address => uint256) private balances;\n    mapping(uint256 => uint256) private poolBalances;\n    mapping(uint256 => uint256) private _totalUsersDeposit;\n    mapping(uint256 => uint256) private _totalUncollectedYield;\n    mapping(uint256 => mapping(address => uint256)) private _uncollectedYield;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event YieldReceived(uint256 amount);\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the SushiSwap swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address sushi_,\n        uint24 slippageNumerator_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        sushi = sushi_;\n        wethAddress = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        ).getWethTokenAddress();\n    }\n\n    function addPool(uint256 pid, uint256 weight)\n        external\n        override\n        onlyController\n        returns (address, address)\n    {\n        ISushiSwapMasterChef.PoolInfo memory poolInfo = ISushiSwapMasterChef(\n            masterChef\n        ).poolInfo(pid);\n\n        require(\n            address(poolInfo.lpToken) != address(0),\n            \"SushiSwapIntegration::configurePool: Pool doesn't exist in SushiSwap\"\n        );\n        require(\n            !pools[pid].added,\n            \"SushiSwapIntegration::addPool: Pool has already been added\"\n        );\n\n        pools[pid].poolInfo = poolInfo;\n        pools[pid].added = true;\n        pools[pid].weight = weight;\n        pools[pid].tokenPair.token0 = ISushiSwapPair(address(poolInfo.lpToken))\n            .token0();\n        pools[pid].tokenPair.token1 = ISushiSwapPair(address(poolInfo.lpToken))\n            .token1();\n\n        poolIds.push(pid);\n\n        return (pools[pid].tokenPair.token0, pools[pid].tokenPair.token1);\n    }\n\n    function updatePoolWeight(uint256 pid, uint256 newWeight)\n        external\n        onlyController\n    {\n        require(\n            pools[pid].added,\n            \"SushiSwapIntegration::updatePool: Pool has not been added\"\n        );\n\n        pools[pid].weight = newWeight;\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        balances[tokenAddress] += amount;\n    }\n\n    function getPools() external view returns (uint256[] memory) {\n        return poolIds;\n    }\n\n    function getPoolInfo(uint256 pid)\n        public\n        view\n        override\n        returns (ISushiSwapIntegration.InnerPool memory)\n    {\n        return pools[pid];\n    }\n\n    function getPoolMetaInfo(uint256 pid)\n        public\n        view\n        returns (ISushiSwapMasterChef.UserInfo memory)\n    {\n        return ISushiSwapMasterChef(masterChef).userInfo(pid, address(this));\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[tokenAddress];\n    }\n\n    /// @return poolsWeightSum The sum of the weights of all pools\n    function getPoolsWeightSum() public view returns (uint256 poolsWeightSum) {\n        uint256 poolCount = poolIds.length;\n        for (uint256 poolIndex; poolIndex < poolCount; poolIndex++) {\n            poolsWeightSum += pools[poolIds[poolIndex]].weight;\n        }\n    }\n\n    /// @param poolid The id of the pool\n    /// @return poolETHValue The value of the pool position converted to the eth\n    function getPoolEthValue(uint256 poolid)\n        public\n        view\n        returns (uint256 poolETHValue)\n    {\n        address token0 = pools[poolid].tokenPair.token0;\n        address token1 = pools[poolid].tokenPair.token1;\n        uint256 lpAmount = pools[poolid].poolInfo.lpToken.balanceOf(\n            address(this)\n        ) +\n            ISushiSwapMasterChef(masterChef)\n                .userInfo(poolid, address(this))\n                .amount;\n        uint256 sharePercent = ((lpAmount * 10000000000) /\n            pools[poolid].poolInfo.lpToken.totalSupply());\n\n        if (sharePercent == 0) {\n            return 0;\n        }\n\n        uint256 token0Amount = sharePercent /\n            (2 *\n                IERC20(token0).balanceOf(\n                    address(pools[poolid].poolInfo.lpToken)\n                )) /\n            10000000000;\n        uint256 token1Amount = sharePercent /\n            (2 *\n                IERC20(token1).balanceOf(\n                    address(pools[poolid].poolInfo.lpToken)\n                )) /\n            10000000000;\n\n        return\n            wethAddress == address(token0)\n                ? token0Amount + getAmountOut(token1, token0, token1Amount)\n                : token1Amount + getAmountOut(token0, token1, token0Amount);\n    }\n\n    /// @return ethValue The total value of tokens in pool positions converted to the eth\n    function getAllPositionsETHValue() public view returns (uint256 ethValue) {\n        uint256 poolsCount = poolIds.length;\n\n        for (uint256 i; i < poolsCount; i++) {\n            ethValue += getPoolEthValue(poolIds[i]);\n        }\n    }\n\n    /// @notice Deploys all available tokens to SushiSwap\n    function deploy() external override onlyController {\n        uint256 poolsWeightSum = getPoolsWeightSum();\n        uint256 totalETHValue = balances[wethAddress] +\n            getAllPositionsETHValue();\n        uint256 desiredDeployAmount = 0;\n\n        for (uint256 i = 0; i < poolIds.length; i++) {\n            uint256 poolDesiredEthValue = (totalETHValue *\n                pools[poolIds[i]].weight) / poolsWeightSum;\n            uint256 poolActualEthValue = getPoolEthValue(poolIds[i]);\n\n            if (poolActualEthValue < poolDesiredEthValue) {\n                desiredDeployAmount = poolDesiredEthValue - poolActualEthValue;\n            }\n\n            if (desiredDeployAmount > 0) {\n                _deploy(desiredDeployAmount, poolIds[i]);\n            }\n        }\n    }\n\n    function _deploy(uint256 amount, uint256 pid) internal {\n        ISushiSwapIntegration.InnerPool memory innerPoolInfo = getPoolInfo(pid);\n        require(\n            innerPoolInfo.added,\n            \"SushiSwapIntegration::deposit to sushiSwap yield farm: pool is not configured\"\n        );\n\n        (\n            uint256 priceWithMultiplier,\n            uint256 decimalsSubtractionExponent\n        ) = getPriceWithMultiplier(\n                getTokenToAdd(\n                    innerPoolInfo.tokenPair.token0,\n                    innerPoolInfo.tokenPair.token1\n                ),\n                address(innerPoolInfo.poolInfo.lpToken),\n                innerPoolInfo.tokenPair.token0\n            );\n        (\n            uint256 amountTokenDesired,\n            uint256 amountTokenMin,\n            uint256 amountWeiMin\n        ) = calculateAmountOfTokenToAddLiquidityETH(\n                amount / 2,\n                priceWithMultiplier\n            );\n        uint256 tokensReceived;\n\n        if (\n            IERC20MetadataUpgradeable(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getWethTokenAddress()\n            ).balanceOf(address(this)) < amount\n        ) {\n            return;\n        }\n        IWeth9(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getWethTokenAddress()\n        ).withdraw(amount);\n\n        if (\n            IERC20MetadataUpgradeable(\n                getTokenToAdd(\n                    innerPoolInfo.tokenPair.token0,\n                    innerPoolInfo.tokenPair.token1\n                )\n            ).balanceOf(moduleMap.getModuleAddress(Modules.Kernel)) <\n            amountTokenDesired / decimalsSubtractionExponent\n        ) {\n            uint256[] memory amounts = swapExactETHForTokens(\n                amount / 2,\n                ((amountTokenDesired - ((amountTokenDesired * 1) / 100)) /\n                    decimalsSubtractionExponent),\n                wethAddress,\n                getTokenToAdd(\n                    innerPoolInfo.tokenPair.token0,\n                    innerPoolInfo.tokenPair.token1\n                ),\n                address(this)\n            );\n\n            tokensReceived = amounts[1];\n\n            emit TokensReceived(tokensReceived);\n\n            (priceWithMultiplier, ) = getPriceWithMultiplier(\n                getTokenToAdd(\n                    innerPoolInfo.tokenPair.token0,\n                    innerPoolInfo.tokenPair.token1\n                ),\n                address(innerPoolInfo.poolInfo.lpToken),\n                innerPoolInfo.tokenPair.token0\n            );\n            (\n                amountTokenDesired,\n                amountTokenMin,\n                amountWeiMin\n            ) = calculateAmountOfTokenToAddLiquidityETH(\n                amount / 2,\n                priceWithMultiplier\n            );\n        }\n\n        IERC20MetadataUpgradeable(\n            getTokenToAdd(\n                innerPoolInfo.tokenPair.token0,\n                innerPoolInfo.tokenPair.token1\n            )\n        ).safeApprove(swapRouterAddress, 0);\n        IERC20MetadataUpgradeable(\n            getTokenToAdd(\n                innerPoolInfo.tokenPair.token0,\n                innerPoolInfo.tokenPair.token1\n            )\n        ).safeApprove(\n                swapRouterAddress,\n                IERC20MetadataUpgradeable(\n                    getTokenToAdd(\n                        innerPoolInfo.tokenPair.token0,\n                        innerPoolInfo.tokenPair.token1\n                    )\n                ).allowance(address(this), swapRouterAddress) +\n                    (\n                        tokensReceived == 0\n                            ? amountTokenDesired / decimalsSubtractionExponent\n                            : tokensReceived\n                    )\n            );\n\n        uint256 diff = amountTokenDesired /\n            decimalsSubtractionExponent -\n            (\n                tokensReceived == 0\n                    ? amountTokenDesired / decimalsSubtractionExponent\n                    : tokensReceived\n            );\n\n        (, , uint256 liquidity) = ISushiSwapRouter(swapRouterAddress)\n            .addLiquidityETH{value: amount / 2}(\n            getTokenToAdd(\n                innerPoolInfo.tokenPair.token0,\n                innerPoolInfo.tokenPair.token1\n            ),\n            (amountTokenDesired / decimalsSubtractionExponent) - diff,\n            (amountTokenMin / decimalsSubtractionExponent),\n            amountWeiMin,\n            address(this),\n            block.timestamp + 360\n        );\n\n        if (\n            IERC20MetadataUpgradeable(\n                getTokenToAdd(\n                    innerPoolInfo.tokenPair.token0,\n                    innerPoolInfo.tokenPair.token1\n                )\n            ).balanceOf(address(this)) > 0\n        ) {\n            IERC20MetadataUpgradeable(\n                getTokenToAdd(\n                    innerPoolInfo.tokenPair.token0,\n                    innerPoolInfo.tokenPair.token1\n                )\n            ).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    IERC20MetadataUpgradeable(\n                        getTokenToAdd(\n                            innerPoolInfo.tokenPair.token0,\n                            innerPoolInfo.tokenPair.token1\n                        )\n                    ).balanceOf(address(this))\n                );\n        }\n\n        if (address(this).balance > 0) {\n            uint256 ethBalance = address(this).balance;\n            IWeth9(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getWethTokenAddress()\n            ).deposit{value: ethBalance}();\n            IERC20MetadataUpgradeable(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getWethTokenAddress()\n            ).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    ethBalance\n                );\n        }\n\n        emit LPTokensAcquired(liquidity);\n\n        IERC20MetadataUpgradeable(address(innerPoolInfo.poolInfo.lpToken))\n            .safeApprove(masterChef, liquidity);\n        ISushiSwapMasterChef(masterChef).deposit(pid, liquidity);\n\n        poolBalances[pid] += amount;\n    }\n\n    function getTokenToAdd(address token0, address token1)\n        public\n        view\n        override\n        returns (address)\n    {\n        return\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getWethTokenAddress() == token0\n                ? token1\n                : token0;\n    }\n\n    function getPriceWithMultiplier(\n        address tokenToAdd,\n        address lpToken,\n        address token0\n    ) public view override returns (uint256, uint256) {\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(lpToken)\n            .getReserves();\n\n        uint256 priceWithMultiplier = wethAddress == token0\n            ? ((MULTIPLIER *\n                (reserve1 / 10**IERC20(address(wethAddress)).decimals())) /\n                (reserve0 / 10**IERC20(address(tokenToAdd)).decimals()))\n            : ((MULTIPLIER *\n                (reserve0 / 10**IERC20(address(tokenToAdd)).decimals())) /\n                (reserve1 / 10**IERC20(address(wethAddress)).decimals()));\n\n        uint256 decimalsSubtractionExponent = 10 **\n            (IERC20(address(wethAddress)).decimals() -\n                IERC20(address(tokenToAdd)).decimals());\n\n        return (priceWithMultiplier, decimalsSubtractionExponent);\n    }\n\n    function calculateAmountOfTokenToAddLiquidityETH(\n        uint256 amountWei,\n        uint256 priceWithMultiplier\n    )\n        public\n        pure\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 amountTokenDesired = (amountWei * priceWithMultiplier) /\n            MULTIPLIER;\n        uint256 amountTokenMin = amountTokenDesired -\n            (amountTokenDesired * 1) /\n            100; // 1% tolerance level\n        uint256 amountWeiMin = amountWei - (amountWei * 1) / 100; // 1% tolerance level\n\n        return (amountTokenDesired, amountTokenMin, amountWeiMin);\n    }\n\n    /// @notice Harvest available yield for all pools positions\n    function harvestYield() external override onlyController {\n        for (uint256 i = 0; i < poolIds.length; i++) {\n            harvestYieldFromFarm(poolIds[i]);\n        }\n    }\n\n    function harvestYieldFromFarm(uint256 _pid) internal {\n        uint256 sushiBalanceBefore = IERC20MetadataUpgradeable(sushi).balanceOf(\n            address(this)\n        );\n        uint256 pendingSushi = checkYield(_pid);\n\n        ISushiSwapMasterChef(masterChef).deposit(_pid, 0);\n\n        uint256 sushiBalanceAfter = IERC20MetadataUpgradeable(sushi).balanceOf(\n            address(this)\n        );\n        pendingSushi = checkYield(_pid);\n\n        uint256 diff = sushiBalanceAfter - sushiBalanceBefore;\n\n        if (diff > 0) {\n            uint256[] memory amounts = swapExactInput(\n                sushi,\n                wethAddress,\n                address(this),\n                diff\n            );\n\n            IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                amounts[1]\n            );\n\n            _totalUncollectedYield[_pid] += amounts[1];\n\n            emit YieldReceived(amounts[1]);\n        }\n    }\n\n    function checkYield(uint256 _pid) public view override returns (uint256) {\n        return\n            ISushiSwapMasterChef(masterChef).pendingSushi(_pid, address(this));\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount)\n        public\n        override\n        onlyController\n    {\n        require(\n            amount <= balances[tokenAddress],\n            \"AaveIntegration::withdraw: Withdraw amount exceeds balance\"\n        );\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n            tokenAddress\n        );\n        if (amount <= token.balanceOf(address(this))) {\n            IERC20MetadataUpgradeable(token).safeTransfer(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                amount\n            );\n        } else {\n            uint256 result;\n            uint256 ethReserve = IERC20(wethAddress).balanceOf(address(this));\n            for (uint256 poolIndex; poolIndex < poolIds.length; poolIndex++) {\n                uint256 eth = ethReserve + result;\n\n                if (eth >= amount) {\n                    IERC20MetadataUpgradeable(token).safeTransfer(\n                        moduleMap.getModuleAddress(Modules.Kernel),\n                        eth > amount ? ethReserve - (eth - amount) : ethReserve\n                    );\n                    return;\n                }\n\n                uint256 poolEthValue = getPoolEthValue(poolIds[poolIndex]);\n                if (eth + poolEthValue > amount) {\n                    uint256 diff = amount - eth;\n                    uint256 amountPercent = (diff * 10000) / poolEthValue;\n                    result += _withdraw(poolIds[poolIndex], amountPercent);\n                }\n            }\n\n            IERC20MetadataUpgradeable(token).safeTransfer(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                result\n            );\n        }\n    }\n\n    function _withdraw(uint256 poolid, uint256 amountPercent)\n        internal\n        returns (uint256)\n    {\n        uint256 liquidity = (ISushiSwapMasterChef(masterChef)\n            .userInfo(poolid, address(this))\n            .amount * amountPercent) / 10000;\n\n        ISushiSwapIntegration.InnerPool memory innerPoolInfo = getPoolInfo(\n            poolid\n        );\n\n        ISushiSwapMasterChef(masterChef).withdraw(poolid, liquidity);\n        IERC20MetadataUpgradeable(address(innerPoolInfo.poolInfo.lpToken))\n            .safeApprove(swapRouterAddress, liquidity);\n\n        address token = getTokenToAdd(\n            innerPoolInfo.tokenPair.token0,\n            innerPoolInfo.tokenPair.token1\n        );\n\n        (\n            uint256 priceWithMultiplier,\n            uint256 decimalsSubtractionExponent\n        ) = getPriceWithMultiplier(\n                token,\n                address(innerPoolInfo.poolInfo.lpToken),\n                innerPoolInfo.tokenPair.token0\n            );\n\n        (\n            ,\n            uint256 amountTokenMin,\n            uint256 amountWeiMin\n        ) = calculateAmountOfTokenToAddLiquidityETH(\n                poolBalances[poolid] / 2,\n                priceWithMultiplier\n            );\n\n        (uint256 amountToken, ) = ISushiSwapRouter(swapRouterAddress)\n            .removeLiquidityETH(\n                token,\n                liquidity,\n                amountTokenMin / decimalsSubtractionExponent,\n                amountWeiMin,\n                address(this),\n                block.timestamp + 360\n            );\n\n        uint256[] memory amounts = swapExactInput(\n            token,\n            wethAddress,\n            address(this),\n            amountToken\n        );\n        IERC20MetadataUpgradeable(token).safeTransfer(\n            moduleMap.getModuleAddress(Modules.Kernel),\n            amounts[1]\n        );\n        return amounts[1];\n    }\n\n    function swapExactETHForTokens(\n        uint256 amountWei,\n        uint256 amountOutMin,\n        address tokenIn,\n        address tokenOut,\n        address to\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactETHForTokens{\n                value: amountWei\n            }(amountOutMin, path, to, deadline);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) public override onlyController returns (uint256[] memory) {\n        uint256 amountOutMin = getAmountOutMinimum(tokenIn, tokenOut, amountIn);\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        IERC20MetadataUpgradeable(tokenIn).approve(swapRouterAddress, amountIn);\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) *\n                (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        require(\n            amountIn > 0,\n            \"SushiSwapIntegration::getAmountOut: amountIn must be greater than zero\"\n        );\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(\n            tokenIn,\n            tokenOut\n        );\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"SushiSwapIntegration::getAmountOut: No liquidity in pool reserves\"\n        );\n        uint256 amountInWithFee = amountIn * (997);\n        uint256 numerator = amountInWithFee * (reserveOut);\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB)\n        internal\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(\n            pairFor(tokenA, tokenB)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param token0 The address of sorted token0\n    /// @param token1 The address of sorted token1\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(\n            tokenA != tokenB,\n            \"SushiSwapIntegration::sortToken: Identical token addresses\"\n        );\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(\n            token0 != address(0),\n            \"SushiSwapIntegration::sortToken: Zero address\"\n        );\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the SushiSwap pool contract\n    function pairFor(address tokenA, address tokenB)\n        internal\n        view\n        returns (address pair)\n    {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of the ordered token0\n    /// @return token1 The address of the ordered token1\n    function getTokensOrdered(address tokenA, address tokenB)\n        public\n        pure\n        returns (address token0, address token1)\n    {\n        if (tokenA < tokenB) {\n            token0 = tokenA;\n            token1 = tokenB;\n        } else {\n            token0 = tokenB;\n            token1 = tokenA;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISushiSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./ISushiSwapMasterChef.sol\";\nimport \"./IIntegration.sol\";\n\ninterface ISushiSwapIntegration is IIntegration {\n    struct PoolTokenPair {\n        address token0;\n        address token1;\n    }\n\n    struct InnerPool {\n        bool added;\n        uint256 weight;\n        ISushiSwapMasterChef.PoolInfo poolInfo;\n        PoolTokenPair tokenPair;\n    }\n\n    function addPool(uint256 pid, uint256 weight)\n        external\n        returns (address, address);\n\n    function getPoolInfo(uint256 pid) external view returns (InnerPool memory);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) external returns (uint256[] memory);\n\n    function getTokenToAdd(address token0, address token1)\n        external\n        view\n        returns (address);\n\n    function getPriceWithMultiplier(\n        address tokenToAdd,\n        address lpToken,\n        address token0\n    ) external view returns (uint256, uint256);\n\n    function calculateAmountOfTokenToAddLiquidityETH(\n        uint256 amountWei,\n        uint256 priceWithMultiplier\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function checkYield(uint256 _pid) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISushiSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapFactory {\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n}\n"
    },
    "contracts/interfaces/ISushiSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function WETH() external pure returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/ISushiSwapPair.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapPair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISushiSwapMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface ISushiSwapMasterChef {\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    }\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    function poolInfo(uint256 input) external returns (PoolInfo memory);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function pendingSushi(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function userInfo(uint256 _pid, address _user)\n        external\n        view\n        returns (UserInfo memory);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    //tmp here\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/interfaces/IWeth9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IWeth9 {\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function deposit() external payable;\n\n    /// @param wad The amount of wETH to withdraw into ETH\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/core/YieldManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IEtherRewards.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/ISushiSwapTrader.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"hardhat/console.sol\";\n\n/// @title Yield Manager\n/// @notice Manages yield deployments, harvesting, processing, and distribution\ncontract YieldManager is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IYieldManager\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint256 private gasAccountTargetEthBalance;\n    uint32 private biosBuyBackEthWeight;\n    uint32 private treasuryEthWeight;\n    uint32 private protocolFeeEthWeight;\n    uint32 private rewardsEthWeight;\n    uint256 private lastEthRewardsAmount;\n\n    address payable private gasAccount;\n    address payable private treasuryAccount;\n\n    mapping(address => uint256) private processedWethByToken;\n\n    receive() external payable {}\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Address of the Module Map\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\n    /// @param treasuryAccount_ The address of the system treasury account\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        uint256 gasAccountTargetEthBalance_,\n        uint32 biosBuyBackEthWeight_,\n        uint32 treasuryEthWeight_,\n        uint32 protocolFeeEthWeight_,\n        uint32 rewardsEthWeight_,\n        address payable gasAccount_,\n        address payable treasuryAccount_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\n        biosBuyBackEthWeight = biosBuyBackEthWeight_;\n        treasuryEthWeight = treasuryEthWeight_;\n        protocolFeeEthWeight = protocolFeeEthWeight_;\n        rewardsEthWeight = rewardsEthWeight_;\n        gasAccount = gasAccount_;\n        treasuryAccount = treasuryAccount_;\n    }\n\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\n    function updateGasAccountTargetEthBalance(\n        uint256 gasAccountTargetEthBalance_\n    ) external override onlyController {\n        gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\n    }\n\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\n    function updateEthDistributionWeights(\n        uint32 biosBuyBackEthWeight_,\n        uint32 treasuryEthWeight_,\n        uint32 protocolFeeEthWeight_,\n        uint32 rewardsEthWeight_\n    ) external override onlyController {\n        biosBuyBackEthWeight = biosBuyBackEthWeight_;\n        treasuryEthWeight = treasuryEthWeight_;\n        protocolFeeEthWeight = protocolFeeEthWeight_;\n        rewardsEthWeight = rewardsEthWeight_;\n    }\n\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\n    function updateGasAccount(address payable gasAccount_)\n        external\n        override\n        onlyController\n    {\n        gasAccount = gasAccount_;\n    }\n\n    /// @param treasuryAccount_ The address of the system treasury account\n    function updateTreasuryAccount(address payable treasuryAccount_)\n        external\n        override\n        onlyController\n    {\n        treasuryAccount = treasuryAccount_;\n    }\n\n    /// @notice Deploys all tokens to all integrations according to configured weights\n    function deploy(DeployRequest[] calldata deployments)\n        external\n        override\n        onlyController\n    {\n        IStrategyMap strategyMap = IStrategyMap(\n            moduleMap.getModuleAddress(Modules.StrategyMap)\n        );\n\n        for (uint256 i = 0; i < deployments.length; i++) {\n            if (deployments[i].ammPoolID > 0) {\n                require(deployments[i].tokens.length <= 2, \"too many tokens\");\n            }\n\n            for (uint256 j = 0; j < deployments[i].tokens.length; j++) {\n                int256 deployAmount = strategyMap.getDeployAmount(\n                    deployments[i].integration,\n                    deployments[i].ammPoolID,\n                    deployments[i].tokens[j]\n                );\n\n                uint256 reserveBalance = IERC20MetadataUpgradeable(\n                    deployments[i].tokens[j]\n                ).balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\n                if (deployAmount > 0 && reserveBalance < abs(deployAmount)) {\n                    strategyMap.closePositionsForWithdrawal(\n                        deployments[i].tokens[j],\n                        0x1000000000000000000000000000000000000000000000000000000000000000\n                    );\n                    deployAmount = strategyMap.getDeployAmount(\n                        deployments[i].integration,\n                        deployments[i].ammPoolID,\n                        deployments[i].tokens[j]\n                    );\n                }\n\n                if (deployments[i].ammPoolID > 0) {\n                    IAMMIntegration integration = IAMMIntegration(\n                        deployments[i].integration\n                    );\n\n                    if (deployAmount > 0) {\n                        uint256 balanceBefore = IERC20MetadataUpgradeable(\n                            deployments[i].tokens[j]\n                        ).balanceOf(deployments[i].integration);\n\n                        IERC20MetadataUpgradeable(deployments[i].tokens[j])\n                            .safeTransferFrom(\n                                moduleMap.getModuleAddress(Modules.Kernel),\n                                deployments[i].integration,\n                                abs(deployAmount)\n                            );\n                        uint256 balanceAfter = IERC20MetadataUpgradeable(\n                            deployments[i].tokens[j]\n                        ).balanceOf(deployments[i].integration);\n                        integration.deposit(\n                            deployments[i].tokens[j],\n                            balanceAfter - balanceBefore,\n                            deployments[i].ammPoolID\n                        );\n                        integration.deploy(deployments[i].ammPoolID);\n                    } else if (deployAmount < 0) {\n                        integration.withdraw(\n                            deployments[i].tokens[j],\n                            abs(deployAmount),\n                            deployments[i].ammPoolID\n                        );\n                    }\n                } else {\n                    IIntegration integration = IIntegration(\n                        deployments[i].integration\n                    );\n                    if (deployAmount > 0) {\n                        uint256 balanceBefore = IERC20MetadataUpgradeable(\n                            deployments[i].tokens[j]\n                        ).balanceOf(deployments[i].integration);\n                        IERC20MetadataUpgradeable(deployments[i].tokens[j])\n                            .safeTransferFrom(\n                                moduleMap.getModuleAddress(Modules.Kernel),\n                                deployments[i].integration,\n                                abs(deployAmount)\n                            );\n                        uint256 balanceAfter = IERC20MetadataUpgradeable(\n                            deployments[i].tokens[j]\n                        ).balanceOf(deployments[i].integration);\n\n                        integration.deposit(\n                            deployments[i].tokens[j],\n                            balanceAfter - balanceBefore\n                        );\n                        integration.deploy();\n                    } else if (deployAmount < 0) {\n                        integration.withdraw(\n                            deployments[i].tokens[j],\n                            abs(deployAmount)\n                        );\n                    }\n                }\n                strategyMap.decreaseDeployAmountChange(\n                    deployments[i].integration,\n                    deployments[i].ammPoolID,\n                    deployments[i].tokens[j],\n                    abs(deployAmount)\n                );\n            }\n            strategyMap.clearClosablePositions(deployments[i].tokens);\n        }\n    }\n\n    function abs(int256 val) internal pure returns (uint256) {\n        return uint256(val >= 0 ? val : -val);\n    }\n\n    function _calculateReserveAmount(\n        uint256 amount,\n        uint256 numerator,\n        uint256 denominator\n    ) internal pure returns (uint256) {\n        return (amount == 0 ? 1 : amount * numerator) / denominator;\n    }\n\n    /// @notice Harvests available yield from provided tokens and integration\n    function harvestYield(\n        address integrationAddress,\n        address[] calldata tokenAddresses\n    ) public override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(\n            integrationMap.getWethTokenAddress()\n        );\n\n        uint256 wethBalanceBeforeHarvest = weth.balanceOf(address(this));\n\n        IIntegration(integrationAddress).harvestYield();\n\n        processedWethByToken[address(weth)] +=\n            weth.balanceOf(address(this)) -\n            wethBalanceBeforeHarvest;\n\n        for (\n            uint256 tokenIterator;\n            tokenIterator < tokenAddresses.length;\n            tokenIterator++\n        ) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\n                tokenAddresses[tokenIterator]\n            );\n\n            if (token.balanceOf(address(this)) > 0) {\n                token.safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    _calculateReserveAmount(\n                        token.balanceOf(address(this)),\n                        integrationMap.getTokenReserveRatioNumerator(\n                            address(token)\n                        ),\n                        integrationMap.getReserveRatioDenominator()\n                    )\n                );\n                if (address(token) != address(weth)) {\n                    uint256 wethBalanceBefore = weth.balanceOf(address(this));\n                    // If token is not WETH, need to swap it for WETH\n                    // Swap token harvested yield for WETH. If trade succeeds, update accounting. Otherwise, do not update accounting\n                    token.safeTransfer(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader),\n                        token.balanceOf(address(this))\n                    );\n\n                    IUniswapTrader(\n                        moduleMap.getModuleAddress(Modules.UniswapTrader)\n                    ).swapExactInput(\n                            address(token),\n                            address(weth),\n                            address(this),\n                            token.balanceOf(\n                                moduleMap.getModuleAddress(\n                                    Modules.UniswapTrader\n                                )\n                            )\n                        );\n                    // Update accounting\n                    processedWethByToken[address(token)] +=\n                        weth.balanceOf(address(this)) -\n                        wethBalanceBefore;\n                }\n            }\n        }\n    }\n\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\n    function distributeEth() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        address wethAddress = IIntegrationMap(integrationMap)\n            .getWethTokenAddress();\n\n        // First fill up gas wallet with ETH\n        ethToGasAccount();\n\n        uint256 wethToDistribute = IERC20MetadataUpgradeable(wethAddress)\n            .balanceOf(address(this));\n\n        if (wethToDistribute > 0) {\n            uint256 biosBuyBackWethAmount = (wethToDistribute *\n                biosBuyBackEthWeight) / getEthWeightSum();\n            uint256 treasuryWethAmount = (wethToDistribute *\n                treasuryEthWeight) / getEthWeightSum();\n            uint256 protocolFeeWethAmount = (wethToDistribute *\n                protocolFeeEthWeight) / getEthWeightSum();\n            uint256 rewardsWethAmount = wethToDistribute -\n                biosBuyBackWethAmount -\n                treasuryWethAmount -\n                protocolFeeWethAmount;\n\n            // Send WETH to SushiSwap trader for BIOS buy back\n            IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.SushiSwapTrader),\n                biosBuyBackWethAmount\n            );\n\n            // Swap WETH for ETH and transfer to the treasury account\n            IWeth9(wethAddress).withdraw(treasuryWethAmount);\n            payable(treasuryAccount).transfer(treasuryWethAmount);\n\n            // Send ETH to protocol fee accrual rewards (BIOS stakers)\n            ethToProtocolFeeAccrual(protocolFeeWethAmount);\n\n            // Send ETH to token rewards\n            ethToRewards(rewardsWethAmount);\n        }\n    }\n\n    /// @notice Distributes WETH to gas wallet\n    function ethToGasAccount() private {\n        address wethAddress = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        ).getWethTokenAddress();\n        uint256 wethBalance = IERC20MetadataUpgradeable(wethAddress).balanceOf(\n            address(this)\n        );\n\n        if (wethBalance > 0) {\n            uint256 gasAccountActualEthBalance = gasAccount.balance;\n            if (gasAccountActualEthBalance < gasAccountTargetEthBalance) {\n                // Need to send ETH to gas account\n                uint256 ethAmountToGasAccount;\n                if (\n                    wethBalance <\n                    gasAccountTargetEthBalance - gasAccountActualEthBalance\n                ) {\n                    // Send all of WETH to gas wallet\n                    ethAmountToGasAccount = wethBalance;\n                    IWeth9(wethAddress).withdraw(ethAmountToGasAccount);\n                    gasAccount.transfer(ethAmountToGasAccount);\n                } else {\n                    // Send portion of WETH to gas wallet\n                    ethAmountToGasAccount =\n                        gasAccountTargetEthBalance -\n                        gasAccountActualEthBalance;\n                    IWeth9(wethAddress).withdraw(ethAmountToGasAccount);\n                    gasAccount.transfer(ethAmountToGasAccount);\n                }\n            }\n        }\n    }\n\n    /// @notice Uses any WETH held in the SushiSwap trader to buy back BIOS which is sent to the Kernel\n    function biosBuyBack() external override onlyController {\n        if (\n            IERC20MetadataUpgradeable(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getWethTokenAddress()\n            ).balanceOf(moduleMap.getModuleAddress(Modules.SushiSwapTrader)) > 0\n        ) {\n            // Use all ETH sent to the SushiSwap trader to buy BIOS\n            ISushiSwapTrader(\n                moduleMap.getModuleAddress(Modules.SushiSwapTrader)\n            ).biosBuyBack();\n\n            // Use all BIOS transferred to the Kernel to increase bios rewards\n            IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\n                .increaseBiosRewards();\n        }\n    }\n\n    /// @notice Distributes ETH to Rewards per token\n    /// @param ethRewardsAmount The amount of ETH rewards to distribute\n    function ethToRewards(uint256 ethRewardsAmount) private {\n        uint256 processedWethByTokenSum = getProcessedWethSum();\n        require(\n            processedWethByTokenSum > 0,\n            \"YieldManager::ethToRewards: No processed WETH to distribute\"\n        );\n\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        address wethAddress = integrationMap.getWethTokenAddress();\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n\n            if (processedWethByToken[tokenAddress] > 0) {\n                IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\n                    .increaseEthRewards(\n                        tokenAddress,\n                        (ethRewardsAmount *\n                            processedWethByToken[tokenAddress]) /\n                            processedWethByTokenSum\n                    );\n\n                processedWethByToken[tokenAddress] = 0;\n            }\n        }\n\n        lastEthRewardsAmount = ethRewardsAmount;\n\n        IWeth9(wethAddress).withdraw(ethRewardsAmount);\n\n        payable(moduleMap.getModuleAddress(Modules.Kernel)).transfer(\n            ethRewardsAmount\n        );\n    }\n\n    /// @notice Distributes ETH to protocol fee accrual (BIOS staker rewards)\n    /// @param protocolFeeEthRewardsAmount Amount of ETH to distribute to protocol fee accrual\n    function ethToProtocolFeeAccrual(uint256 protocolFeeEthRewardsAmount)\n        private\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        address biosAddress = integrationMap.getBiosTokenAddress();\n        address wethAddress = integrationMap.getWethTokenAddress();\n\n        if (\n            IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n                .getTokenTotalBalance(biosAddress) > 0\n        ) {\n            // BIOS has been deposited, increase Ether rewards for BIOS depositors\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\n                .increaseEthRewards(biosAddress, protocolFeeEthRewardsAmount);\n\n            IWeth9(wethAddress).withdraw(protocolFeeEthRewardsAmount);\n\n            payable(moduleMap.getModuleAddress(Modules.Kernel)).transfer(\n                protocolFeeEthRewardsAmount\n            );\n        } else {\n            // No BIOS has been deposited, send WETH back to Kernel as reserves\n            IERC20MetadataUpgradeable(wethAddress).transfer(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                protocolFeeEthRewardsAmount\n            );\n        }\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The amount of the token held in the Kernel as reserves\n    function getReserveTokenBalance(address tokenAddress)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getIsTokenAdded(tokenAddress),\n            \"YieldManager::getReserveTokenBalance: Token not added\"\n        );\n        return\n            IERC20MetadataUpgradeable(tokenAddress).balanceOf(\n                moduleMap.getModuleAddress(Modules.Kernel)\n            );\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The desired amount of the token to hold in the Kernel as reserves\n    function getDesiredReserveTokenBalance(address tokenAddress)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getIsTokenAdded(tokenAddress),\n            \"YieldManager::getDesiredReserveTokenBalance: Token not added\"\n        );\n        uint256 tokenReserveRatioNumerator = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        ).getTokenReserveRatioNumerator(tokenAddress);\n        uint256 tokenTotalBalance = IStrategyMap(\n            moduleMap.getModuleAddress(Modules.StrategyMap)\n        ).getTokenTotalBalance(tokenAddress);\n        return\n            (tokenTotalBalance * tokenReserveRatioNumerator) /\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getReserveRatioDenominator();\n    }\n\n    /// @return ethWeightSum The sum of ETH distribution weights\n    function getEthWeightSum()\n        public\n        view\n        override\n        returns (uint32 ethWeightSum)\n    {\n        ethWeightSum =\n            biosBuyBackEthWeight +\n            treasuryEthWeight +\n            protocolFeeEthWeight +\n            rewardsEthWeight;\n    }\n\n    /// @return processedWethSum The sum of yields processed into WETH\n    function getProcessedWethSum()\n        public\n        view\n        override\n        returns (uint256 processedWethSum)\n    {\n        uint256 tokenCount = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        ).getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address tokenAddress = IIntegrationMap(\n                moduleMap.getModuleAddress(Modules.IntegrationMap)\n            ).getTokenAddress(tokenId);\n            processedWethSum += processedWethByToken[tokenAddress];\n        }\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The amount of WETH received from token yield processing\n    function getProcessedWethByToken(address tokenAddress)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return processedWethByToken[tokenAddress];\n    }\n\n    /// @return processedWethByTokenSum The sum of processed WETH\n    function getProcessedWethByTokenSum(address[] calldata tokenAddresses)\n        public\n        view\n        override\n        returns (uint256 processedWethByTokenSum)\n    {\n        for (uint256 tokenId; tokenId < tokenAddresses.length; tokenId++) {\n            processedWethByTokenSum += processedWethByToken[\n                tokenAddresses[tokenId]\n            ];\n        }\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\n    function getTokenTotalIntegrationBalance(address tokenAddress)\n        public\n        view\n        override\n        returns (uint256 tokenTotalIntegrationBalance)\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        uint256 integrationCount = integrationMap\n            .getIntegrationAddressesLength();\n\n        for (\n            uint256 integrationId;\n            integrationId < integrationCount;\n            integrationId++\n        ) {\n            tokenTotalIntegrationBalance += IIntegration(\n                integrationMap.getIntegrationAddress(integrationId)\n            ).getBalance(tokenAddress);\n        }\n    }\n\n    /// @return The address of the gas account\n    function getGasAccount() public view override returns (address) {\n        return gasAccount;\n    }\n\n    /// @return The address of the treasury account\n    function getTreasuryAccount() public view override returns (address) {\n        return treasuryAccount;\n    }\n\n    /// @return The last amount of ETH distributed to rewards\n    function getLastEthRewardsAmount() public view override returns (uint256) {\n        return lastEthRewardsAmount;\n    }\n\n    /// @return The target ETH balance of the gas account\n    function getGasAccountTargetEthBalance()\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return gasAccountTargetEthBalance;\n    }\n\n    /// @return The BIOS buyback ETH weight\n    /// @return The Treasury ETH weight\n    /// @return The Protocol fee ETH weight\n    /// @return The rewards ETH weight\n    function getEthDistributionWeights()\n        public\n        view\n        override\n        returns (\n            uint32,\n            uint32,\n            uint32,\n            uint32\n        )\n    {\n        return (\n            biosBuyBackEthWeight,\n            treasuryEthWeight,\n            protocolFeeEthWeight,\n            rewardsEthWeight\n        );\n    }\n\n    function transferClosedPositionsValue(\n        address destination,\n        address token,\n        uint256 amount\n    ) external override onlyController {\n        IERC20MetadataUpgradeable(token).safeTransfer(destination, amount);\n    }\n}\n"
    },
    "contracts/interfaces/IAMMIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IAMMIntegration {\n    /// @dev IMPORTANT: poolID starts at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\n    /// For UniswapV2 and Sushiswap, retrieve the pool address by calling the Router.\n    struct Pool {\n        address tokenA;\n        address tokenB;\n        uint256 positionID; // Used for Uniswap V3\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of token being deposited\n    /// @param poolID  The id of the pool to deposit into\n    function deposit(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external;\n\n    /// @param token  the token to withdraw\n    /// @param amount The amount of token in the pool to withdraw\n    /// @param poolID  the pool to withdraw from\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external;\n\n    /// @dev Deploys all the tokens for the specified pools\n    function deploy(uint32 poolID) external;\n\n    /// @notice Returns the balance of a specific pool\n    /// @param poolID  the id of the pool to return balances from\n    function getPoolBalance(uint32 poolID)\n        external\n        view\n        returns (uint256 tokenA, uint256 tokenB);\n\n    /// @notice returns the details of an amm pool\n    /// @dev This should throw if poolID is == 0\n    /// @param poolID  the ID of the pool to retrieve details for\n    function getPool(uint32 poolID) external view returns (Pool memory pool);\n\n    /// @notice Adds an existing position to the integration for use in a strategy\n    /// @dev Should be restricted to admin accounts\n    /// @param tokenA  The first token in the position\n    /// @param tokenB the second token in the position\n    /// @param positionID  The position id if required (uniswap v3)\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256 positionID\n    ) external;\n}\n"
    },
    "contracts/interfaces/IEtherRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IEtherRewards {\n    /// @param token The address of the token ERC20 contract\n    /// @param user The address of the user\n    function updateUserRewards(address token, address user) external;\n\n    /// @param token The address of the token ERC20 contract\n    /// @param ethRewardsAmount The amount of Ether rewards to add\n    function increaseEthRewards(address token, uint256 ethRewardsAmount)\n        external;\n\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function claimEthRewards(address user)\n        external\n        returns (uint256 ethRewards);\n\n    /// @param token The address of the token ERC20 contract\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserTokenEthRewards(address token, address user)\n        external\n        view\n        returns (uint256 ethRewards);\n\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserEthRewards(address user)\n        external\n        view\n        returns (uint256 ethRewards);\n\n    /// @param token The address of the token ERC20 contract\n    /// @return The amount of Ether rewards for the specified token\n    function getTokenEthRewards(address token) external view returns (uint256);\n\n    /// @return The total value of ETH claimed by users\n    function getTotalClaimedEthRewards() external view returns (uint256);\n\n    /// @return The total value of ETH claimed by a user\n    function getTotalUserClaimedEthRewards(address user)\n        external\n        view\n        returns (uint256);\n\n    /// @return The total amount of Ether rewards\n    function getEthRewards() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IYieldManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IYieldManager {\n    // #### Structs\n\n    struct DeployRequest {\n        address integration;\n        address[] tokens; // If ammPoolID > 0, this should contain exactly two addresses\n        uint32 ammPoolID; // The pool to deposit into. This is 0 for non-AMM integrations\n    }\n\n    // #### Functions\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\n    function updateGasAccountTargetEthBalance(\n        uint256 gasAccountTargetEthBalance_\n    ) external;\n\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\n    function updateEthDistributionWeights(\n        uint32 biosBuyBackEthWeight_,\n        uint32 treasuryEthWeight_,\n        uint32 protocolFeeEthWeight_,\n        uint32 rewardsEthWeight_\n    ) external;\n\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\n    function updateGasAccount(address payable gasAccount_) external;\n\n    /// @param treasuryAccount_ The address of the system treasury account\n    function updateTreasuryAccount(address payable treasuryAccount_) external;\n\n    /// @notice Deploys all tokens to all integrations according to configured weights\n    function deploy(DeployRequest[] calldata deployments) external;\n\n    /// @notice Harvests available yield from all tokens and integrations\n    function harvestYield(\n        address integrationAddress,\n        address[] calldata tokenAddresses\n    ) external;\n\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\n    function distributeEth() external;\n\n    /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\n    function biosBuyBack() external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The amount of the token held in the Kernel as reserves\n    function getReserveTokenBalance(address tokenAddress)\n        external\n        view\n        returns (uint256);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The desired amount of the token to hold in the Kernel as reserves\n    function getDesiredReserveTokenBalance(address tokenAddress)\n        external\n        view\n        returns (uint256);\n\n    /// @return ethWeightSum The sum of ETH distribution weights\n    function getEthWeightSum() external view returns (uint32 ethWeightSum);\n\n    /// @return processedWethSum The sum of yields processed into WETH\n    function getProcessedWethSum()\n        external\n        view\n        returns (uint256 processedWethSum);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The amount of WETH received from token yield processing\n    function getProcessedWethByToken(address tokenAddress)\n        external\n        view\n        returns (uint256);\n\n    /// @return processedWethByTokenSum The sum of processed WETH\n    function getProcessedWethByTokenSum(address[] calldata)\n        external\n        view\n        returns (uint256 processedWethByTokenSum);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\n    function getTokenTotalIntegrationBalance(address tokenAddress)\n        external\n        view\n        returns (uint256 tokenTotalIntegrationBalance);\n\n    /// @return The address of the gas account\n    function getGasAccount() external view returns (address);\n\n    /// @return The address of the treasury account\n    function getTreasuryAccount() external view returns (address);\n\n    /// @return The last amount of ETH distributed to rewards\n    function getLastEthRewardsAmount() external view returns (uint256);\n\n    /// @return The target ETH balance of the gas account\n    function getGasAccountTargetEthBalance() external view returns (uint256);\n\n    /// @return The BIOS buyback ETH weight\n    /// @return The Treasury ETH weight\n    /// @return The Protocol fee ETH weight\n    /// @return The rewards ETH weight\n    function getEthDistributionWeights()\n        external\n        view\n        returns (\n            uint32,\n            uint32,\n            uint32,\n            uint32\n        );\n\n    function transferClosedPositionsValue(\n        address destination,\n        address token,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/ISushiSwapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapTrader {\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\n    function updateSlippageNumerator(uint24 slippageNumerator_) external;\n\n    /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\n    /// @return Bool indicating whether the trade succeeded\n    function biosBuyBack() external returns (bool);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return bool Indicates whether the swap succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external returns (bool);\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/core/UserPositions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IBiosRewards.sol\";\nimport \"../interfaces/IEtherRewards.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @title User Positions\n/// @notice Allows users to deposit/withdraw erc20 tokens\ncontract UserPositions is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IUserPositions\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint32 private _biosRewardsDuration;\n\n    // Token address => total supply held by the contract\n    mapping(address => uint256) private _totalSupply;\n\n    // Token address => User address => Balance of tokens a user has deposited\n    mapping(address => mapping(address => uint256)) private _balances;\n\n    // User => Token => deployed balance\n    mapping(address => mapping(address => uint256)) private _deployedBalances;\n\n    // User => strategy => token => balance\n    mapping(address => mapping(uint256 => mapping(address => uint256)))\n        private _userStrategyBalances;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Address of the Module Map\n    /// @param biosRewardsDuration_ The duration is seconds for a BIOS rewards period to last\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        uint32 biosRewardsDuration_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        _biosRewardsDuration = biosRewardsDuration_;\n    }\n\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_)\n        external\n        override\n        onlyController\n    {\n        require(\n            _biosRewardsDuration != biosRewardsDuration_,\n            \"UserPositions::setBiosRewardsDuration: Duration must be set to a new value\"\n        );\n        require(\n            biosRewardsDuration_ > 0,\n            \"UserPositions::setBiosRewardsDuration: Duration must be greater than zero\"\n        );\n\n        _biosRewardsDuration = biosRewardsDuration_;\n    }\n\n    /// @param sender The account seeding BIOS rewards\n    /// @param biosAmount The amount of BIOS to add to rewards\n    function seedBiosRewards(address sender, uint256 biosAmount)\n        external\n        override\n        onlyController\n    {\n        require(\n            biosAmount > 0,\n            \"UserPositions::seedBiosRewards: BIOS amount must be greater than zero\"\n        );\n\n        IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getBiosTokenAddress()\n        );\n\n        bios.safeTransferFrom(\n            sender,\n            moduleMap.getModuleAddress(Modules.Kernel),\n            biosAmount\n        );\n\n        _increaseBiosRewards();\n    }\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param depositor Address of the account depositing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param ethAmount The amount of ETH sent with the deposit\n    function deposit(\n        address depositor,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256 ethAmount,\n        bool migration\n    ) external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n\n        uint256[] memory actualAmounts = new uint256[](tokens.length);\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            // Token must be accepting deposits\n            require(\n                integrationMap.getTokenAcceptingDeposits(tokens[tokenId]),\n                \"UserPositions::deposit: This token is not accepting deposits\"\n            );\n\n            require(\n                amounts[tokenId] > 0,\n                \"UserPositions::deposit: Deposit amount must be greater than zero\"\n            );\n            uint256 actualAmount;\n            if (migration) {\n                actualAmount = amounts[tokenId];\n            } else {\n                IERC20MetadataUpgradeable erc20 = IERC20MetadataUpgradeable(\n                    tokens[tokenId]\n                );\n                // Get the balance before the transfer\n                uint256 beforeBalance = erc20.balanceOf(\n                    moduleMap.getModuleAddress(Modules.Kernel)\n                );\n\n                // Transfer the tokens from the depositor to the Kernel\n                erc20.safeTransferFrom(\n                    depositor,\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amounts[tokenId]\n                );\n\n                // Get the balance after the transfer\n                uint256 afterBalance = erc20.balanceOf(\n                    moduleMap.getModuleAddress(Modules.Kernel)\n                );\n                actualAmount = afterBalance - beforeBalance;\n                // Increase rewards\n\n                IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards))\n                    .increaseRewards(tokens[tokenId], depositor, actualAmount);\n                IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\n                    .updateUserRewards(tokens[tokenId], depositor);\n            }\n            actualAmounts[tokenId] = actualAmount;\n\n            // Update balances\n            _totalSupply[tokens[tokenId]] += actualAmount;\n            _balances[tokens[tokenId]][depositor] += actualAmount;\n        }\n\n        if (ethAmount > 0) {\n            address wethAddress = integrationMap.getWethTokenAddress();\n\n            // Increase rewards\n            IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards))\n                .increaseRewards(wethAddress, depositor, ethAmount);\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\n                .updateUserRewards(wethAddress, depositor);\n\n            // Update WETH balances\n            _totalSupply[wethAddress] += ethAmount;\n            _balances[wethAddress][depositor] += ethAmount;\n        }\n\n        emit Deposit(depositor, tokens, actualAmounts, ethAmount);\n    }\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param recipient The address of the user withdrawing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function withdraw(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) external override onlyController returns (uint256 ethWithdrawn) {\n        ethWithdrawn = _withdraw(recipient, tokens, amounts, withdrawWethAsEth);\n    }\n\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\n    /// @param recipient The address of the user withdrawing tokens\n    /// @param tokens Array of token address that user is exiting positions from\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    /// @return tokenAmounts The amounts of each token being withdrawn\n    /// @return ethWithdrawn The amount of ETH being withdrawn\n    /// @return ethClaimed The amount of ETH being claimed from rewards\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\n    function withdrawAllAndClaim(\n        address recipient,\n        address[] memory tokens,\n        bool withdrawWethAsEth\n    )\n        external\n        override\n        onlyController\n        returns (\n            uint256[] memory tokenAmounts,\n            uint256 ethWithdrawn,\n            uint256 ethClaimed,\n            uint256 biosClaimed\n        )\n    {\n        tokenAmounts = new uint256[](tokens.length);\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            tokenAmounts[tokenId] = userTokenBalance(\n                tokens[tokenId],\n                recipient\n            );\n        }\n\n        ethWithdrawn = _withdraw(\n            recipient,\n            tokens,\n            tokenAmounts,\n            withdrawWethAsEth\n        );\n\n        if (\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\n                .getUserEthRewards(recipient) > 0\n        ) {\n            ethClaimed = _claimEthRewards(recipient);\n        }\n\n        biosClaimed = _claimBiosRewards(recipient);\n    }\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param recipient The address of the user withdrawing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function _withdraw(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) private returns (uint256 ethWithdrawn) {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        address wethAddress = integrationMap.getWethTokenAddress();\n\n        require(\n            tokens.length == amounts.length,\n            \"UserPositions::_withdraw: Tokens array length does not match amounts array length\"\n        );\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            if (amounts[tokenId] == 0) break;\n            require(\n                integrationMap.getTokenAcceptingWithdrawals(tokens[tokenId]),\n                \"UserPositions::_withdraw: This token is not accepting withdrawals\"\n            );\n            require(\n                amounts[tokenId] <=\n                    userTokenBalance(tokens[tokenId], recipient),\n                \"UserPositions::_withdraw: Withdraw amount exceeds user balance\"\n            );\n\n            // Process user withdrawal amount management, and close out positions as needed to fund the withdrawal\n            uint256 reserveBalance = IERC20MetadataUpgradeable(tokens[tokenId])\n                .balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\n\n            if (reserveBalance < amounts[tokenId]) {\n                IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n                    .closePositionsForWithdrawal(\n                        tokens[tokenId],\n                        amounts[tokenId]\n                    );\n            }\n\n            if (tokens[tokenId] == wethAddress && withdrawWethAsEth) {\n                ethWithdrawn = amounts[tokenId];\n            } else {\n                uint256 currentReserves = IERC20MetadataUpgradeable(\n                    tokens[tokenId]\n                ).balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\n                if (currentReserves < amounts[tokenId]) {\n                    // Amounts recovered from the integrations for the user was lower than requested, likely due to fees (see yearn).\n                    IERC20MetadataUpgradeable(tokens[tokenId]).safeTransferFrom(\n                            moduleMap.getModuleAddress(Modules.Kernel),\n                            recipient,\n                            currentReserves\n                        );\n                } else {\n                    // Send the tokens back to specified recipient\n                    IERC20MetadataUpgradeable(tokens[tokenId]).safeTransferFrom(\n                            moduleMap.getModuleAddress(Modules.Kernel),\n                            recipient,\n                            amounts[tokenId]\n                        );\n                }\n            }\n\n            // Decrease rewards\n            IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards))\n                .decreaseRewards(tokens[tokenId], recipient, amounts[tokenId]);\n\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\n                .updateUserRewards(tokens[tokenId], recipient);\n\n            // Update balances\n            _totalSupply[tokens[tokenId]] -= amounts[tokenId];\n            _balances[tokens[tokenId]][recipient] -= amounts[tokenId];\n        }\n    }\n\n    function abs(int256 val) internal pure returns (uint256) {\n        return uint256(val >= 0 ? val : -val);\n    }\n\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\n    function increaseBiosRewards() external override onlyController {\n        _increaseBiosRewards();\n    }\n\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\n    function _increaseBiosRewards() private {\n        IBiosRewards biosRewards = IBiosRewards(\n            moduleMap.getModuleAddress(Modules.BiosRewards)\n        );\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        address biosAddress = integrationMap.getBiosTokenAddress();\n        uint256 kernelBiosBalance = IERC20MetadataUpgradeable(biosAddress)\n            .balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\n\n        require(\n            kernelBiosBalance >\n                biosRewards.getBiosRewards() + _totalSupply[biosAddress],\n            \"UserPositions::increaseBiosRewards: No available BIOS to add to rewards\"\n        );\n\n        uint256 availableBiosRewards = kernelBiosBalance -\n            biosRewards.getBiosRewards() -\n            _totalSupply[biosAddress];\n\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        uint256 biosRewardWeightSum = integrationMap.getBiosRewardWeightSum();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address token = integrationMap.getTokenAddress(tokenId);\n            uint256 tokenBiosRewardWeight = integrationMap\n                .getTokenBiosRewardWeight(token);\n            uint256 tokenBiosRewardAmount = (availableBiosRewards *\n                tokenBiosRewardWeight) / biosRewardWeightSum;\n            _increaseTokenBiosRewards(token, tokenBiosRewardAmount);\n        }\n    }\n\n    /// @param token The address of the ERC20 token contract\n    /// @param biosReward The added reward amount\n    function _increaseTokenBiosRewards(address token, uint256 biosReward)\n        private\n    {\n        IBiosRewards biosRewards = IBiosRewards(\n            moduleMap.getModuleAddress(Modules.BiosRewards)\n        );\n\n        require(\n            IERC20MetadataUpgradeable(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getBiosTokenAddress()\n            ).balanceOf(moduleMap.getModuleAddress(Modules.Kernel)) >=\n                biosReward + biosRewards.getBiosRewards(),\n            \"UserPositions::increaseTokenBiosRewards: Not enough available BIOS for specified amount\"\n        );\n\n        biosRewards.notifyRewardAmount(token, biosReward, _biosRewardsDuration);\n    }\n\n    /// @param recipient The address of the user claiming BIOS rewards\n    function claimEthRewards(address recipient)\n        external\n        override\n        onlyController\n        returns (uint256 ethClaimed)\n    {\n        ethClaimed = _claimEthRewards(recipient);\n    }\n\n    /// @param recipient The address of the user claiming BIOS rewards\n    function _claimEthRewards(address recipient)\n        private\n        returns (uint256 ethClaimed)\n    {\n        ethClaimed = IEtherRewards(\n            moduleMap.getModuleAddress(Modules.EtherRewards)\n        ).claimEthRewards(recipient);\n    }\n\n    /// @notice Allows users to claim their BIOS rewards for each token\n    /// @param recipient The address of the user claiming BIOS rewards\n    function claimBiosRewards(address recipient)\n        external\n        override\n        onlyController\n        returns (uint256 biosClaimed)\n    {\n        biosClaimed = _claimBiosRewards(recipient);\n    }\n\n    /// @notice Allows users to claim their BIOS rewards for each token\n    /// @param recipient The address of the user claiming BIOS rewards\n    function _claimBiosRewards(address recipient)\n        private\n        returns (uint256 biosClaimed)\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IBiosRewards biosRewards = IBiosRewards(\n            moduleMap.getModuleAddress(Modules.BiosRewards)\n        );\n\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address token = integrationMap.getTokenAddress(tokenId);\n\n            if (biosRewards.earned(token, recipient) > 0) {\n                biosClaimed += IBiosRewards(\n                    moduleMap.getModuleAddress(Modules.BiosRewards)\n                ).claimReward(token, recipient);\n            }\n        }\n\n        IERC20MetadataUpgradeable(integrationMap.getBiosTokenAddress())\n            .safeTransferFrom(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                recipient,\n                biosClaimed\n            );\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @return The total balance of the asset deposited in the system\n    function totalTokenBalance(address asset)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _totalSupply[asset];\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userTokenBalance(address asset, address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        if (_deployedBalances[account][asset] >= _balances[asset][account]) {\n            return 0;\n        }\n        return _balances[asset][account] - _deployedBalances[account][asset];\n    }\n\n    /// @return The Bios Rewards Duration\n    function getBiosRewardsDuration() public view override returns (uint32) {\n        return _biosRewardsDuration;\n    }\n\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\n        external\n        override\n    {\n        _enterStrategy(strategyID, msg.sender, tokens, false);\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n            .increaseStrategy(strategyID, tokens);\n    }\n\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\n        external\n        override\n    {\n        require(tokens.length > 0, \"tokens required\");\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(tokens[i].token != address(0), \"invalid token\");\n            require(tokens[i].amount > 0, \"invalid amount\");\n            require(\n                _userStrategyBalances[msg.sender][strategyID][\n                    tokens[i].token\n                ] >= tokens[i].amount,\n                \"insufficient funds\"\n            );\n            _deployedBalances[msg.sender][tokens[i].token] -= tokens[i].amount;\n            _userStrategyBalances[msg.sender][strategyID][\n                tokens[i].token\n            ] -= tokens[i].amount;\n        }\n\n        emit ExitStrategy(strategyID, msg.sender, tokens);\n\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n            .decreaseStrategy(strategyID, tokens);\n    }\n\n    function getUserStrategyBalanceByToken(\n        uint256 id,\n        address token,\n        address user\n    ) external view override returns (uint256 amount) {\n        return _userStrategyBalances[user][id][token];\n    }\n\n    function getUserInvestedAmountByToken(address token, address user)\n        external\n        view\n        override\n        returns (uint256 amount)\n    {\n        return _deployedBalances[user][token];\n    }\n\n    function getUserBalances(\n        address user,\n        uint256[] calldata _strategies,\n        address[] calldata _tokens\n    )\n        external\n        view\n        override\n        returns (\n            IStrategyMap.StrategyBalance[] memory strategyBalance,\n            IStrategyMap.GeneralBalance[] memory userBalance\n        )\n    {\n        strategyBalance = new IStrategyMap.StrategyBalance[](\n            _strategies.length\n        );\n        userBalance = new IStrategyMap.GeneralBalance[](_tokens.length);\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            userBalance[i].token = _tokens[i];\n            userBalance[i].balance = _balances[_tokens[i]][user];\n        }\n        address strategyMapAddress = moduleMap.getModuleAddress(\n            Modules.StrategyMap\n        );\n        for (uint256 i = 0; i < _strategies.length; i++) {\n            IStrategyMap.Token[] memory strategyTokens = IStrategyMap(\n                strategyMapAddress\n            ).getStrategy(_strategies[i]).tokens;\n\n            strategyBalance[i].tokens = new IStrategyMap.GeneralBalance[](\n                strategyTokens.length\n            );\n            strategyBalance[i].strategyID = _strategies[i];\n            for (uint256 j = 0; j < strategyTokens.length; j++) {\n                strategyBalance[i].tokens[j].token = strategyTokens[j].token;\n                strategyBalance[i].tokens[j].balance = _userStrategyBalances[\n                    user\n                ][_strategies[i]][strategyTokens[j].token];\n            }\n        }\n    }\n\n    function _enterStrategy(\n        uint256 strategyId,\n        address user,\n        TokenMovement[] calldata tokens,\n        bool migration\n    ) internal {\n        require(tokens.length > 0, \"tokens required\");\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(tokens[i].token != address(0), \"invalid token\");\n            require(tokens[i].amount > 0, \"invalid amount\");\n            if (!migration) {\n                require(\n                    userTokenBalance(tokens[i].token, user) >= tokens[i].amount,\n                    \"insufficient funds\"\n                );\n            } else {\n                _balances[tokens[i].token][user] += tokens[i].amount;\n            }\n\n            _userStrategyBalances[user][strategyId][tokens[i].token] += tokens[\n                i\n            ].amount;\n            _deployedBalances[user][tokens[i].token] += tokens[i].amount;\n        }\n\n        emit EnterStrategy(strategyId, user, tokens);\n    }\n\n    function migrateUser(uint256 strategyId, MigrateStrategy[] calldata users)\n        external\n        override\n        onlyController\n    {\n        IStrategyMap strategyMap = IStrategyMap(\n            moduleMap.getModuleAddress(Modules.StrategyMap)\n        );\n        for (uint256 i = 0; i < users.length; i++) {\n            _enterStrategy(strategyId, users[i].user, users[i].tokens, true);\n            strategyMap.increaseTokenBalance(strategyId, users[i].tokens);\n        }\n    }\n}\n"
    },
    "contracts/core/StrategyMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"./Controlled.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IYieldManager.sol\";\n\ncontract StrategyMap is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IStrategyMap\n{\n    // #### Constants\n    uint32 public constant TOKEN_WEIGHT = 100000;\n\n    // #### Global State\n\n    // Strategy id => Strategy\n    mapping(uint256 => Strategy) internal strategies;\n\n    // Token => total amount in all strategies\n    mapping(address => uint256) internal tokenBalances;\n\n    // Strategy => token => balance\n    mapping(uint256 => mapping(address => uint256))\n        internal strategyTokenBalances;\n\n    // Integration => pool id => token => amount to deploy\n    mapping(address => mapping(uint32 => mapping(address => int256)))\n        internal deployAmount;\n\n    // Token => {integration, pool, amount}[]\n    mapping(address => ClosablePosition[]) private _closablePositions;\n\n    uint256 public override idCounter;\n\n    // Used for strategy verification. Contents are always deleted at the end of a tx to reduce gas hit.\n    mapping(address => uint256) internal tokenWeights;\n\n    // #### Functions\n\n    function initialize(address[] memory controllers_, address moduleMap_)\n        public\n        initializer\n    {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    function addStrategy(\n        string calldata name,\n        Integration[] calldata integrations,\n        Token[] calldata tokens\n    ) external override onlyController {\n        require(integrations.length > 0, \"integrations missing\");\n        require(tokens.length > 0, \"tokens missing\");\n        require(bytes(name).length > 0, \"must have a name\");\n\n        idCounter++;\n        uint256 strategyID = idCounter;\n        _verifyAndSetStrategy(strategyID, name, integrations, tokens);\n\n        // Emit event\n        emit NewStrategy(strategyID, integrations, tokens, name);\n    }\n\n    function _verifyAndSetStrategy(\n        uint256 strategyID,\n        string memory name,\n        Integration[] memory integrations,\n        Token[] memory tokens\n    ) internal {\n        for (uint256 i = 0; i < integrations.length; i++) {\n            require(\n                integrations[i].integration != address(0),\n                \"bad integration\"\n            );\n        }\n\n        address[] memory uniqueTokens = new address[](tokens.length);\n        uint256 idx = 0;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(\n                tokens[i].integrationPairIdx < integrations.length,\n                \"integration idx out of bounds\"\n            );\n            require(tokens[i].token != address(0), \"bad token\");\n\n            if (tokenWeights[tokens[i].token] == 0) {\n                uniqueTokens[idx] = tokens[i].token;\n                idx++;\n            }\n            tokenWeights[tokens[i].token] += tokens[i].weight;\n        }\n\n        // Verify weights\n        for (uint256 i = 0; i < idx; i++) {\n            require(\n                tokenWeights[uniqueTokens[i]] == TOKEN_WEIGHT,\n                \"invalid token weight\"\n            );\n            strategies[strategyID].availableTokens[uniqueTokens[i]] = true;\n            delete tokenWeights[uniqueTokens[i]];\n        }\n\n        strategies[strategyID].name = name;\n\n        // Can't copy a memory array directly to storage yet, so we build it manually.\n        for (uint256 i = 0; i < integrations.length; i++) {\n            strategies[strategyID].integrations.push(integrations[i]);\n        }\n        for (uint256 i = 0; i < tokens.length; i++) {\n            strategies[strategyID].tokens.push(tokens[i]);\n        }\n    }\n\n    function updateName(uint256 id, string calldata name)\n        external\n        override\n        onlyController\n    {\n        require(bytes(strategies[id].name).length > 0, \"strategy must exist\");\n        require(bytes(name).length > 0, \"invalid name\");\n        strategies[id].name = name;\n        emit UpdateName(id, name);\n    }\n\n    function updateStrategy(\n        uint256 id,\n        Integration[] calldata integrations,\n        Token[] calldata tokens\n    ) external override onlyController {\n        require(integrations.length > 0, \"integrations missing\");\n        require(tokens.length > 0, \"tokens missing\");\n        require(bytes(strategies[id].name).length > 0, \"strategy must exist\");\n\n        StrategySummary memory currentStrategy = getStrategy(id);\n\n        delete strategies[id].tokens;\n        delete strategies[id].integrations;\n\n        // Reduce deploy amount for each current token by: strat token balance * weight / TOKEN_WEIGHT\n\n        for (uint256 i = 0; i < currentStrategy.tokens.length; i++) {\n            deployAmount[\n                currentStrategy\n                    .integrations[currentStrategy.tokens[i].integrationPairIdx]\n                    .integration\n            ][\n                currentStrategy\n                    .integrations[currentStrategy.tokens[i].integrationPairIdx]\n                    .ammPoolID\n            ][currentStrategy.tokens[i].token] -= int256(\n                (strategyTokenBalances[id][currentStrategy.tokens[i].token] *\n                    currentStrategy.tokens[i].weight) / TOKEN_WEIGHT\n            );\n\n            delete strategies[id].availableTokens[\n                currentStrategy.tokens[i].token\n            ];\n        }\n\n        // Increase deploy amount for each new token by: strat token balance * weight / TOKEN_WEIGHT\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (strategyTokenBalances[id][tokens[i].token] > 0) {\n                deployAmount[\n                    integrations[tokens[i].integrationPairIdx].integration\n                ][integrations[tokens[i].integrationPairIdx].ammPoolID][\n                    tokens[i].token\n                ] += int256(\n                    (strategyTokenBalances[id][tokens[i].token] *\n                        tokens[i].weight) / TOKEN_WEIGHT\n                );\n            }\n        }\n\n        _verifyAndSetStrategy(id, currentStrategy.name, integrations, tokens);\n\n        emit UpdateStrategy(id, integrations, tokens);\n    }\n\n    function deleteStrategy(uint256 id) external override onlyController {\n        StrategySummary memory strategy = getStrategy(id);\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            require(\n                strategyTokenBalances[id][strategy.tokens[i].token] == 0,\n                \"strategy in use\"\n            );\n            delete strategies[id].availableTokens[strategy.tokens[i].token];\n        }\n        delete strategies[id];\n        emit DeleteStrategy(id);\n    }\n\n    function increaseStrategy(\n        uint256 id,\n        IUserPositions.TokenMovement[] calldata tokens\n    ) external override onlyController {\n        StrategySummary memory strategy = getStrategy(id);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(\n                strategies[id].availableTokens[tokens[i].token],\n                \"invalid token\"\n            );\n            strategyTokenBalances[id][tokens[i].token] += tokens[i].amount;\n            tokenBalances[tokens[i].token] += tokens[i].amount;\n\n            for (uint256 j = 0; j < strategy.tokens.length; j++) {\n                if (tokens[i].token == strategy.tokens[j].token) {\n                    Integration memory integration = strategy.integrations[\n                        strategy.tokens[j].integrationPairIdx\n                    ];\n                    deployAmount[integration.integration][\n                        integration.ammPoolID\n                    ][tokens[i].token] += int256(\n                        _getTokenAmount(\n                            tokens[i].amount,\n                            strategy.tokens[j].weight,\n                            TOKEN_WEIGHT\n                        )\n                    );\n                }\n            }\n        }\n    }\n\n    function _getTokenAmount(\n        uint256 tokenAmount,\n        uint256 numerator,\n        uint256 denominator\n    ) internal pure returns (uint256) {\n        return (tokenAmount * numerator) / denominator;\n    }\n\n    function decreaseStrategy(\n        uint256 id,\n        IUserPositions.TokenMovement[] calldata tokens\n    ) external override onlyController {\n        StrategySummary memory strategy = getStrategy(id);\n        require(strategy.tokens.length > 0, \"invalid strategy\");\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(\n                strategyTokenBalances[id][tokens[i].token] >= tokens[i].amount,\n                \"insufficient funds\"\n            );\n            require(\n                tokenBalances[tokens[i].token] >= tokens[i].amount,\n                \"insufficient funds\"\n            );\n            strategyTokenBalances[id][tokens[i].token] -= tokens[i].amount;\n            tokenBalances[tokens[i].token] -= tokens[i].amount;\n\n            for (uint256 j = 0; j < strategy.tokens.length; j++) {\n                if (tokens[i].token == strategy.tokens[j].token) {\n                    Integration memory integration = strategy.integrations[\n                        strategy.tokens[j].integrationPairIdx\n                    ];\n                    uint256 amount = _getTokenAmount(\n                        tokens[i].amount,\n                        strategy.tokens[j].weight,\n                        TOKEN_WEIGHT\n                    );\n                    deployAmount[integration.integration][\n                        integration.ammPoolID\n                    ][tokens[i].token] -= int256(amount);\n\n                    _closablePositions[tokens[i].token].push(\n                        ClosablePosition(\n                            integration.integration,\n                            integration.ammPoolID,\n                            amount\n                        )\n                    );\n                }\n            }\n        }\n    }\n\n    function clearClosablePositions(address[] calldata tokens)\n        external\n        override\n        onlyController\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            delete _closablePositions[tokens[i]];\n        }\n    }\n\n    function closePositionsForWithdrawal(address token, uint256 amount)\n        external\n        override\n        onlyController\n    {\n        ClosablePosition[] memory positions = _closablePositions[token];\n        uint256 amountGathered = 0;\n        for (uint256 i = positions.length - 1; i >= 0; i--) {\n            if (positions[i].ammPoolID == 0) {\n                IIntegration(positions[i].integration).withdraw(\n                    token,\n                    positions[i].amount\n                );\n            } else {\n                IAMMIntegration(positions[i].integration).withdraw(\n                    token,\n                    positions[i].amount,\n                    positions[i].ammPoolID\n                );\n            }\n\n            _closablePositions[token].pop();\n\n            decreaseDeployAmountChange(\n                positions[i].integration,\n                positions[i].ammPoolID,\n                token,\n                positions[i].amount\n            );\n\n            amountGathered += positions[i].amount;\n\n            if (amountGathered >= amount) {\n                break;\n            }\n        }\n    }\n\n    function decreaseDeployAmountChange(\n        address integration,\n        uint32 poolID,\n        address token,\n        uint256 amount\n    ) public override {\n        int256 currentAmount = deployAmount[integration][poolID][token];\n\n        if (currentAmount >= 0) {\n            deployAmount[integration][poolID][token] -= int256(amount);\n        } else {\n            deployAmount[integration][poolID][token] += int256(amount);\n        }\n    }\n\n    function getStrategy(uint256 id)\n        public\n        view\n        override\n        returns (StrategySummary memory)\n    {\n        StrategySummary memory result;\n        result.name = strategies[id].name;\n        result.integrations = strategies[id].integrations;\n        result.tokens = strategies[id].tokens;\n        return result;\n    }\n\n    function getMultipleStrategies(uint256[] calldata ids)\n        external\n        view\n        override\n        returns (StrategySummary[] memory)\n    {\n        StrategySummary[] memory severalStrategies = new StrategySummary[](\n            ids.length\n        );\n        for (uint256 i = 0; i < ids.length; i++) {\n            severalStrategies[i] = getStrategy(ids[i]);\n        }\n        return severalStrategies;\n    }\n\n    function getStrategyTokenBalance(uint256 id, address token)\n        public\n        view\n        override\n        returns (uint256 amount)\n    {\n        amount = strategyTokenBalances[id][token];\n    }\n\n    function getTokenTotalBalance(address token)\n        public\n        view\n        override\n        returns (uint256 amount)\n    {\n        amount = tokenBalances[token];\n    }\n\n    function getDeployAmount(\n        address integration,\n        uint32 poolID,\n        address token\n    ) external view override returns (int256) {\n        return deployAmount[integration][poolID][token];\n    }\n\n    function getStrategyBalances(\n        uint256[] calldata _strategies,\n        address[] calldata _tokens\n    )\n        external\n        view\n        override\n        returns (\n            StrategyBalance[] memory strategyBalances,\n            GeneralBalance[] memory generalBalances\n        )\n    {\n        strategyBalances = new StrategyBalance[](_strategies.length);\n        generalBalances = new GeneralBalance[](_tokens.length);\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            generalBalances[i].token = _tokens[i];\n            generalBalances[i].balance = tokenBalances[_tokens[i]];\n        }\n\n        for (uint256 i = 0; i < _strategies.length; i++) {\n            Token[] memory strategyTokens = strategies[_strategies[i]].tokens;\n            strategyBalances[i].tokens = new GeneralBalance[](\n                strategyTokens.length\n            );\n            strategyBalances[i].strategyID = _strategies[i];\n            for (uint256 j = 0; j < strategyTokens.length; j++) {\n                strategyBalances[i].tokens[j].token = strategyTokens[j].token;\n                strategyBalances[i].tokens[j].balance = strategyTokenBalances[\n                    _strategies[i]\n                ][strategyTokens[j].token];\n            }\n        }\n    }\n\n    function getStrategyTokenLength(uint256 strategy)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return strategies[strategy].tokens.length;\n    }\n\n    function getClosablePositions(address token, uint256 index)\n        external\n        view\n        returns (ClosablePosition memory)\n    {\n        return _closablePositions[token][index];\n    }\n\n    function increaseTokenBalance(\n        uint256 id,\n        IUserPositions.TokenMovement[] calldata tokens\n    ) external override onlyController {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(\n                strategies[id].availableTokens[tokens[i].token],\n                \"invalid token\"\n            );\n            strategyTokenBalances[id][tokens[i].token] += tokens[i].amount;\n            tokenBalances[tokens[i].token] += tokens[i].amount;\n        }\n    }\n}\n"
    },
    "contracts/UserMigration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IIntegration.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IYieldManager.sol\";\nimport \"./interfaces/IUserPositions.sol\";\n\n/// @title Kernel\n/// @notice Allows users to deposit/withdraw erc20 tokens\n/// @notice Allows a system admin to control which tokens are depositable\ncontract UserMigration is Initializable, OwnableUpgradeable {\n    struct MigrateDeposits {\n        address user;\n        address[] tokens;\n        uint256[] amounts;\n    }\n\n    function initialize() external initializer {\n        __Ownable_init();\n    }\n\n    function transferFunds(\n        address yieldManager,\n        address kernel,\n        address[] calldata ymTokens,\n        uint256[] calldata ymAmounts\n    ) external onlyOwner {\n        require(ymAmounts.length == ymTokens.length, \"incorrect lengths\");\n\n        for (uint256 i; i < ymTokens.length; i++) {\n            IYieldManager(yieldManager).transferClosedPositionsValue(\n                kernel,\n                ymTokens[i],\n                ymAmounts[i]\n            );\n        }\n    }\n\n    function moveDeposits(\n        address newUserPositions,\n        MigrateDeposits[] calldata users\n    ) external onlyOwner {\n        for (uint256 i = 0; i < users.length; i++) {\n            // Move amount in user positions\n            IUserPositions(newUserPositions).deposit(\n                users[i].user,\n                users[i].tokens,\n                users[i].amounts,\n                0,\n                true\n            );\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/core/Kernel.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../interfaces/IKernel.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/ISushiSwapTrader.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\n/// @title Kernel\n/// @notice Allows users to deposit/withdraw erc20 tokens\n/// @notice Allows a system admin to control which tokens are depositable\ncontract Kernel is\n    Initializable,\n    AccessControlEnumerableUpgradeable,\n    ModuleMapConsumer,\n    IKernel,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    bytes32 public constant OWNER_ROLE = keccak256(\"owner_role\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"manager_role\");\n\n    uint256 private lastDeployTimestamp;\n    uint256 private lastHarvestYieldTimestamp;\n    uint256 private lastDistributeEthTimestamp;\n    uint256 private lastLastDistributeEthTimestamp;\n    uint256 private lastBiosBuyBackTimestamp;\n    uint256 private initializationTimestamp;\n\n    event Withdraw(\n        address indexed user,\n        address[] tokens,\n        uint256[] tokenAmounts,\n        uint256 ethAmount\n    );\n    event ClaimEthRewards(address indexed user, uint256 ethRewards);\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\n    event WithdrawAllAndClaim(\n        address indexed user,\n        address[] tokens,\n        bool withdrawWethAsEth,\n        uint256[] tokenAmounts,\n        uint256 ethWithdrawn,\n        uint256 ethRewards,\n        uint256 biosRewards\n    );\n    event TokenAdded(\n        address indexed token,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator\n    );\n    event TokenDepositsEnabled(address indexed token);\n    event TokenDepositsDisabled(address indexed token);\n    event TokenWithdrawalsEnabled(address indexed token);\n    event TokenWithdrawalsDisabled(address indexed token);\n    event TokenRewardWeightUpdated(\n        address indexed token,\n        uint256 biosRewardWeight\n    );\n    event TokenReserveRatioNumeratorUpdated(\n        address indexed token,\n        uint256 reserveRatioNumerator\n    );\n    event TokenIntegrationWeightUpdated(\n        address indexed token,\n        address indexed integration,\n        uint256 weight\n    );\n    event GasAccountUpdated(address gasAccount);\n    event TreasuryAccountUpdated(address treasuryAccount);\n    event IntegrationAdded(address indexed contractAddress, string name);\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\n    event SeedBiosRewards(uint256 biosAmount);\n    event Deploy();\n    event HarvestYield();\n    event DistributeEth();\n    event BiosBuyBack();\n    event EthDistributionWeightsUpdated(\n        uint32 biosBuyBackEthWeight,\n        uint32 treasuryEthWeight,\n        uint32 protocolFeeEthWeight,\n        uint32 rewardsEthWeight\n    );\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\n\n    modifier onlyGasAccount() {\n        require(\n            msg.sender ==\n                IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n                    .getGasAccount(),\n            \"Caller is not gas account\"\n        );\n        _;\n    }\n\n    receive() external payable {}\n\n    /// @notice Initializes contract - used as a replacement for a constructor\n    /// @param admin_ default administrator, a cold storage address\n    /// @param owner_ single owner account, used to manage the managers\n    /// @param moduleMap_ Module Map address\n    function initialize(\n        address admin_,\n        address owner_,\n        address moduleMap_\n    ) external initializer {\n        __ModuleMapConsumer_init(moduleMap_);\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        // make the \"admin_\" address the default admin role\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\n        // make the \"owner_\" address the owner of the system\n        _setupRole(OWNER_ROLE, owner_);\n\n        // give the \"owner_\" address the manager role, too\n        _setupRole(MANAGER_ROLE, owner_);\n\n        // owners are admins of managers\n        _setRoleAdmin(MANAGER_ROLE, OWNER_ROLE);\n\n        initializationTimestamp = block.timestamp;\n    }\n\n    /// @param biosRewardsDuration The duration in seconds for a BIOS rewards period to last\n    function setBiosRewardsDuration(uint32 biosRewardsDuration)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\n            .setBiosRewardsDuration(biosRewardsDuration);\n\n        emit SetBiosRewardsDuration(biosRewardsDuration);\n    }\n\n    /// @param biosAmount The amount of BIOS to add to the rewards\n    function seedBiosRewards(uint256 biosAmount)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\n            .seedBiosRewards(msg.sender, biosAmount);\n\n        emit SeedBiosRewards(biosAmount);\n    }\n\n    /// @notice This function is used after tokens have been added, and a weight array should be included\n    /// @param contractAddress The address of the integration contract\n    /// @param name The name of the protocol being integrated to\n    function addIntegration(address contractAddress, string memory name)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .addIntegration(contractAddress, name);\n\n        emit IntegrationAdded(contractAddress, name);\n    }\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator\n    ) external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .addToken(\n                tokenAddress,\n                acceptingDeposits,\n                acceptingWithdrawals,\n                biosRewardWeight,\n                reserveRatioNumerator\n            );\n\n        if (\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                moduleMap.getModuleAddress(Modules.YieldManager)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                type(uint256).max\n            );\n        }\n\n        if (\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                moduleMap.getModuleAddress(Modules.UserPositions)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\n                moduleMap.getModuleAddress(Modules.UserPositions),\n                type(uint256).max\n            );\n        }\n\n        emit TokenAdded(\n            tokenAddress,\n            acceptingDeposits,\n            acceptingWithdrawals,\n            biosRewardWeight,\n            reserveRatioNumerator\n        );\n    }\n\n    /// @param biosBuyBackEthWeight The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight The relative weight of ETH to send to user rewards\n    function updateEthDistributionWeights(\n        uint32 biosBuyBackEthWeight,\n        uint32 treasuryEthWeight,\n        uint32 protocolFeeEthWeight,\n        uint32 rewardsEthWeight\n    ) external onlyRole(MANAGER_ROLE) {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .updateEthDistributionWeights(\n                biosBuyBackEthWeight,\n                treasuryEthWeight,\n                protocolFeeEthWeight,\n                rewardsEthWeight\n            );\n\n        emit EthDistributionWeightsUpdated(\n            biosBuyBackEthWeight,\n            treasuryEthWeight,\n            protocolFeeEthWeight,\n            rewardsEthWeight\n        );\n    }\n\n    /// @notice Gives the UserPositions contract approval to transfer BIOS from Kernel\n    function tokenApprovals() external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(\n            integrationMap.getBiosTokenAddress()\n        );\n        IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(\n            integrationMap.getWethTokenAddress()\n        );\n\n        if (\n            bios.allowance(\n                address(this),\n                moduleMap.getModuleAddress(Modules.UserPositions)\n            ) == 0\n        ) {\n            bios.safeApprove(\n                moduleMap.getModuleAddress(Modules.UserPositions),\n                type(uint256).max\n            );\n        }\n        if (\n            bios.allowance(\n                address(this),\n                moduleMap.getModuleAddress(Modules.YieldManager)\n            ) == 0\n        ) {\n            bios.safeApprove(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                type(uint256).max\n            );\n        }\n\n        if (\n            weth.allowance(\n                address(this),\n                moduleMap.getModuleAddress(Modules.UserPositions)\n            ) == 0\n        ) {\n            weth.safeApprove(\n                moduleMap.getModuleAddress(Modules.UserPositions),\n                type(uint256).max\n            );\n        }\n\n        if (\n            weth.allowance(\n                address(this),\n                moduleMap.getModuleAddress(Modules.YieldManager)\n            ) == 0\n        ) {\n            weth.safeApprove(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                type(uint256).max\n            );\n        }\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenDeposits(address tokenAddress)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .enableTokenDeposits(tokenAddress);\n\n        emit TokenDepositsEnabled(tokenAddress);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenDeposits(address tokenAddress)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .disableTokenDeposits(tokenAddress);\n\n        emit TokenDepositsDisabled(tokenAddress);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenWithdrawals(address tokenAddress)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .enableTokenWithdrawals(tokenAddress);\n\n        emit TokenWithdrawalsEnabled(tokenAddress);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenWithdrawals(address tokenAddress)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .disableTokenWithdrawals(tokenAddress);\n\n        emit TokenWithdrawalsDisabled(tokenAddress);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @param updatedWeight The updated token BIOS reward weight\n    function updateTokenRewardWeight(\n        address tokenAddress,\n        uint256 updatedWeight\n    ) external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .updateTokenRewardWeight(tokenAddress, updatedWeight);\n\n        emit TokenRewardWeightUpdated(tokenAddress, updatedWeight);\n    }\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function updateTokenReserveRatioNumerator(\n        address tokenAddress,\n        uint256 reserveRatioNumerator\n    ) external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .updateTokenReserveRatioNumerator(\n                tokenAddress,\n                reserveRatioNumerator\n            );\n\n        emit TokenReserveRatioNumeratorUpdated(\n            tokenAddress,\n            reserveRatioNumerator\n        );\n    }\n\n    /// @param gasAccount The address of the account to send ETH to gas for executing bulk system functions\n    function updateGasAccount(address payable gasAccount)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .updateGasAccount(gasAccount);\n\n        emit GasAccountUpdated(gasAccount);\n    }\n\n    /// @param treasuryAccount The address of the system treasury account\n    function updateTreasuryAccount(address payable treasuryAccount)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .updateTreasuryAccount(treasuryAccount);\n\n        emit TreasuryAccountUpdated(treasuryAccount);\n    }\n\n    /// @param gasAccountTargetEthBalance The target ETH balance of the gas account\n    function updateGasAccountTargetEthBalance(\n        uint256 gasAccountTargetEthBalance\n    ) external onlyRole(MANAGER_ROLE) {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .updateGasAccountTargetEthBalance(gasAccountTargetEthBalance);\n\n        emit GasAccountTargetEthBalanceUpdated(gasAccountTargetEthBalance);\n    }\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    function deposit(address[] memory tokens, uint256[] memory amounts)\n        external\n        payable\n        nonReentrant\n    {\n        if (msg.value > 0) {\n            // Convert ETH to WETH\n            address wethAddress = IIntegrationMap(\n                moduleMap.getModuleAddress(Modules.IntegrationMap)\n            ).getWethTokenAddress();\n            IWeth9(wethAddress).deposit{value: msg.value}();\n        }\n\n        IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\n            .deposit(msg.sender, tokens, amounts, msg.value, false);\n    }\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function withdraw(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) external nonReentrant {\n        uint256 ethWithdrawn = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).withdraw(msg.sender, tokens, amounts, withdrawWethAsEth);\n\n        if (ethWithdrawn > 0) {\n            IWeth9(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getWethTokenAddress()\n            ).withdraw(ethWithdrawn);\n\n            payable(msg.sender).transfer(ethWithdrawn);\n        }\n\n        emit Withdraw(msg.sender, tokens, amounts, ethWithdrawn);\n    }\n\n    /// @notice Allows a user to withdraw entire undeployed balances of the specified tokens and claim rewards\n    /// @param tokens Array of token address that user is exiting positions from\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    /// @return tokenAmounts The amounts of each token being withdrawn\n    /// @return ethWithdrawn The amount of WETH balance being withdrawn as ETH\n    /// @return ethClaimed The amount of ETH being claimed from rewards\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\n    function withdrawAllAndClaim(\n        address[] memory tokens,\n        bool withdrawWethAsEth\n    )\n        external\n        returns (\n            uint256[] memory tokenAmounts,\n            uint256 ethWithdrawn,\n            uint256 ethClaimed,\n            uint256 biosClaimed\n        )\n    {\n        (tokenAmounts, ethWithdrawn, ethClaimed, biosClaimed) = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).withdrawAllAndClaim(msg.sender, tokens, withdrawWethAsEth);\n\n        if (ethWithdrawn > 0) {\n            IWeth9(\n                IIntegrationMap(\n                    moduleMap.getModuleAddress(Modules.IntegrationMap)\n                ).getWethTokenAddress()\n            ).withdraw(ethWithdrawn);\n        }\n\n        if (ethWithdrawn + ethClaimed > 0) {\n            payable(msg.sender).transfer(ethWithdrawn + ethClaimed);\n        }\n\n        emit WithdrawAllAndClaim(\n            msg.sender,\n            tokens,\n            withdrawWethAsEth,\n            tokenAmounts,\n            ethWithdrawn,\n            ethClaimed,\n            biosClaimed\n        );\n    }\n\n    /// @notice Allows user to claim their BIOS rewards\n    /// @return ethClaimed The amount of ETH claimed by the user\n    function claimEthRewards()\n        public\n        nonReentrant\n        returns (uint256 ethClaimed)\n    {\n        ethClaimed = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).claimEthRewards(msg.sender);\n\n        payable(msg.sender).transfer(ethClaimed);\n\n        emit ClaimEthRewards(msg.sender, ethClaimed);\n    }\n\n    /// @notice Allows user to claim their BIOS rewards\n    /// @return biosClaimed The amount of BIOS claimed by the user\n    function claimBiosRewards()\n        public\n        nonReentrant\n        returns (uint256 biosClaimed)\n    {\n        biosClaimed = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).claimBiosRewards(msg.sender);\n\n        emit ClaimBiosRewards(msg.sender, biosClaimed);\n    }\n\n    /// @notice Allows user to claim their ETH and BIOS rewards\n    /// @return ethClaimed The amount of ETH claimed by the user\n    /// @return biosClaimed The amount of BIOS claimed by the user\n    function claimAllRewards()\n        external\n        nonReentrant\n        returns (uint256 ethClaimed, uint256 biosClaimed)\n    {\n        ethClaimed = claimEthRewards();\n        biosClaimed = claimBiosRewards();\n    }\n\n    /// @notice Deploys all tokens to all integrations according to configured weights\n    function deploy(IYieldManager.DeployRequest[] calldata deployments)\n        external\n        onlyGasAccount\n    {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).deploy(\n            deployments\n        );\n        lastDeployTimestamp = block.timestamp;\n        emit Deploy();\n    }\n\n    /// @notice Harvests available yield from all tokens and integrations\n    function harvestYield(\n        address integrationAddress,\n        address[] calldata tokenAddresses\n    ) external onlyGasAccount {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .harvestYield(integrationAddress, tokenAddresses);\n        lastHarvestYieldTimestamp = block.timestamp;\n        emit HarvestYield();\n    }\n\n    /// @notice Distributes WETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\n    function distributeEth() external onlyGasAccount {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .distributeEth();\n        lastLastDistributeEthTimestamp = lastDistributeEthTimestamp;\n        lastDistributeEthTimestamp = block.timestamp;\n        emit DistributeEth();\n    }\n\n    /// @notice Uses any WETH held in the SushiSwap integration to buy back BIOS which is sent to the Kernel\n    function biosBuyBack() external onlyGasAccount {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\n            .biosBuyBack();\n        lastBiosBuyBackTimestamp = block.timestamp;\n        emit BiosBuyBack();\n    }\n\n    /// @param account The address of the account to check if they are a manager\n    /// @return Bool indicating whether the account is a manger\n    function isManager(address account) public view override returns (bool) {\n        return hasRole(MANAGER_ROLE, account);\n    }\n\n    /// @param account The address of the account to check if they are an owner\n    /// @return Bool indicating whether the account is an owner\n    function isOwner(address account) public view override returns (bool) {\n        return hasRole(OWNER_ROLE, account);\n    }\n\n    /// @return The timestamp the deploy function was last called\n    function getLastDeployTimestamp() external view returns (uint256) {\n        return lastDeployTimestamp;\n    }\n\n    /// @return The timestamp the harvestYield function was last called\n    function getLastHarvestYieldTimestamp() external view returns (uint256) {\n        return lastHarvestYieldTimestamp;\n    }\n\n    /// @return The timestamp the distributeEth function was last called\n    function getLastDistributeEthTimestamp() external view returns (uint256) {\n        return lastDistributeEthTimestamp;\n    }\n\n    /// @return The timestamp the biosBuyBack function was last called\n    function getLastBiosBuyBackTimestamp() external view returns (uint256) {\n        return lastBiosBuyBackTimestamp;\n    }\n\n    /// @return ethRewardsTimePeriod The number of seconds between the last two ETH payouts\n    function getEthRewardsTimePeriod()\n        external\n        view\n        returns (uint256 ethRewardsTimePeriod)\n    {\n        if (lastDistributeEthTimestamp > 0) {\n            if (lastLastDistributeEthTimestamp > 0) {\n                ethRewardsTimePeriod =\n                    lastDistributeEthTimestamp -\n                    lastLastDistributeEthTimestamp;\n            } else {\n                ethRewardsTimePeriod =\n                    lastDistributeEthTimestamp -\n                    initializationTimestamp;\n            }\n        } else {\n            ethRewardsTimePeriod = 0;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal initializer {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/core/SushiSwapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/ISushiSwapTrader.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\n\n/// @notice Integrates 0x Nodes to SushiSwap\ncontract SushiSwapTrader is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    ISushiSwapTrader\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 private slippageNumerator;\n    address private factoryAddress;\n    address private swapRouterAddress;\n\n    event ExecutedSwapExactInput(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 amountOut\n    );\n\n    event FailedSwapExactInput(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin\n    );\n\n    event SushiSwapSlippageNumeratorUpdated(uint24 slippageNumerator);\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the SushiSwap swap router contract\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        uint24 slippageNumerator_\n    ) public initializer {\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"SushiSwapTrader::initialize: Slippage Numerator must be less than or equal to slippage denominator\"\n        );\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        slippageNumerator = slippageNumerator_;\n    }\n\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\n    function updateSlippageNumerator(uint24 slippageNumerator_)\n        external\n        override\n        onlyManager\n    {\n        require(\n            slippageNumerator_ != slippageNumerator,\n            \"SushiSwapTrader::setSlippageNumerator: Slippage numerator must be set to a new value\"\n        );\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"SushiSwapTrader::setSlippageNumerator: Slippage Numerator must be less than or equal to slippage denominator\"\n        );\n\n        slippageNumerator = slippageNumerator_;\n\n        emit SushiSwapSlippageNumeratorUpdated(slippageNumerator_);\n    }\n\n    /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\n    /// @return Bool indicating whether the trade succeeded\n    function biosBuyBack() external override onlyController returns (bool) {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        address wethAddress = integrationMap.getWethTokenAddress();\n        address biosAddress = integrationMap.getBiosTokenAddress();\n        uint256 wethAmountIn = IERC20MetadataUpgradeable(wethAddress).balanceOf(\n            address(this)\n        );\n\n        uint256 biosAmountOutMin = getAmountOutMinimum(\n            wethAddress,\n            biosAddress,\n            wethAmountIn\n        );\n\n        return\n            swapExactInput(\n                wethAddress,\n                integrationMap.getBiosTokenAddress(),\n                moduleMap.getModuleAddress(Modules.Kernel),\n                wethAmountIn,\n                biosAmountOutMin\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return bool Indicates whether the swap succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) public override onlyController returns (bool) {\n        require(\n            IERC20MetadataUpgradeable(tokenIn).balanceOf(address(this)) >=\n                amountIn,\n            \"SushiSwapTrader::swapExactInput: Balance is less than trade amount\"\n        );\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (\n            IERC20MetadataUpgradeable(tokenIn).allowance(\n                address(this),\n                swapRouterAddress\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(\n                swapRouterAddress,\n                type(uint256).max\n            );\n        }\n\n        uint256 tokenOutBalanceBefore = IERC20MetadataUpgradeable(tokenOut)\n            .balanceOf(recipient);\n\n        try\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            )\n        {\n            emit ExecutedSwapExactInput(\n                tokenIn,\n                tokenOut,\n                amountIn,\n                amountOutMin,\n                IERC20MetadataUpgradeable(tokenOut).balanceOf(recipient) -\n                    tokenOutBalanceBefore\n            );\n            return true;\n        } catch {\n            emit FailedSwapExactInput(\n                tokenIn,\n                tokenOut,\n                amountIn,\n                amountOutMin\n            );\n            return false;\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) *\n                (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        require(\n            amountIn > 0,\n            \"SushiSwapTrader::getAmountOut: amountIn must be greater than zero\"\n        );\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(\n            tokenIn,\n            tokenOut\n        );\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"SushiSwapTrader::getAmountOut: No liquidity in pool reserves\"\n        );\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * (reserveOut);\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB)\n        internal\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        (address token0, ) = getTokensSorted(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(\n            getPairFor(tokenA, tokenB)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of sorted token0\n    /// @return token1 The address of sorted token1\n    function getTokensSorted(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(\n            tokenA != tokenB,\n            \"SushiSwapTrader::sortToken: Identical token addresses\"\n        );\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(\n            token0 != address(0),\n            \"SushiSwapTrader::sortToken: Zero address\"\n        );\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the SushiSwap pool contract\n    function getPairFor(address tokenA, address tokenB)\n        internal\n        view\n        returns (address pair)\n    {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @return SushiSwap Factory address\n    function getFactoryAddress() external view returns (address) {\n        return factoryAddress;\n    }\n\n    /// @return The slippage numerator\n    function getSlippageNumerator() external view returns (uint24) {\n        return slippageNumerator;\n    }\n\n    /// @return The slippage denominator\n    function getSlippageDenominator() external pure returns (uint24) {\n        return SLIPPAGE_DENOMINATOR;\n    }\n}\n"
    },
    "contracts/core/UniswapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapFactory.sol\";\nimport \"../interfaces/IUniswapPositionManager.sol\";\nimport \"../interfaces/IUniswapSwapRouter.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/IUniswapPool.sol\";\nimport \"../libraries/FullMath.sol\";\n\n/// @notice Integrates 0x Nodes to Uniswap v3\n/// @notice tokenA/tokenB naming implies tokens are unsorted\n/// @notice token0/token1 naming implies tokens are sorted\ncontract UniswapTrader is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IUniswapTrader\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    struct Pool {\n        uint24 feeNumerator;\n        uint24 slippageNumerator;\n    }\n\n    struct TokenPair {\n        address token0;\n        address token1;\n    }\n\n    uint24 private constant FEE_DENOMINATOR = 1_000_000;\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    address private factoryAddress;\n    address private swapRouterAddress;\n\n    mapping(address => mapping(address => Pool[])) private pools;\n    mapping(address => mapping(address => Path)) private paths;\n    mapping(address => mapping(address => bool)) private isMultihopPair;\n\n    TokenPair[] private tokenPairs;\n\n    event UniswapPoolAdded(\n        address indexed token0,\n        address indexed token1,\n        uint24 fee,\n        uint24 slippageNumerator\n    );\n    event UniswapPoolSlippageNumeratorUpdated(\n        address indexed token0,\n        address indexed token1,\n        uint256 poolIndex,\n        uint24 slippageNumerator\n    );\n    event UniswapPairPrimaryPoolUpdated(\n        address indexed token0,\n        address indexed token1,\n        uint256 primaryPoolIndex\n    );\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Module Map address\n    /// @param factoryAddress_ The address of the Uniswap factory contract\n    /// @param swapRouterAddress_ The address of the Uniswap swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @param feeNumerator The Uniswap pool fee numerator\n    /// @param slippageNumerator The value divided by the slippage denominator\n    /// to calculate the allowable slippage\n    /// positions is enabled for this pool\n    function addPool(\n        address tokenA,\n        address tokenB,\n        uint24 feeNumerator,\n        uint24 slippageNumerator\n    ) external override onlyManager {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getIsTokenAdded(tokenA),\n            \"UniswapTrader::addPool: TokenA has not been added in the Integration Map\"\n        );\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getIsTokenAdded(tokenB),\n            \"UniswapTrader::addPool: TokenB has not been added in the Integration Map\"\n        );\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"UniswapTrader::addPool: Slippage numerator cannot be greater than slippapge denominator\"\n        );\n        require(\n            IUniswapFactory(factoryAddress).getPool(\n                tokenA,\n                tokenB,\n                feeNumerator\n            ) != address(0),\n            \"UniswapTrader::addPool: Pool does not exist\"\n        );\n\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n\n        bool poolAdded;\n        for (\n            uint256 poolIndex;\n            poolIndex < pools[token0][token1].length;\n            poolIndex++\n        ) {\n            if (pools[token0][token1][poolIndex].feeNumerator == feeNumerator) {\n                poolAdded = true;\n            }\n        }\n\n        require(\n            !poolAdded,\n            \"UniswapTrader::addPool: Pool has already been added\"\n        );\n\n        Pool memory newPool;\n        newPool.feeNumerator = feeNumerator;\n        newPool.slippageNumerator = slippageNumerator;\n        pools[token0][token1].push(newPool);\n\n        bool tokenPairAdded;\n        for (uint256 pairIndex; pairIndex < tokenPairs.length; pairIndex++) {\n            if (\n                tokenPairs[pairIndex].token0 == token0 &&\n                tokenPairs[pairIndex].token1 == token1\n            ) {\n                tokenPairAdded = true;\n            }\n        }\n\n        if (!tokenPairAdded) {\n            TokenPair memory newTokenPair;\n            newTokenPair.token0 = token0;\n            newTokenPair.token1 = token1;\n            tokenPairs.push(newTokenPair);\n\n            if (\n                IERC20MetadataUpgradeable(token0).allowance(\n                    address(this),\n                    moduleMap.getModuleAddress(Modules.YieldManager)\n                ) == 0\n            ) {\n                IERC20MetadataUpgradeable(token0).safeApprove(\n                    moduleMap.getModuleAddress(Modules.YieldManager),\n                    type(uint256).max\n                );\n            }\n\n            if (\n                IERC20MetadataUpgradeable(token1).allowance(\n                    address(this),\n                    moduleMap.getModuleAddress(Modules.YieldManager)\n                ) == 0\n            ) {\n                IERC20MetadataUpgradeable(token1).safeApprove(\n                    moduleMap.getModuleAddress(Modules.YieldManager),\n                    type(uint256).max\n                );\n            }\n\n            if (\n                IERC20MetadataUpgradeable(token0).allowance(\n                    address(this),\n                    swapRouterAddress\n                ) == 0\n            ) {\n                IERC20MetadataUpgradeable(token0).safeApprove(\n                    swapRouterAddress,\n                    type(uint256).max\n                );\n            }\n\n            if (\n                IERC20MetadataUpgradeable(token1).allowance(\n                    address(this),\n                    swapRouterAddress\n                ) == 0\n            ) {\n                IERC20MetadataUpgradeable(token1).safeApprove(\n                    swapRouterAddress,\n                    type(uint256).max\n                );\n            }\n        }\n\n        emit UniswapPoolAdded(token0, token1, feeNumerator, slippageNumerator);\n    }\n\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param poolIndex The index of the pool for the specified token pair\n    /// @param slippageNumerator The new slippage numerator to update the pool\n    function updatePoolSlippageNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolIndex,\n        uint24 slippageNumerator\n    ) external override onlyManager {\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"UniswapTrader:updatePoolSlippageNumerator: Slippage numerator must not be greater than slippage denominator\"\n        );\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        require(\n            pools[token0][token1][poolIndex].slippageNumerator !=\n                slippageNumerator,\n            \"UniswapTrader:updatePoolSlippageNumerator: Slippage numerator must be updated to a new number\"\n        );\n        require(\n            pools[token0][token1].length > poolIndex,\n            \"UniswapTrader:updatePoolSlippageNumerator: Pool does not exist\"\n        );\n\n        pools[token0][token1][poolIndex].slippageNumerator = slippageNumerator;\n\n        emit UniswapPoolSlippageNumeratorUpdated(\n            token0,\n            token1,\n            poolIndex,\n            slippageNumerator\n        );\n    }\n\n    /// @notice Updates which Uniswap pool to use as the default pool\n    /// @notice when swapping between token0 and token1\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\n    function updatePairPrimaryPool(\n        address tokenA,\n        address tokenB,\n        uint256 primaryPoolIndex\n    ) external override onlyManager {\n        require(\n            primaryPoolIndex != 0,\n            \"UniswapTrader::updatePairPrimaryPool: Specified index is already the primary pool\"\n        );\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        require(\n            primaryPoolIndex < pools[token0][token1].length,\n            \"UniswapTrader::updatePairPrimaryPool: Specified pool index does not exist\"\n        );\n\n        uint24 newPrimaryPoolFeeNumerator = pools[token0][token1][\n            primaryPoolIndex\n        ].feeNumerator;\n        uint24 newPrimaryPoolSlippageNumerator = pools[token0][token1][\n            primaryPoolIndex\n        ].slippageNumerator;\n\n        pools[token0][token1][primaryPoolIndex].feeNumerator = pools[token0][\n            token1\n        ][0].feeNumerator;\n        pools[token0][token1][primaryPoolIndex].slippageNumerator = pools[\n            token0\n        ][token1][0].slippageNumerator;\n\n        pools[token0][token1][0].feeNumerator = newPrimaryPoolFeeNumerator;\n        pools[token0][token1][0]\n            .slippageNumerator = newPrimaryPoolSlippageNumerator;\n\n        emit UniswapPairPrimaryPoolUpdated(token0, token1, primaryPoolIndex);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountIn The exact amount of the input to swap\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) external override onlyController returns (bool tradeSuccess) {\n        IERC20MetadataUpgradeable tokenInErc20 = IERC20MetadataUpgradeable(\n            tokenIn\n        );\n\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            IUniswapSwapRouter.ExactInputParams\n                memory params = IUniswapSwapRouter.ExactInputParams({\n                    path: abi.encodePacked(\n                        path.tokenIn,\n                        path.firstPoolFee,\n                        path.tokenInTokenOut,\n                        path.secondPoolFee,\n                        path.tokenOut\n                    ),\n                    recipient: recipient,\n                    deadline: block.timestamp,\n                    amountIn: amountIn,\n                    amountOutMinimum: 0\n                });\n\n            // Executes the swap.\n            try IUniswapSwapRouter(swapRouterAddress).exactInput(params) {\n                tradeSuccess = true;\n            } catch {\n                tradeSuccess = false;\n                tokenInErc20.safeTransfer(\n                    recipient,\n                    tokenInErc20.balanceOf(address(this))\n                );\n            }\n\n            return tradeSuccess;\n        }\n\n        (address token0, address token1) = getTokensSorted(tokenIn, tokenOut);\n\n        require(\n            pools[token0][token1].length > 0,\n            \"UniswapTrader::swapExactInput: Pool has not been added\"\n        );\n        require(\n            tokenInErc20.balanceOf(address(this)) >= amountIn,\n            \"UniswapTrader::swapExactInput: Balance is less than trade amount\"\n        );\n\n        uint256 amountOutMinimum = getAmountOutMinimum(\n            tokenIn,\n            tokenOut,\n            amountIn\n        );\n\n        IUniswapSwapRouter.ExactInputSingleParams memory exactInputSingleParams;\n        exactInputSingleParams.tokenIn = tokenIn;\n        exactInputSingleParams.tokenOut = tokenOut;\n        exactInputSingleParams.fee = pools[token0][token1][0].feeNumerator;\n        exactInputSingleParams.recipient = recipient;\n        exactInputSingleParams.deadline = block.timestamp;\n        exactInputSingleParams.amountIn = amountIn;\n        exactInputSingleParams.amountOutMinimum = amountOutMinimum;\n        exactInputSingleParams.sqrtPriceLimitX96 = 0;\n\n        try\n            IUniswapSwapRouter(swapRouterAddress).exactInputSingle(\n                exactInputSingleParams\n            )\n        {\n            tradeSuccess = true;\n        } catch {\n            tradeSuccess = false;\n            tokenInErc20.safeTransfer(\n                recipient,\n                tokenInErc20.balanceOf(address(this))\n            );\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountOut The exact amount of the output token to receive\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactOutput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountOut\n    ) external override onlyController returns (bool tradeSuccess) {\n        IERC20MetadataUpgradeable tokenInErc20 = IERC20MetadataUpgradeable(\n            tokenIn\n        );\n\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            IUniswapSwapRouter.ExactOutputParams\n                memory params = IUniswapSwapRouter.ExactOutputParams({\n                    path: abi.encodePacked(\n                        path.tokenIn,\n                        path.firstPoolFee,\n                        path.tokenInTokenOut,\n                        path.secondPoolFee,\n                        path.tokenOut\n                    ),\n                    recipient: recipient,\n                    deadline: block.timestamp,\n                    amountOut: amountOut,\n                    amountInMaximum: 0\n                });\n\n            // Executes the swap.\n            try IUniswapSwapRouter(swapRouterAddress).exactOutput(params) {\n                tradeSuccess = true;\n            } catch {\n                tradeSuccess = false;\n                tokenInErc20.safeTransfer(\n                    recipient,\n                    tokenInErc20.balanceOf(address(this))\n                );\n            }\n\n            return tradeSuccess;\n        }\n        (address token0, address token1) = getTokensSorted(tokenIn, tokenOut);\n        require(\n            pools[token0][token1][0].feeNumerator > 0,\n            \"UniswapTrader::swapExactOutput: Pool has not been added\"\n        );\n        uint256 amountInMaximum = getAmountInMaximum(\n            tokenIn,\n            tokenOut,\n            amountOut\n        );\n        require(\n            tokenInErc20.balanceOf(address(this)) >= amountInMaximum,\n            \"UniswapTrader::swapExactOutput: Balance is less than trade amount\"\n        );\n\n        IUniswapSwapRouter.ExactOutputSingleParams\n            memory exactOutputSingleParams;\n        exactOutputSingleParams.tokenIn = tokenIn;\n        exactOutputSingleParams.tokenOut = tokenOut;\n        exactOutputSingleParams.fee = pools[token0][token1][0].feeNumerator;\n        exactOutputSingleParams.recipient = recipient;\n        exactOutputSingleParams.deadline = block.timestamp;\n        exactOutputSingleParams.amountOut = amountOut;\n        exactOutputSingleParams.amountInMaximum = amountInMaximum;\n        exactOutputSingleParams.sqrtPriceLimitX96 = 0;\n\n        try\n            IUniswapSwapRouter(swapRouterAddress).exactOutputSingle(\n                exactOutputSingleParams\n            )\n        {\n            tradeSuccess = true;\n        } catch {\n            tradeSuccess = false;\n            tokenInErc20.safeTransfer(\n                recipient,\n                tokenInErc20.balanceOf(address(this))\n            );\n        }\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @return pool The pool address\n    function getPoolAddress(address tokenA, address tokenB)\n        public\n        view\n        override\n        returns (address pool)\n    {\n        uint24 feeNumerator = getPoolFeeNumerator(tokenA, tokenB, 0);\n        pool = IUniswapFactory(factoryAddress).getPool(\n            tokenA,\n            tokenB,\n            feeNumerator\n        );\n    }\n\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    function getSqrtPriceX96(address tokenA, address tokenB)\n        public\n        view\n        returns (uint256)\n    {\n        (uint160 sqrtPriceX96, , , , , , ) = IUniswapPool(\n            getPoolAddress(tokenA, tokenB)\n        ).slot0();\n        return uint256(sqrtPriceX96);\n    }\n\n    function getPathFor(address tokenIn, address tokenOut)\n        public\n        view\n        override\n        returns (Path memory)\n    {\n        require(\n            isMultihopPair[tokenIn][tokenOut],\n            \"There is an existing Pool for this pair\"\n        );\n\n        return paths[tokenIn][tokenOut];\n    }\n\n    function setPathFor(\n        address tokenIn,\n        address tokenOut,\n        uint256 firstPoolFee,\n        address tokenInTokenOut,\n        uint256 secondPoolFee\n    ) external override onlyManager {\n        paths[tokenIn][tokenOut] = Path(\n            tokenIn,\n            firstPoolFee,\n            tokenInTokenOut,\n            secondPoolFee,\n            tokenOut\n        );\n        isMultihopPair[tokenIn][tokenOut] = true;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        uint256 estimatedAmountOut = getEstimatedTokenOut(\n            tokenIn,\n            tokenOut,\n            amountIn\n        );\n        uint24 poolSlippageNumerator = getPoolSlippageNumerator(\n            tokenIn,\n            tokenOut,\n            0\n        );\n        amountOutMinimum =\n            (estimatedAmountOut *\n                (SLIPPAGE_DENOMINATOR - poolSlippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountOut The exact amount of token being swapped for\n    /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\n    function getAmountInMaximum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut\n    ) public view override returns (uint256 amountInMaximum) {\n        uint256 estimatedAmountIn = getEstimatedTokenIn(\n            tokenIn,\n            tokenOut,\n            amountOut\n        );\n        uint24 poolSlippageNumerator = getPoolSlippageNumerator(\n            tokenIn,\n            tokenOut,\n            0\n        );\n        amountInMaximum =\n            (estimatedAmountIn *\n                (SLIPPAGE_DENOMINATOR + poolSlippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getEstimatedTokenOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            uint256 amountOutTemp = getEstimatedTokenOut(\n                path.tokenIn,\n                path.tokenInTokenOut,\n                amountIn\n            );\n            return\n                getEstimatedTokenOut(\n                    path.tokenInTokenOut,\n                    path.tokenOut,\n                    amountOutTemp\n                );\n        }\n\n        uint24 feeNumerator = getPoolFeeNumerator(tokenIn, tokenOut, 0);\n        uint256 sqrtPriceX96 = getSqrtPriceX96(tokenIn, tokenOut);\n\n        // FullMath is used to allow intermediate calculation values of up to 2^512\n        if (tokenIn < tokenOut) {\n            amountOut =\n                (FullMath.mulDiv(\n                    FullMath.mulDiv(amountIn, sqrtPriceX96, 2**96),\n                    sqrtPriceX96,\n                    2**96\n                ) * (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        } else {\n            amountOut =\n                (FullMath.mulDiv(\n                    FullMath.mulDiv(amountIn, 2**96, sqrtPriceX96),\n                    2**96,\n                    sqrtPriceX96\n                ) * (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountOut The exact amount of the output token to swap for\n    /// @return amountIn The estimated amount of tokenIn to spend\n    function getEstimatedTokenIn(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            uint256 amountInTemp = getEstimatedTokenIn(\n                path.tokenInTokenOut,\n                path.tokenOut,\n                amountOut\n            );\n            return\n                getEstimatedTokenIn(\n                    path.tokenIn,\n                    path.tokenInTokenOut,\n                    amountInTemp\n                );\n        }\n\n        uint24 feeNumerator = getPoolFeeNumerator(tokenIn, tokenOut, 0);\n        uint256 sqrtPriceX96 = getSqrtPriceX96(tokenIn, tokenOut);\n\n        // FullMath is used to allow intermediate calculation values of up to 2^512\n        if (tokenIn < tokenOut) {\n            amountIn =\n                (FullMath.mulDiv(\n                    FullMath.mulDiv(amountOut, 2**96, sqrtPriceX96),\n                    2**96,\n                    sqrtPriceX96\n                ) * (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        } else {\n            amountIn =\n                (FullMath.mulDiv(\n                    FullMath.mulDiv(amountOut, sqrtPriceX96, 2**96),\n                    sqrtPriceX96,\n                    2**96\n                ) * (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        }\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param poolId The index of the pool in the pools mapping\n    /// @return feeNumerator The numerator that gets divided by the fee denominator\n    function getPoolFeeNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolId\n    ) public view override returns (uint24 feeNumerator) {\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        require(\n            poolId < pools[token0][token1].length,\n            \"UniswapTrader::getPoolFeeNumerator: Pool ID does not exist\"\n        );\n        feeNumerator = pools[token0][token1][poolId].feeNumerator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param poolId The index of the pool in the pools mapping\n    /// @return slippageNumerator The numerator that gets divided by the slippage denominator\n    function getPoolSlippageNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolId\n    ) public view returns (uint24 slippageNumerator) {\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        return pools[token0][token1][poolId].slippageNumerator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of the sorted token0\n    /// @return token1 The address of the sorted token1\n    function getTokensSorted(address tokenA, address tokenB)\n        public\n        pure\n        override\n        returns (address token0, address token1)\n    {\n        if (tokenA < tokenB) {\n            token0 = tokenA;\n            token1 = tokenB;\n        } else {\n            token0 = tokenB;\n            token1 = tokenA;\n        }\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param amountA The amount of tokenA\n    /// @param amountB The amount of tokenB\n    /// @return token0 The address of sorted token0\n    /// @return token1 The address of sorted token1\n    /// @return amount0 The amount of sorted token0\n    /// @return amount1 The amount of sorted token1\n    function getTokensAndAmountsSorted(\n        address tokenA,\n        address tokenB,\n        uint256 amountA,\n        uint256 amountB\n    )\n        external\n        pure\n        returns (\n            address token0,\n            address token1,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        if (tokenA < tokenB) {\n            token0 = tokenA;\n            token1 = tokenB;\n            amount0 = amountA;\n            amount1 = amountB;\n        } else {\n            token0 = tokenB;\n            token1 = tokenA;\n            amount0 = amountB;\n            amount1 = amountA;\n        }\n    }\n\n    /// @return The denominator used to calculate the pool fee percentage\n    function getFeeDenominator() external pure returns (uint24) {\n        return FEE_DENOMINATOR;\n    }\n\n    /// @return The denominator used to calculate the allowable slippage percentage\n    function getSlippageDenominator() external pure returns (uint24) {\n        return SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @return The number of token pairs configured\n    function getTokenPairsLength() external view override returns (uint256) {\n        return tokenPairs.length;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return The quantity of pools configured for the specified token pair\n    function getTokenPairPoolsLength(address tokenA, address tokenB)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        return pools[token0][token1].length;\n    }\n\n    /// @param tokenPairIndex The index of the token pair\n    /// @return The address of token0\n    /// @return The address of token1\n    function getTokenPair(uint256 tokenPairIndex)\n        external\n        view\n        returns (address, address)\n    {\n        require(\n            tokenPairIndex < tokenPairs.length,\n            \"UniswapTrader::getTokenPair: Token pair does not exist\"\n        );\n        return (\n            tokenPairs[tokenPairIndex].token0,\n            tokenPairs[tokenPairIndex].token1\n        );\n    }\n\n    /// @param token0 The address of token0 of the pool\n    /// @param token1 The address of token1 of the pool\n    /// @param poolIndex The index of the pool\n    /// @return The pool fee numerator\n    /// @return The pool slippage numerator\n    function getPool(\n        address token0,\n        address token1,\n        uint256 poolIndex\n    ) external view returns (uint24, uint24) {\n        require(\n            poolIndex < pools[token0][token1].length,\n            \"UniswapTrader:getPool: Pool does not exist\"\n        );\n        return (\n            pools[token0][token1][poolIndex].feeNumerator,\n            pools[token0][token1][poolIndex].slippageNumerator\n        );\n    }\n}\n"
    },
    "contracts/core/StrategyManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"./Controlled.sol\";\nimport \"../interfaces/IStrategyManager.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\n\ncontract StrategyManager is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IStrategyManager\n{\n    // #### Functions\n    function initialize(address[] memory controllers_, address moduleMap_)\n        public\n        initializer\n    {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    /**\n      @notice Adds a new strategy to the strategy map.\n      @dev This is a passthrough to StrategyMap.addStrategy\n       */\n    function addStrategy(\n        string calldata name,\n        IStrategyMap.Integration[] calldata integrations,\n        IStrategyMap.Token[] calldata tokens\n    ) external override onlyManager {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        for (uint256 i = 0; i < integrations.length; i++) {\n            require(\n                integrationMap.getIsIntegrationAdded(\n                    integrations[i].integration\n                )\n            );\n        }\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n            .addStrategy(name, integrations, tokens);\n    }\n\n    /**\n    @notice Updates the whitelisted tokens a strategy accepts for new deposits\n    @dev This is a passthrough to StrategyMap.updateStrategyTokens\n     */\n    function updateStrategy(\n        uint256 id,\n        IStrategyMap.Integration[] calldata integrations,\n        IStrategyMap.Token[] calldata tokens\n    ) external override onlyManager {\n        IIntegrationMap integrationMap = IIntegrationMap(\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\n        );\n        for (uint256 i = 0; i < integrations.length; i++) {\n            require(\n                integrationMap.getIsIntegrationAdded(\n                    integrations[i].integration\n                )\n            );\n        }\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n            .updateStrategy(id, integrations, tokens);\n    }\n\n    /**\n        @notice Updates a strategy's name\n        @dev This is a pass through function to StrategyMap.updateName\n     */\n    function updateStrategyName(uint256 id, string calldata name)\n        external\n        override\n        onlyManager\n    {\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n            .updateName(id, name);\n    }\n\n    /**\n        @notice Deletes a strategy\n        @dev This is a pass through to StrategyMap.deleteStrategy\n        */\n    function deleteStrategy(uint256 id) external override onlyManager {\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\n            .deleteStrategy(id);\n    }\n}\n"
    },
    "contracts/interfaces/IStrategyManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"../interfaces/IStrategyMap.sol\";\n\ninterface IStrategyManager {\n    // #### Functions\n    /**\n      @notice Adds a new strategy to the strategy map.\n      @dev This is a passthrough to StrategyMap.addStrategy\n       */\n    function addStrategy(\n        string calldata name,\n        IStrategyMap.Integration[] calldata integrations,\n        IStrategyMap.Token[] calldata tokens\n    ) external;\n\n    /**\n        @notice Updates a strategy's name\n        @dev This is a pass through function to StrategyMap.updateName\n     */\n    function updateStrategyName(uint256 id, string calldata name) external;\n\n    /**\n      @notice Updates the tokens that a strategy accepts\n      @dev This is a passthrough to StrategyMap.updateStrategyTokens\n       */\n    function updateStrategy(\n        uint256 id,\n        IStrategyMap.Integration[] calldata integrations,\n        IStrategyMap.Token[] calldata tokens\n    ) external;\n\n    /**\n        @notice Deletes a strategy\n        @dev This is a pass through to StrategyMap.deleteStrategy\n        */\n    function deleteStrategy(uint256 id) external;\n}\n"
    },
    "contracts/core/ModuleMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IModuleMap.sol\";\n\ncontract ModuleMap is IModuleMap, Initializable, OwnableUpgradeable {\n    mapping(Modules => address) private _moduleMap;\n\n    function initialize() public initializer {\n        __Ownable_init_unchained();\n    }\n\n    function getModuleAddress(Modules key)\n        public\n        view\n        override\n        returns (address)\n    {\n        return _moduleMap[key];\n    }\n\n    function setModuleAddress(Modules key, address value) external onlyOwner {\n        _moduleMap[key] = value;\n    }\n}\n"
    },
    "contracts/core/IntegrationMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"./Controlled.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\n\ncontract IntegrationMap is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IIntegrationMap\n{\n    uint32 private constant RESERVE_RATIO_DENOMINATOR = 1_000_000;\n    address private wethTokenAddress;\n    address private biosTokenAddress;\n    address[] private tokenAddresses;\n    address[] private integrationAddresses;\n\n    // Integration address => Integration details\n    mapping(address => Integration) private integrations;\n    // Token address => Token details\n    mapping(address => Token) private tokens;\n\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address wethTokenAddress_,\n        address biosTokenAddress_\n    ) public initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        wethTokenAddress = wethTokenAddress_;\n        biosTokenAddress = biosTokenAddress_;\n\n        _addToken(wethTokenAddress_, true, true, 1000, 50000);\n        _addToken(biosTokenAddress_, true, true, 1000, 0);\n    }\n\n    /// @param contractAddress The address of the integration contract\n    /// @param name The name of the protocol being integrated to\n    function addIntegration(address contractAddress, string memory name)\n        external\n        override\n        onlyController\n    {\n        require(\n            !integrations[contractAddress].added,\n            \"IntegrationMap::addIntegration: Integration already added\"\n        );\n        integrations[contractAddress].added = true;\n        integrations[contractAddress].name = name;\n        integrationAddresses.push(contractAddress);\n    }\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function _addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator\n    ) internal {\n        // We skip instead of error when you re-add a token due to great migration of 2021\n        if (!tokens[tokenAddress].added) {\n            require(\n                reserveRatioNumerator <= RESERVE_RATIO_DENOMINATOR,\n                \"IntegrationMap::addToken: reserveRatioNumerator must be less than or equal to reserve ratio denominator\"\n            );\n\n            tokens[tokenAddress].id = tokenAddresses.length;\n            tokens[tokenAddress].added = true;\n            tokens[tokenAddress].acceptingDeposits = acceptingDeposits;\n            tokens[tokenAddress].acceptingWithdrawals = acceptingWithdrawals;\n            tokens[tokenAddress].biosRewardWeight = biosRewardWeight;\n            tokens[tokenAddress].reserveRatioNumerator = reserveRatioNumerator;\n            tokenAddresses.push(tokenAddress);\n        }\n    }\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n\n    function addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator\n    ) external override onlyController {\n        _addToken(\n            tokenAddress,\n            acceptingDeposits,\n            acceptingWithdrawals,\n            biosRewardWeight,\n            reserveRatioNumerator\n        );\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenDeposits(address tokenAddress)\n        external\n        override\n        onlyController\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::enableTokenDeposits: Token does not exist\"\n        );\n        require(\n            !tokens[tokenAddress].acceptingDeposits,\n            \"IntegrationMap::enableTokenDeposits: Token already accepting deposits\"\n        );\n\n        tokens[tokenAddress].acceptingDeposits = true;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenDeposits(address tokenAddress)\n        external\n        override\n        onlyController\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::disableTokenDeposits: Token does not exist\"\n        );\n        require(\n            tokens[tokenAddress].acceptingDeposits,\n            \"IntegrationMap::disableTokenDeposits: Token deposits already disabled\"\n        );\n\n        tokens[tokenAddress].acceptingDeposits = false;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenWithdrawals(address tokenAddress)\n        external\n        override\n        onlyController\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::enableTokenWithdrawals: Token does not exist\"\n        );\n        require(\n            !tokens[tokenAddress].acceptingWithdrawals,\n            \"IntegrationMap::enableTokenWithdrawals: Token already accepting withdrawals\"\n        );\n\n        tokens[tokenAddress].acceptingWithdrawals = true;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenWithdrawals(address tokenAddress)\n        external\n        override\n        onlyController\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::disableTokenWithdrawals: Token does not exist\"\n        );\n        require(\n            tokens[tokenAddress].acceptingWithdrawals,\n            \"IntegrationMap::disableTokenWithdrawals: Token withdrawals already disabled\"\n        );\n\n        tokens[tokenAddress].acceptingWithdrawals = false;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @param rewardWeight The updated token BIOS reward weight\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\n        external\n        override\n        onlyController\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::updateTokenRewardWeight: Token does not exist\"\n        );\n        // require(\n        //   tokens[tokenAddress].biosRewardWeight != rewardWeight,\n        //   \"IntegrationMap::updateTokenRewardWeight: Updated weight must not equal current weight\"\n        // );\n\n        tokens[tokenAddress].biosRewardWeight = rewardWeight;\n    }\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function updateTokenReserveRatioNumerator(\n        address tokenAddress,\n        uint256 reserveRatioNumerator\n    ) external override onlyController {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::updateTokenReserveRatioNumerator: Token does not exist\"\n        );\n        require(\n            reserveRatioNumerator <= RESERVE_RATIO_DENOMINATOR,\n            \"IntegrationMap::addToken: reserveRatioNumerator must be less than or equal to reserve ratio denominator\"\n        );\n\n        tokens[tokenAddress].reserveRatioNumerator = reserveRatioNumerator;\n    }\n\n    /// @param integrationId The ID of the integration\n    /// @return The address of the integration contract\n    function getIntegrationAddress(uint256 integrationId)\n        external\n        view\n        override\n        returns (address)\n    {\n        require(\n            integrationId < integrationAddresses.length,\n            \"IntegrationMap::getIntegrationAddress: Integration does not exist\"\n        );\n\n        return integrationAddresses[integrationId];\n    }\n\n    /// @param integrationAddress The address of the integration contract\n    /// @return The name of the of the protocol being integrated to\n    function getIntegrationName(address integrationAddress)\n        external\n        view\n        override\n        returns (string memory)\n    {\n        require(\n            integrations[integrationAddress].added,\n            \"IntegrationMap::getIntegrationName: Integration does not exist\"\n        );\n\n        return integrations[integrationAddress].name;\n    }\n\n    /// @return The address of the WETH token\n    function getWethTokenAddress() external view override returns (address) {\n        return wethTokenAddress;\n    }\n\n    /// @return The address of the BIOS token\n    function getBiosTokenAddress() external view override returns (address) {\n        return biosTokenAddress;\n    }\n\n    /// @param tokenId The ID of the token\n    /// @return The address of the token ERC20 contract\n    function getTokenAddress(uint256 tokenId)\n        external\n        view\n        override\n        returns (address)\n    {\n        require(\n            tokenId < tokenAddresses.length,\n            \"IntegrationMap::getTokenAddress: Token does not exist\"\n        );\n        return (tokenAddresses[tokenId]);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The index of the token in the tokens array\n    function getTokenId(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenId: Token does not exist\"\n        );\n        return (tokens[tokenAddress].id);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The token BIOS reward weight\n    function getTokenBiosRewardWeight(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenBiosRewardWeight: Token does not exist\"\n        );\n        return (tokens[tokenAddress].biosRewardWeight);\n    }\n\n    /// @return rewardWeightSum reward weight of depositable tokens\n    function getBiosRewardWeightSum()\n        external\n        view\n        override\n        returns (uint256 rewardWeightSum)\n    {\n        for (uint256 tokenId; tokenId < tokenAddresses.length; tokenId++) {\n            rewardWeightSum += tokens[tokenAddresses[tokenId]].biosRewardWeight;\n        }\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether depositing this token is currently enabled\n    function getTokenAcceptingDeposits(address tokenAddress)\n        external\n        view\n        override\n        returns (bool)\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenAcceptingDeposits: Token does not exist\"\n        );\n        return tokens[tokenAddress].acceptingDeposits;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether withdrawing this token is currently enabled\n    function getTokenAcceptingWithdrawals(address tokenAddress)\n        external\n        view\n        override\n        returns (bool)\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenAcceptingWithdrawals: Token does not exist\"\n        );\n        return tokens[tokenAddress].acceptingWithdrawals;\n    }\n\n    // @param tokenAddress The address of the token ERC20 contract\n    // @return bool indicating whether the token has been added\n    function getIsTokenAdded(address tokenAddress)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return tokens[tokenAddress].added;\n    }\n\n    // @param integrationAddress The address of the integration contract\n    // @return bool indicating whether the integration has been added\n    function getIsIntegrationAdded(address integrationAddress)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return integrations[integrationAddress].added;\n    }\n\n    /// @notice Gets the length of supported tokens\n    /// @return The quantity of tokens added\n    function getTokenAddressesLength()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return tokenAddresses.length;\n    }\n\n    /// @notice Gets the length of supported integrations\n    /// @return The quantity of Integrations added\n    function getIntegrationAddressesLength()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return integrationAddresses.length;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The token reserve ratio numerator\n    function getTokenReserveRatioNumerator(address tokenAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenReserveRatioNumerator: Token does not exist\"\n        );\n        return tokens[tokenAddress].reserveRatioNumerator;\n    }\n\n    /// @return The token reserve ratio denominator\n    function getReserveRatioDenominator()\n        external\n        pure\n        override\n        returns (uint32)\n    {\n        return RESERVE_RATIO_DENOMINATOR;\n    }\n}\n"
    },
    "contracts/core/EtherRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"../interfaces/IEtherRewards.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\ncontract EtherRewards is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IEtherRewards\n{\n    /// @param controllers_ The array of controllers for this contract\n    /// @param moduleMap_ The address of the ModuleMap contract\n    function initialize(address[] memory controllers_, address moduleMap_)\n        public\n        initializer\n    {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    uint256 private totalEthRewards;\n    uint256 private totalClaimedEthRewards;\n    mapping(address => uint256) private totalUserClaimedEthRewards;\n    mapping(address => uint256) private tokenRewardRate;\n    mapping(address => uint256) private tokenEthRewards;\n    mapping(address => mapping(address => uint256)) private userTokenRewardRate;\n    mapping(address => mapping(address => uint256))\n        private userTokenAccumulatedRewards;\n\n    /// @param token The address of the token ERC20 contract\n    /// @param user The address of the user\n    function updateUserRewards(address token, address user)\n        public\n        override\n        onlyController\n    {\n        uint256 userTokenDeposits = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).getUserInvestedAmountByToken(token, user);\n\n        userTokenAccumulatedRewards[token][user] +=\n            ((tokenRewardRate[token] - userTokenRewardRate[token][user]) *\n                userTokenDeposits) /\n            10**18;\n\n        userTokenRewardRate[token][user] = tokenRewardRate[token];\n    }\n\n    /// @param token The address of the token ERC20 contract\n    /// @param ethRewardsAmount The amount of Ether rewards to add\n    function increaseEthRewards(address token, uint256 ethRewardsAmount)\n        external\n        override\n        onlyController\n    {\n        uint256 tokenTotalDeposits = IStrategyMap(\n            moduleMap.getModuleAddress(Modules.StrategyMap)\n        ).getTokenTotalBalance(token);\n        require(\n            tokenTotalDeposits > 0,\n            \"EtherRewards::increaseEthRewards: Token has not been deposited yet\"\n        );\n\n        totalEthRewards += ethRewardsAmount;\n        tokenEthRewards[token] += ethRewardsAmount;\n        tokenRewardRate[token] +=\n            (ethRewardsAmount * 10**18) /\n            tokenTotalDeposits;\n    }\n\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function claimEthRewards(address user)\n        external\n        override\n        onlyController\n        returns (uint256 ethRewards)\n    {\n        address integrationMap = moduleMap.getModuleAddress(\n            Modules.IntegrationMap\n        );\n        uint256 tokenCount = IIntegrationMap(integrationMap)\n            .getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address token = IIntegrationMap(integrationMap).getTokenAddress(\n                tokenId\n            );\n            ethRewards += claimTokenEthRewards(token, user);\n        }\n    }\n\n    /// @param token The address of the token ERC20 contract\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function claimTokenEthRewards(address token, address user)\n        private\n        returns (uint256 ethRewards)\n    {\n        updateUserRewards(token, user);\n        ethRewards = userTokenAccumulatedRewards[token][user];\n\n        userTokenAccumulatedRewards[token][user] = 0;\n        tokenEthRewards[token] -= ethRewards;\n        totalEthRewards -= ethRewards;\n        totalClaimedEthRewards += ethRewards;\n        totalUserClaimedEthRewards[user] += ethRewards;\n    }\n\n    /// @param token The address of the token ERC20 contract\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserTokenEthRewards(address token, address user)\n        public\n        view\n        override\n        returns (uint256 ethRewards)\n    {\n        uint256 userTokenDeposits = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).getUserInvestedAmountByToken(token, user);\n\n        ethRewards =\n            userTokenAccumulatedRewards[token][user] +\n            ((tokenRewardRate[token] - userTokenRewardRate[token][user]) *\n                userTokenDeposits) /\n            10**18;\n    }\n\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserEthRewards(address user)\n        external\n        view\n        override\n        returns (uint256 ethRewards)\n    {\n        address integrationMap = moduleMap.getModuleAddress(\n            Modules.IntegrationMap\n        );\n        uint256 tokenCount = IIntegrationMap(integrationMap)\n            .getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address token = IIntegrationMap(integrationMap).getTokenAddress(\n                tokenId\n            );\n            ethRewards += getUserTokenEthRewards(token, user);\n        }\n    }\n\n    /// @param token The address of the token ERC20 contract\n    /// @return The amount of Ether rewards for the specified token\n    function getTokenEthRewards(address token)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return tokenEthRewards[token];\n    }\n\n    /// @return The total value of ETH claimed by users\n    function getTotalClaimedEthRewards()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return totalClaimedEthRewards;\n    }\n\n    /// @return The total value of ETH claimed by a user\n    function getTotalUserClaimedEthRewards(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return totalUserClaimedEthRewards[account];\n    }\n\n    /// @return The total amount of Ether rewards\n    function getEthRewards() external view override returns (uint256) {\n        return totalEthRewards;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}