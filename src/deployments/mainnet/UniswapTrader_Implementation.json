{
  "address": "0xDE1910ECde9B3fa1599414AED33e2691431017b6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "primaryPoolIndex",
          "type": "uint256"
        }
      ],
      "name": "UniswapPairPrimaryPoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "name": "UniswapPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "name": "UniswapPoolSlippageNumeratorUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "feeNumerator",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountInMaximum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getEstimatedTokenIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getEstimatedTokenOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDenominator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getPathFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "firstPoolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenInTokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "secondPoolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            }
          ],
          "internalType": "struct IUniswapTrader.Path",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolFeeNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "feeNumerator",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolSlippageNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageDenominator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getSqrtPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenPairIndex",
          "type": "uint256"
        }
      ],
      "name": "getTokenPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getTokenPairPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "getTokensAndAmountsSorted",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getTokensSorted",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddress_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "firstPoolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenInTokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "secondPoolFee",
          "type": "uint256"
        }
      ],
      "name": "setPathFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "tradeSuccess",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "tradeSuccess",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "primaryPoolIndex",
          "type": "uint256"
        }
      ],
      "name": "updatePairPrimaryPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "name": "updatePoolSlippageNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bd0d308784ed984ffb967527dd8b4e418fe6eeb00e12ed4da7acd19b90871a1",
  "receipt": {
    "to": null,
    "from": "0xBf98f6DF65dfa2f2b50d4a806cF134A209C7D364",
    "contractAddress": "0xDE1910ECde9B3fa1599414AED33e2691431017b6",
    "transactionIndex": 137,
    "gasUsed": "3810405",
    "logsBloom": "0x
    "blockHash": "0x081ff191e1a9840d39b7a466f4cef8d3098c89ec26853d22c87e20078c949fdc",
    "transactionHash": "0x0bd0d308784ed984ffb967527dd8b4e418fe6eeb00e12ed4da7acd19b90871a1",
    "logs": [],
    "blockNumber": 13324467,
    "cumulativeGasUsed": "12036700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "97ca3d881c0665fbcb6fbd64fc459161",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"primaryPoolIndex\",\"type\":\"uint256\"}],\"name\":\"UniswapPairPrimaryPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"UniswapPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"UniswapPoolSlippageNumeratorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"feeNumerator\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountInMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getEstimatedTokenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getEstimatedTokenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getPathFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenInTokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"internalType\":\"struct IUniswapTrader.Path\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolFeeNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"feeNumerator\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolSlippageNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getSqrtPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPairIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getTokenPairPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"getTokensAndAmountsSorted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getTokensSorted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenInTokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondPoolFee\",\"type\":\"uint256\"}],\"name\":\"setPathFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tradeSuccess\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tradeSuccess\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryPoolIndex\",\"type\":\"uint256\"}],\"name\":\"updatePairPrimaryPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"updatePoolSlippageNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address,address,uint24,uint24)\":{\"params\":{\"feeNumerator\":\"The Uniswap pool fee numerator\",\"slippageNumerator\":\"The value divided by the slippage denominator to calculate the allowable slippage positions is enabled for this pool\",\"tokenA\":\"The address of tokenA ERC20 contract\",\"tokenB\":\"The address of tokenB ERC20 contract\"}},\"getAmountInMaximum(address,address,uint256)\":{\"params\":{\"amountOut\":\"The exact amount of token being swapped for\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountInMaximum\":\"The maximum amount of tokenIn to spend, factoring in allowable slippage\"}},\"getAmountOutMinimum(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOutMinimum\":\"The minimum amount of tokenOut to receive, factoring in allowable slippage\"}},\"getEstimatedTokenIn(address,address,uint256)\":{\"params\":{\"amountOut\":\"The exact amount of the output token to swap for\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountIn\":\"The estimated amount of tokenIn to spend\"}},\"getEstimatedTokenOut(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOut\":\"The estimated amount of tokenOut to receive\"}},\"getFeeDenominator()\":{\"returns\":{\"_0\":\"The denominator used to calculate the pool fee percentage\"}},\"getPool(address,address,uint256)\":{\"params\":{\"poolIndex\":\"The index of the pool\",\"token0\":\"The address of token0 of the pool\",\"token1\":\"The address of token1 of the pool\"},\"returns\":{\"_0\":\"The pool fee numerator\",\"_1\":\"The pool slippage numerator\"}},\"getPoolAddress(address,address)\":{\"params\":{\"tokenA\":\"The address of tokenA ERC20 contract\",\"tokenB\":\"The address of tokenB ERC20 contract\"},\"returns\":{\"pool\":\"The pool address\"}},\"getPoolFeeNumerator(address,address,uint256)\":{\"params\":{\"poolId\":\"The index of the pool in the pools mapping\",\"tokenA\":\"The address of tokenA\",\"tokenB\":\"The address of tokenB\"},\"returns\":{\"feeNumerator\":\"The numerator that gets divided by the fee denominator\"}},\"getPoolSlippageNumerator(address,address,uint256)\":{\"params\":{\"poolId\":\"The index of the pool in the pools mapping\",\"tokenA\":\"The address of tokenA\",\"tokenB\":\"The address of tokenB\"},\"returns\":{\"slippageNumerator\":\"The numerator that gets divided by the slippage denominator\"}},\"getSlippageDenominator()\":{\"returns\":{\"_0\":\"The denominator used to calculate the allowable slippage percentage\"}},\"getSqrtPriceX96(address,address)\":{\"returns\":{\"_0\":\"sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\"}},\"getTokenPair(uint256)\":{\"params\":{\"tokenPairIndex\":\"The index of the token pair\"},\"returns\":{\"_0\":\"The address of token0\",\"_1\":\"The address of token1\"}},\"getTokenPairPoolsLength(address,address)\":{\"params\":{\"tokenA\":\"The address of tokenA\",\"tokenB\":\"The address of tokenB\"},\"returns\":{\"_0\":\"The quantity of pools configured for the specified token pair\"}},\"getTokenPairsLength()\":{\"returns\":{\"_0\":\"The number of token pairs configured\"}},\"getTokensAndAmountsSorted(address,address,uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of tokenA\",\"amountB\":\"The amount of tokenB\",\"tokenA\":\"The address of tokenA\",\"tokenB\":\"The address of tokenB\"},\"returns\":{\"amount0\":\"The amount of sorted token0\",\"amount1\":\"The amount of sorted token1\",\"token0\":\"The address of sorted token0\",\"token1\":\"The address of sorted token1\"}},\"getTokensSorted(address,address)\":{\"params\":{\"tokenA\":\"The address of tokenA\",\"tokenB\":\"The address of tokenB\"},\"returns\":{\"token0\":\"The address of the sorted token0\",\"token1\":\"The address of the sorted token1\"}},\"initialize(address[],address,address,address)\":{\"params\":{\"controllers_\":\"The addresses of the controlling contracts\",\"factoryAddress_\":\"The address of the Uniswap factory contract\",\"moduleMap_\":\"Module Map address\",\"swapRouterAddress_\":\"The address of the Uniswap swap router contract\"}},\"swapExactInput(address,address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"recipient\":\"The address to receive the tokens\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"tradeSuccess\":\"Indicates whether the trade succeeded\"}},\"swapExactOutput(address,address,address,uint256)\":{\"params\":{\"amountOut\":\"The exact amount of the output token to receive\",\"recipient\":\"The address to receive the tokens\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"tradeSuccess\":\"Indicates whether the trade succeeded\"}},\"updatePairPrimaryPool(address,address,uint256)\":{\"params\":{\"primaryPoolIndex\":\"The index of the Uniswap pool to make the new primary pool\",\"tokenA\":\"The address of tokenA of the pool\",\"tokenB\":\"The address of tokenB of the pool\"}},\"updatePoolSlippageNumerator(address,address,uint256,uint24)\":{\"params\":{\"poolIndex\":\"The index of the pool for the specified token pair\",\"slippageNumerator\":\"The new slippage numerator to update the pool\",\"tokenA\":\"The address of tokenA of the pool\",\"tokenB\":\"The address of tokenB of the pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updatePairPrimaryPool(address,address,uint256)\":{\"notice\":\"Updates which Uniswap pool to use as the default poolwhen swapping between token0 and token1\"}},\"notice\":\"Integrates 0x Nodes to Uniswap v3tokenA/tokenB naming implies tokens are unsortedtoken0/token1 naming implies tokens are sorted\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/UniswapTrader.sol\":\"UniswapTrader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc28d9f2ac7088d478d86ec6c0e1dadd48af1b2d0c1f6d497f9b652339e3002ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n  // controller address => is a controller\\n  mapping(address => bool) internal _controllers;\\n  address[] public controllers;\\n\\n  function __Controlled_init(address[] memory controllers_, address moduleMap_)\\n    public\\n    initializer\\n  {\\n    for (uint256 i; i < controllers_.length; i++) {\\n      _controllers[controllers_[i]] = true;\\n    }\\n    controllers = controllers_;\\n    __ModuleMapConsumer_init(moduleMap_);\\n  }\\n\\n  function addController(address controller) external onlyOwner {\\n    _controllers[controller] = true;\\n    bool added;\\n    for (uint256 i; i < controllers.length; i++) {\\n      if (controller == controllers[i]) {\\n        added = true;\\n      }\\n    }\\n    if (!added) {\\n      controllers.push(controller);\\n    }\\n  }\\n\\n  modifier onlyOwner() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n      \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n      \\\"Controlled::onlyManager: Caller is not manager\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyController() {\\n    require(\\n      _controllers[msg.sender],\\n      \\\"Controlled::onlyController: Caller is not controller\\\"\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xacea8b6724448e01f057a3aab52caa00ee1c117ed665255ed96c431aafe4ffdf\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n  IModuleMap public moduleMap;\\n\\n  function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n    moduleMap = IModuleMap(moduleMap_);\\n  }\\n}\\n\",\"keccak256\":\"0xaf4345a247e5e80ad895d9ca4c3503f53de2416b6a21134897505164c47042cb\",\"license\":\"GPL-2.0\"},\"contracts/core/UniswapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IUniswapFactory.sol\\\";\\nimport \\\"../interfaces/IUniswapPositionManager.sol\\\";\\nimport \\\"../interfaces/IUniswapSwapRouter.sol\\\";\\nimport \\\"../interfaces/IUniswapTrader.sol\\\";\\nimport \\\"../interfaces/IUniswapPool.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to Uniswap v3\\n/// @notice tokenA/tokenB naming implies tokens are unsorted\\n/// @notice token0/token1 naming implies tokens are sorted\\ncontract UniswapTrader is\\n  Initializable,\\n  ModuleMapConsumer,\\n  Controlled,\\n  IUniswapTrader\\n{\\n  using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n  struct Pool {\\n    uint24 feeNumerator;\\n    uint24 slippageNumerator;\\n  }\\n\\n  struct TokenPair {\\n    address token0;\\n    address token1;\\n  }\\n\\n  uint24 private constant FEE_DENOMINATOR = 1_000_000;\\n  uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n  address private factoryAddress;\\n  address private swapRouterAddress;\\n\\n  mapping(address => mapping(address => Pool[])) private pools;\\n  mapping(address => mapping(address => Path)) private paths;\\n  mapping(address => mapping(address => bool)) private isMultihopPair;\\n\\n  TokenPair[] private tokenPairs;\\n\\n  event UniswapPoolAdded(\\n    address indexed token0,\\n    address indexed token1,\\n    uint24 fee,\\n    uint24 slippageNumerator\\n  );\\n  event UniswapPoolSlippageNumeratorUpdated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint256 poolIndex,\\n    uint24 slippageNumerator\\n  );\\n  event UniswapPairPrimaryPoolUpdated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint256 primaryPoolIndex\\n  );\\n\\n  /// @param controllers_ The addresses of the controlling contracts\\n  /// @param moduleMap_ Module Map address\\n  /// @param factoryAddress_ The address of the Uniswap factory contract\\n  /// @param swapRouterAddress_ The address of the Uniswap swap router contract\\n  function initialize(\\n    address[] memory controllers_,\\n    address moduleMap_,\\n    address factoryAddress_,\\n    address swapRouterAddress_\\n  ) public initializer {\\n    __Controlled_init(controllers_, moduleMap_);\\n    __ModuleMapConsumer_init(moduleMap_);\\n    factoryAddress = factoryAddress_;\\n    swapRouterAddress = swapRouterAddress_;\\n  }\\n\\n  /// @param tokenA The address of tokenA ERC20 contract\\n  /// @param tokenB The address of tokenB ERC20 contract\\n  /// @param feeNumerator The Uniswap pool fee numerator\\n  /// @param slippageNumerator The value divided by the slippage denominator\\n  /// to calculate the allowable slippage\\n  /// positions is enabled for this pool\\n  function addPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 feeNumerator,\\n    uint24 slippageNumerator\\n  ) external override onlyManager {\\n    require(\\n      IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n        .getIsTokenAdded(tokenA),\\n      \\\"UniswapTrader::addPool: TokenA has not been added in the Integration Map\\\"\\n    );\\n    require(\\n      IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n        .getIsTokenAdded(tokenB),\\n      \\\"UniswapTrader::addPool: TokenB has not been added in the Integration Map\\\"\\n    );\\n    require(\\n      slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n      \\\"UniswapTrader::addPool: Slippage numerator cannot be greater than slippapge denominator\\\"\\n    );\\n    require(\\n      IUniswapFactory(factoryAddress).getPool(tokenA, tokenB, feeNumerator) !=\\n        address(0),\\n      \\\"UniswapTrader::addPool: Pool does not exist\\\"\\n    );\\n\\n    (address token0, address token1) = getTokensSorted(tokenA, tokenB);\\n\\n    bool poolAdded;\\n    for (\\n      uint256 poolIndex;\\n      poolIndex < pools[token0][token1].length;\\n      poolIndex++\\n    ) {\\n      if (pools[token0][token1][poolIndex].feeNumerator == feeNumerator) {\\n        poolAdded = true;\\n      }\\n    }\\n\\n    require(!poolAdded, \\\"UniswapTrader::addPool: Pool has already been added\\\");\\n\\n    Pool memory newPool;\\n    newPool.feeNumerator = feeNumerator;\\n    newPool.slippageNumerator = slippageNumerator;\\n    pools[token0][token1].push(newPool);\\n\\n    bool tokenPairAdded;\\n    for (uint256 pairIndex; pairIndex < tokenPairs.length; pairIndex++) {\\n      if (\\n        tokenPairs[pairIndex].token0 == token0 &&\\n        tokenPairs[pairIndex].token1 == token1\\n      ) {\\n        tokenPairAdded = true;\\n      }\\n    }\\n\\n    if (!tokenPairAdded) {\\n      TokenPair memory newTokenPair;\\n      newTokenPair.token0 = token0;\\n      newTokenPair.token1 = token1;\\n      tokenPairs.push(newTokenPair);\\n\\n      if (\\n        IERC20MetadataUpgradeable(token0).allowance(\\n          address(this),\\n          moduleMap.getModuleAddress(Modules.YieldManager)\\n        ) == 0\\n      ) {\\n        IERC20MetadataUpgradeable(token0).safeApprove(\\n          moduleMap.getModuleAddress(Modules.YieldManager),\\n          type(uint256).max\\n        );\\n      }\\n\\n      if (\\n        IERC20MetadataUpgradeable(token1).allowance(\\n          address(this),\\n          moduleMap.getModuleAddress(Modules.YieldManager)\\n        ) == 0\\n      ) {\\n        IERC20MetadataUpgradeable(token1).safeApprove(\\n          moduleMap.getModuleAddress(Modules.YieldManager),\\n          type(uint256).max\\n        );\\n      }\\n\\n      if (\\n        IERC20MetadataUpgradeable(token0).allowance(\\n          address(this),\\n          swapRouterAddress\\n        ) == 0\\n      ) {\\n        IERC20MetadataUpgradeable(token0).safeApprove(\\n          swapRouterAddress,\\n          type(uint256).max\\n        );\\n      }\\n\\n      if (\\n        IERC20MetadataUpgradeable(token1).allowance(\\n          address(this),\\n          swapRouterAddress\\n        ) == 0\\n      ) {\\n        IERC20MetadataUpgradeable(token1).safeApprove(\\n          swapRouterAddress,\\n          type(uint256).max\\n        );\\n      }\\n    }\\n\\n    emit UniswapPoolAdded(token0, token1, feeNumerator, slippageNumerator);\\n  }\\n\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param poolIndex The index of the pool for the specified token pair\\n  /// @param slippageNumerator The new slippage numerator to update the pool\\n  function updatePoolSlippageNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolIndex,\\n    uint24 slippageNumerator\\n  ) external override onlyManager {\\n    require(\\n      slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n      \\\"UniswapTrader:updatePoolSlippageNumerator: Slippage numerator must not be greater than slippage denominator\\\"\\n    );\\n    (address token0, address token1) = getTokensSorted(tokenA, tokenB);\\n    require(\\n      pools[token0][token1][poolIndex].slippageNumerator != slippageNumerator,\\n      \\\"UniswapTrader:updatePoolSlippageNumerator: Slippage numerator must be updated to a new number\\\"\\n    );\\n    require(\\n      pools[token0][token1].length > poolIndex,\\n      \\\"UniswapTrader:updatePoolSlippageNumerator: Pool does not exist\\\"\\n    );\\n\\n    pools[token0][token1][poolIndex].slippageNumerator = slippageNumerator;\\n\\n    emit UniswapPoolSlippageNumeratorUpdated(\\n      token0,\\n      token1,\\n      poolIndex,\\n      slippageNumerator\\n    );\\n  }\\n\\n  /// @notice Updates which Uniswap pool to use as the default pool\\n  /// @notice when swapping between token0 and token1\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\\n  function updatePairPrimaryPool(\\n    address tokenA,\\n    address tokenB,\\n    uint256 primaryPoolIndex\\n  ) external override onlyManager {\\n    require(\\n      primaryPoolIndex != 0,\\n      \\\"UniswapTrader::updatePairPrimaryPool: Specified index is already the primary pool\\\"\\n    );\\n    (address token0, address token1) = getTokensSorted(tokenA, tokenB);\\n    require(\\n      primaryPoolIndex < pools[token0][token1].length,\\n      \\\"UniswapTrader::updatePairPrimaryPool: Specified pool index does not exist\\\"\\n    );\\n\\n    uint24 newPrimaryPoolFeeNumerator = pools[token0][token1][primaryPoolIndex]\\n      .feeNumerator;\\n    uint24 newPrimaryPoolSlippageNumerator = pools[token0][token1][\\n      primaryPoolIndex\\n    ].slippageNumerator;\\n\\n    pools[token0][token1][primaryPoolIndex].feeNumerator = pools[token0][\\n      token1\\n    ][0].feeNumerator;\\n    pools[token0][token1][primaryPoolIndex].slippageNumerator = pools[token0][\\n      token1\\n    ][0].slippageNumerator;\\n\\n    pools[token0][token1][0].feeNumerator = newPrimaryPoolFeeNumerator;\\n    pools[token0][token1][0]\\n      .slippageNumerator = newPrimaryPoolSlippageNumerator;\\n\\n    emit UniswapPairPrimaryPoolUpdated(token0, token1, primaryPoolIndex);\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn\\n  ) external override onlyController returns (bool tradeSuccess) {\\n    IERC20MetadataUpgradeable tokenInErc20 = IERC20MetadataUpgradeable(tokenIn);\\n\\n    if (isMultihopPair[tokenIn][tokenOut]) {\\n      Path memory path = getPathFor(tokenIn, tokenOut);\\n      IUniswapSwapRouter.ExactInputParams memory params = IUniswapSwapRouter\\n        .ExactInputParams({\\n          path: abi.encodePacked(\\n            path.tokenIn,\\n            path.firstPoolFee,\\n            path.tokenInTokenOut,\\n            path.secondPoolFee,\\n            path.tokenOut\\n          ),\\n          recipient: recipient,\\n          deadline: block.timestamp,\\n          amountIn: amountIn,\\n          amountOutMinimum: 0\\n        });\\n\\n      // Executes the swap.\\n      try IUniswapSwapRouter(swapRouterAddress).exactInput(params) {\\n        tradeSuccess = true;\\n      } catch {\\n        tradeSuccess = false;\\n        tokenInErc20.safeTransfer(\\n          recipient,\\n          tokenInErc20.balanceOf(address(this))\\n        );\\n      }\\n\\n      return tradeSuccess;\\n    }\\n\\n    (address token0, address token1) = getTokensSorted(tokenIn, tokenOut);\\n\\n    require(\\n      pools[token0][token1].length > 0,\\n      \\\"UniswapTrader::swapExactInput: Pool has not been added\\\"\\n    );\\n    require(\\n      tokenInErc20.balanceOf(address(this)) >= amountIn,\\n      \\\"UniswapTrader::swapExactInput: Balance is less than trade amount\\\"\\n    );\\n\\n    uint256 amountOutMinimum = getAmountOutMinimum(tokenIn, tokenOut, amountIn);\\n\\n    IUniswapSwapRouter.ExactInputSingleParams memory exactInputSingleParams;\\n    exactInputSingleParams.tokenIn = tokenIn;\\n    exactInputSingleParams.tokenOut = tokenOut;\\n    exactInputSingleParams.fee = pools[token0][token1][0].feeNumerator;\\n    exactInputSingleParams.recipient = recipient;\\n    exactInputSingleParams.deadline = block.timestamp;\\n    exactInputSingleParams.amountIn = amountIn;\\n    exactInputSingleParams.amountOutMinimum = amountOutMinimum;\\n    exactInputSingleParams.sqrtPriceLimitX96 = 0;\\n\\n    try\\n      IUniswapSwapRouter(swapRouterAddress).exactInputSingle(\\n        exactInputSingleParams\\n      )\\n    {\\n      tradeSuccess = true;\\n    } catch {\\n      tradeSuccess = false;\\n      tokenInErc20.safeTransfer(\\n        recipient,\\n        tokenInErc20.balanceOf(address(this))\\n      );\\n    }\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountOut The exact amount of the output token to receive\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactOutput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountOut\\n  ) external override onlyController returns (bool tradeSuccess) {\\n    IERC20MetadataUpgradeable tokenInErc20 = IERC20MetadataUpgradeable(tokenIn);\\n\\n    if (isMultihopPair[tokenIn][tokenOut]) {\\n      Path memory path = getPathFor(tokenIn, tokenOut);\\n      IUniswapSwapRouter.ExactOutputParams memory params = IUniswapSwapRouter\\n        .ExactOutputParams({\\n          path: abi.encodePacked(\\n            path.tokenIn,\\n            path.firstPoolFee,\\n            path.tokenInTokenOut,\\n            path.secondPoolFee,\\n            path.tokenOut\\n          ),\\n          recipient: recipient,\\n          deadline: block.timestamp,\\n          amountOut: amountOut,\\n          amountInMaximum: 0\\n        });\\n\\n      // Executes the swap.\\n      try IUniswapSwapRouter(swapRouterAddress).exactOutput(params) {\\n        tradeSuccess = true;\\n      } catch {\\n        tradeSuccess = false;\\n        tokenInErc20.safeTransfer(\\n          recipient,\\n          tokenInErc20.balanceOf(address(this))\\n        );\\n      }\\n\\n      return tradeSuccess;\\n    }\\n    (address token0, address token1) = getTokensSorted(tokenIn, tokenOut);\\n    require(\\n      pools[token0][token1][0].feeNumerator > 0,\\n      \\\"UniswapTrader::swapExactOutput: Pool has not been added\\\"\\n    );\\n    uint256 amountInMaximum = getAmountInMaximum(tokenIn, tokenOut, amountOut);\\n    require(\\n      tokenInErc20.balanceOf(address(this)) >= amountInMaximum,\\n      \\\"UniswapTrader::swapExactOutput: Balance is less than trade amount\\\"\\n    );\\n\\n    IUniswapSwapRouter.ExactOutputSingleParams memory exactOutputSingleParams;\\n    exactOutputSingleParams.tokenIn = tokenIn;\\n    exactOutputSingleParams.tokenOut = tokenOut;\\n    exactOutputSingleParams.fee = pools[token0][token1][0].feeNumerator;\\n    exactOutputSingleParams.recipient = recipient;\\n    exactOutputSingleParams.deadline = block.timestamp;\\n    exactOutputSingleParams.amountOut = amountOut;\\n    exactOutputSingleParams.amountInMaximum = amountInMaximum;\\n    exactOutputSingleParams.sqrtPriceLimitX96 = 0;\\n\\n    try\\n      IUniswapSwapRouter(swapRouterAddress).exactOutputSingle(\\n        exactOutputSingleParams\\n      )\\n    {\\n      tradeSuccess = true;\\n    } catch {\\n      tradeSuccess = false;\\n      tokenInErc20.safeTransfer(\\n        recipient,\\n        tokenInErc20.balanceOf(address(this))\\n      );\\n    }\\n  }\\n\\n  /// @param tokenA The address of tokenA ERC20 contract\\n  /// @param tokenB The address of tokenB ERC20 contract\\n  /// @return pool The pool address\\n  function getPoolAddress(address tokenA, address tokenB)\\n    public\\n    view\\n    override\\n    returns (address pool)\\n  {\\n    uint24 feeNumerator = getPoolFeeNumerator(tokenA, tokenB, 0);\\n    pool = IUniswapFactory(factoryAddress).getPool(\\n      tokenA,\\n      tokenB,\\n      feeNumerator\\n    );\\n  }\\n\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n  function getSqrtPriceX96(address tokenA, address tokenB)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    (uint160 sqrtPriceX96, , , , , , ) = IUniswapPool(\\n      getPoolAddress(tokenA, tokenB)\\n    ).slot0();\\n    return uint256(sqrtPriceX96);\\n  }\\n\\n  function getPathFor(address tokenIn, address tokenOut)\\n    public\\n    view\\n    override\\n    returns (Path memory)\\n  {\\n    require(\\n      isMultihopPair[tokenIn][tokenOut],\\n      \\\"There is an existing Pool for this pair\\\"\\n    );\\n\\n    return paths[tokenIn][tokenOut];\\n  }\\n\\n  function setPathFor(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 firstPoolFee,\\n    address tokenInTokenOut,\\n    uint256 secondPoolFee\\n  ) public override onlyManager {\\n    paths[tokenIn][tokenOut] = Path(\\n      tokenIn,\\n      firstPoolFee,\\n      tokenInTokenOut,\\n      secondPoolFee,\\n      tokenOut\\n    );\\n    isMultihopPair[tokenIn][tokenOut] = true;\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n  function getAmountOutMinimum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 amountOutMinimum) {\\n    uint256 estimatedAmountOut = getEstimatedTokenOut(\\n      tokenIn,\\n      tokenOut,\\n      amountIn\\n    );\\n    uint24 poolSlippageNumerator = getPoolSlippageNumerator(\\n      tokenIn,\\n      tokenOut,\\n      0\\n    );\\n    amountOutMinimum =\\n      (estimatedAmountOut * (SLIPPAGE_DENOMINATOR - poolSlippageNumerator)) /\\n      SLIPPAGE_DENOMINATOR;\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountOut The exact amount of token being swapped for\\n  /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\\n  function getAmountInMaximum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) public view override returns (uint256 amountInMaximum) {\\n    uint256 estimatedAmountIn = getEstimatedTokenIn(\\n      tokenIn,\\n      tokenOut,\\n      amountOut\\n    );\\n    uint24 poolSlippageNumerator = getPoolSlippageNumerator(\\n      tokenIn,\\n      tokenOut,\\n      0\\n    );\\n    amountInMaximum =\\n      (estimatedAmountIn * (SLIPPAGE_DENOMINATOR + poolSlippageNumerator)) /\\n      SLIPPAGE_DENOMINATOR;\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOut The estimated amount of tokenOut to receive\\n  function getEstimatedTokenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view override returns (uint256 amountOut) {\\n    if (isMultihopPair[tokenIn][tokenOut]) {\\n      Path memory path = getPathFor(tokenIn, tokenOut);\\n      uint256 amountOutTemp = getEstimatedTokenOut(\\n        path.tokenIn,\\n        path.tokenInTokenOut,\\n        amountIn\\n      );\\n      return\\n        getEstimatedTokenOut(\\n          path.tokenInTokenOut,\\n          path.tokenOut,\\n          amountOutTemp\\n        );\\n    }\\n\\n    uint24 feeNumerator = getPoolFeeNumerator(tokenIn, tokenOut, 0);\\n    uint256 sqrtPriceX96 = getSqrtPriceX96(tokenIn, tokenOut);\\n\\n    // FullMath is used to allow intermediate calculation values of up to 2^512\\n    if (tokenIn < tokenOut) {\\n      amountOut =\\n        (FullMath.mulDiv(\\n          FullMath.mulDiv(amountIn, sqrtPriceX96, 2**96),\\n          sqrtPriceX96,\\n          2**96\\n        ) * (FEE_DENOMINATOR - feeNumerator)) /\\n        FEE_DENOMINATOR;\\n    } else {\\n      amountOut =\\n        (FullMath.mulDiv(\\n          FullMath.mulDiv(amountIn, 2**96, sqrtPriceX96),\\n          2**96,\\n          sqrtPriceX96\\n        ) * (FEE_DENOMINATOR - feeNumerator)) /\\n        FEE_DENOMINATOR;\\n    }\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountOut The exact amount of the output token to swap for\\n  /// @return amountIn The estimated amount of tokenIn to spend\\n  function getEstimatedTokenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) public view returns (uint256 amountIn) {\\n    if (isMultihopPair[tokenIn][tokenOut]) {\\n      Path memory path = getPathFor(tokenIn, tokenOut);\\n      uint256 amountInTemp = getEstimatedTokenIn(\\n        path.tokenInTokenOut,\\n        path.tokenOut,\\n        amountOut\\n      );\\n      return\\n        getEstimatedTokenIn(path.tokenIn, path.tokenInTokenOut, amountInTemp);\\n    }\\n\\n    uint24 feeNumerator = getPoolFeeNumerator(tokenIn, tokenOut, 0);\\n    uint256 sqrtPriceX96 = getSqrtPriceX96(tokenIn, tokenOut);\\n\\n    // FullMath is used to allow intermediate calculation values of up to 2^512\\n    if (tokenIn < tokenOut) {\\n      amountIn =\\n        (FullMath.mulDiv(\\n          FullMath.mulDiv(amountOut, 2**96, sqrtPriceX96),\\n          2**96,\\n          sqrtPriceX96\\n        ) * (FEE_DENOMINATOR - feeNumerator)) /\\n        FEE_DENOMINATOR;\\n    } else {\\n      amountIn =\\n        (FullMath.mulDiv(\\n          FullMath.mulDiv(amountOut, sqrtPriceX96, 2**96),\\n          sqrtPriceX96,\\n          2**96\\n        ) * (FEE_DENOMINATOR - feeNumerator)) /\\n        FEE_DENOMINATOR;\\n    }\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @param poolId The index of the pool in the pools mapping\\n  /// @return feeNumerator The numerator that gets divided by the fee denominator\\n  function getPoolFeeNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolId\\n  ) public view override returns (uint24 feeNumerator) {\\n    (address token0, address token1) = getTokensSorted(tokenA, tokenB);\\n    require(\\n      poolId < pools[token0][token1].length,\\n      \\\"UniswapTrader::getPoolFeeNumerator: Pool ID does not exist\\\"\\n    );\\n    feeNumerator = pools[token0][token1][poolId].feeNumerator;\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @param poolId The index of the pool in the pools mapping\\n  /// @return slippageNumerator The numerator that gets divided by the slippage denominator\\n  function getPoolSlippageNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolId\\n  ) public view returns (uint24 slippageNumerator) {\\n    (address token0, address token1) = getTokensSorted(tokenA, tokenB);\\n    return pools[token0][token1][poolId].slippageNumerator;\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return token0 The address of the sorted token0\\n  /// @return token1 The address of the sorted token1\\n  function getTokensSorted(address tokenA, address tokenB)\\n    public\\n    pure\\n    override\\n    returns (address token0, address token1)\\n  {\\n    if (tokenA < tokenB) {\\n      token0 = tokenA;\\n      token1 = tokenB;\\n    } else {\\n      token0 = tokenB;\\n      token1 = tokenA;\\n    }\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @param amountA The amount of tokenA\\n  /// @param amountB The amount of tokenB\\n  /// @return token0 The address of sorted token0\\n  /// @return token1 The address of sorted token1\\n  /// @return amount0 The amount of sorted token0\\n  /// @return amount1 The amount of sorted token1\\n  function getTokensAndAmountsSorted(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountA,\\n    uint256 amountB\\n  )\\n    public\\n    pure\\n    returns (\\n      address token0,\\n      address token1,\\n      uint256 amount0,\\n      uint256 amount1\\n    )\\n  {\\n    if (tokenA < tokenB) {\\n      token0 = tokenA;\\n      token1 = tokenB;\\n      amount0 = amountA;\\n      amount1 = amountB;\\n    } else {\\n      token0 = tokenB;\\n      token1 = tokenA;\\n      amount0 = amountB;\\n      amount1 = amountA;\\n    }\\n  }\\n\\n  /// @return The denominator used to calculate the pool fee percentage\\n  function getFeeDenominator() external pure returns (uint24) {\\n    return FEE_DENOMINATOR;\\n  }\\n\\n  /// @return The denominator used to calculate the allowable slippage percentage\\n  function getSlippageDenominator() external pure returns (uint24) {\\n    return SLIPPAGE_DENOMINATOR;\\n  }\\n\\n  /// @return The number of token pairs configured\\n  function getTokenPairsLength() external view override returns (uint256) {\\n    return tokenPairs.length;\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return The quantity of pools configured for the specified token pair\\n  function getTokenPairPoolsLength(address tokenA, address tokenB)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (address token0, address token1) = getTokensSorted(tokenA, tokenB);\\n    return pools[token0][token1].length;\\n  }\\n\\n  /// @param tokenPairIndex The index of the token pair\\n  /// @return The address of token0\\n  /// @return The address of token1\\n  function getTokenPair(uint256 tokenPairIndex)\\n    external\\n    view\\n    returns (address, address)\\n  {\\n    require(\\n      tokenPairIndex < tokenPairs.length,\\n      \\\"UniswapTrader::getTokenPair: Token pair does not exist\\\"\\n    );\\n    return (\\n      tokenPairs[tokenPairIndex].token0,\\n      tokenPairs[tokenPairIndex].token1\\n    );\\n  }\\n\\n  /// @param token0 The address of token0 of the pool\\n  /// @param token1 The address of token1 of the pool\\n  /// @param poolIndex The index of the pool\\n  /// @return The pool fee numerator\\n  /// @return The pool slippage numerator\\n  function getPool(\\n    address token0,\\n    address token1,\\n    uint256 poolIndex\\n  ) external view returns (uint24, uint24) {\\n    require(\\n      poolIndex < pools[token0][token1].length,\\n      \\\"UniswapTrader:getPool: Pool does not exist\\\"\\n    );\\n    return (\\n      pools[token0][token1][poolIndex].feeNumerator,\\n      pools[token0][token1][poolIndex].slippageNumerator\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb7db3719f3f1c8e4e84c6e8683f280c5fccddbf365689c3a43f6cae2ce479ead\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegrationMap {\\n  struct Integration {\\n    bool added;\\n    string name;\\n  }\\n\\n  struct Token {\\n    uint256 id;\\n    bool added;\\n    bool acceptingDeposits;\\n    bool acceptingWithdrawals;\\n    uint256 biosRewardWeight;\\n    uint256 reserveRatioNumerator;\\n  }\\n\\n  /// @param contractAddress The address of the integration contract\\n  /// @param name The name of the protocol being integrated to\\n  function addIntegration(address contractAddress, string memory name) external;\\n\\n  /// @param tokenAddress The address of the ERC20 token contract\\n  /// @param acceptingDeposits Whether token deposits are enabled\\n  /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n  /// @param biosRewardWeight Token weight for BIOS rewards\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function addToken(\\n    address tokenAddress,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @param rewardWeight The updated token BIOS reward weight\\n  function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n    external;\\n\\n  /// @param tokenAddress the address of the token ERC20 contract\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function updateTokenReserveRatioNumerator(\\n    address tokenAddress,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param integrationId The ID of the integration\\n  /// @return The address of the integration contract\\n  function getIntegrationAddress(uint256 integrationId)\\n    external\\n    view\\n    returns (address);\\n\\n  /// @param integrationAddress The address of the integration contract\\n  /// @return The name of the of the protocol being integrated to\\n  function getIntegrationName(address integrationAddress)\\n    external\\n    view\\n    returns (string memory);\\n\\n  /// @return The address of the WETH token\\n  function getWethTokenAddress() external view returns (address);\\n\\n  /// @return The address of the BIOS token\\n  function getBiosTokenAddress() external view returns (address);\\n\\n  /// @param tokenId The ID of the token\\n  /// @return The address of the token ERC20 contract\\n  function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The index of the token in the tokens array\\n  function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The token BIOS reward weight\\n  function getTokenBiosRewardWeight(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return rewardWeightSum reward weight of depositable tokens\\n  function getBiosRewardWeightSum()\\n    external\\n    view\\n    returns (uint256 rewardWeightSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether depositing this token is currently enabled\\n  function getTokenAcceptingDeposits(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether withdrawing this token is currently enabled\\n  function getTokenAcceptingWithdrawals(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  // @param tokenAddress The address of the token ERC20 contract\\n  // @return bool indicating whether the token has been added\\n  function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n  // @param integrationAddress The address of the integration contract\\n  // @return bool indicating whether the integration has been added\\n  function getIsIntegrationAdded(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @notice get the length of supported tokens\\n  /// @return The quantity of tokens added\\n  function getTokenAddressesLength() external view returns (uint256);\\n\\n  /// @notice get the length of supported integrations\\n  /// @return The quantity of integrations added\\n  function getIntegrationAddressesLength() external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The value that gets divided by the reserve ratio denominator\\n  function getTokenReserveRatioNumerator(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The token reserve ratio denominator\\n  function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xc593d1edecb21cbf0d025baf0a746ea80d96b24fa2f22e92427fb9215b0bfd28\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IKernel {\\n  /// @param account The address of the account to check if they are a manager\\n  /// @return Bool indicating whether the account is a manger\\n  function isManager(address account) external view returns (bool);\\n\\n  /// @param account The address of the account to check if they are an owner\\n  /// @return Bool indicating whether the account is an owner\\n  function isOwner(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd74d8d773b033e68e2a025ddb8a88516862921e862a62300829b16d24a3ca392\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nenum Modules {\\n  Kernel, // 0\\n  UserPositions, // 1\\n  YieldManager, // 2\\n  IntegrationMap, // 3\\n  BiosRewards, // 4\\n  EtherRewards, // 5\\n  SushiSwapTrader, // 6\\n  UniswapTrader, // 7\\n  StrategyMap, // 8\\n  StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n  function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x056163d4d803d10eb46fb14b3679f7289996ac6f0b6bdf81981d99c12c5183c3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapFactory {\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external view returns (address pool);\\n}\\n\",\"keccak256\":\"0x8f0fdcf28a1f0da01205a6825f525b28ce87cb1f075f81a2222d36d8294b37a5\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapPool {\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n  /// boundary.\\n  /// observationIndex The index of the last oracle observation that was written,\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n  /// unlocked Whether the pool is currently locked to reentrancy\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n}\\n\",\"keccak256\":\"0xce5ab9d7618f7bcf9692bd66356888eb80f8e4a5ee3f38ae9fdb63f0ed63597b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapPositionManager {\\n  struct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n  }\\n\\n  struct IncreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  struct DecreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  struct CollectParams {\\n    uint256 tokenId;\\n    address recipient;\\n    uint128 amount0Max;\\n    uint128 amount1Max;\\n  }\\n\\n  /// @notice Creates a new position wrapped in a NFT\\n  /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n  /// a method does not exist, i.e. the pool is assumed to be initialized.\\n  /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n  /// @return tokenId The ID of the token that represents the minted position\\n  /// @return liquidity The amount of liquidity for this position\\n  /// @return amount0 The amount of token0\\n  /// @return amount1 The amount of token1\\n  function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (\\n      uint256 tokenId,\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    );\\n\\n  /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n  /// @param params tokenId The ID of the token for which liquidity is being increased,\\n  /// amount0Desired The desired amount of token0 to be spent,\\n  /// amount1Desired The desired amount of token1 to be spent,\\n  /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n  /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n  /// deadline The time by which the transaction must be included to effect the change\\n  /// @return liquidity The new liquidity amount as a result of the increase\\n  /// @return amount0 The amount of token0 to acheive resulting liquidity\\n  /// @return amount1 The amount of token1 to acheive resulting liquidity\\n  function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    );\\n\\n  /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n  /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n  /// amount The amount by which liquidity will be decreased,\\n  /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n  /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n  /// deadline The time by which the transaction must be included to effect the change\\n  /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n  /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n  function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n  /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n  /// recipient The account that should receive the tokens,\\n  /// amount0Max The maximum amount of token0 to collect,\\n  /// amount1Max The maximum amount of token1 to collect\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(CollectParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n  /// must be collected first.\\n  /// @param tokenId The ID of the token that is being burned\\n  function burn(uint256 tokenId) external payable;\\n\\n  /// @notice Returns the position information associated with a given token ID.\\n  /// @dev Throws if the token ID is not valid.\\n  /// @param tokenId The ID of the token that represents the position\\n  /// @return nonce The nonce for permits\\n  /// @return operator The address that is approved for spending\\n  /// @return token0 The address of the token0 for a specific pool\\n  /// @return token1 The address of the token1 for a specific pool\\n  /// @return fee The fee associated with the pool\\n  /// @return tickLower The lower end of the tick range for the position\\n  /// @return tickUpper The higher end of the tick range for the position\\n  /// @return liquidity The liquidity of the position\\n  /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n  /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n  /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n  /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n  function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n      uint96 nonce,\\n      address operator,\\n      address token0,\\n      address token1,\\n      uint24 fee,\\n      int24 tickLower,\\n      int24 tickUpper,\\n      uint128 liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1\\n    );\\n}\\n\",\"keccak256\":\"0x0919e447986e9fe6a352ddd576fdd64d9019ceeedfc43dc94c360cc8f88acb95\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapSwapRouter {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amountOut);\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amountIn);\\n\\n  function exactInput(ExactInputParams calldata params)\\n    external\\n    returns (uint256 amountOut);\\n\\n  function exactOutput(ExactOutputParams calldata params)\\n    external\\n    returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x76f1506024c1da4be997d2b8b44f58cab13c542c9e95396d23b3479d9f75bd41\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapTrader {\\n  struct Path {\\n    address tokenOut;\\n    uint256 firstPoolFee;\\n    address tokenInTokenOut;\\n    uint256 secondPoolFee;\\n    address tokenIn;\\n  }\\n\\n  /// @param tokenA The address of tokenA ERC20 contract\\n  /// @param tokenB The address of tokenB ERC20 contract\\n  /// @param fee The Uniswap pool fee\\n  /// @param slippageNumerator The value divided by the slippage denominator\\n  /// to calculate the allowable slippage\\n  function addPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee,\\n    uint24 slippageNumerator\\n  ) external;\\n\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param poolIndex The index of the pool for the specified token pair\\n  /// @param slippageNumerator The new slippage numerator to update the pool\\n  function updatePoolSlippageNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolIndex,\\n    uint24 slippageNumerator\\n  ) external;\\n\\n  /// @notice Changes which Uniswap pool to use as the default pool\\n  /// @notice when swapping between token0 and token1\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\\n  function updatePairPrimaryPool(\\n    address tokenA,\\n    address tokenB,\\n    uint256 primaryPoolIndex\\n  ) external;\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn\\n  ) external returns (bool tradeSuccess);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountOut The exact amount of the output token to receive\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactOutput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountOut\\n  ) external returns (bool tradeSuccess);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountOut The exact amount of token being swapped for\\n  /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\\n  function getAmountInMaximum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountInMaximum);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOut The estimated amount of tokenOut to receive\\n  function getEstimatedTokenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPathFor(address tokenOut, address tokenIn)\\n    external\\n    view\\n    returns (Path memory);\\n\\n  function setPathFor(\\n    address tokenOut,\\n    address tokenIn,\\n    uint256 firstPoolFee,\\n    address tokenInTokenOut,\\n    uint256 secondPoolFee\\n  ) external;\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return token0 The address of the sorted token0\\n  /// @return token1 The address of the sorted token1\\n  function getTokensSorted(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  /// @return The number of token pairs configured\\n  function getTokenPairsLength() external view returns (uint256);\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return The quantity of pools configured for the specified token pair\\n  function getTokenPairPoolsLength(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @param poolId The index of the pool in the pools mapping\\n  /// @return feeNumerator The numerator that gets divided by the fee denominator\\n  function getPoolFeeNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolId\\n  ) external view returns (uint24 feeNumerator);\\n\\n  function getPoolAddress(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pool);\\n}\\n\",\"keccak256\":\"0x0fc13b6765ba937cbf29aa01758c655d3cfd9c7239b0de0fe9a32c70a4ed3181\",\"license\":\"GPL-2.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity >=0.7.6;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x9395b98f6541e3c983e9e6f082300973f9e7441cd924383766dd808cd8c59a1b\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506143fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637757f6d2116100f9578063acf6cc1a11610097578063ccbfc16c11610071578063ccbfc16c14610481578063d46005b114610494578063e94b0dd2146104a7578063f4e1fc411461047857600080fd5b8063acf6cc1a14610436578063b9b6d1b014610465578063bbb370171461047857600080fd5b80639c922100116100d35780639c922100146103bf578063a6cda833146103d2578063a7fc7a0714610410578063ab2f06511461042357600080fd5b80637757f6d2146103865780637c21ce141461039957806398c671ce146103ac57600080fd5b806334857bb0116101665780634ac558f3116101405780634ac558f31461031a5780635245da561461032d578063527c22d314610360578063634461741461037357600080fd5b806334857bb0146102865780633fa1e0c8146102a9578063413ca0b7146102bc57600080fd5b80630f0a1c6f116101a25780630f0a1c6f1461021c578063160855ba1461024d578063305df65d14610260578063320d3e781461027357600080fd5b806304102ba1146101c9578063048417a4146101de57806306bec6e7146101f5575b600080fd5b6101dc6101d7366004613ce7565b6104ba565b005b6008545b6040519081526020015b60405180910390f35b610208610203366004613d3e565b611281565b60405162ffffff90911681526020016101ec565b600054610235906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ec565b6101dc61025b366004613dd8565b61138f565b61020861026e366004613d3e565b6117cf565b6101e2610281366004613c5f565b61184e565b610299610294366004613c97565b6118e6565b60405190151581526020016101ec565b6102356102b7366004613c5f565b611eaf565b6102cf6102ca366004613c5f565b611f50565b6040516101ec919081516001600160a01b0390811682526020808401519083015260408084015182169083015260608084015190830152608092830151169181019190915260a00190565b6101dc610328366004613d7e565b612066565b61034061033b366004613c5f565b612242565b604080516001600160a01b039384168152929091166020830152016101ec565b6101e261036e366004613d3e565b612276565b6101e2610381366004613c5f565b6123ba565b6101e2610394366004613d3e565b6123fa565b6103406103a7366004613fcb565b6124e4565b6101dc6103ba366004613e62565b6125e1565b6102996103cd366004613c97565b6126e2565b6103e56103e0366004613e1d565b612a7e565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016101ec565b6101dc61041e366004613c27565b612ac5565b6101dc610431366004613d3e565b612d00565b610449610444366004613d3e565b6132c6565b6040805162ffffff9384168152929091166020830152016101ec565b6101e2610473366004613d3e565b61340f565b620f4240610208565b6101e261048f366004613d3e565b61344c565b6101dc6104a2366004613ea7565b61347a565b6102356104b5366004613fcb565b61352d565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916104ef91906004016140d4565b60206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561058057600080fd5b505afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190613f1a565b6105dd5760405162461bcd60e51b81526004016105d49061415d565b60405180910390fd5b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610613906003906004016140d4565b60206040518083038186803b15801561062b57600080fd5b505afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190613c43565b604051637faa059760e01b81526001600160a01b0386811660048301529190911690637faa05979060240160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190613f1a565b6107615760405162461bcd60e51b815260206004820152604860248201527f556e69737761705472616465723a3a616464506f6f6c3a20546f6b656e41206860448201527f6173206e6f74206265656e20616464656420696e2074686520496e7465677261606482015267074696f6e204d61760c41b608482015260a4016105d4565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610797906003906004016140d4565b60206040518083038186803b1580156107af57600080fd5b505afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190613c43565b604051637faa059760e01b81526001600160a01b0385811660048301529190911690637faa05979060240160206040518083038186803b15801561082a57600080fd5b505afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190613f1a565b6108e55760405162461bcd60e51b815260206004820152604860248201527f556e69737761705472616465723a3a616464506f6f6c3a20546f6b656e42206860448201527f6173206e6f74206265656e20616464656420696e2074686520496e7465677261606482015267074696f6e204d61760c41b608482015260a4016105d4565b620f424062ffffff821611156109895760405162461bcd60e51b815260206004820152605760248201527f556e69737761705472616465723a3a616464506f6f6c3a20536c69707061676560448201527f206e756d657261746f722063616e6e6f7420626520677265617465722074686160648201527f6e20736c697070617067652064656e6f6d696e61746f72000000000000000000608482015260a4016105d4565b600354604051630b4c774160e11b81526001600160a01b038681166004830152858116602483015262ffffff851660448301526000921690631698ee829060640160206040518083038186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190613c43565b6001600160a01b03161415610a855760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705472616465723a3a616464506f6f6c3a20506f6f6c20646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b60648201526084016105d4565b600080610a928686612242565b915091506000805b6001600160a01b03808516600090815260056020908152604080832093871683529290522054811015610b42576001600160a01b038085166000908152600560209081526040808320938716835292905220805462ffffff8816919083908110610b1457634e487b7160e01b600052603260045260246000fd5b60009182526020909120015462ffffff161415610b3057600191505b80610b3a81614365565b915050610a9a565b508015610bad5760405162461bcd60e51b815260206004820152603360248201527f556e69737761705472616465723a3a616464506f6f6c3a20506f6f6c2068617360448201527208185b1c9958591e481899595b881859191959606a1b60648201526084016105d4565b60408051808201825262ffffff878116825286811660208084019182526001600160a01b03888116600090815260058352868120918916815290825294852080546001810182559086529085208451910180549251841663010000000265ffffffffffff19909316919093161717905590805b600854811015610cdd57856001600160a01b031660088281548110610c5557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b0316148015610cc15750846001600160a01b031660088281548110610ca257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160029092020101546001600160a01b0316145b15610ccb57600191505b80610cd581614365565b915050610c20565b5080611227576040805180820182526001600160a01b0387811680835287821660208401908152600880546001810182556000918252855160029182027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3810180549288166001600160a01b031993841617905593517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4909401805494871694909116939093179092555494516337c61fc560e11b81529394919363dd62ed3e9330936201000090041691636f8c3f8a91610dbb91906004016140d4565b60206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190613c43565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015610e5157600080fd5b505afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190613fe3565b610f29576000546040516337c61fc560e11b8152610f29916201000090046001600160a01b031690636f8c3f8a90610ec6906002906004016140d4565b60206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190613c43565b6001600160a01b03881690600019613557565b6000546040516337c61fc560e11b81526001600160a01b038088169263dd62ed3e9230926201000090920490911690636f8c3f8a90610f6d906002906004016140d4565b60206040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190613c43565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190613fe3565b6110db576000546040516337c61fc560e11b81526110db916201000090046001600160a01b031690636f8c3f8a90611078906002906004016140d4565b60206040518083038186803b15801561109057600080fd5b505afa1580156110a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c89190613c43565b6001600160a01b03871690600019613557565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b03908116602483015287169063dd62ed3e9060440160206040518083038186803b15801561112857600080fd5b505afa15801561113c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111609190613fe3565b61118057600454611180906001600160a01b038881169116600019613557565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b03908116602483015286169063dd62ed3e9060440160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190613fe3565b61122557600454611225906001600160a01b038781169116600019613557565b505b6040805162ffffff808a168252881660208201526001600160a01b0380871692908816917fa2ef711760cee8cd3a81db17763c9b2fc95b6b9491d0b2abccc28180269f80d9910160405180910390a3505050505050505050565b60008060006112908686612242565b6001600160a01b038083166000908152600560209081526040808320938516835292905220549193509150841061132f5760405162461bcd60e51b815260206004820152603a60248201527f556e69737761705472616465723a3a676574506f6f6c4665654e756d6572617460448201527f6f723a20506f6f6c20494420646f6573206e6f7420657869737400000000000060648201526084016105d4565b6001600160a01b03808316600090815260056020908152604080832093851683529290522080548590811061137457634e487b7160e01b600052603260045260246000fd5b60009182526020909120015462ffffff169695505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916113c491906004016140d4565b60206040518083038186803b1580156113dc57600080fd5b505afa1580156113f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561145557600080fd5b505afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190613f1a565b6114a95760405162461bcd60e51b81526004016105d49061415d565b620f424062ffffff821611156115615760405162461bcd60e51b815260206004820152606b60248201527f556e69737761705472616465723a757064617465506f6f6c536c69707061676560448201527f4e756d657261746f723a20536c697070616765206e756d657261746f72206d7560648201527f7374206e6f742062652067726561746572207468616e20736c6970706167652060848201526a3232b737b6b4b730ba37b960a91b60a482015260c4016105d4565b60008061156e8686612242565b6001600160a01b038083166000908152600560209081526040808320938516835292905220805492945090925062ffffff851691869081106115c057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546301000000900462ffffff1614156116725760405162461bcd60e51b815260206004820152605d60248201527f556e69737761705472616465723a757064617465506f6f6c536c69707061676560448201527f4e756d657261746f723a20536c697070616765206e756d657261746f72206d7560648201527f7374206265207570646174656420746f2061206e6577206e756d626572000000608482015260a4016105d4565b6001600160a01b03808316600090815260056020908152604080832093851683529290522054841061170c5760405162461bcd60e51b815260206004820152603e60248201527f556e69737761705472616465723a757064617465506f6f6c536c69707061676560448201527f4e756d657261746f723a20506f6f6c20646f6573206e6f74206578697374000060648201526084016105d4565b6001600160a01b03808316600090815260056020908152604080832093851683529290522080548491908690811061175457634e487b7160e01b600052603260045260246000fd5b600091825260209182902001805465ffffff0000001916630100000062ffffff9485160217905560408051878152928616918301919091526001600160a01b0383811692908516917f687cb316011045b0b6aa372665979f03ae3d37b62e4cdc380472dc8582417bda910160405180910390a3505050505050565b60008060006117de8686612242565b6001600160a01b0380831660009081526005602090815260408083209385168352929052208054929450909250908590811061182a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546301000000900462ffffff16925050505b9392505050565b60008061185b8484611eaf565b6001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cb9190613f34565b50506001600160a01b03909416955050505050505b92915050565b3360009081526001602052604081205460ff166119155760405162461bcd60e51b81526004016105d4906141ab565b6001600160a01b03808616600090815260076020908152604080832093881683529290522054859060ff1615611ae25760006119518787611f50565b905060006040518060a001604052808360800151846020015185604001518660600151876000015160405160200161198d959493929190614078565b60408051601f198184030181529181529082526001600160a01b03808a1660208401524283830152606083018990526000608090930192909252600480549151631e51809360e31b815293945091169163f28c0498916119ef918591016141ff565b602060405180830381600087803b158015611a0957600080fd5b505af1925050508015611a39575060408051601f3d908101601f19168201909252611a3691810190613fe3565b60015b611ad4576040516370a0823160e01b815230600482015260009450611acf9087906001600160a01b038616906370a082319060240160206040518083038186803b158015611a8657600080fd5b505afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abe9190613fe3565b6001600160a01b03861691906136ae565b611ada565b50600193505b505050611ea7565b600080611aef8888612242565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081208054939550919350918290611b3b57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015462ffffff1611611bbf5760405162461bcd60e51b815260206004820152603760248201527f556e69737761705472616465723a3a7377617045786163744f75747075743a2060448201527f506f6f6c20686173206e6f74206265656e20616464656400000000000000000060648201526084016105d4565b6000611bcc89898861340f565b6040516370a0823160e01b815230600482015290915081906001600160a01b038616906370a082319060240160206040518083038186803b158015611c1057600080fd5b505afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c489190613fe3565b1015611cc65760405162461bcd60e51b815260206004820152604160248201527f556e69737761705472616465723a3a7377617045786163744f75747075743a2060448201527f42616c616e6365206973206c657373207468616e20747261646520616d6f756e6064820152601d60fa1b608482015260a4016105d4565b60408051610100810182526000818301819052606082018190526080820181905260a0820181905260c0820181905260e082018190526001600160a01b038c811683528b8116602080850191909152878216835260058152848320918716835252918220805491929091611d4a57634e487b7160e01b600052603260045260246000fd5b600091825260208220015462ffffff166040808401919091526001600160a01b03808b16606085015242608085015260a084018a905260c0840185905260e0840192909252600480549151631b67c43360e31b8152919092169163db3e219891611db691859101614212565b602060405180830381600087803b158015611dd057600080fd5b505af1925050508015611e00575060408051601f3d908101601f19168201909252611dfd91810190613fe3565b60015b611e9b576040516370a0823160e01b815230600482015260009650611e969089906001600160a01b038816906370a082319060240160206040518083038186803b158015611e4d57600080fd5b505afa158015611e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e859190613fe3565b6001600160a01b03881691906136ae565b611ea1565b50600195505b50505050505b949350505050565b600080611ebe84846000611281565b600354604051630b4c774160e11b81526001600160a01b038781166004830152868116602483015262ffffff84166044830152929350911690631698ee829060640160206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190613c43565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b0386811683526007825284832090861683529052919091205460ff16611ffa5760405162461bcd60e51b815260206004820152602760248201527f546865726520697320616e206578697374696e6720506f6f6c20666f7220746860448201526634b9903830b4b960c91b60648201526084016105d4565b506001600160a01b039182166000908152600660209081526040808320938516835292815290829020825160a081018452815485168152600182015492810192909252600281015484169282019290925260038201546060820152600490910154909116608082015290565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161209b91906004016140d4565b60206040518083038186803b1580156120b357600080fd5b505afa1580156120c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120eb9190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561212c57600080fd5b505afa158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121649190613f1a565b6121805760405162461bcd60e51b81526004016105d49061415d565b6040805160a0810182526001600160a01b0396871680825260208083019687529488168284019081526060830194855296881660808301818152600083815260068852858120838252885285812094518554908c166001600160a01b031991821617865598516001808701919091559951600286018054918d16918b169190911790559551600385015551600490930180549390991692909616919091179096559481526007825284812092815291905291909120805460ff19169091179055565b600080826001600160a01b0316846001600160a01b0316101561226957508290508161226f565b50819050825b9250929050565b6001600160a01b03808416600090815260076020908152604080832093861683529290529081205460ff16156122e75760006122b28585611f50565b905060006122c98260800151836040015186612276565b90506122de8260400151836000015183612276565b92505050611847565b60006122f585856000611281565b90506000612303868661184e565b9050846001600160a01b0316866001600160a01b0316101561236a57620f424061232d83826142fa565b62ffffff1661234f6123448785600160601b6136de565b84600160601b6136de565b61235991906142db565b61236391906142bb565b92506123b1565b620f424061237883826142fa565b62ffffff1661239a61238f87600160601b866136de565b600160601b856136de565b6123a491906142db565b6123ae91906142bb565b92505b50509392505050565b60008060006123c98585612242565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205495945050505050565b6001600160a01b03808416600090815260076020908152604080832093861683529290529081205460ff16156124625760006124368585611f50565b9050600061244d82604001518360000151866123fa565b90506122de82608001518360400151836123fa565b600061247085856000611281565b9050600061247e868661184e565b9050846001600160a01b0316866001600160a01b031610156124bf57620f42406124a883826142fa565b62ffffff1661234f61238f87600160601b866136de565b620f42406124cd83826142fa565b62ffffff1661239a6123448785600160601b6136de565b600854600090819083106125595760405162461bcd60e51b815260206004820152603660248201527f556e69737761705472616465723a3a676574546f6b656e506169723a20546f6b604482015275195b881c185a5c88191bd95cc81b9bdd08195e1a5cdd60521b60648201526084016105d4565b6008838154811061257a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060029091020154600880546001600160a01b0390921691859081106125b957634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015490946001600160a01b039091169350915050565b600054610100900460ff16806125fa575060005460ff16155b6126165760405162461bcd60e51b81526004016105d49061410f565b600054610100900460ff16158015612638576000805461ffff19166101011790555b60005b83518110156126ad57600180600086848151811061266957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806126a581614365565b91505061263b565b5082516126c1906002906020860190613ac3565b506126cb82613858565b80156126dd576000805461ff00191690555b505050565b3360009081526001602052604081205460ff166127115760405162461bcd60e51b81526004016105d4906141ab565b6001600160a01b03808616600090815260076020908152604080832093881683529290522054859060ff16156127eb57600061274d8787611f50565b905060006040518060a0016040528083608001518460200151856040015186606001518760000151604051602001612789959493929190614078565b60408051601f198184030181529181529082526001600160a01b03808a166020840152428383015260608301899052600060809093019290925260048054915163c04b8d5960e01b815293945091169163c04b8d59916119ef918591016141ff565b6000806127f88888612242565b6001600160a01b03808316600090815260056020908152604080832093851683529290522054919350915061288e5760405162461bcd60e51b815260206004820152603660248201527f556e69737761705472616465723a3a737761704578616374496e7075743a20506044820152751bdbdb081a185cc81b9bdd081899595b88185919195960521b60648201526084016105d4565b6040516370a0823160e01b815230600482015285906001600160a01b038516906370a082319060240160206040518083038186803b1580156128cf57600080fd5b505afa1580156128e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129079190613fe3565b101561297d576040805162461bcd60e51b81526020600482015260248101919091527f556e69737761705472616465723a3a737761704578616374496e7075743a204260448201527f616c616e6365206973206c657373207468616e20747261646520616d6f756e7460648201526084016105d4565b600061298a89898861344c565b60408051610100810182526000818301819052606082018190526080820181905260a0820181905260c0820181905260e082018190526001600160a01b038d811683528c811660208085019190915288821683526005815284832091881683525291822080549394509092909190612a1257634e487b7160e01b600052603260045260246000fd5b600091825260208220015462ffffff166040808401919091526001600160a01b03808b16606085015242608085015260a084018a905260c0840185905260e084019290925260048054915163414bf38960e01b8152919092169163414bf38991611db691859101614212565b600080600080866001600160a01b0316886001600160a01b03161015612aae575086925085915084905083612aba565b50859250869150839050845b945094509450949050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91612afa91906004016140d4565b60206040518083038186803b158015612b1257600080fd5b505afa158015612b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4a9190613c43565b6040516317aa5fb760e11b81523360048201526001600160a01b039190911690632f54bf6e9060240160206040518083038186803b158015612b8b57600080fd5b505afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc39190613f1a565b612c225760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016105d4565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015612caa5760028181548110612c7457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415612c9857600191505b80612ca281614365565b915050612c49565b5080612cfc57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91612d3591906004016140d4565b60206040518083038186803b158015612d4d57600080fd5b505afa158015612d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d859190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015612dc657600080fd5b505afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe9190613f1a565b612e1a5760405162461bcd60e51b81526004016105d49061415d565b80612ea75760405162461bcd60e51b815260206004820152605160248201527f556e69737761705472616465723a3a757064617465506169725072696d61727960448201527f506f6f6c3a2053706563696669656420696e64657820697320616c7265616479606482015270081d1a19481c1c9a5b585c9e481c1bdbdb607a1b608482015260a4016105d4565b600080612eb48585612242565b6001600160a01b0380831660009081526005602090815260408083209385168352929052205491935091508310612f655760405162461bcd60e51b815260206004820152604960248201527f556e69737761705472616465723a3a757064617465506169725072696d61727960448201527f506f6f6c3a2053706563696669656420706f6f6c20696e64657820646f6573206064820152681b9bdd08195e1a5cdd60ba1b608482015260a4016105d4565b6001600160a01b0380831660009081526005602090815260408083209385168352929052908120805485908110612fac57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03808716845260058352604080852091871685529252908220805462ffffff9092169350908690811061300457634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b038781168452600583526040808520918816855292529082208054630100000090920462ffffff169350919061306057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b038088168452600583526040808520918816855292529120805462ffffff90921691879081106130b557634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805462ffffff191662ffffff94909416939093179092556001600160a01b03868116825260058352604080832091871683529252908120805490919061311957634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b0387811684526005835260408085209188168552925291208054630100000090920462ffffff16918790811061317557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101805462ffffff9490941663010000000265ffffff00000019909416939093179092556001600160a01b0380871682526005835260408083209187168352925290812080548492906131e357634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805462ffffff191662ffffff94909416939093179092556001600160a01b03868116825260058352604080832091871683529252908120805483929061324757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160036101000a81548162ffffff021916908362ffffff160217905550826001600160a01b0316846001600160a01b03167fa5059aac7a947fedcf9741dd4daa56b660656aa44187109ca1aeb2d46f9aa3b6876040516132b591815260200190565b60405180910390a350505050505050565b6001600160a01b038084166000908152600560209081526040808320938616835292905290812054819083106133515760405162461bcd60e51b815260206004820152602a60248201527f556e69737761705472616465723a676574506f6f6c3a20506f6f6c20646f6573604482015269081b9bdd08195e1a5cdd60b21b60648201526084016105d4565b6001600160a01b03808616600090815260056020908152604080832093881683529290522080548490811061339657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b038089168452600583526040808520918916855292529120805462ffffff90921691859081106133eb57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001549096630100000090910462ffffff1695509350505050565b60008061341d8585856123fa565b9050600061342d868660006117cf565b9050620f424061343d828261427c565b6123a49062ffffff16846142db565b60008061345a858585612276565b9050600061346a868660006117cf565b9050620f424061343d82826142fa565b600054610100900460ff1680613493575060005460ff16155b6134af5760405162461bcd60e51b81526004016105d49061410f565b600054610100900460ff161580156134d1576000805461ffff19166101011790555b6134db85856125e1565b6134e484613858565b600380546001600160a01b038086166001600160a01b03199283161790925560048054928516929091169190911790558015613526576000805461ff00191690555b5050505050565b6002818154811061353d57600080fd5b6000918252602090912001546001600160a01b0316905081565b8015806135e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156135a657600080fd5b505afa1580156135ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de9190613fe3565b155b61364b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105d4565b6040516001600160a01b0383166024820152604481018290526126dd90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526138e6565b6040516001600160a01b0383166024820152604481018290526126dd90849063a9059cbb60e01b90606401613677565b600080806000198587098587029250828110838203039150508060001415613718576000841161370d57600080fd5b508290049050611847565b80841161372457600080fd5b6000848688098084039381119092039190506000613744861960016142a3565b861695869004959384900493600081900304600101905061376581846142db565b9093179260006137768760036142db565b600218905061378581886142db565b61379090600261431e565b61379a90826142db565b90506137a681886142db565b6137b190600261431e565b6137bb90826142db565b90506137c781886142db565b6137d290600261431e565b6137dc90826142db565b90506137e881886142db565b6137f390600261431e565b6137fd90826142db565b905061380981886142db565b61381490600261431e565b61381e90826142db565b905061382a81886142db565b61383590600261431e565b61383f90826142db565b905061384b81866142db565b9998505050505050505050565b600054610100900460ff1680613871575060005460ff16155b61388d5760405162461bcd60e51b81526004016105d49061410f565b600054610100900460ff161580156138af576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015612cfc576000805461ff00191690555050565b600061393b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b89092919063ffffffff16565b8051909150156126dd57808060200190518101906139599190613f1a565b6126dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d4565b6060611ea7848460008585843b613a115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d4565b600080866001600160a01b03168587604051613a2d91906140b8565b60006040518083038185875af1925050503d8060008114613a6a576040519150601f19603f3d011682016040523d82523d6000602084013e613a6f565b606091505b5091509150613a7f828286613a8a565b979650505050505050565b60608315613a99575081611847565b825115613aa95782518084602001fd5b8160405162461bcd60e51b81526004016105d491906140fc565b828054828255906000526020600020908101928215613b18579160200282015b82811115613b1857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613ae3565b50613b24929150613b28565b5090565b5b80821115613b245760008155600101613b29565b8035613b48816143ac565b919050565b600082601f830112613b5d578081fd5b8135602067ffffffffffffffff80831115613b7a57613b7a614396565b8260051b604051601f19603f83011681018181108482111715613b9f57613b9f614396565b60405284815283810192508684018288018501891015613bbd578687fd5b8692505b85831015613be657613bd281613b3d565b845292840192600192909201918401613bc1565b50979650505050505050565b80518015158114613b4857600080fd5b805161ffff81168114613b4857600080fd5b803562ffffff81168114613b4857600080fd5b600060208284031215613c38578081fd5b8135611847816143ac565b600060208284031215613c54578081fd5b8151611847816143ac565b60008060408385031215613c71578081fd5b8235613c7c816143ac565b91506020830135613c8c816143ac565b809150509250929050565b60008060008060808587031215613cac578182fd5b8435613cb7816143ac565b93506020850135613cc7816143ac565b92506040850135613cd7816143ac565b9396929550929360600135925050565b60008060008060808587031215613cfc578384fd5b8435613d07816143ac565b93506020850135613d17816143ac565b9250613d2560408601613c14565b9150613d3360608601613c14565b905092959194509250565b600080600060608486031215613d52578283fd5b8335613d5d816143ac565b92506020840135613d6d816143ac565b929592945050506040919091013590565b600080600080600060a08688031215613d95578081fd5b8535613da0816143ac565b94506020860135613db0816143ac565b9350604086013592506060860135613dc7816143ac565b949793965091946080013592915050565b60008060008060808587031215613ded578384fd5b8435613df8816143ac565b93506020850135613e08816143ac565b925060408501359150613d3360608601613c14565b60008060008060808587031215613e32578384fd5b8435613e3d816143ac565b93506020850135613e4d816143ac565b93969395505050506040820135916060013590565b60008060408385031215613e74578182fd5b823567ffffffffffffffff811115613e8a578283fd5b613e9685828601613b4d565b9250506020830135613c8c816143ac565b60008060008060808587031215613ebc578182fd5b843567ffffffffffffffff811115613ed2578283fd5b613ede87828801613b4d565b9450506020850135613eef816143ac565b92506040850135613eff816143ac565b91506060850135613f0f816143ac565b939692955090935050565b600060208284031215613f2b578081fd5b61184782613bf2565b600080600080600080600060e0888a031215613f4e578485fd5b8751613f59816143ac565b8097505060208801518060020b8114613f70578586fd5b9550613f7e60408901613c02565b9450613f8c60608901613c02565b9350613f9a60808901613c02565b925060a088015160ff81168114613faf578283fd5b9150613fbd60c08901613bf2565b905092959891949750929550565b600060208284031215613fdc578081fd5b5035919050565b600060208284031215613ff4578081fd5b5051919050565b60008151808452614013816020860160208601614335565b601f01601f19169290920160200192915050565b6000815160a0845261403c60a0850182613ffb565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b6bffffffffffffffffffffffff19606096871b81168252601482019590955292851b84166034840152604883019190915290921b166068820152607c0190565b600082516140ca818460208701614335565b9190910192915050565b60208101600a83106140f657634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006118476020830184613ffb565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020815260006118476020830184614027565b61010081016118e0828480516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e09182015116910152565b600062ffffff80831681851680830382111561429a5761429a614380565b01949350505050565b600082198211156142b6576142b6614380565b500190565b6000826142d657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156142f5576142f5614380565b500290565b600062ffffff8381169083168181101561431657614316614380565b039392505050565b60008282101561433057614330614380565b500390565b60005b83811015614350578181015183820152602001614338565b8381111561435f576000848401525b50505050565b600060001982141561437957614379614380565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146143c157600080fd5b5056fea264697066735822122038e80860c05fb575e365d08667bdd25dd3ea59747f4ae59494fd8d25e50400dc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80637757f6d2116100f9578063acf6cc1a11610097578063ccbfc16c11610071578063ccbfc16c14610481578063d46005b114610494578063e94b0dd2146104a7578063f4e1fc411461047857600080fd5b8063acf6cc1a14610436578063b9b6d1b014610465578063bbb370171461047857600080fd5b80639c922100116100d35780639c922100146103bf578063a6cda833146103d2578063a7fc7a0714610410578063ab2f06511461042357600080fd5b80637757f6d2146103865780637c21ce141461039957806398c671ce146103ac57600080fd5b806334857bb0116101665780634ac558f3116101405780634ac558f31461031a5780635245da561461032d578063527c22d314610360578063634461741461037357600080fd5b806334857bb0146102865780633fa1e0c8146102a9578063413ca0b7146102bc57600080fd5b80630f0a1c6f116101a25780630f0a1c6f1461021c578063160855ba1461024d578063305df65d14610260578063320d3e781461027357600080fd5b806304102ba1146101c9578063048417a4146101de57806306bec6e7146101f5575b600080fd5b6101dc6101d7366004613ce7565b6104ba565b005b6008545b6040519081526020015b60405180910390f35b610208610203366004613d3e565b611281565b60405162ffffff90911681526020016101ec565b600054610235906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ec565b6101dc61025b366004613dd8565b61138f565b61020861026e366004613d3e565b6117cf565b6101e2610281366004613c5f565b61184e565b610299610294366004613c97565b6118e6565b60405190151581526020016101ec565b6102356102b7366004613c5f565b611eaf565b6102cf6102ca366004613c5f565b611f50565b6040516101ec919081516001600160a01b0390811682526020808401519083015260408084015182169083015260608084015190830152608092830151169181019190915260a00190565b6101dc610328366004613d7e565b612066565b61034061033b366004613c5f565b612242565b604080516001600160a01b039384168152929091166020830152016101ec565b6101e261036e366004613d3e565b612276565b6101e2610381366004613c5f565b6123ba565b6101e2610394366004613d3e565b6123fa565b6103406103a7366004613fcb565b6124e4565b6101dc6103ba366004613e62565b6125e1565b6102996103cd366004613c97565b6126e2565b6103e56103e0366004613e1d565b612a7e565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016101ec565b6101dc61041e366004613c27565b612ac5565b6101dc610431366004613d3e565b612d00565b610449610444366004613d3e565b6132c6565b6040805162ffffff9384168152929091166020830152016101ec565b6101e2610473366004613d3e565b61340f565b620f4240610208565b6101e261048f366004613d3e565b61344c565b6101dc6104a2366004613ea7565b61347a565b6102356104b5366004613fcb565b61352d565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916104ef91906004016140d4565b60206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561058057600080fd5b505afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190613f1a565b6105dd5760405162461bcd60e51b81526004016105d49061415d565b60405180910390fd5b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610613906003906004016140d4565b60206040518083038186803b15801561062b57600080fd5b505afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190613c43565b604051637faa059760e01b81526001600160a01b0386811660048301529190911690637faa05979060240160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190613f1a565b6107615760405162461bcd60e51b815260206004820152604860248201527f556e69737761705472616465723a3a616464506f6f6c3a20546f6b656e41206860448201527f6173206e6f74206265656e20616464656420696e2074686520496e7465677261606482015267074696f6e204d61760c41b608482015260a4016105d4565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610797906003906004016140d4565b60206040518083038186803b1580156107af57600080fd5b505afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190613c43565b604051637faa059760e01b81526001600160a01b0385811660048301529190911690637faa05979060240160206040518083038186803b15801561082a57600080fd5b505afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190613f1a565b6108e55760405162461bcd60e51b815260206004820152604860248201527f556e69737761705472616465723a3a616464506f6f6c3a20546f6b656e42206860448201527f6173206e6f74206265656e20616464656420696e2074686520496e7465677261606482015267074696f6e204d61760c41b608482015260a4016105d4565b620f424062ffffff821611156109895760405162461bcd60e51b815260206004820152605760248201527f556e69737761705472616465723a3a616464506f6f6c3a20536c69707061676560448201527f206e756d657261746f722063616e6e6f7420626520677265617465722074686160648201527f6e20736c697070617067652064656e6f6d696e61746f72000000000000000000608482015260a4016105d4565b600354604051630b4c774160e11b81526001600160a01b038681166004830152858116602483015262ffffff851660448301526000921690631698ee829060640160206040518083038186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190613c43565b6001600160a01b03161415610a855760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705472616465723a3a616464506f6f6c3a20506f6f6c20646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b60648201526084016105d4565b600080610a928686612242565b915091506000805b6001600160a01b03808516600090815260056020908152604080832093871683529290522054811015610b42576001600160a01b038085166000908152600560209081526040808320938716835292905220805462ffffff8816919083908110610b1457634e487b7160e01b600052603260045260246000fd5b60009182526020909120015462ffffff161415610b3057600191505b80610b3a81614365565b915050610a9a565b508015610bad5760405162461bcd60e51b815260206004820152603360248201527f556e69737761705472616465723a3a616464506f6f6c3a20506f6f6c2068617360448201527208185b1c9958591e481899595b881859191959606a1b60648201526084016105d4565b60408051808201825262ffffff878116825286811660208084019182526001600160a01b03888116600090815260058352868120918916815290825294852080546001810182559086529085208451910180549251841663010000000265ffffffffffff19909316919093161717905590805b600854811015610cdd57856001600160a01b031660088281548110610c5557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b0316148015610cc15750846001600160a01b031660088281548110610ca257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160029092020101546001600160a01b0316145b15610ccb57600191505b80610cd581614365565b915050610c20565b5080611227576040805180820182526001600160a01b0387811680835287821660208401908152600880546001810182556000918252855160029182027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3810180549288166001600160a01b031993841617905593517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4909401805494871694909116939093179092555494516337c61fc560e11b81529394919363dd62ed3e9330936201000090041691636f8c3f8a91610dbb91906004016140d4565b60206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190613c43565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015610e5157600080fd5b505afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190613fe3565b610f29576000546040516337c61fc560e11b8152610f29916201000090046001600160a01b031690636f8c3f8a90610ec6906002906004016140d4565b60206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190613c43565b6001600160a01b03881690600019613557565b6000546040516337c61fc560e11b81526001600160a01b038088169263dd62ed3e9230926201000090920490911690636f8c3f8a90610f6d906002906004016140d4565b60206040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190613c43565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190613fe3565b6110db576000546040516337c61fc560e11b81526110db916201000090046001600160a01b031690636f8c3f8a90611078906002906004016140d4565b60206040518083038186803b15801561109057600080fd5b505afa1580156110a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c89190613c43565b6001600160a01b03871690600019613557565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b03908116602483015287169063dd62ed3e9060440160206040518083038186803b15801561112857600080fd5b505afa15801561113c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111609190613fe3565b61118057600454611180906001600160a01b038881169116600019613557565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b03908116602483015286169063dd62ed3e9060440160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190613fe3565b61122557600454611225906001600160a01b038781169116600019613557565b505b6040805162ffffff808a168252881660208201526001600160a01b0380871692908816917fa2ef711760cee8cd3a81db17763c9b2fc95b6b9491d0b2abccc28180269f80d9910160405180910390a3505050505050505050565b60008060006112908686612242565b6001600160a01b038083166000908152600560209081526040808320938516835292905220549193509150841061132f5760405162461bcd60e51b815260206004820152603a60248201527f556e69737761705472616465723a3a676574506f6f6c4665654e756d6572617460448201527f6f723a20506f6f6c20494420646f6573206e6f7420657869737400000000000060648201526084016105d4565b6001600160a01b03808316600090815260056020908152604080832093851683529290522080548590811061137457634e487b7160e01b600052603260045260246000fd5b60009182526020909120015462ffffff169695505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916113c491906004016140d4565b60206040518083038186803b1580156113dc57600080fd5b505afa1580156113f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561145557600080fd5b505afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190613f1a565b6114a95760405162461bcd60e51b81526004016105d49061415d565b620f424062ffffff821611156115615760405162461bcd60e51b815260206004820152606b60248201527f556e69737761705472616465723a757064617465506f6f6c536c69707061676560448201527f4e756d657261746f723a20536c697070616765206e756d657261746f72206d7560648201527f7374206e6f742062652067726561746572207468616e20736c6970706167652060848201526a3232b737b6b4b730ba37b960a91b60a482015260c4016105d4565b60008061156e8686612242565b6001600160a01b038083166000908152600560209081526040808320938516835292905220805492945090925062ffffff851691869081106115c057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546301000000900462ffffff1614156116725760405162461bcd60e51b815260206004820152605d60248201527f556e69737761705472616465723a757064617465506f6f6c536c69707061676560448201527f4e756d657261746f723a20536c697070616765206e756d657261746f72206d7560648201527f7374206265207570646174656420746f2061206e6577206e756d626572000000608482015260a4016105d4565b6001600160a01b03808316600090815260056020908152604080832093851683529290522054841061170c5760405162461bcd60e51b815260206004820152603e60248201527f556e69737761705472616465723a757064617465506f6f6c536c69707061676560448201527f4e756d657261746f723a20506f6f6c20646f6573206e6f74206578697374000060648201526084016105d4565b6001600160a01b03808316600090815260056020908152604080832093851683529290522080548491908690811061175457634e487b7160e01b600052603260045260246000fd5b600091825260209182902001805465ffffff0000001916630100000062ffffff9485160217905560408051878152928616918301919091526001600160a01b0383811692908516917f687cb316011045b0b6aa372665979f03ae3d37b62e4cdc380472dc8582417bda910160405180910390a3505050505050565b60008060006117de8686612242565b6001600160a01b0380831660009081526005602090815260408083209385168352929052208054929450909250908590811061182a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546301000000900462ffffff16925050505b9392505050565b60008061185b8484611eaf565b6001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cb9190613f34565b50506001600160a01b03909416955050505050505b92915050565b3360009081526001602052604081205460ff166119155760405162461bcd60e51b81526004016105d4906141ab565b6001600160a01b03808616600090815260076020908152604080832093881683529290522054859060ff1615611ae25760006119518787611f50565b905060006040518060a001604052808360800151846020015185604001518660600151876000015160405160200161198d959493929190614078565b60408051601f198184030181529181529082526001600160a01b03808a1660208401524283830152606083018990526000608090930192909252600480549151631e51809360e31b815293945091169163f28c0498916119ef918591016141ff565b602060405180830381600087803b158015611a0957600080fd5b505af1925050508015611a39575060408051601f3d908101601f19168201909252611a3691810190613fe3565b60015b611ad4576040516370a0823160e01b815230600482015260009450611acf9087906001600160a01b038616906370a082319060240160206040518083038186803b158015611a8657600080fd5b505afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abe9190613fe3565b6001600160a01b03861691906136ae565b611ada565b50600193505b505050611ea7565b600080611aef8888612242565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081208054939550919350918290611b3b57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015462ffffff1611611bbf5760405162461bcd60e51b815260206004820152603760248201527f556e69737761705472616465723a3a7377617045786163744f75747075743a2060448201527f506f6f6c20686173206e6f74206265656e20616464656400000000000000000060648201526084016105d4565b6000611bcc89898861340f565b6040516370a0823160e01b815230600482015290915081906001600160a01b038616906370a082319060240160206040518083038186803b158015611c1057600080fd5b505afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c489190613fe3565b1015611cc65760405162461bcd60e51b815260206004820152604160248201527f556e69737761705472616465723a3a7377617045786163744f75747075743a2060448201527f42616c616e6365206973206c657373207468616e20747261646520616d6f756e6064820152601d60fa1b608482015260a4016105d4565b60408051610100810182526000818301819052606082018190526080820181905260a0820181905260c0820181905260e082018190526001600160a01b038c811683528b8116602080850191909152878216835260058152848320918716835252918220805491929091611d4a57634e487b7160e01b600052603260045260246000fd5b600091825260208220015462ffffff166040808401919091526001600160a01b03808b16606085015242608085015260a084018a905260c0840185905260e0840192909252600480549151631b67c43360e31b8152919092169163db3e219891611db691859101614212565b602060405180830381600087803b158015611dd057600080fd5b505af1925050508015611e00575060408051601f3d908101601f19168201909252611dfd91810190613fe3565b60015b611e9b576040516370a0823160e01b815230600482015260009650611e969089906001600160a01b038816906370a082319060240160206040518083038186803b158015611e4d57600080fd5b505afa158015611e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e859190613fe3565b6001600160a01b03881691906136ae565b611ea1565b50600195505b50505050505b949350505050565b600080611ebe84846000611281565b600354604051630b4c774160e11b81526001600160a01b038781166004830152868116602483015262ffffff84166044830152929350911690631698ee829060640160206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190613c43565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b0386811683526007825284832090861683529052919091205460ff16611ffa5760405162461bcd60e51b815260206004820152602760248201527f546865726520697320616e206578697374696e6720506f6f6c20666f7220746860448201526634b9903830b4b960c91b60648201526084016105d4565b506001600160a01b039182166000908152600660209081526040808320938516835292815290829020825160a081018452815485168152600182015492810192909252600281015484169282019290925260038201546060820152600490910154909116608082015290565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161209b91906004016140d4565b60206040518083038186803b1580156120b357600080fd5b505afa1580156120c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120eb9190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561212c57600080fd5b505afa158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121649190613f1a565b6121805760405162461bcd60e51b81526004016105d49061415d565b6040805160a0810182526001600160a01b0396871680825260208083019687529488168284019081526060830194855296881660808301818152600083815260068852858120838252885285812094518554908c166001600160a01b031991821617865598516001808701919091559951600286018054918d16918b169190911790559551600385015551600490930180549390991692909616919091179096559481526007825284812092815291905291909120805460ff19169091179055565b600080826001600160a01b0316846001600160a01b0316101561226957508290508161226f565b50819050825b9250929050565b6001600160a01b03808416600090815260076020908152604080832093861683529290529081205460ff16156122e75760006122b28585611f50565b905060006122c98260800151836040015186612276565b90506122de8260400151836000015183612276565b92505050611847565b60006122f585856000611281565b90506000612303868661184e565b9050846001600160a01b0316866001600160a01b0316101561236a57620f424061232d83826142fa565b62ffffff1661234f6123448785600160601b6136de565b84600160601b6136de565b61235991906142db565b61236391906142bb565b92506123b1565b620f424061237883826142fa565b62ffffff1661239a61238f87600160601b866136de565b600160601b856136de565b6123a491906142db565b6123ae91906142bb565b92505b50509392505050565b60008060006123c98585612242565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205495945050505050565b6001600160a01b03808416600090815260076020908152604080832093861683529290529081205460ff16156124625760006124368585611f50565b9050600061244d82604001518360000151866123fa565b90506122de82608001518360400151836123fa565b600061247085856000611281565b9050600061247e868661184e565b9050846001600160a01b0316866001600160a01b031610156124bf57620f42406124a883826142fa565b62ffffff1661234f61238f87600160601b866136de565b620f42406124cd83826142fa565b62ffffff1661239a6123448785600160601b6136de565b600854600090819083106125595760405162461bcd60e51b815260206004820152603660248201527f556e69737761705472616465723a3a676574546f6b656e506169723a20546f6b604482015275195b881c185a5c88191bd95cc81b9bdd08195e1a5cdd60521b60648201526084016105d4565b6008838154811061257a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060029091020154600880546001600160a01b0390921691859081106125b957634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015490946001600160a01b039091169350915050565b600054610100900460ff16806125fa575060005460ff16155b6126165760405162461bcd60e51b81526004016105d49061410f565b600054610100900460ff16158015612638576000805461ffff19166101011790555b60005b83518110156126ad57600180600086848151811061266957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806126a581614365565b91505061263b565b5082516126c1906002906020860190613ac3565b506126cb82613858565b80156126dd576000805461ff00191690555b505050565b3360009081526001602052604081205460ff166127115760405162461bcd60e51b81526004016105d4906141ab565b6001600160a01b03808616600090815260076020908152604080832093881683529290522054859060ff16156127eb57600061274d8787611f50565b905060006040518060a0016040528083608001518460200151856040015186606001518760000151604051602001612789959493929190614078565b60408051601f198184030181529181529082526001600160a01b03808a166020840152428383015260608301899052600060809093019290925260048054915163c04b8d5960e01b815293945091169163c04b8d59916119ef918591016141ff565b6000806127f88888612242565b6001600160a01b03808316600090815260056020908152604080832093851683529290522054919350915061288e5760405162461bcd60e51b815260206004820152603660248201527f556e69737761705472616465723a3a737761704578616374496e7075743a20506044820152751bdbdb081a185cc81b9bdd081899595b88185919195960521b60648201526084016105d4565b6040516370a0823160e01b815230600482015285906001600160a01b038516906370a082319060240160206040518083038186803b1580156128cf57600080fd5b505afa1580156128e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129079190613fe3565b101561297d576040805162461bcd60e51b81526020600482015260248101919091527f556e69737761705472616465723a3a737761704578616374496e7075743a204260448201527f616c616e6365206973206c657373207468616e20747261646520616d6f756e7460648201526084016105d4565b600061298a89898861344c565b60408051610100810182526000818301819052606082018190526080820181905260a0820181905260c0820181905260e082018190526001600160a01b038d811683528c811660208085019190915288821683526005815284832091881683525291822080549394509092909190612a1257634e487b7160e01b600052603260045260246000fd5b600091825260208220015462ffffff166040808401919091526001600160a01b03808b16606085015242608085015260a084018a905260c0840185905260e084019290925260048054915163414bf38960e01b8152919092169163414bf38991611db691859101614212565b600080600080866001600160a01b0316886001600160a01b03161015612aae575086925085915084905083612aba565b50859250869150839050845b945094509450949050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91612afa91906004016140d4565b60206040518083038186803b158015612b1257600080fd5b505afa158015612b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4a9190613c43565b6040516317aa5fb760e11b81523360048201526001600160a01b039190911690632f54bf6e9060240160206040518083038186803b158015612b8b57600080fd5b505afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc39190613f1a565b612c225760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016105d4565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015612caa5760028181548110612c7457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415612c9857600191505b80612ca281614365565b915050612c49565b5080612cfc57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91612d3591906004016140d4565b60206040518083038186803b158015612d4d57600080fd5b505afa158015612d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d859190613c43565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015612dc657600080fd5b505afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe9190613f1a565b612e1a5760405162461bcd60e51b81526004016105d49061415d565b80612ea75760405162461bcd60e51b815260206004820152605160248201527f556e69737761705472616465723a3a757064617465506169725072696d61727960448201527f506f6f6c3a2053706563696669656420696e64657820697320616c7265616479606482015270081d1a19481c1c9a5b585c9e481c1bdbdb607a1b608482015260a4016105d4565b600080612eb48585612242565b6001600160a01b0380831660009081526005602090815260408083209385168352929052205491935091508310612f655760405162461bcd60e51b815260206004820152604960248201527f556e69737761705472616465723a3a757064617465506169725072696d61727960448201527f506f6f6c3a2053706563696669656420706f6f6c20696e64657820646f6573206064820152681b9bdd08195e1a5cdd60ba1b608482015260a4016105d4565b6001600160a01b0380831660009081526005602090815260408083209385168352929052908120805485908110612fac57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03808716845260058352604080852091871685529252908220805462ffffff9092169350908690811061300457634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b038781168452600583526040808520918816855292529082208054630100000090920462ffffff169350919061306057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b038088168452600583526040808520918816855292529120805462ffffff90921691879081106130b557634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805462ffffff191662ffffff94909416939093179092556001600160a01b03868116825260058352604080832091871683529252908120805490919061311957634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b0387811684526005835260408085209188168552925291208054630100000090920462ffffff16918790811061317557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101805462ffffff9490941663010000000265ffffff00000019909416939093179092556001600160a01b0380871682526005835260408083209187168352925290812080548492906131e357634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805462ffffff191662ffffff94909416939093179092556001600160a01b03868116825260058352604080832091871683529252908120805483929061324757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160036101000a81548162ffffff021916908362ffffff160217905550826001600160a01b0316846001600160a01b03167fa5059aac7a947fedcf9741dd4daa56b660656aa44187109ca1aeb2d46f9aa3b6876040516132b591815260200190565b60405180910390a350505050505050565b6001600160a01b038084166000908152600560209081526040808320938616835292905290812054819083106133515760405162461bcd60e51b815260206004820152602a60248201527f556e69737761705472616465723a676574506f6f6c3a20506f6f6c20646f6573604482015269081b9bdd08195e1a5cdd60b21b60648201526084016105d4565b6001600160a01b03808616600090815260056020908152604080832093881683529290522080548490811061339657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b038089168452600583526040808520918916855292529120805462ffffff90921691859081106133eb57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001549096630100000090910462ffffff1695509350505050565b60008061341d8585856123fa565b9050600061342d868660006117cf565b9050620f424061343d828261427c565b6123a49062ffffff16846142db565b60008061345a858585612276565b9050600061346a868660006117cf565b9050620f424061343d82826142fa565b600054610100900460ff1680613493575060005460ff16155b6134af5760405162461bcd60e51b81526004016105d49061410f565b600054610100900460ff161580156134d1576000805461ffff19166101011790555b6134db85856125e1565b6134e484613858565b600380546001600160a01b038086166001600160a01b03199283161790925560048054928516929091169190911790558015613526576000805461ff00191690555b5050505050565b6002818154811061353d57600080fd5b6000918252602090912001546001600160a01b0316905081565b8015806135e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156135a657600080fd5b505afa1580156135ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de9190613fe3565b155b61364b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105d4565b6040516001600160a01b0383166024820152604481018290526126dd90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526138e6565b6040516001600160a01b0383166024820152604481018290526126dd90849063a9059cbb60e01b90606401613677565b600080806000198587098587029250828110838203039150508060001415613718576000841161370d57600080fd5b508290049050611847565b80841161372457600080fd5b6000848688098084039381119092039190506000613744861960016142a3565b861695869004959384900493600081900304600101905061376581846142db565b9093179260006137768760036142db565b600218905061378581886142db565b61379090600261431e565b61379a90826142db565b90506137a681886142db565b6137b190600261431e565b6137bb90826142db565b90506137c781886142db565b6137d290600261431e565b6137dc90826142db565b90506137e881886142db565b6137f390600261431e565b6137fd90826142db565b905061380981886142db565b61381490600261431e565b61381e90826142db565b905061382a81886142db565b61383590600261431e565b61383f90826142db565b905061384b81866142db565b9998505050505050505050565b600054610100900460ff1680613871575060005460ff16155b61388d5760405162461bcd60e51b81526004016105d49061410f565b600054610100900460ff161580156138af576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015612cfc576000805461ff00191690555050565b600061393b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b89092919063ffffffff16565b8051909150156126dd57808060200190518101906139599190613f1a565b6126dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d4565b6060611ea7848460008585843b613a115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d4565b600080866001600160a01b03168587604051613a2d91906140b8565b60006040518083038185875af1925050503d8060008114613a6a576040519150601f19603f3d011682016040523d82523d6000602084013e613a6f565b606091505b5091509150613a7f828286613a8a565b979650505050505050565b60608315613a99575081611847565b825115613aa95782518084602001fd5b8160405162461bcd60e51b81526004016105d491906140fc565b828054828255906000526020600020908101928215613b18579160200282015b82811115613b1857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613ae3565b50613b24929150613b28565b5090565b5b80821115613b245760008155600101613b29565b8035613b48816143ac565b919050565b600082601f830112613b5d578081fd5b8135602067ffffffffffffffff80831115613b7a57613b7a614396565b8260051b604051601f19603f83011681018181108482111715613b9f57613b9f614396565b60405284815283810192508684018288018501891015613bbd578687fd5b8692505b85831015613be657613bd281613b3d565b845292840192600192909201918401613bc1565b50979650505050505050565b80518015158114613b4857600080fd5b805161ffff81168114613b4857600080fd5b803562ffffff81168114613b4857600080fd5b600060208284031215613c38578081fd5b8135611847816143ac565b600060208284031215613c54578081fd5b8151611847816143ac565b60008060408385031215613c71578081fd5b8235613c7c816143ac565b91506020830135613c8c816143ac565b809150509250929050565b60008060008060808587031215613cac578182fd5b8435613cb7816143ac565b93506020850135613cc7816143ac565b92506040850135613cd7816143ac565b9396929550929360600135925050565b60008060008060808587031215613cfc578384fd5b8435613d07816143ac565b93506020850135613d17816143ac565b9250613d2560408601613c14565b9150613d3360608601613c14565b905092959194509250565b600080600060608486031215613d52578283fd5b8335613d5d816143ac565b92506020840135613d6d816143ac565b929592945050506040919091013590565b600080600080600060a08688031215613d95578081fd5b8535613da0816143ac565b94506020860135613db0816143ac565b9350604086013592506060860135613dc7816143ac565b949793965091946080013592915050565b60008060008060808587031215613ded578384fd5b8435613df8816143ac565b93506020850135613e08816143ac565b925060408501359150613d3360608601613c14565b60008060008060808587031215613e32578384fd5b8435613e3d816143ac565b93506020850135613e4d816143ac565b93969395505050506040820135916060013590565b60008060408385031215613e74578182fd5b823567ffffffffffffffff811115613e8a578283fd5b613e9685828601613b4d565b9250506020830135613c8c816143ac565b60008060008060808587031215613ebc578182fd5b843567ffffffffffffffff811115613ed2578283fd5b613ede87828801613b4d565b9450506020850135613eef816143ac565b92506040850135613eff816143ac565b91506060850135613f0f816143ac565b939692955090935050565b600060208284031215613f2b578081fd5b61184782613bf2565b600080600080600080600060e0888a031215613f4e578485fd5b8751613f59816143ac565b8097505060208801518060020b8114613f70578586fd5b9550613f7e60408901613c02565b9450613f8c60608901613c02565b9350613f9a60808901613c02565b925060a088015160ff81168114613faf578283fd5b9150613fbd60c08901613bf2565b905092959891949750929550565b600060208284031215613fdc578081fd5b5035919050565b600060208284031215613ff4578081fd5b5051919050565b60008151808452614013816020860160208601614335565b601f01601f19169290920160200192915050565b6000815160a0845261403c60a0850182613ffb565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b6bffffffffffffffffffffffff19606096871b81168252601482019590955292851b84166034840152604883019190915290921b166068820152607c0190565b600082516140ca818460208701614335565b9190910192915050565b60208101600a83106140f657634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006118476020830184613ffb565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020815260006118476020830184614027565b61010081016118e0828480516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e09182015116910152565b600062ffffff80831681851680830382111561429a5761429a614380565b01949350505050565b600082198211156142b6576142b6614380565b500190565b6000826142d657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156142f5576142f5614380565b500290565b600062ffffff8381169083168181101561431657614316614380565b039392505050565b60008282101561433057614330614380565b500390565b60005b83811015614350578181015183820152602001614338565b8381111561435f576000848401525b50505050565b600060001982141561437957614379614380565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146143c157600080fd5b5056fea264697066735822122038e80860c05fb575e365d08667bdd25dd3ea59747f4ae59494fd8d25e50400dc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address,address,uint24,uint24)": {
        "params": {
          "feeNumerator": "The Uniswap pool fee numerator",
          "slippageNumerator": "The value divided by the slippage denominator to calculate the allowable slippage positions is enabled for this pool",
          "tokenA": "The address of tokenA ERC20 contract",
          "tokenB": "The address of tokenB ERC20 contract"
        }
      },
      "getAmountInMaximum(address,address,uint256)": {
        "params": {
          "amountOut": "The exact amount of token being swapped for",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountInMaximum": "The maximum amount of tokenIn to spend, factoring in allowable slippage"
        }
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOutMinimum": "The minimum amount of tokenOut to receive, factoring in allowable slippage"
        }
      },
      "getEstimatedTokenIn(address,address,uint256)": {
        "params": {
          "amountOut": "The exact amount of the output token to swap for",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountIn": "The estimated amount of tokenIn to spend"
        }
      },
      "getEstimatedTokenOut(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOut": "The estimated amount of tokenOut to receive"
        }
      },
      "getFeeDenominator()": {
        "returns": {
          "_0": "The denominator used to calculate the pool fee percentage"
        }
      },
      "getPool(address,address,uint256)": {
        "params": {
          "poolIndex": "The index of the pool",
          "token0": "The address of token0 of the pool",
          "token1": "The address of token1 of the pool"
        },
        "returns": {
          "_0": "The pool fee numerator",
          "_1": "The pool slippage numerator"
        }
      },
      "getPoolAddress(address,address)": {
        "params": {
          "tokenA": "The address of tokenA ERC20 contract",
          "tokenB": "The address of tokenB ERC20 contract"
        },
        "returns": {
          "pool": "The pool address"
        }
      },
      "getPoolFeeNumerator(address,address,uint256)": {
        "params": {
          "poolId": "The index of the pool in the pools mapping",
          "tokenA": "The address of tokenA",
          "tokenB": "The address of tokenB"
        },
        "returns": {
          "feeNumerator": "The numerator that gets divided by the fee denominator"
        }
      },
      "getPoolSlippageNumerator(address,address,uint256)": {
        "params": {
          "poolId": "The index of the pool in the pools mapping",
          "tokenA": "The address of tokenA",
          "tokenB": "The address of tokenB"
        },
        "returns": {
          "slippageNumerator": "The numerator that gets divided by the slippage denominator"
        }
      },
      "getSlippageDenominator()": {
        "returns": {
          "_0": "The denominator used to calculate the allowable slippage percentage"
        }
      },
      "getSqrtPriceX96(address,address)": {
        "returns": {
          "_0": "sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value"
        }
      },
      "getTokenPair(uint256)": {
        "params": {
          "tokenPairIndex": "The index of the token pair"
        },
        "returns": {
          "_0": "The address of token0",
          "_1": "The address of token1"
        }
      },
      "getTokenPairPoolsLength(address,address)": {
        "params": {
          "tokenA": "The address of tokenA",
          "tokenB": "The address of tokenB"
        },
        "returns": {
          "_0": "The quantity of pools configured for the specified token pair"
        }
      },
      "getTokenPairsLength()": {
        "returns": {
          "_0": "The number of token pairs configured"
        }
      },
      "getTokensAndAmountsSorted(address,address,uint256,uint256)": {
        "params": {
          "amountA": "The amount of tokenA",
          "amountB": "The amount of tokenB",
          "tokenA": "The address of tokenA",
          "tokenB": "The address of tokenB"
        },
        "returns": {
          "amount0": "The amount of sorted token0",
          "amount1": "The amount of sorted token1",
          "token0": "The address of sorted token0",
          "token1": "The address of sorted token1"
        }
      },
      "getTokensSorted(address,address)": {
        "params": {
          "tokenA": "The address of tokenA",
          "tokenB": "The address of tokenB"
        },
        "returns": {
          "token0": "The address of the sorted token0",
          "token1": "The address of the sorted token1"
        }
      },
      "initialize(address[],address,address,address)": {
        "params": {
          "controllers_": "The addresses of the controlling contracts",
          "factoryAddress_": "The address of the Uniswap factory contract",
          "moduleMap_": "Module Map address",
          "swapRouterAddress_": "The address of the Uniswap swap router contract"
        }
      },
      "swapExactInput(address,address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "recipient": "The address to receive the tokens",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "tradeSuccess": "Indicates whether the trade succeeded"
        }
      },
      "swapExactOutput(address,address,address,uint256)": {
        "params": {
          "amountOut": "The exact amount of the output token to receive",
          "recipient": "The address to receive the tokens",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "tradeSuccess": "Indicates whether the trade succeeded"
        }
      },
      "updatePairPrimaryPool(address,address,uint256)": {
        "params": {
          "primaryPoolIndex": "The index of the Uniswap pool to make the new primary pool",
          "tokenA": "The address of tokenA of the pool",
          "tokenB": "The address of tokenB of the pool"
        }
      },
      "updatePoolSlippageNumerator(address,address,uint256,uint24)": {
        "params": {
          "poolIndex": "The index of the pool for the specified token pair",
          "slippageNumerator": "The new slippage numerator to update the pool",
          "tokenA": "The address of tokenA of the pool",
          "tokenB": "The address of tokenB of the pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "updatePairPrimaryPool(address,address,uint256)": {
        "notice": "Updates which Uniswap pool to use as the default poolwhen swapping between token0 and token1"
      }
    },
    "notice": "Integrates 0x Nodes to Uniswap v3tokenA/tokenB naming implies tokens are unsortedtoken0/token1 naming implies tokens are sorted",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5695,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)13708"
      },
      {
        "astId": 2791,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2794,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7968,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "factoryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7970,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7978,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "pools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Pool)7955_storage)dyn_storage))"
      },
      {
        "astId": 7985,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "paths",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Path)14859_storage))"
      },
      {
        "astId": 7991,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "isMultihopPair",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7995,
        "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
        "label": "tokenPairs",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(TokenPair)7960_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pool)7955_storage)dyn_storage": {
        "base": "t_struct(Pool)7955_storage",
        "encoding": "dynamic_array",
        "label": "struct UniswapTrader.Pool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenPair)7960_storage)dyn_storage": {
        "base": "t_struct(TokenPair)7960_storage",
        "encoding": "dynamic_array",
        "label": "struct UniswapTrader.TokenPair[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)13708": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Pool)7955_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniswapTrader.Pool[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Pool)7955_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Pool)7955_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UniswapTrader.Pool[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(Pool)7955_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Path)14859_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IUniswapTrader.Path))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Path)14859_storage)"
      },
      "t_mapping(t_address,t_struct(Path)14859_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IUniswapTrader.Path)",
        "numberOfBytes": "32",
        "value": "t_struct(Path)14859_storage"
      },
      "t_struct(Path)14859_storage": {
        "encoding": "inplace",
        "label": "struct IUniswapTrader.Path",
        "members": [
          {
            "astId": 14850,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "tokenOut",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14852,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "firstPoolFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14854,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "tokenInTokenOut",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 14856,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "secondPoolFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14858,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "tokenIn",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Pool)7955_storage": {
        "encoding": "inplace",
        "label": "struct UniswapTrader.Pool",
        "members": [
          {
            "astId": 7952,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7954,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "slippageNumerator",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenPair)7960_storage": {
        "encoding": "inplace",
        "label": "struct UniswapTrader.TokenPair",
        "members": [
          {
            "astId": 7957,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7959,
            "contract": "contracts/core/UniswapTrader.sol:UniswapTrader",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
