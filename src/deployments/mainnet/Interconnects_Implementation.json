{
  "address": "0x4cBe0c2D48D40F7b1231Bb0893925987cE53771f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "BridgeFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "BridgeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "ClaimLpFeeRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "ProvideLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enterStrat",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IUserPositions.TokenMovement[]",
              "name": "movements",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IInterconnects.RemoteStrategyExecutionBody",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "RSE",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "TakeLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "UndoBridgeFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "add",
          "type": "bool[]"
        }
      ],
      "name": "UpdateTokenPoolLpBalances",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RSE_FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bridgeFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bridgeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "claimLpFeeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTokenLpUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTokenPoolLpActivePositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTokenPoolLpBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTokenProtocolFeeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTokenUserLpBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTokenUserLpFeeRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "relayAccount_",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_rseFeeNumerator",
          "type": "uint32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enterStrat",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IUserPositions.TokenMovement[]",
              "name": "movements",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IInterconnects.RemoteStrategyExecutionBody",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "remoteStrategyExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rseFeeNumerator",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "takeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "undoBridgeFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numerator",
          "type": "uint32"
        }
      ],
      "name": "updateRSEFeeNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "relayAccount_",
          "type": "address"
        }
      ],
      "name": "updateRelayAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enterStrat",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IUserPositions.TokenMovement[]",
              "name": "movements",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IInterconnects.RemoteStrategyExecutionBody",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "verifyRSE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9f34e1a6457a4552dba61c1aed736136cb4d20f90b412461a0557d95b534bbd",
  "receipt": {
    "to": null,
    "from": "0xBf98f6DF65dfa2f2b50d4a806cF134A209C7D364",
    "contractAddress": "0x4cBe0c2D48D40F7b1231Bb0893925987cE53771f",
    "transactionIndex": 210,
    "gasUsed": "4592652",
    "logsBloom": "0x
    "blockHash": "0x42de82fe401e0ba3e537d7d162c803f45d94e59285251913764cc34912dd68cf",
    "transactionHash": "0xf9f34e1a6457a4552dba61c1aed736136cb4d20f90b412461a0557d95b534bbd",
    "logs": [],
    "blockNumber": 14563382,
    "cumulativeGasUsed": "21866064",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6b3cff8e9848db73a4b75e9fcec41d40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BridgeFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BridgeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ClaimLpFeeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"ProvideLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterStrat\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserPositions.TokenMovement[]\",\"name\":\"movements\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IInterconnects.RemoteStrategyExecutionBody\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"RSE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"TakeLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UndoBridgeFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"add\",\"type\":\"bool[]\"}],\"name\":\"UpdateTokenPoolLpBalances\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RSE_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bridgeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bridgeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimLpFeeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTokenLpUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTokenPoolLpActivePositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTokenPoolLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTokenProtocolFeeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenUserLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenUserLpFeeRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"relayAccount_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_rseFeeNumerator\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterStrat\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserPositions.TokenMovement[]\",\"name\":\"movements\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IInterconnects.RemoteStrategyExecutionBody\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"remoteStrategyExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rseFeeNumerator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"takeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"undoBridgeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numerator\",\"type\":\"uint32\"}],\"name\":\"updateRSEFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"relayAccount_\",\"type\":\"address\"}],\"name\":\"updateRelayAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterStrat\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserPositions.TokenMovement[]\",\"name\":\"movements\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IInterconnects.RemoteStrategyExecutionBody\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"verifyRSE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridgeFrom(address,address[],uint256[])\":{\"details\":\"Wrapper around userPositions func to decrease user's token balance\",\"params\":{\"amounts\":\"Array of the token amounts\",\"tokens\":\"Array of the token addresses\",\"user\":\"user bridging\"}},\"bridgeTo(address,address[],uint256[])\":{\"details\":\"Wrapper around userPositions func, updateTokenPoolLpBalances, and feeHandler\",\"params\":{\"amounts\":\"Array of the token amounts\",\"tokens\":\"Array of the token addresses\",\"user\":\"user bridging\"}},\"claimLpFeeRewards(address,address[])\":{\"params\":{\"tokens\":\"Array of the token addresses\",\"user\":\"Address of the account LP-ing\"}},\"getRelayAccount()\":{\"returns\":{\"_0\":\"The address of the gas account\"}},\"getTokenLpUsers(address)\":{\"params\":{\"asset\":\"Address of the ERC20 token contract\"}},\"getTokenPoolLpActivePositions(address)\":{\"details\":\"this returns the sum of all active LP positions for a given token. This is different than the LP balance, as the LP balance is the available amount of this sum. This number is gte the LP balance, usually greater than.\",\"params\":{\"asset\":\"Address of the ERC20 token contract\"}},\"getTokenPoolLpBalance(address)\":{\"params\":{\"asset\":\"Address of the ERC20 token contract\"}},\"getTokenProtocolFeeRewards(address)\":{\"params\":{\"asset\":\"Address of the ERC20 token contract\"}},\"getTokenUserLpBalance(address,address)\":{\"params\":{\"asset\":\"Address of the ERC20 token contract\",\"user\":\"Address of the user account\"}},\"getTokenUserLpFeeRewardBalance(address,address)\":{\"params\":{\"asset\":\"Address of the ERC20 token contract\",\"user\":\"Address of the user account\"}},\"initialize(address[],address,address,uint32)\":{\"params\":{\"_rseFeeNumerator\":\"The numerator for RSE fees. Denominator is 1,000,000. So 10,000 = 1% fee.\",\"controllers_\":\"The addresses of the controlling contracts\",\"moduleMap_\":\"Address of the Module Map\",\"relayAccount_\":\"The address of the relay account that will control this account\"}},\"provideLiquidity(address,address[],uint256[])\":{\"params\":{\"amounts\":\"Array of the token amounts\",\"tokens\":\"Array of the token addresses\",\"user\":\"Address of the account LP-ing\"}},\"takeLiquidity(address,address[],uint256[])\":{\"params\":{\"amounts\":\"Array of the token amounts\",\"tokens\":\"Array of the token addresses\",\"user\":\"Address of the account LP-ing\"}},\"undoBridgeFrom(address,address[],uint256[])\":{\"details\":\"Wrapper around userPositions func to increase user's token balance\",\"params\":{\"amounts\":\"Array of the token amounts\",\"tokens\":\"Array of the token addresses\",\"user\":\"user bridging\"}},\"updateRSEFeeNumerator(uint32)\":{\"params\":{\"numerator\":\"fee numerator\"}},\"updateRelayAccount(address)\":{\"params\":{\"relayAccount_\":\"The address of the relay account\"}},\"verifyRSE((address,uint256,bool,uint256,(address,uint256)[],bytes))\":{\"details\":\"this function verifies that the signature is from the signer and contains the correct hashed contents\",\"params\":{\"req\":\"- RSE request as struct RemoteStrategyExecutionBody\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimLpFeeRewards(address,address[])\":{\"notice\":\"User is allowed to claim fees\"},\"provideLiquidity(address,address[],uint256[])\":{\"notice\":\"User is allowed to LP whitelisted tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Interconnects.sol\":\"Interconnects\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal initializer {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xbe4c36b0a1e398f29a4f344b714870a95d5037cc38fce4e60cd66d5e6a6aef9b\",\"license\":\"GPL-2.0\"},\"contracts/core/Interconnects.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IInterconnects.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../libraries/VerifySignature.sol\\\";\\nimport \\\"../libraries/AddArr.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Interconnects is Initializable, ModuleMapConsumer, Controlled, IInterconnects, ReentrancyGuardUpgradeable {\\n    // Address of the relay account\\n    address payable private _relayAccount;\\n\\n    // Token address => User address => Balance of tokens a user has in that token's liquidity pool\\n    mapping(address => mapping(address => lpData)) private _tokenUserLpBalances;\\n\\n    // Token address => total liquidity pool for a token held by the contract\\n    mapping(address => uint256) private _tokenPoolLpBalances;\\n\\n    // Token address => total protocol fees from bridging\\n    mapping(address => uint256) private _tokenProtocolFeeRewards;\\n\\n    // Token address => The list of users currently LPing the token\\n    mapping(address => address[]) private _tokenLpUsers;\\n\\n    // bytes 32 hash => whether this hash has been used before in a bridge or rse transaction\\n    mapping(bytes => bool) private relayTxns;\\n\\n    // Token address => total RSE fees\\n    mapping(address => uint256) private _tokenRSEFees;\\n\\n    uint32 public constant RSE_FEE_DENOMINATOR = 1_000_000;\\n    uint32 public rseFeeNumerator;\\n\\n    /// @param controllers_ The addresses of the controlling contracts\\n    /// @param moduleMap_ Address of the Module Map\\n    /// @param relayAccount_ The address of the relay account that will control this account\\n    /// @param _rseFeeNumerator The numerator for RSE fees. Denominator is 1,000,000. So 10,000 = 1% fee.\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address payable relayAccount_,\\n        uint32 _rseFeeNumerator\\n    ) external initializer {\\n        require(relayAccount_ != address(0), \\\"bad address\\\");\\n\\n        __Controlled_init(controllers_, moduleMap_);\\n        _relayAccount = relayAccount_;\\n        rseFeeNumerator = _rseFeeNumerator;\\n    }\\n\\n    modifier onlyRelayAccount() {\\n        require(msg.sender == _relayAccount, \\\"Interconnects::onlyRelayAccount: Caller is not relay account\\\");\\n        _;\\n    }\\n\\n    modifier validateBridging(address[] memory tokens, uint256[] memory amounts) {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        require(\\n            tokens.length == amounts.length,\\n            \\\"Interconnects::validateBridging: Length of tokens and amounts must be equal\\\"\\n        );\\n        for (uint256 i; i < tokens.length; ++i) {\\n            require(\\n                integrationMap.getTokenAcceptingBridging(tokens[i]),\\n                \\\"Interconnects::validateBridging: Token is not accepting bridging\\\"\\n            );\\n        }\\n        _;\\n    }\\n    modifier validateRSE(RemoteStrategyExecutionBody memory req) {\\n        require(verifyRSE(req), \\\"Interconnects::validateBridging: Signature is invalid\\\");\\n        _;\\n    }\\n\\n    /// @param relayAccount_ The address of the relay account\\n    function updateRelayAccount(address payable relayAccount_) external override onlyManager {\\n        _relayAccount = relayAccount_;\\n    }\\n\\n    /// @return The address of the gas account\\n    function getRelayAccount() public view override returns (address) {\\n        return _relayAccount;\\n    }\\n\\n    /// @param numerator fee numerator\\n    function updateRSEFeeNumerator(uint32 numerator) external override onlyManager {\\n        rseFeeNumerator = numerator;\\n    }\\n\\n    /// @notice User is allowed to LP whitelisted tokens\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function provideLiquidity(\\n        address user,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external override onlyController {\\n        require(\\n            tokens.length == amounts.length,\\n            \\\"Interconnects::provideLiquidity: Length of tokens and amounts must be equal\\\"\\n        );\\n\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        address[] memory tokenArr = new address[](tokens.length);\\n        uint256[] memory amountArr = new uint256[](amounts.length);\\n        bool[] memory addArr = new bool[](tokens.length);\\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\\n            require(\\n                integrationMap.getTokenAcceptingLping(tokens[tokenId]),\\n                \\\"Interconnects::provideLiquidity: This token is not accepting LP positions\\\"\\n            );\\n            address token = tokens[tokenId];\\n            require(\\n                amounts[tokenId] > 0 && amounts[tokenId] <= userPositions.userTokenBalance(token, user),\\n                \\\"Interconnects::provideLiquidity: LP amount must be greater than zero and no more than the user's balance\\\"\\n            );\\n            tokenArr[tokenId] = token;\\n            amountArr[tokenId] = amounts[tokenId];\\n            addArr[tokenId] = false;\\n\\n            // Keep track of who is currently LPing\\n            if (_tokenUserLpBalances[token][user].position == 0) {\\n                _tokenLpUsers[token].push(user);\\n            }\\n\\n            _tokenUserLpBalances[token][user].position += amounts[tokenId];\\n            _tokenPoolLpBalances[token] += amounts[tokenId];\\n        }\\n        userPositions.updateUserTokenBalances(tokenArr, user, amountArr, addArr);\\n        emit ProvideLiquidity(user, tokens, amounts);\\n    }\\n\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function takeLiquidity(\\n        address user,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external override onlyController {\\n        require(\\n            tokens.length == amounts.length,\\n            \\\"Interconnects::takeLiquidity: Length of tokens and amounts must be equal\\\"\\n        );\\n\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        address[] memory tokenArr = new address[](tokens.length);\\n        uint256[] memory amountArr = new uint256[](amounts.length);\\n        bool[] memory addArr = new bool[](tokens.length);\\n\\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            require(\\n                amounts[tokenId] > 0 && amounts[tokenId] <= _tokenUserLpBalances[token][user].position,\\n                \\\"Interconnects::takeLiquidity: LP amount must be greater than zero and no more than the user's balance for the token\\\"\\n            );\\n            require(\\n                amounts[tokenId] <= _tokenPoolLpBalances[token],\\n                \\\"Interconnects::takeLiquidity: LP amount must be no more than the available amount in the token pool\\\"\\n            );\\n\\n            tokenArr[tokenId] = token;\\n            amountArr[tokenId] = amounts[tokenId];\\n            addArr[tokenId] = true;\\n\\n            _tokenUserLpBalances[token][user].position -= amounts[tokenId];\\n            _tokenPoolLpBalances[token] -= amounts[tokenId];\\n\\n            // User has withdrawn all liquidity, so remove from list of LP users\\n            if (_tokenUserLpBalances[token][user].position == 0) {\\n                // Iterate through tokenLpUsers[token] and remove this user\\n                for (uint256 lpUserIdx; lpUserIdx < _tokenLpUsers[token].length; lpUserIdx++) {\\n                    if (_tokenLpUsers[token][lpUserIdx] == user) {\\n                        _tokenLpUsers[token][lpUserIdx] = _tokenLpUsers[token][_tokenLpUsers[token].length - 1];\\n                        _tokenLpUsers[token].pop();\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        userPositions.updateUserTokenBalances(tokenArr, user, amountArr, addArr);\\n        emit TakeLiquidity(user, tokens, amounts);\\n    }\\n\\n    /// @notice User is allowed to claim fees\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    function claimLpFeeRewards(address user, address[] calldata tokens) external override onlyController nonReentrant {\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        uint256[] memory amounts = new uint256[](tokens.length);\\n        bool[] memory add = new bool[](tokens.length);\\n\\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            uint256 fees = _tokenUserLpBalances[token][user].rewards;\\n            require(fees > 0, \\\"Interconnects::claimLpFees: LP fee reward balance must be greater than zero\\\");\\n            _tokenUserLpBalances[token][user].rewards = 0;\\n            amounts[tokenId] = fees;\\n            add[tokenId] = true;\\n        }\\n        userPositions.updateUserTokenBalances(tokens, user, amounts, add);\\n\\n        emit ClaimLpFeeRewards(user, tokens);\\n    }\\n\\n    /// @dev Wrapper around userPositions func to decrease user's token balance\\n    /// @param user user bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function bridgeFrom(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external override onlyRelayAccount validateBridging(tokens, amounts) nonReentrant {\\n        // create add array with a false boolean for each address in tokens\\n        bool[] memory addArr = new bool[](tokens.length);\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        userPositions.updateUserTokenBalances(tokens, user, amounts, addArr);\\n        emit BridgeFrom(user, tokens, amounts);\\n    }\\n\\n    /// @dev Wrapper around userPositions func to increase user's token balance\\n    /// @param user user bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function undoBridgeFrom(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external override onlyRelayAccount validateBridging(tokens, amounts) nonReentrant {\\n        // create add array with a true boolean for each address in tokens\\n        bool[] memory addArr = new bool[](tokens.length);\\n        for (uint256 i; i < tokens.length; ++i) {\\n            addArr[i] = true;\\n        }\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        userPositions.updateUserTokenBalances(tokens, user, amounts, addArr);\\n        emit UndoBridgeFrom(user, tokens, amounts);\\n    }\\n\\n    /// @dev Wrapper around userPositions func, updateTokenPoolLpBalances, and feeHandler\\n    /// @param user user bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function bridgeTo(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external override onlyRelayAccount validateBridging(tokens, amounts) nonReentrant {\\n        // create add array with a true boolean for each address in tokens\\n        bool[] memory addArr = new bool[](tokens.length);\\n        bool[] memory subArr = new bool[](tokens.length);\\n        for (uint256 i; i < tokens.length; ++i) {\\n            addArr[i] = true;\\n        }\\n        (\\n            uint256[] memory protocolFees,\\n            uint256[] memory liquidityProviderFees,\\n            uint256[] memory netBridgeAmounts\\n        ) = calculateBridgeFeesAndNetAmount(tokens, amounts);\\n        updateTokenPoolLpBalances(tokens, amounts, subArr);\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        userPositions.updateUserInterconnectBalances(tokens, user, netBridgeAmounts, addArr);\\n        for (uint256 i; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            uint256 lpFee = liquidityProviderFees[i];\\n            uint256 protocolFee = protocolFees[i];\\n            updateTokenUserLpFeeRewardBalances(token, lpFee);\\n            _tokenProtocolFeeRewards[token] += protocolFee;\\n        }\\n        emit BridgeTo(user, tokens, amounts);\\n    }\\n\\n    function remoteStrategyExecution(RemoteStrategyExecutionBody memory req)\\n        external\\n        override\\n        onlyRelayAccount\\n        validateRSE(req)\\n        nonReentrant\\n    {\\n        markTxnAsCompleted(req.signature);\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n        uint256[] memory fees = calculateRSEFees(req.movements);\\n        address[] memory tokens = new address[](req.movements.length);\\n        for (uint256 i; i < req.movements.length; ++i) {\\n            tokens[i] = req.movements[i].token;\\n            _tokenRSEFees[req.movements[i].token] += fees[i];\\n        }\\n\\n        // if they are entering a strategy remotely, we want to take fees before entering\\n        if (req.enterStrat) {\\n            // taking fees = decreasing their local balance by the amount of the fee for each token\\n            userPositions.updateUserTokenBalances(tokens, req.user, fees, new bool[](tokens.length));\\n        }\\n\\n        userPositions._remoteStrategyExecution(req.strategyId, req.user, req.movements, req.enterStrat);\\n\\n        // if they are exiting a strategy remotely, we want to take the fees after they exit the strategy\\n        if (!req.enterStrat) {\\n            userPositions.updateUserTokenBalances(tokens, req.user, fees, new bool[](tokens.length));\\n        }\\n\\n        emit RSE(req);\\n    }\\n\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    /// @param add Array of boolean values, true if adding, false if removing\\n    function updateTokenPoolLpBalances(\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) internal {\\n        require(\\n            tokens.length == amounts.length && tokens.length == add.length,\\n            \\\"Interconnects::updateTokenPoolLpBalances: Length of tokens, amounts, and add/subtract must be equal\\\"\\n        );\\n\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n\\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\\n            require(\\n                integrationMap.getTokenAcceptingLping(tokens[tokenId]),\\n                \\\"Interconnects::updateTokenPoolLpBalances: This token is not accepting LP positions\\\"\\n            );\\n\\n            uint256 newBalance;\\n            if (add[tokenId]) {\\n                newBalance = _tokenPoolLpBalances[tokens[tokenId]] + amounts[tokenId];\\n            } else {\\n                newBalance = _tokenPoolLpBalances[tokens[tokenId]] - amounts[tokenId];\\n            }\\n\\n            _tokenPoolLpBalances[tokens[tokenId]] = newBalance;\\n        }\\n        emit UpdateTokenPoolLpBalances(tokens, amounts, add);\\n    }\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param lpTransferFeeAmt Total fee amount which will be divided among the LPers\\n    function updateTokenUserLpFeeRewardBalances(address asset, uint256 lpTransferFeeAmt) internal {\\n        uint256 totalAmountAllocated = getTokenPoolLpActivePositions(asset);\\n        for (uint256 lpUserIdx; lpUserIdx < _tokenLpUsers[asset].length; lpUserIdx++) {\\n            address lpUser = _tokenLpUsers[asset][lpUserIdx];\\n            // User gets a portion of the fee proportional to their share of the pool\\n            _tokenUserLpBalances[asset][lpUser].rewards +=\\n                (lpTransferFeeAmt * _tokenUserLpBalances[asset][lpUser].position) /\\n                totalAmountAllocated;\\n        }\\n    }\\n\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function calculateBridgeFeesAndNetAmount(address[] memory tokens, uint256[] memory amounts)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory protocolFees,\\n            uint256[] memory liquidityProviderFees,\\n            uint256[] memory netBridgeAmounts\\n        )\\n    {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        uint32 targetLiquidityRatioDenominator = integrationMap.getTargetLiquidityRatioDenominator();\\n        uint32 kValueDenominator = integrationMap.getTransferFeeKValueDenominator();\\n        uint32 protocolFeeDenominator = integrationMap.getTransferFeePlatformRatioDenominator();\\n        protocolFees = new uint256[](tokens.length);\\n        liquidityProviderFees = new uint256[](tokens.length);\\n        netBridgeAmounts = new uint256[](tokens.length);\\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            uint256 protocolFeeNumerator = integrationMap.getTokenTransferFeePlatformRatioNumerator(token);\\n\\n            // x is the unallocated (currently available) liquidity divided by the target liquidity\\n            uint256 x = (_tokenPoolLpBalances[token] * targetLiquidityRatioDenominator) /\\n                (integrationMap.getTokenTargetLiquidityRatioNumerator(token) * getTokenPoolLpActivePositions(token));\\n\\n            uint256 totalFee = (integrationMap.getTokenTransferFeeKValueNumerator(token) * amounts[tokenId]) /\\n                (kValueDenominator * x);\\n\\n            protocolFees[tokenId] = (totalFee * protocolFeeNumerator) / protocolFeeDenominator;\\n            liquidityProviderFees[tokenId] = totalFee - protocolFees[tokenId];\\n            netBridgeAmounts[tokenId] = amounts[tokenId] - totalFee;\\n        }\\n\\n        return (protocolFees, liquidityProviderFees, netBridgeAmounts);\\n    }\\n\\n    /// @param movements tokens and amounts\\n    function calculateRSEFees(IUserPositions.TokenMovement[] memory movements)\\n        internal\\n        view\\n        returns (uint256[] memory protocolFees)\\n    {\\n        protocolFees = new uint256[](movements.length);\\n        for (uint256 i; i < movements.length; ++i) {\\n            protocolFees[i] = (movements[i].amount * rseFeeNumerator) / RSE_FEE_DENOMINATOR;\\n        }\\n        return protocolFees;\\n    }\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param user Address of the user account\\n    function getTokenUserLpBalance(address asset, address user) public view override returns (uint256) {\\n        return _tokenUserLpBalances[asset][user].position;\\n    }\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenPoolLpBalance(address asset) public view override returns (uint256) {\\n        return _tokenPoolLpBalances[asset];\\n    }\\n\\n    /// @dev this returns the sum of all active LP positions for a given token. This is different than the LP balance, as the LP balance is the available amount of this sum. This number is gte the LP balance, usually greater than.\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenPoolLpActivePositions(address asset) public view override returns (uint256) {\\n        uint256 sum = 0;\\n        address[] memory lpUsers = _tokenLpUsers[asset];\\n        for (uint256 lpUserIdx; lpUserIdx < lpUsers.length; lpUserIdx++) {\\n            address lpUser = lpUsers[lpUserIdx];\\n            sum += _tokenUserLpBalances[asset][lpUser].position;\\n        }\\n        return sum;\\n    }\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param user Address of the user account\\n    function getTokenUserLpFeeRewardBalance(address asset, address user) public view override returns (uint256) {\\n        return _tokenUserLpBalances[asset][user].rewards;\\n    }\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenLpUsers(address asset) public view override returns (address[] memory) {\\n        return _tokenLpUsers[asset];\\n    }\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenProtocolFeeRewards(address asset) public view override returns (uint256) {\\n        return _tokenProtocolFeeRewards[asset];\\n    }\\n\\n    /// @dev this function verifies that the signature is from the signer and contains the correct hashed contents\\n    /// @param req - RSE request as struct RemoteStrategyExecutionBody\\n    function verifyRSE(RemoteStrategyExecutionBody memory req) public pure returns (bool) {\\n        bytes32 messageHash = keccak256(abi.encode(req.user, req.strategyId, req.enterStrat, req.nonce, req.movements));\\n        bytes32 ethSignedMessageHash = VerifySignature.getEthSignedMessageHash(messageHash);\\n        return VerifySignature.recoverSigner(ethSignedMessageHash, req.signature) == req.user;\\n    }\\n\\n    /// @dev this function hashes this data and marks it as a completed transaction\\n    /// @param signature - signature of the user\\n    function markTxnAsCompleted(bytes memory signature) internal {\\n        require(!relayTxns[signature], \\\"Interconnects::markTxnAsCompleted: Already completed!\\\");\\n        relayTxns[signature] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xd93098f98251872e191986ad9646ffdb09350458a082ccb6f8849dc1c7ede568\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    event Deploy(address token, uint256 amount);\\n    event HarvestYield(address token, uint256 amount);\\n    event Deposit(address token, uint256 amount);\\n    event Withdraw(address token, uint256 amount);\\n\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /// @param tokenAddress The address of the withdrawal token\\n    /// @param amount The amount of the token to withdraw\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n    function deploy() external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n\\n    /// @dev This returns the total amount of the underlying token that\\n    /// @dev has been deposited to the integration contract\\n    /// @param tokenAddress The address of the deployed token\\n    /// @return The amount of the underlying token that can be withdrawn\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /// @dev Returns the total amount of yield awaiting to be harvested\\n    /// @dev using the relevant integration's own function\\n    /// @param amount The amount of available yield for the specified token\\n    function getPendingYield(address) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x97abab59543f750432e33293acca39d1805e1596ff8133e3bdeaae1c3892ecd8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IInterconnects.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IInterconnects {\\n    // ##### Events\\n    struct lpData {\\n        uint256 position;\\n        uint256 rewards;\\n    }\\n\\n    struct RemoteStrategyExecutionBody {\\n        address user;\\n        uint256 strategyId;\\n        bool enterStrat;\\n        uint256 nonce;\\n        IUserPositions.TokenMovement[] movements;\\n        bytes signature;\\n    }\\n\\n    event ProvideLiquidity(address indexed user, address[] tokens, uint256[] tokenAmounts);\\n    event TakeLiquidity(address indexed user, address[] tokens, uint256[] tokenAmounts);\\n\\n    event ClaimLpFeeRewards(address indexed user, address[] tokens);\\n\\n    event BridgeFrom(address indexed user, address[] tokens, uint256[] amounts);\\n\\n    event UndoBridgeFrom(address indexed user, address[] tokens, uint256[] amounts);\\n\\n    event BridgeTo(address indexed user, address[] tokens, uint256[] amounts);\\n\\n    event RSE(RemoteStrategyExecutionBody req);\\n\\n    event UpdateTokenPoolLpBalances(address[] tokens, uint256[] tokenAmounts, bool[] add);\\n\\n    // ##### Functions\\n    /// @param relayAccount_ The address of relay account\\n    function updateRelayAccount(address payable relayAccount_) external;\\n\\n    /// @return The address of the relay account\\n    function getRelayAccount() external view returns (address);\\n\\n    function updateRSEFeeNumerator(uint32 number) external;\\n\\n    /// @notice User is allowed to LP whitelisted tokens\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function provideLiquidity(\\n        address user,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function takeLiquidity(\\n        address user,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    function claimLpFeeRewards(address user, address[] calldata tokens) external;\\n\\n    // @param user Address of the account bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function bridgeFrom(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // @param user Address of the account bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function undoBridgeFrom(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // @param user Address of the account bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function bridgeTo(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // @param req remote strategy execution request as struct RemoteStrategyExecutionBody\\n    function remoteStrategyExecution(RemoteStrategyExecutionBody calldata req) external;\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function getTokenUserLpBalance(address asset, address account) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenPoolLpBalance(address asset) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenPoolLpActivePositions(address asset) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function getTokenUserLpFeeRewardBalance(address asset, address account) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenLpUsers(address asset) external view returns (address[] memory);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenProtocolFeeRewards(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2143c59e5565ce7ae09a27fb8e0c9dee7019243f9cb9b5a421d35255ad989288\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70fb689b3b91c20166f3c2823639933580d22a61b392aba6b08bb8c3a1c00425\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2e7a465772a645a92442ab9c12173bd3506761e50a18178eb09d1119599f4ec8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    // #### Structs\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct TokenDeploy {\\n        address integration;\\n        uint32 ammPoolID;\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n        mapping(address => uint256) maximumCap;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct StrategyBalance {\\n        uint256 strategyID;\\n        GeneralBalance[] tokens;\\n    }\\n\\n    struct GeneralBalance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    struct ReplaceIntegrationParams {\\n        Integration newIntegration;\\n        address token;\\n        uint256 oldIntegrationIndex;\\n        uint32[] weightAmounts;\\n        uint256[] weightTokenIndexes;\\n    }\\n\\n    // #### Events\\n    event NewStrategy(uint256 indexed id, Integration[] integrations, Token[] tokens, string name);\\n    event UpdateName(uint256 indexed id, string name);\\n    event DeleteStrategy(uint256 indexed id);\\n    event IntegrationWeightAdjustment(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        uint32 amount,\\n        bool rebalance\\n    );\\n    event RemoveIntegration(uint256 strategyId, uint256 integrationIndex, address token);\\n    event AddIntegration(uint256 strategyId, Integration integration, address token);\\n\\n    // #### Functions\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     @param maxCap  The maximum amount investable in a strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens,\\n        uint256[] memory maxCap\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 id, string calldata name) external;\\n\\n    function addPairToStrategy(\\n        uint256 strategyId,\\n        Integration calldata integration,\\n        address token\\n    ) external;\\n\\n    /// @dev Changes weights of integrations, optionally rebalancing the integrations so that current fund allocation reflects new weights\\n    function movePairWeight(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        int256 vectorAmount,\\n        uint32 amount,\\n        bool rebalance\\n    ) external;\\n\\n    function removePairFromStrategy(\\n        uint256 strategyId,\\n        uint256 integrationIndex,\\n        address token\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\\n    @param id  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 id) external;\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param id  the strategy to deposit into\\n    @param tokens  the tokens to deposit\\n     */\\n    function increaseStrategy(uint256 id, IUserPositions.TokenMovement[] calldata tokens) external;\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param id  the strategy to withdraw assets from\\n    @param tokens  details of the tokens being deposited\\n     */\\n    function decreaseStrategy(uint256 id, IUserPositions.TokenMovement[] calldata tokens) external;\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param id  the strategy to return\\n     */\\n    function getStrategy(uint256 id) external view returns (StrategySummary memory);\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param amount  the amount to reduce the vector by\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param id  the strategy id to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 id, address token) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return the pending deploy amount\\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256);\\n\\n    /**\\n    @notice Returns balances per strategy, and total invested balances\\n    @param _strategies  The strategies to retrieve balances for\\n    @param _tokens  The tokens to retrieve\\n     */\\n    function getStrategyBalances(uint256[] calldata _strategies, address[] calldata _tokens)\\n        external\\n        view\\n        returns (StrategyBalance[] memory strategyBalances, GeneralBalance[] memory generalBalances);\\n\\n    /**\\n  @notice Returns 1 or more strategies in a single call.\\n  @param ids  The ids of the strategies to return.\\n   */\\n    function getMultipleStrategies(uint256[] calldata ids) external view returns (StrategySummary[] memory);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy) external view returns (uint256);\\n\\n    /**\\n    @notice Clears the list of positions that can be closed to supply a token\\n    @param tokens  The list of tokens to clear\\n     */\\n    function clearClosablePositions(address[] calldata tokens) external;\\n\\n    /**\\n    @notice Closes enough positions to provide a requested amount of a token\\n    @param token  the token to source\\n    @param amount  the amount to source\\n     */\\n    function closePositionsForWithdrawal(address token, uint256 amount) external;\\n\\n    /// @notice Sets the maximum investment cap for a strategy and token pair\\n    /// @param id The strategy id\\n    /// @param token  the token address\\n    /// @param maxCap  The maximum amount of funds that can be invested\\n    function setMaximumCap(\\n        uint256 id,\\n        address token,\\n        uint256 maxCap\\n    ) external;\\n\\n    /// @notice Retrieves the maximum cap for a strategy/token pair\\n    /// @param id  the strategy id\\n    /// @param token  the token address\\n    /// @return cap  the maximum cap for the strategy/token pair\\n    function getMaximumCap(uint256 id, address token) external view returns (uint256 cap);\\n}\\n\",\"keccak256\":\"0x63c9ab5961d423e00a23f78aba7993f5487bc16a507b69fff8e4d2348a1cfb7c\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct MigrateStrategy {\\n        address user;\\n        TokenMovement[] tokens;\\n    }\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n\\n    // ##### Events\\n    event EnterStrategy(uint256 indexed id, address indexed user, TokenMovement[] tokens);\\n    event ExitStrategy(uint256 indexed id, address indexed user, TokenMovement[] tokens);\\n    event Deposit(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event Pause(bool isPaused);\\n\\n    // ##### Functions\\n\\n    /// @notice User is allowed to deposit whitelisted tokens\\n    /// @param depositor Address of the account depositing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param ethAmount The amount of ETH sent with the deposit\\n    /// @param migration flag if this is a migration from the old system\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /// @notice User is allowed to withdraw tokens\\n    /// @param recipient The address of the user withdrawing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n    /// @param recipient The address of the user withdrawing tokens\\n    /// @param tokens Array of token address that user is exiting positions from\\n    /// @param strategies Array of strategy IDs that user is claiming rewards from\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    /// @return _withdrawAllAndClaimResponse\\n    /// /// WithdrawAllAndClaimResponse.tokenAmounts The amounts of each token being withdrawn\\n    /// /// WithdrawAllAndClaimResponse.ethWithdrawn The amount of ETH being withdrawn\\n    /// /// WithdrawAllAndClaimResponse.ethClaimed The amount of ETH being claimed from rewards\\n    /// /// WithdrawAllAndClaimResponse.biosClaimed The amount of BIOS being claimed from rewards\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] calldata strategies,\\n        bool withdrawWethAsEth\\n    ) external returns (WithdrawAllAndClaimResponse memory _withdrawAllAndClaimResponse);\\n\\n    /// @param user The address of the user claiming ETH rewards\\n    /// @param strategies An array of strategyIDs to claim rewards for\\n    function claimEthRewards(address user, uint256[] calldata strategies) external returns (uint256 ethClaimed);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @return The total balance of the asset deposited in the system\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /// @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userTokenBalance(address asset, address account) external view returns (uint256);\\n\\n    /// @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userDeployableBalance(address asset, address account) external view returns (uint256);\\n\\n    /// @notice Returns the amount that a user has interconnected\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userInterconnectBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n    @notice Adds a user's funds to a strategy to be deployed\\n    @param strategyID  The strategy to enter\\n    @param tokens  The tokens and amounts to enter into the strategy\\n     */\\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens) external;\\n\\n    function _remoteStrategyExecution(\\n        uint256 strategyID,\\n        address user,\\n        TokenMovement[] calldata tokens,\\n        bool enterStrat // true to enter, false to exit\\n    ) external;\\n\\n    /**\\n    @notice Marks a user's funds as withdrawable\\n    @param strategyID  The strategy to withdrawfrom\\n    @param tokens  The tokens and amounts to withdraw\\n     */\\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens) external;\\n\\n    /**\\n    @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n    @param assets list of tokens to update\\n    @param account user \\n    @param amounts list of amounts to update \\n     */\\n    function updateUserTokenBalances(\\n        address[] calldata assets,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n    @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n    @param assets list of tokens to update\\n    @param account user \\n    @param amounts list of amounts to update \\n     */\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n    @notice returns the amount of a given token a user has invested in a given strategy\\n    @param id  the strategy id\\n    @param token  the token address\\n    @param user  the user who holds the funds\\n    @return amount  the amount of token that the user has invested in the strategy \\n     */\\n    function getUserStrategyBalanceByToken(\\n        uint256 id,\\n        address token,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the amount of a given token that a user has invested across all strategies\\n    @param token  the token address\\n    @param user  the user holding the funds\\n    @return amount  the amount of tokens the user has invested across all strategies\\n     */\\n    function getUserInvestedAmountByToken(address token, address user) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns a user's balances for requested strategies, and the users total invested amounts for each token requested\\n    @param user  the user to request for\\n    @param _strategies  the strategies to get balances for\\n    @param _tokens  the tokens to get balances for\\n    @return userStrategyBalances  The user's invested funds in the strategies\\n    @return userBalance  User total token balances\\n     */\\n    function getUserBalances(\\n        address user,\\n        uint256[] calldata _strategies,\\n        address[] calldata _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            IStrategyMap.StrategyBalance[] memory userStrategyBalances,\\n            IStrategyMap.GeneralBalance[] memory userBalance\\n        );\\n}\\n\",\"keccak256\":\"0xbb0c23d4a0e37bc956f3ad34ffa610d9a9b635d55826b01597ce145487f181a6\",\"license\":\"GPL-2.0\"},\"contracts/libraries/AddArr.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title AddArr\\n/// @notice A library for create a list of booleans that are true. Allows you to specify whether you want to add or subtract an int from a uint\\n/// @dev Used in Interconnects.col\\nlibrary AddArr {\\n    function getAddArr(uint256 amount) internal pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](amount);\\n        for (uint256 i; i < amount; ++i) {\\n            result[i] = true;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b8b1970c2517f6473dd687d25554dc9fbe9c58dea333d466763f50abbff9c01\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/VerifySignature.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title SignatureVerification allows you to verify an off-chain signature on-chain\\nlibrary VerifySignature {\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\",\"keccak256\":\"0xdb253d84ade88265c340d13bd6817f6c88866f39670ba1d40f94d3d57bfd97e7\",\"license\":\"GPL-2.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101335760003560e01c80630f0a1c6f1461013857806316c0f76b146101675780632e140f1d14610178578063337993cb1461019b5780633dbcbbae146101b0578063402c68cc146101e757806343f0a5bb146101fc5780634572b30c1461020f5780634da193951461022257806364ee534714610241578063894105e0146102545780638ba2f3cf1461026457806390d81be9146102a057806392092de7146102b357806392f917c8146102c6578063a07f12a3146102d9578063a7fc7a0714610302578063aaba1ca214610315578063b429afeb14610328578063b59b464b14610354578063c521704614610367578063c5efb53a1461037a578063d84ac98c146103b3578063e94b0dd2146103c6578063fd2b5134146103d9575b600080fd5b600054610151906201000090046001600160a01b031681565b60405161015e9190614a8a565b60405180910390f35b6035546001600160a01b0316610151565b61018b610186366004614822565b6103ec565b604051901515815260200161015e565b6101a36104bc565b60405161015e9190614b9c565b6101d96101be366004614580565b6001600160a01b031660009081526038602052604090205490565b60405190815260200161015e565b6101fa6101f53660046146c8565b61051e565b005b6101fa61020a366004614649565b6108a6565b6101fa61021d366004614913565b611154565b61022c620f424081565b60405163ffffffff909116815260200161015e565b6101fa61024f366004614822565b61128c565b603c5461022c9063ffffffff1681565b6101d96102723660046145bf565b6001600160a01b03918216600090815260366020908152604080832093909416825291909152206001015490565b6101fa6102ae3660046146c8565b61179c565b6101fa6102c13660046146c8565b611b50565b6101fa6102d4366004614794565b612071565b6101d96102e7366004614580565b6001600160a01b031660009081526037602052604090205490565b6101fa610310366004614580565b612147565b6101a3610323366004614580565b612382565b61018b610336366004614580565b6001600160a01b031660009081526001602052604090205460ff1690565b6101fa610362366004614580565b6123f8565b6101d9610375366004614580565b612536565b6101d96103883660046145bf565b6001600160a01b03918216600090815260366020908152604080832093909416825291909152205490565b6101fa6103c13660046145f7565b612635565b6101516103d43660046148e3565b612a0b565b6101fa6103e7366004614649565b612a35565b6000808260000151836020015184604001518560600151866080015160405160200161041c959493929190614a9e565b604051602081830303815290604052805190602001209050600061048c826040517b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905083600001516001600160a01b03166104aa828660a001516132c2565b6001600160a01b031614949350505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561051457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104f6575b5050505050905090565b6035546001600160a01b031633146105515760405162461bcd60e51b815260040161054890614c90565b60405180910390fd5b818160008060029054906101000a90046001600160a01b03166001600160a01b0316636f8c3f8a60036040518263ffffffff1660e01b81526004016105969190614c68565b60206040518083038186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e691906145a3565b905081518351146106095760405162461bcd60e51b815260040161054890614dab565b60005b83518110156106e457816001600160a01b031663ea0db29685838151811061064457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016106689190614a8a565b60206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190614806565b6106d45760405162461bcd60e51b815260040161054890614cec565b6106dd816150cd565b905061060c565b50600260035414156107085760405162461bcd60e51b815260040161054890614e9a565b600260035584516000906001600160401b0381111561073757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610760578160200160208202803683370190505b50600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a9061079d90600190600401614c68565b60206040518083038186803b1580156107b557600080fd5b505afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed91906145a3565b60405163f0f25dd560e01b81529091506001600160a01b0382169063f0f25dd590610822908a908c908b908890600401614baf565b600060405180830381600087803b15801561083c57600080fd5b505af1158015610850573d6000803e3d6000fd5b50505050876001600160a01b03167fc0d927b1a552ab2c106f99c6abfa28a20e4ad4feea024b7997adff3d1885bd0b888860405161088f929190614bf7565b60405180910390a250506001600355505050505050565b3360009081526001602052604090205460ff166108d55760405162461bcd60e51b815260040161054890614e46565b82811461095b5760405162461bcd60e51b815260206004820152604860248201527f496e746572636f6e6e656374733a3a74616b654c69717569646974793a204c6560448201527f6e677468206f6620746f6b656e7320616e6420616d6f756e7473206d75737420606482015267189948195c5d585b60c21b608482015260a401610548565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061099290600190600401614c68565b60206040518083038186803b1580156109aa57600080fd5b505afa1580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e291906145a3565b90506000846001600160401b03811115610a0c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a35578160200160208202803683370190505b5090506000836001600160401b03811115610a6057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a89578160200160208202803683370190505b5090506000866001600160401b03811115610ab457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610add578160200160208202803683370190505b50905060005b8781101561109d576000898983818110610b0d57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b229190614580565b90506000888884818110610b4657634e487b7160e01b600052603260045260246000fd5b90506020020135118015610ba557506001600160a01b038082166000908152603660209081526040808320938f1683529290522054888884818110610b9b57634e487b7160e01b600052603260045260246000fd5b9050602002013511155b610c475760405162461bcd60e51b815260206004820152607360248201526000805160206151ad83398151915260448201527f20616d6f756e74206d7573742062652067726561746572207468616e207a657260648201527f6f20616e64206e6f206d6f7265207468616e20746865207573657227732062616084820152723630b731b2903337b9103a3432903a37b5b2b760691b60a482015260c401610548565b6001600160a01b038116600090815260376020526040902054888884818110610c8057634e487b7160e01b600052603260045260246000fd5b905060200201351115610d1b5760405162461bcd60e51b815260206004820152606360248201526000805160206151ad83398151915260448201527f20616d6f756e74206d757374206265206e6f206d6f7265207468616e2074686560648201527f20617661696c61626c6520616d6f756e7420696e2074686520746f6b656e20706084820152621bdbdb60ea1b60a482015260c401610548565b80858381518110610d3c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050878783818110610d7c57634e487b7160e01b600052603260045260246000fd5b90506020020135848381518110610da357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001838381518110610dd157634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152878783818110610e0157634e487b7160e01b600052603260045260246000fd5b9050602002013560366000836001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254610e62919061508a565b909155508890508783818110610e8857634e487b7160e01b600052603260045260246000fd5b9050602002013560376000836001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ec3919061508a565b90915550506001600160a01b038082166000908152603660209081526040808320938f168352929052205461108a5760005b6001600160a01b038216600090815260396020526040902054811015611088576001600160a01b0382811660009081526039602052604090208054918e169183908110610f5257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611076576001600160a01b03821660009081526039602052604090208054610f939060019061508a565b81548110610fb157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03858116845260399092526040909220805491909216919083908110610ffc57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918416815260399091526040902080548061104f57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055611088565b80611080816150cd565b915050610ef5565b505b5080611095816150cd565b915050610ae3565b5060405163f0f25dd560e01b81526001600160a01b0385169063f0f25dd5906110d09086908d9087908790600401614baf565b600060405180830381600087803b1580156110ea57600080fd5b505af11580156110fe573d6000803e3d6000fd5b50505050886001600160a01b03167fa1f0a36e60af87632f11db638faac61619cceacdc0aa92c9d55c6145fc0c8957898989896040516111419493929190614b4f565b60405180910390a2505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916111899190600401614c68565b60206040518083038186803b1580156111a157600080fd5b505afa1580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d991906145a3565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016112049190614a8a565b60206040518083038186803b15801561121c57600080fd5b505afa158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190614806565b6112705760405162461bcd60e51b815260040161054890614df8565b603c805463ffffffff191663ffffffff92909216919091179055565b6035546001600160a01b031633146112b65760405162461bcd60e51b815260040161054890614c90565b806112c0816103ec565b6113185760405162461bcd60e51b815260206004820152603560248201526000805160206151cd8339815191526044820152740814da59db985d1d5c99481a5cc81a5b9d985b1a59605a1b6064820152608401610548565b6002600354141561133b5760405162461bcd60e51b815260040161054890614e9a565b600260035560a082015161134e90613341565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061138590600190600401614c68565b60206040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d591906145a3565b905060006113e68460800151613404565b905060008460800151516001600160401b0381111561141557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561143e578160200160208202803683370190505b50905060005b856080015151811015611562578560800151818151811061147557634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518282815181106114a157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508281815181106114e157634e487b7160e01b600052603260045260246000fd5b6020026020010151603b60008860800151848151811061151157634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461154c9190615033565b9091555061155b9050816150cd565b9050611444565b5084604001511561162657826001600160a01b031663f0f25dd58287600001518585516001600160401b038111156115aa57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115d3578160200160208202803683370190505b506040518563ffffffff1660e01b81526004016115f39493929190614baf565b600060405180830381600087803b15801561160d57600080fd5b505af1158015611621573d6000803e3d6000fd5b505050505b602085015185516080870151604080890151905163d969f1b560e01b81526001600160a01b0388169463d969f1b5946116659491939092600401614f59565b600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50505050846040015161175957826001600160a01b031663f0f25dd58287600001518585516001600160401b038111156116dd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611706578160200160208202803683370190505b506040518563ffffffff1660e01b81526004016117269493929190614baf565b600060405180830381600087803b15801561174057600080fd5b505af1158015611754573d6000803e3d6000fd5b505050505b7fb181eff2e901f498767095da3758c77d213a159e5b445fb357cc1bcfe4f2cbd8856040516117889190614ed1565b60405180910390a150506001600355505050565b6035546001600160a01b031633146117c65760405162461bcd60e51b815260040161054890614c90565b818160008060029054906101000a90046001600160a01b03166001600160a01b0316636f8c3f8a60036040518263ffffffff1660e01b815260040161180b9190614c68565b60206040518083038186803b15801561182357600080fd5b505afa158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b91906145a3565b9050815183511461187e5760405162461bcd60e51b815260040161054890614dab565b60005b835181101561195957816001600160a01b031663ea0db2968583815181106118b957634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016118dd9190614a8a565b60206040518083038186803b1580156118f557600080fd5b505afa158015611909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192d9190614806565b6119495760405162461bcd60e51b815260040161054890614cec565b611952816150cd565b9050611881565b506002600354141561197d5760405162461bcd60e51b815260040161054890614e9a565b600260035584516000906001600160401b038111156119ac57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156119d5578160200160208202803683370190505b50905060005b8651811015611a26576001828281518110611a0657634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152611a1f816150cd565b90506119db565b50600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90611a5e90600190600401614c68565b60206040518083038186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae91906145a3565b60405163f0f25dd560e01b81529091506001600160a01b0382169063f0f25dd590611ae3908a908c908b908890600401614baf565b600060405180830381600087803b158015611afd57600080fd5b505af1158015611b11573d6000803e3d6000fd5b50505050876001600160a01b03167fe74c23878a8558dd68d0e6448fc8c06e1c5b0652bc2d0181d9e95797d9cb7c41888860405161088f929190614bf7565b6035546001600160a01b03163314611b7a5760405162461bcd60e51b815260040161054890614c90565b818160008060029054906101000a90046001600160a01b03166001600160a01b0316636f8c3f8a60036040518263ffffffff1660e01b8152600401611bbf9190614c68565b60206040518083038186803b158015611bd757600080fd5b505afa158015611beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0f91906145a3565b90508151835114611c325760405162461bcd60e51b815260040161054890614dab565b60005b8351811015611d0d57816001600160a01b031663ea0db296858381518110611c6d57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611c919190614a8a565b60206040518083038186803b158015611ca957600080fd5b505afa158015611cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce19190614806565b611cfd5760405162461bcd60e51b815260040161054890614cec565b611d06816150cd565b9050611c35565b5060026003541415611d315760405162461bcd60e51b815260040161054890614e9a565b600260035584516000906001600160401b03811115611d6057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d89578160200160208202803683370190505b509050600086516001600160401b03811115611db557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611dde578160200160208202803683370190505b50905060005b8751811015611e2f576001838281518110611e0f57634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152611e28816150cd565b9050611de4565b506000806000611e3f8a8a6134f7565b925092509250611e508a8a86613b52565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90611e8790600190600401614c68565b60206040518083038186803b158015611e9f57600080fd5b505afa158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed791906145a3565b9050806001600160a01b0316635702ea2a8c8e858a6040518563ffffffff1660e01b8152600401611f0b9493929190614baf565b600060405180830381600087803b158015611f2557600080fd5b505af1158015611f39573d6000803e3d6000fd5b5050505060005b8b5181101561201a5760008c8281518110611f6b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611f9757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000878481518110611fc357634e487b7160e01b600052603260045260246000fd5b60200260200101519050611fd78383613f87565b6001600160a01b03831660009081526038602052604081208054839290611fff908490615033565b9250508190555050505080612013906150cd565b9050611f40565b508b6001600160a01b03167f3e5de4d4037a75074ae26c1254648d020c004bfbee680cd606953c27223c126e8c8c604051612056929190614bf7565b60405180910390a25050600160035550505050505050505050565b600054610100900460ff1661208c5760005460ff1615612090565b303b155b6120ac5760405162461bcd60e51b815260040161054890614d38565b600054610100900460ff161580156120ce576000805461ffff19166101011790555b6001600160a01b0383166120f45760405162461bcd60e51b815260040161054890614d86565b6120fe8585614093565b603580546001600160a01b0319166001600160a01b038516179055603c805463ffffffff191663ffffffff84161790558015612140576000805461ff00191690555b5050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161217c9190600401614c68565b60206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc91906145a3565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016121f79190614a8a565b60206040518083038186803b15801561220f57600080fd5b505afa158015612223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122479190614806565b6122a65760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b6064820152608401610548565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b60025481101561232c57600281815481106122f857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561231c57600191505b612325816150cd565b90506122cd565b508061237e57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b6001600160a01b0381166000908152603960209081526040918290208054835181840281018401909452808452606093928301828280156123ec57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116123ce575b50505050509050919050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161242d9190600401614c68565b60206040518083038186803b15801561244557600080fd5b505afa158015612459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247d91906145a3565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016124a89190614a8a565b60206040518083038186803b1580156124c057600080fd5b505afa1580156124d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f89190614806565b6125145760405162461bcd60e51b815260040161054890614df8565b603580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526039602090815260408083208054825181850281018501909352808352849384939291908301828280156125a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612584575b5050505050905060005b815181101561262c5760008282815181106125d757634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038089166000908152603684526040808220928416825291909352909120549091506126169085615033565b9350508080612624906150cd565b9150506125ac565b50909392505050565b3360009081526001602052604090205460ff166126645760405162461bcd60e51b815260040161054890614e46565b600260035414156126875760405162461bcd60e51b815260040161054890614e9a565b6002600355600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906126c390600190600401614c68565b60206040518083038186803b1580156126db57600080fd5b505afa1580156126ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271391906145a3565b90506000826001600160401b0381111561273d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612766578160200160208202803683370190505b5090506000836001600160401b0381111561279157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156127ba578160200160208202803683370190505b50905060005b848110156129545760008686838181106127ea57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906127ff9190614580565b6001600160a01b038082166000908152603660209081526040808320938d1683529290522060010154909150806128b25760405162461bcd60e51b815260206004820152604b60248201527f496e746572636f6e6e656374733a3a636c61696d4c70466565733a204c50206660448201527f6565207265776172642062616c616e6365206d7573742062652067726561746560648201526a72207468616e207a65726f60a81b608482015260a401610548565b6001600160a01b038083166000908152603660209081526040808320938d168352929052908120600101558451819086908590811061290157634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600184848151811061292f57634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101525081905061294c816150cd565b9150506127c0565b5060405163f0f25dd560e01b81526001600160a01b0384169063f0f25dd59061298990889088908b9088908890600401614afa565b600060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b50505050856001600160a01b03167f85de76e33a0549b6782937a91bc55eb27cc8f5554c303a9e263cac55e52c929386866040516129f6929190614ade565b60405180910390a25050600160035550505050565b60028181548110612a1b57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526001602052604090205460ff16612a645760405162461bcd60e51b815260040161054890614e46565b828114612ac95760405162461bcd60e51b815260206004820152604b602482015260008051602061518d833981519152604482015260008051602061514d83398151915260648201526a1cdd08189948195c5d585b60aa1b608482015260a401610548565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90612b0090600390600401614c68565b60206040518083038186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5091906145a3565b600080546040516337c61fc560e11b81529293509091620100009091046001600160a01b031690636f8c3f8a90612b8c90600190600401614c68565b60206040518083038186803b158015612ba457600080fd5b505afa158015612bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdc91906145a3565b90506000856001600160401b03811115612c0657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c2f578160200160208202803683370190505b5090506000846001600160401b03811115612c5a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c83578160200160208202803683370190505b5090506000876001600160401b03811115612cae57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612cd7578160200160208202803683370190505b50905060005b8881101561320a57856001600160a01b031663b17f0b638b8b84818110612d1457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612d299190614580565b6040518263ffffffff1660e01b8152600401612d459190614a8a565b60206040518083038186803b158015612d5d57600080fd5b505afa158015612d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d959190614806565b612e075760405162461bcd60e51b8152602060048201526049602482015260008051602061518d83398151915260448201527f205468697320746f6b656e206973206e6f7420616363657074696e67204c5020606482015268706f736974696f6e7360b81b608482015260a401610548565b60008a8a83818110612e2957634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612e3e9190614580565b90506000898984818110612e6257634e487b7160e01b600052603260045260246000fd5b90506020020135118015612f1c575060405163168e0c9960e31b81526001600160a01b0382811660048301528d8116602483015287169063b47064c89060440160206040518083038186803b158015612eba57600080fd5b505afa158015612ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef291906148fb565b898984818110612f1257634e487b7160e01b600052603260045260246000fd5b9050602002013511155b612fb35760405162461bcd60e51b8152602060048201526068602482015260008051602061518d83398151915260448201527f204c5020616d6f756e74206d7573742062652067726561746572207468616e2060648201527f7a65726f20616e64206e6f206d6f7265207468616e20746865207573657227736084820152672062616c616e636560c01b60a482015260c401610548565b80858381518110612fd457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505088888381811061301457634e487b7160e01b600052603260045260246000fd5b9050602002013584838151811061303b57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600083838151811061306957634e487b7160e01b600052603260045260246000fd5b60200260200101901515908115158152505060366000826001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600001546000141561310e576001600160a01b0381811660009081526039602090815260408220805460018101825590835291200180546001600160a01b031916918e169190911790555b88888381811061312e57634e487b7160e01b600052603260045260246000fd5b9050602002013560366000836001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600001600082825461318f9190615033565b9091555089905088838181106131b557634e487b7160e01b600052603260045260246000fd5b9050602002013560376000836001600160a01b03166001600160a01b0316815260200190815260200160002060008282546131f09190615033565b909155508291506132029050816150cd565b915050612cdd565b5060405163f0f25dd560e01b81526001600160a01b0385169063f0f25dd59061323d9086908e9087908790600401614baf565b600060405180830381600087803b15801561325757600080fd5b505af115801561326b573d6000803e3d6000fd5b50505050896001600160a01b03167f22e6ae20e2e0df5f416bcd6e7f6d19e21922b83a293acce479b03994e40120718a8a8a8a6040516132ae9493929190614b4f565b60405180910390a250505050505050505050565b6000806000806132d185614235565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa15801561332c573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b603a816040516133519190614a6e565b9081526040519081900360200190205460ff16156133cf5760405162461bcd60e51b815260206004820152603560248201527f496e746572636f6e6e656374733a3a6d61726b54786e4173436f6d706c657465604482015274643a20416c726561647920636f6d706c657465642160581b6064820152608401610548565b6001603a826040516133e19190614a6e565b908152604051908190036020019020805491151560ff1990921691909117905550565b606081516001600160401b0381111561342d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613456578160200160208202803683370190505b50905060005b82518110156134f157603c548351620f42409163ffffffff169085908490811061349657634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516134ac919061506b565b6134b6919061504b565b8282815181106134d657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526134ea816150cd565b905061345c565b50919050565b600080546040516337c61fc560e11b815260609283928392620100009091046001600160a01b031690636f8c3f8a9061353590600390600401614c68565b60206040518083038186803b15801561354d57600080fd5b505afa158015613561573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358591906145a3565b90506000816001600160a01b03166350e7fc376040518163ffffffff1660e01b815260040160206040518083038186803b1580156135c257600080fd5b505afa1580156135d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fa919061492f565b90506000826001600160a01b031663804773c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561363757600080fd5b505afa15801561364b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366f919061492f565b90506000836001600160a01b031663967cb96e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136ac57600080fd5b505afa1580156136c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e4919061492f565b905088516001600160401b0381111561370d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613736578160200160208202803683370190505b50965088516001600160401b0381111561376057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613789578160200160208202803683370190505b50955088516001600160401b038111156137b357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156137dc578160200160208202803683370190505b50945060005b8951811015613b465760008a828151811061380d57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000866001600160a01b031663eab12c95836040518263ffffffff1660e01b81526004016138459190614a8a565b60206040518083038186803b15801561385d57600080fd5b505afa158015613871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389591906148fb565b905060006138a283612536565b604051637d471f9760e01b81526001600160a01b038a1690637d471f97906138ce908790600401614a8a565b60206040518083038186803b1580156138e657600080fd5b505afa1580156138fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391e91906148fb565b613928919061506b565b6001600160a01b0384166000908152603760205260409020546139529063ffffffff8a169061506b565b61395c919061504b565b905060006139708263ffffffff891661506b565b8d868151811061399057634e487b7160e01b600052603260045260246000fd5b60200260200101518a6001600160a01b03166372836bcf876040518263ffffffff1660e01b81526004016139c49190614a8a565b60206040518083038186803b1580156139dc57600080fd5b505afa1580156139f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1491906148fb565b613a1e919061506b565b613a28919061504b565b905063ffffffff8616613a3b848361506b565b613a45919061504b565b8c8681518110613a6557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508b8581518110613a9157634e487b7160e01b600052603260045260246000fd5b602002602001015181613aa4919061508a565b8b8681518110613ac457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050808d8681518110613af157634e487b7160e01b600052603260045260246000fd5b6020026020010151613b03919061508a565b8a8681518110613b2357634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050508080613b3e906150cd565b9150506137e2565b50505050509250925092565b81518351148015613b64575080518351145b613bf65760405162461bcd60e51b8152602060048201526063602482015260008051602061516d83398151915260448201527f42616c616e6365733a204c656e677468206f6620746f6b656e732c20616d6f7560648201527f6e74732c20616e64206164642f7375627472616374206d7573742062652065716084820152621d585b60ea1b60a482015260c401610548565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90613c2d90600390600401614c68565b60206040518083038186803b158015613c4557600080fd5b505afa158015613c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7d91906145a3565b905060005b8451811015613f4557816001600160a01b031663b17f0b63868381518110613cba57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401613cde9190614a8a565b60206040518083038186803b158015613cf657600080fd5b505afa158015613d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2e9190614806565b613da95760405162461bcd60e51b8152602060048201526052602482015260008051602061516d83398151915260448201527f42616c616e6365733a205468697320746f6b656e206973206e6f7420616363656064820152717074696e67204c5020706f736974696f6e7360701b608482015260a401610548565b6000838281518110613dcb57634e487b7160e01b600052603260045260246000fd5b602002602001015115613e5e57848281518110613df857634e487b7160e01b600052603260045260246000fd5b602002602001015160376000888581518110613e2457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054613e579190615033565b9050613ee0565b848281518110613e7e57634e487b7160e01b600052603260045260246000fd5b602002602001015160376000888581518110613eaa57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054613edd919061508a565b90505b8060376000888581518110613f0557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550508080613f3d906150cd565b915050613c82565b507f092d5ff091ec017019ed95dfec6b3f8524e73fc3a80d5fee8f763e1829aed54b848484604051613f7993929190614c25565b60405180910390a150505050565b6000613f9283612536565b905060005b6001600160a01b03841660009081526039602052604090205481101561408d576001600160a01b0384166000908152603960205260408120805483908110613fef57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03888116845260368352604080852091909216808552925290912054909150839061402f908661506b565b614039919061504b565b6001600160a01b03808716600090815260366020908152604080832093861683529290529081206001018054909190614073908490615033565b909155508291506140859050816150cd565b915050613f97565b50505050565b600054610100900460ff166140ae5760005460ff16156140b2565b303b155b6140ce5760405162461bcd60e51b815260040161054890614d38565b600054610100900460ff161580156140f0576000805461ffff19166101011790555b6001600160a01b0382166141165760405162461bcd60e51b815260040161054890614d86565b60005b835181101561418c5760006001600160a01b031684828151811061414d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561417c5760405162461bcd60e51b815260040161054890614d86565b614185816150cd565b9050614119565b5060005b83518110156142005760018060008684815181106141be57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556141f9816150cd565b9050614190565b508251614214906002906020860190614338565b5061421e826142a4565b8015614230576000805461ff00191690555b505050565b600080600083516041146142865760405162461bcd60e51b81526020600482015260186024820152770d2dcecc2d8d2c840e6d2cedcc2e8eae4ca40d8cadccee8d60431b6044820152606401610548565b50505060208101516040820151606090920151909260009190911a90565b600054610100900460ff166142bf5760005460ff16156142c3565b303b155b6142df5760405162461bcd60e51b815260040161054890614d38565b600054610100900460ff16158015614301576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561237e576000805461ff00191690555050565b82805482825590600052602060002090810192821561438d579160200282015b8281111561438d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614358565b5061439992915061439d565b5090565b5b80821115614399576000815560010161439e565b80356143bd81615114565b919050565b60008083601f8401126143d3578182fd5b5081356001600160401b038111156143e9578182fd5b6020830191508360208260051b850101111561440457600080fd5b9250929050565b600082601f83011261441b578081fd5b8135602061443061442b83615010565b614fe0565b80838252828201915082860187848660051b890101111561444f578586fd5b855b8581101561447657813561446481615114565b84529284019290840190600101614451565b5090979650505050505050565b600082601f830112614493578081fd5b813560206144a361442b83615010565b80838252828201915082860187848660061b89010111156144c2578586fd5b855b8581101561447657604080838b0312156144dc578788fd5b6144e4614f96565b83356144ef81615114565b81528387013587820152855293850193909101906001016144c4565b80356143bd8161512c565b600082601f830112614526578081fd5b81356001600160401b0381111561453f5761453f6150fe565b614552601f8201601f1916602001614fe0565b818152846020838601011115614566578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614591578081fd5b813561459c81615114565b9392505050565b6000602082840312156145b4578081fd5b815161459c81615114565b600080604083850312156145d1578081fd5b82356145dc81615114565b915060208301356145ec81615114565b809150509250929050565b60008060006040848603121561460b578081fd5b833561461681615114565b925060208401356001600160401b03811115614630578182fd5b61463c868287016143c2565b9497909650939450505050565b600080600080600060608688031215614660578283fd5b853561466b81615114565b945060208601356001600160401b0380821115614686578485fd5b61469289838a016143c2565b909650945060408801359150808211156146aa578283fd5b506146b7888289016143c2565b969995985093965092949392505050565b6000806000606084860312156146dc578081fd5b83356146e781615114565b92506020848101356001600160401b0380821115614703578384fd5b61470f8883890161440b565b94506040870135915080821115614724578384fd5b508501601f81018713614735578283fd5b803561474361442b82615010565b8082825284820191508484018a868560051b8701011115614762578687fd5b8694505b83851015614784578035835260019490940193918501918501614766565b5080955050505050509250925092565b600080600080608085870312156147a9578182fd5b84356001600160401b038111156147be578283fd5b6147ca8782880161440b565b94505060208501356147db81615114565b925060408501356147eb81615114565b915060608501356147fb8161513a565b939692955090935050565b600060208284031215614817578081fd5b815161459c8161512c565b600060208284031215614833578081fd5b81356001600160401b0380821115614849578283fd5b9083019060c0828603121561485c578283fd5b614864614fbe565b61486d836143b2565b8152602083013560208201526148856040840161450b565b6040820152606083013560608201526080830135828111156148a5578485fd5b6148b187828601614483565b60808301525060a0830135828111156148c8578485fd5b6148d487828601614516565b60a08301525095945050505050565b6000602082840312156148f4578081fd5b5035919050565b60006020828403121561490c578081fd5b5051919050565b600060208284031215614924578081fd5b813561459c8161513a565b600060208284031215614940578081fd5b815161459c8161513a565b81835260006020808501945082825b8581101561498857813561496d81615114565b6001600160a01b03168752958201959082019060010161495a565b509495945050505050565b6000815180845260208085019450808401835b838110156149885781516001600160a01b0316875295820195908201906001016149a6565b6000815180845260208085019450808401835b838110156149885781511515875295820195908201906001016149de565b6000815180845260208085019450808401835b8381101561498857815180516001600160a01b031688528301518388015260409096019590820190600101614a0f565b6000815180845260208085019450808401835b8381101561498857815187529582019590820190600101614a52565b60008251614a808184602087016150a1565b9190910192915050565b6001600160a01b0391909116815260200190565b60018060a01b0386168152846020820152831515604082015282606082015260a060808201526000614ad360a08301846149fc565b979650505050505050565b602081526000614af260208301848661494b565b949350505050565b608081526000614b0e60808301878961494b565b6001600160a01b03861660208401528281036040840152614b2f8186614a3f565b90508281036060840152614b4381856149cb565b98975050505050505050565b604081526000614b6360408301868861494b565b82810360208401528381526001600160fb1b03841115614b81578182fd5b8360051b808660208401370160200190815295945050505050565b60208152600061459c6020830184614993565b608081526000614bc26080830187614993565b6001600160a01b03861660208401528281036040840152614be38186614a3f565b90508281036060840152614ad381856149cb565b604081526000614c0a6040830185614993565b8281036020840152614c1c8185614a3f565b95945050505050565b606081526000614c386060830186614993565b8281036020840152614c4a8186614a3f565b90508281036040840152614c5e81856149cb565b9695505050505050565b60208101600e8310614c8a57634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252603c908201527f496e746572636f6e6e656374733a3a6f6e6c7952656c61794163636f756e743a60408201527b0810d85b1b195c881a5cc81b9bdd081c995b185e481858d8dbdd5b9d60221b606082015260800190565b602080825260409082018190526000805160206151cd833981519152908201527f20546f6b656e206973206e6f7420616363657074696e67206272696467696e67606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b6020808252604b908201526000805160206151cd833981519152604082015260008051602061514d83398151915260608201526a1cdd08189948195c5d585b60aa1b608082015260a00190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602080835260018060a01b038451168184015280840151604084015260408401511515606084015260608401516080840152608084015160c060a0850152614f1e60e08501826149fc565b905060a0850151601f19808684030160c08701528151808452614f46818686018786016150a1565b601f011691909101909101949350505050565b8481526001600160a01b0384166020820152608060408201819052600090614f83908301856149fc565b9050821515606083015295945050505050565b604080519081016001600160401b0381118282101715614fb857614fb86150fe565b60405290565b60405160c081016001600160401b0381118282101715614fb857614fb86150fe565b604051601f8201601f191681016001600160401b0381118282101715615008576150086150fe565b604052919050565b60006001600160401b03821115615029576150296150fe565b5060051b60200190565b60008219821115615046576150466150e8565b500190565b60008261506657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615085576150856150e8565b500290565b60008282101561509c5761509c6150e8565b500390565b60005b838110156150bc5781810151838201526020016150a4565b8381111561408d5750506000910152565b60006000198214156150e1576150e16150e8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461512957600080fd5b50565b801515811461512957600080fd5b63ffffffff8116811461512957600080fdfe204c656e677468206f6620746f6b656e7320616e6420616d6f756e7473206d75496e746572636f6e6e656374733a3a757064617465546f6b656e506f6f6c4c70496e746572636f6e6e656374733a3a70726f766964654c69717569646974793a496e746572636f6e6e656374733a3a74616b654c69717569646974793a204c50496e746572636f6e6e656374733a3a76616c69646174654272696467696e673aa2646970667358221220f6eaf69dd6f8a806d855fda1a7880b5c91a4e0add968ffb0de85c2db02a3a6eb64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bridgeFrom(address,address[],uint256[])": {
        "details": "Wrapper around userPositions func to decrease user's token balance",
        "params": {
          "amounts": "Array of the token amounts",
          "tokens": "Array of the token addresses",
          "user": "user bridging"
        }
      },
      "bridgeTo(address,address[],uint256[])": {
        "details": "Wrapper around userPositions func, updateTokenPoolLpBalances, and feeHandler",
        "params": {
          "amounts": "Array of the token amounts",
          "tokens": "Array of the token addresses",
          "user": "user bridging"
        }
      },
      "claimLpFeeRewards(address,address[])": {
        "params": {
          "tokens": "Array of the token addresses",
          "user": "Address of the account LP-ing"
        }
      },
      "getRelayAccount()": {
        "returns": {
          "_0": "The address of the gas account"
        }
      },
      "getTokenLpUsers(address)": {
        "params": {
          "asset": "Address of the ERC20 token contract"
        }
      },
      "getTokenPoolLpActivePositions(address)": {
        "details": "this returns the sum of all active LP positions for a given token. This is different than the LP balance, as the LP balance is the available amount of this sum. This number is gte the LP balance, usually greater than.",
        "params": {
          "asset": "Address of the ERC20 token contract"
        }
      },
      "getTokenPoolLpBalance(address)": {
        "params": {
          "asset": "Address of the ERC20 token contract"
        }
      },
      "getTokenProtocolFeeRewards(address)": {
        "params": {
          "asset": "Address of the ERC20 token contract"
        }
      },
      "getTokenUserLpBalance(address,address)": {
        "params": {
          "asset": "Address of the ERC20 token contract",
          "user": "Address of the user account"
        }
      },
      "getTokenUserLpFeeRewardBalance(address,address)": {
        "params": {
          "asset": "Address of the ERC20 token contract",
          "user": "Address of the user account"
        }
      },
      "initialize(address[],address,address,uint32)": {
        "params": {
          "_rseFeeNumerator": "The numerator for RSE fees. Denominator is 1,000,000. So 10,000 = 1% fee.",
          "controllers_": "The addresses of the controlling contracts",
          "moduleMap_": "Address of the Module Map",
          "relayAccount_": "The address of the relay account that will control this account"
        }
      },
      "provideLiquidity(address,address[],uint256[])": {
        "params": {
          "amounts": "Array of the token amounts",
          "tokens": "Array of the token addresses",
          "user": "Address of the account LP-ing"
        }
      },
      "takeLiquidity(address,address[],uint256[])": {
        "params": {
          "amounts": "Array of the token amounts",
          "tokens": "Array of the token addresses",
          "user": "Address of the account LP-ing"
        }
      },
      "undoBridgeFrom(address,address[],uint256[])": {
        "details": "Wrapper around userPositions func to increase user's token balance",
        "params": {
          "amounts": "Array of the token amounts",
          "tokens": "Array of the token addresses",
          "user": "user bridging"
        }
      },
      "updateRSEFeeNumerator(uint32)": {
        "params": {
          "numerator": "fee numerator"
        }
      },
      "updateRelayAccount(address)": {
        "params": {
          "relayAccount_": "The address of the relay account"
        }
      },
      "verifyRSE((address,uint256,bool,uint256,(address,uint256)[],bytes))": {
        "details": "this function verifies that the signature is from the signer and contains the correct hashed contents",
        "params": {
          "req": "- RSE request as struct RemoteStrategyExecutionBody"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimLpFeeRewards(address,address[])": {
        "notice": "User is allowed to claim fees"
      },
      "provideLiquidity(address,address[],uint256[])": {
        "notice": "User is allowed to LP whitelisted tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11341,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)22677"
      },
      {
        "astId": 5851,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5854,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 783,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 827,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8083,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_relayAccount",
        "offset": 0,
        "slot": "53",
        "type": "t_address_payable"
      },
      {
        "astId": 8090,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_tokenUserLpBalances",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(lpData)21987_storage))"
      },
      {
        "astId": 8094,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_tokenPoolLpBalances",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8098,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_tokenProtocolFeeRewards",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8103,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_tokenLpUsers",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8107,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "relayTxns",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      {
        "astId": 8111,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "_tokenRSEFees",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8116,
        "contract": "contracts/core/Interconnects.sol:Interconnects",
        "label": "rseFeeNumerator",
        "offset": 0,
        "slot": "60",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IModuleMap)22677": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(lpData)21987_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IInterconnects.lpData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(lpData)21987_storage)"
      },
      "t_mapping(t_address,t_struct(lpData)21987_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInterconnects.lpData)",
        "numberOfBytes": "32",
        "value": "t_struct(lpData)21987_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(lpData)21987_storage": {
        "encoding": "inplace",
        "label": "struct IInterconnects.lpData",
        "members": [
          {
            "astId": 21984,
            "contract": "contracts/core/Interconnects.sol:Interconnects",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21986,
            "contract": "contracts/core/Interconnects.sol:Interconnects",
            "label": "rewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}