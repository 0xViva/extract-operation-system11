{
  "address": "0x033B6dB7f4926a93343C9C7Ae229c554107eacF6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LPTokensAcquired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenSold",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenBought",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBought",
          "type": "uint256"
        }
      ],
      "name": "PoolRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnFromPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "masterChefPoolId",
          "type": "uint256"
        }
      ],
      "name": "configureStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "masterChefPoolId",
          "type": "uint256"
        }
      ],
      "name": "configureStakingOverwrite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getPendingYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pid",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionID",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAMMIntegration.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getPoolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "sushiRatioX1000",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "convertToWeth",
          "type": "bool"
        }
      ],
      "name": "harvestYieldByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "incrementBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "masterChef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sushi_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "manualDeploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "manualWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceCeilings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellTokenB",
          "type": "uint256"
        }
      ],
      "name": "rebalancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "stakeLPTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "yieldBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x672e11c4bcd9e00c76593ab884048bf37493ca569cf2a6dd16f4c14a3eca125d",
  "receipt": {
    "to": null,
    "from": "0xBf98f6DF65dfa2f2b50d4a806cF134A209C7D364",
    "contractAddress": "0x033B6dB7f4926a93343C9C7Ae229c554107eacF6",
    "transactionIndex": 103,
    "gasUsed": "4154136",
    "logsBloom": "0x
    "blockHash": "0x63014b25675e926ee994b837c81dd2508f7cdaef3e65821dca2556df7e6ff05b",
    "transactionHash": "0x672e11c4bcd9e00c76593ab884048bf37493ca569cf2a6dd16f4c14a3eca125d",
    "logs": [],
    "blockNumber": 13763313,
    "cumulativeGasUsed": "10488055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "493de292305f60f8329e41bdd61b6457",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPTokensAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBought\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"PoolRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPoolId\",\"type\":\"uint256\"}],\"name\":\"configureStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPoolId\",\"type\":\"uint256\"}],\"name\":\"configureStakingOverwrite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pid\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"internalType\":\"struct IAMMIntegration.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sushiRatioX1000\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"convertToWeth\",\"type\":\"bool\"}],\"name\":\"harvestYieldByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterChef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"manualDeploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"manualWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceCeilings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTokenB\",\"type\":\"uint256\"}],\"name\":\"rebalancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"stakeLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"yieldBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,uint32)\":{\"params\":{\"amount\":\"The amount of the token being deposited\",\"tokenAddress\":\"The address of the deposited token\"}},\"getAmountOut(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOut\":\"The estimated amount of tokenOut to receive\"}},\"getAmountOutMinimum(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOutMinimum\":\"The minimum amount of tokenOut to receive, factoring in allowable slippage\"}},\"getBalance(uint32,address)\":{\"returns\":{\"_0\":\"tokenAddress The address of the token to get the balance of\"}},\"getPendingYield(address,uint256)\":{\"details\":\"Returns total amount of pending yield in SUSHI rewards\",\"params\":{\"poolId\":\"the masterchef pool to retrieve yield for\",\"token\":\"The pool address to check for pending SUSHI rewards\"},\"returns\":{\"_0\":\"Amount of yield available for harvest\"}},\"incrementBalance(uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount of the token being deposited\",\"token\":\"The address of the deposited token\"}},\"initialize(address[],address,address,address,address,address,uint24)\":{\"params\":{\"controllers_\":\"The address of the controlling contract\",\"factoryAddress_\":\"The address of the SushiSwap factory contract\",\"swapRouterAddress_\":\"The address of the Sushi swap router contract\"}},\"rebalancePool(uint32,uint256,uint256,uint256)\":{\"params\":{\"maxSellTokenA\":\"max amount of tokenA to sell (to limit rebalancing)\",\"maxSellTokenB\":\"max amount of tokenB to sell (to limit rebalancing)\",\"poolId\":\"The ID of the pool to rebalance\",\"ratioX1000\":\"reserves ratio to control the price slippage\"}},\"withdraw(address,uint256,uint32)\":{\"params\":{\"amount\":\"The amoutn of the token to withdraw\",\"tokenAddress\":\"The address of the underlying token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"harvestYieldByPool(uint32,uint256,bool)\":{\"notice\":\"Harvest available yield for desired pool\"},\"rebalancePool(uint32,uint256,uint256,uint256)\":{\"notice\":\"Rebalances by attempting to swap up to max to get into position ratio\"},\"withdraw(address,uint256,uint32)\":{\"notice\":\"Withdraws token from the integration\"}},\"notice\":\"Integrates 0x Nodes to SushiSwap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yield-integrations/SushiSwapIntegration.sol\":\"SushiSwapIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0c85e40b29481eadb132cb5eb973d27b4567098f4bc257b250ee540d8d309a00\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(\\n        address[] memory controllers_,\\n        address moduleMap_\\n    ) public initializer {\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender],\\n            \\\"Controlled::onlyController: Caller is not controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d695827316f9115bdeefad43183295fe65948c7ca5489ba6718fbbb01bfbcb8\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    /// @dev IMPORTANT: poolID starts at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n    /// For UniswapV2 and Sushiswap, retrieve the pool address by calling the Router.\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Manually deploy all tokens for specified pools\\n    /// @dev Should be restricted to manager!\\n    function manualDeploy(uint32 poolID) external;\\n\\n    /// @notice Returns the balance of a specific pool\\n    /// @param poolID  the id of the pool to return balances from\\n    function getPoolBalance(uint32 poolID)\\n        external\\n        view\\n        returns (uint256 tokenA, uint256 tokenB);\\n\\n    /// @notice returns the details of an amm pool\\n    /// @dev This should throw if poolID is == 0\\n    /// @param poolID  the ID of the pool to retrieve details for\\n    function getPool(uint32 poolID) external view returns (Pool memory pool);\\n\\n    /// @notice Adds an existing position to the integration for use in a strategy\\n    /// @dev Should be restricted to admin accounts\\n    /// @param tokenA  The first token in the position\\n    /// @param tokenB the second token in the position\\n    /// @param positionID  The position id if required (uniswap v3)\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 positionID\\n    ) external;\\n\\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\\n    /// @dev Should be restricted to admin accounts\\n    /// @param poolId the ID of the pool to rebalance\\n    /// @param maxSellTokenA max amount of tokenA to sell\\n    /// @param maxSellTokenB max amount of tokenB to sell\\n    function rebalancePool(\\n        uint32 poolId,\\n        uint256 ratioX1000,\\n        uint256 maxSellTokenA,\\n        uint256 maxSellTokenB\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb7c20393e7da381e6f766a929de655e8d98591133cd455aed19ea0717660a6\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    //tmp here\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xcf2ea6188f0ad2411a8225aa311a9c4a8708150b6be58b7d46f70f5bae932668\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegrationMap {\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name)\\n        external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(\\n        address tokenAddress,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum()\\n        external\\n        view\\n        returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The value that gets divided by the reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The token reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xb3bc295c55ca8bd4b63f10158726523ccde1678bf9f4b823ffcff06709f4a9b7\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x08be11fd0262ea7f3e2993e5f5038b74b65dd4269ad880372837e026fd9f84e0\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdb1498bb69e27f66294c377b9ca1591aa13284a63e2dbf944112ec32414bf91d\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapFactory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0x4d05d9a629bde20a6cd70b8d1f43abe6409aedf7057eb40e31cab629af6b8bf1\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ISushiSwapMasterChef {\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\\n    }\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    function poolInfo(uint256 input) external returns (PoolInfo memory);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingSushi(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0x55e54c1c72f2b92ebc57243696b9eaefb908c80801f002b41c7b08aeddd927da\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf635c095a6f32254bbba62fb6b1e40db3874008a345c304e99ab6145952c73c8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n}\\n\",\"keccak256\":\"0x6a083b351fb57e04a1f00bd32d27f15a6987b7b9c8f341431c6de792d628ebf1\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IWeth9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IWeth9 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    /// @param wad The amount of wETH to withdraw into ETH\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x122212ebb8fe6d0190bf812f36fc33de4c1d0539a6d9ef33e34ad05724fa2056\",\"license\":\"GPL-2.0\"},\"contracts/yield-integrations/SushiSwapIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../core/Controlled.sol\\\";\\nimport \\\"../core/ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/ISushiSwapFactory.sol\\\";\\nimport \\\"../interfaces/ISushiSwapRouter.sol\\\";\\nimport \\\"../interfaces/ISushiSwapPair.sol\\\";\\nimport \\\"../interfaces/ISushiSwapMasterChef.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to SushiSwap\\ncontract SushiSwapIntegration is Controlled, IAMMIntegration {\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n    uint24 slippageNumerator;\\n\\n    address factoryAddress;\\n    address swapRouterAddress;\\n    address masterChef;\\n    address sushi;\\n    address wethAddress;\\n\\n    mapping(uint256 => Pool) private pools;\\n    uint32 public poolCount;\\n    uint32[] private poolIds;\\n    // poolId => MasterChef's poolId\\n    mapping(uint32 => uint256) private stakings;\\n    // PoolId => Token => Amount\\n    mapping(uint256 => mapping(address => uint256)) private balances;\\n\\n    // Token price ceilings to add some protection against front-runners\\n    // pairAddress => ratio * 1000\\n    // DEPRECATED but this var has already been deployed and cannot be removed\\n    mapping(address => uint256) public priceCeilings;\\n\\n    // yield amounts\\n    mapping(uint32 => uint256) public yieldBalances;\\n\\n    event TokensReceived(uint256 amount);\\n    event LPTokensAcquired(uint256 amount);\\n    event DepositToPool(uint256 poolId, uint256 amount);\\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\\n    event YieldReceived(uint256 amount);\\n    event PoolRebalanced(\\n        uint256 poolId,\\n        address tokenSold,\\n        uint256 amountSold,\\n        address tokenBought,\\n        uint256 amountBought\\n    );\\n\\n    receive() external payable {}\\n\\n    /// @param controllers_ The address of the controlling contract\\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\\n    /// @param swapRouterAddress_ The address of the Sushi swap router contract\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address factoryAddress_,\\n        address swapRouterAddress_,\\n        address masterChef_,\\n        address sushi_,\\n        uint24 slippageNumerator_\\n    ) public initializer {\\n        __Controlled_init(controllers_, moduleMap_);\\n        factoryAddress = factoryAddress_;\\n        swapRouterAddress = swapRouterAddress_;\\n        masterChef = masterChef_;\\n        slippageNumerator = slippageNumerator_;\\n        sushi = sushi_;\\n        wethAddress = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        ).getWethTokenAddress();\\n    }\\n\\n    // third param positionID is unused for sushi\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256\\n    ) external override onlyManager {\\n        poolCount++;\\n        pools[poolCount].tokenA = tokenA;\\n        pools[poolCount].tokenB = tokenB;\\n        poolIds.push(poolCount);\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenA).allowance(\\n                address(this),\\n                swapRouterAddress\\n            ) < type(uint256).max\\n        ) {\\n            IERC20MetadataUpgradeable(tokenA).safeApprove(\\n                swapRouterAddress,\\n                type(uint256).max\\n            );\\n        }\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenB).allowance(\\n                address(this),\\n                swapRouterAddress\\n            ) < type(uint256).max\\n        ) {\\n            IERC20MetadataUpgradeable(tokenB).safeApprove(\\n                swapRouterAddress,\\n                type(uint256).max\\n            );\\n        }\\n    }\\n\\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId)\\n        external\\n        onlyManager\\n    {\\n        _configureStaking(poolId, masterChefPoolId, false);\\n    }\\n\\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId)\\n        external\\n        onlyManager\\n    {\\n        _configureStaking(poolId, masterChefPoolId, true);\\n    }\\n\\n    function _configureStaking(\\n        uint32 poolId,\\n        uint256 masterChefPoolId,\\n        bool overwrite\\n    ) internal {\\n        Pool memory pool = getPool(poolId);\\n        require(pool.tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        if (overwrite != true) {\\n            require(stakings[poolId] == 0, \\\"Staking already configured\\\");\\n        }\\n\\n        ISushiSwapMasterChef.PoolInfo memory poolInfo = ISushiSwapMasterChef(\\n            masterChef\\n        ).poolInfo(masterChefPoolId);\\n\\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\\n\\n        require(\\n            address(poolInfo.lpToken) == pairAddress,\\n            \\\"Incorrect MasterChef's poolId was provided\\\"\\n        );\\n\\n        stakings[poolId] = masterChefPoolId;\\n\\n        // let master chef pull tokens\\n        if (\\n            IERC20MetadataUpgradeable(pairAddress).allowance(\\n                address(this),\\n                masterChef\\n            ) < type(uint256).max\\n        ) {\\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(\\n                masterChef,\\n                type(uint256).max\\n            );\\n        }\\n    }\\n\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId\\n    ) external override onlyController {\\n        balances[poolId][tokenAddress] += amount;\\n    }\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function incrementBalance(\\n        uint32 poolId,\\n        address token,\\n        uint256 amount\\n    ) external onlyManager {\\n        balances[poolId][token] += amount;\\n    }\\n\\n    function getPool(uint32 pid) public view override returns (Pool memory) {\\n        return pools[pid];\\n    }\\n\\n    /// @return tokenAddress The address of the token to get the balance of\\n    function getBalance(uint32 poolId, address tokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return balances[poolId][tokenAddress];\\n    }\\n\\n    function getPoolBalance(uint32 poolId)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenA, uint256 tokenB)\\n    {\\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\\n    }\\n\\n    function deploy(uint32 poolId) external override onlyController {\\n        _deploy(poolId);\\n    }\\n\\n    function manualDeploy(uint32 poolId) external override onlyManager {\\n        _deploy(poolId);\\n    }\\n\\n    function _deploy(uint32 poolId) internal {\\n        Pool memory pool = getPool(poolId);\\n\\n        require(pools[poolId].tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\\n\\n        if (balanceA == 0 || balanceB == 0) {\\n            return;\\n        } else {\\n            uint256 amountA;\\n            uint256 amountB;\\n            uint256 liquidityAcquired;\\n\\n            (uint256 reserveA, uint256 reserveB) = getReserves(\\n                pool.tokenA,\\n                pool.tokenB\\n            );\\n\\n            if (reserveA > reserveB) {\\n                uint256 k = (reserveA * 1000) / reserveB;\\n                uint256 balanceBA = (balanceB * k) / 1000;\\n\\n                if (balanceA < balanceBA) {\\n                    amountA = balanceA;\\n                    amountB = (balanceA * 1000) / k;\\n                } else if (balanceBA < balanceA) {\\n                    amountA = (balanceB * k) / 1000;\\n                    amountB = balanceB;\\n                } else {\\n                    amountA = balanceA;\\n                    amountB = balanceB;\\n                }\\n            } else if (reserveA < reserveB) {\\n                uint256 k = (reserveB * 1000) / reserveA;\\n                uint256 balanceAB = (balanceA * k) / 1000;\\n\\n                if (balanceB < balanceAB) {\\n                    amountA = (balanceB * 1000) / k;\\n                    amountB = balanceB;\\n                } else if (balanceAB < balanceB) {\\n                    amountA = balanceA;\\n                    amountB = (balanceA * k) / 1000;\\n                } else {\\n                    amountA = balanceA;\\n                    amountB = balanceB;\\n                }\\n            }\\n\\n            (, , liquidityAcquired) = ISushiSwapRouter(swapRouterAddress)\\n                .addLiquidity(\\n                    pool.tokenA,\\n                    pool.tokenB,\\n                    amountA,\\n                    amountB,\\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp\\n                );\\n\\n            balances[poolId][pool.tokenA] -= amountA;\\n            balances[poolId][pool.tokenB] -= amountB;\\n\\n            emit LPTokensAcquired(liquidityAcquired);\\n            emit DepositToPool(poolId, liquidityAcquired);\\n        }\\n    }\\n\\n    function stakeLPTokens(uint32 poolId) external onlyManager {\\n        Pool memory pool = pools[poolId];\\n        uint256 balance = IERC20MetadataUpgradeable(\\n            pairFor(pool.tokenA, pool.tokenB)\\n        ).balanceOf(address(this));\\n        if (balance > 0) {\\n            ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], balance);\\n        }\\n    }\\n\\n    function harvestYield() external onlyController {\\n        uint256 yieldAmount;\\n        for (uint32 i = 0; i < poolCount; i++) {\\n            yieldAmount += yieldBalances[poolIds[i]];\\n        }\\n        if (yieldAmount > 0) {\\n            IERC20MetadataUpgradeable(wethAddress).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.YieldManager),\\n                yieldAmount\\n            );\\n            emit YieldReceived(yieldAmount);\\n        }\\n    }\\n\\n    /// @notice Harvest available yield for desired pool\\n    function harvestYieldByPool(\\n        uint32 poolId,\\n        uint256 sushiRatioX1000, // price ratio for SUSHI!\\n        bool convertToWeth\\n    ) external onlyManager {\\n        // MasterChefV1 does not have an explicit harvest method\\n        // deposit 0 accomplishes the rewards harvesting\\n        ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], 0);\\n\\n        if (convertToWeth) {\\n            // check and convert any sushi\\n            uint256 sushiBalance = IERC20MetadataUpgradeable(sushi).balanceOf(\\n                address(this)\\n            );\\n\\n            if (sushiBalance > 0) {\\n                checkPriceCeiling(sushi, wethAddress, sushiRatioX1000);\\n                uint256[] memory amounts = swapExactInput(\\n                    sushi,\\n                    wethAddress,\\n                    address(this),\\n                    sushiBalance,\\n                    getAmountOutMinimum(sushi, wethAddress, sushiBalance)\\n                );\\n                yieldBalances[poolId] += amounts[1];\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraws token from the integration\\n    /// @param tokenAddress The address of the underlying token to withdraw\\n    /// @param amount The amoutn of the token to withdraw\\n    function withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId\\n    ) public override onlyController {\\n        if (amount <= getBalance(poolId, tokenAddress)) {\\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                amount\\n            );\\n            balances[poolId][tokenAddress] -= amount;\\n        } else {\\n            _withdraw(tokenAddress, amount, poolId, 0);\\n        }\\n    }\\n\\n    function manualWithdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000\\n    ) external onlyManager {\\n        if (amount <= getBalance(poolId, tokenAddress)) {\\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                amount\\n            );\\n            balances[poolId][tokenAddress] -= amount;\\n        } else {\\n            _withdraw(tokenAddress, amount, poolId, ratioX1000);\\n        }\\n    }\\n\\n    function getTokensPoolValue(uint32 poolId)\\n        internal\\n        view\\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\\n    {\\n        Pool memory pool = getPool(poolId);\\n\\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(\\n            address(this)\\n        ) +\\n            ISushiSwapMasterChef(masterChef)\\n                .userInfo(stakings[poolId], address(this))\\n                .amount;\\n\\n        uint256 sharePercent = (lpAmount * 10000000000) /\\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply();\\n\\n        amountOfTokenAInPool =\\n            (IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)) *\\n                sharePercent) /\\n            10000000000;\\n        amountOfTokenBInPool =\\n            (IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB)) *\\n                sharePercent) /\\n            10000000000;\\n    }\\n\\n    function getLiquidityToWithdraw(\\n        uint256 amountOfTokenAInPool,\\n        uint256 amountOfTokenBInPool,\\n        uint32 poolId,\\n        address tokenAddress,\\n        uint256 amount\\n    ) internal view returns (uint256 liquidityToWithdraw) {\\n        Pool memory pool = getPool(poolId);\\n\\n        uint256 estimatedTokenAAmount;\\n        uint256 estimatedTokenBAmount;\\n\\n        if (tokenAddress == pool.tokenA) {\\n            estimatedTokenAAmount = amount / 2;\\n            estimatedTokenBAmount = getAmountOut(\\n                tokenAddress,\\n                pool.tokenB,\\n                amount / 2\\n            );\\n        } else if (tokenAddress == pool.tokenB) {\\n            estimatedTokenAAmount = getAmountOut(\\n                tokenAddress,\\n                pool.tokenA,\\n                amount / 2\\n            );\\n            estimatedTokenBAmount = amount / 2;\\n        }\\n\\n        uint256 liquidityPercent;\\n\\n        if (\\n            estimatedTokenAAmount > amountOfTokenAInPool ||\\n            estimatedTokenBAmount > amountOfTokenBInPool\\n        ) {\\n            liquidityPercent = 100;\\n        } else {\\n            liquidityPercent =\\n                ((estimatedTokenAAmount + estimatedTokenBAmount) * 100) /\\n                (amountOfTokenAInPool + amountOfTokenBInPool);\\n        }\\n\\n        liquidityToWithdraw =\\n            (ISushiSwapMasterChef(masterChef)\\n                .userInfo(stakings[poolId], address(this))\\n                .amount * (liquidityPercent)) /\\n            100;\\n    }\\n\\n    function _withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000\\n    ) internal {\\n        Pool memory pool = getPool(poolId);\\n\\n        if (ratioX1000 > 0) {\\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\\n        }\\n\\n        (\\n            uint256 amountOfTokenAInPool,\\n            uint256 amountOfTokenBInPool\\n        ) = getTokensPoolValue(poolId);\\n\\n        uint256 liquidityToWithdraw = getLiquidityToWithdraw(\\n            amountOfTokenAInPool,\\n            amountOfTokenBInPool,\\n            poolId,\\n            tokenAddress,\\n            amount\\n        );\\n\\n        ISushiSwapMasterChef(masterChef).withdraw(\\n            stakings[poolId],\\n            liquidityToWithdraw\\n        );\\n\\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB))\\n            .safeApprove(swapRouterAddress, liquidityToWithdraw);\\n\\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(\\n            swapRouterAddress\\n        ).removeLiquidity(\\n                pool.tokenA,\\n                pool.tokenB,\\n                liquidityToWithdraw,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 360\\n            );\\n\\n        withdrawSwapAndEmit(\\n            pool,\\n            poolId,\\n            tokenAddress,\\n            amountTokenA,\\n            amountTokenB\\n        );\\n    }\\n\\n    function withdrawSwapAndEmit(\\n        Pool memory pool,\\n        uint32 poolId,\\n        address tokenAddress,\\n        uint256 amountTokenA,\\n        uint256 amountTokenB\\n    ) internal {\\n        uint256[] memory amountsOfTokenReceived;\\n\\n        if (tokenAddress == pool.tokenA) {\\n            amountsOfTokenReceived = swapExactInput(\\n                pool.tokenB,\\n                tokenAddress,\\n                address(this),\\n                amountTokenB,\\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\\n            );\\n\\n            IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                amountTokenA + amountsOfTokenReceived[1]\\n            );\\n\\n            emit WithdrawnFromPool(\\n                poolId,\\n                amountsOfTokenReceived[1] + amountTokenA\\n            );\\n        } else if (tokenAddress == pool.tokenB) {\\n            amountsOfTokenReceived = swapExactInput(\\n                pool.tokenA,\\n                tokenAddress,\\n                address(this),\\n                amountTokenA,\\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\\n            );\\n\\n            IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                amountTokenB + amountsOfTokenReceived[1]\\n            );\\n\\n            emit WithdrawnFromPool(\\n                poolId,\\n                amountsOfTokenReceived[1] + amountTokenB\\n            );\\n        }\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address of the token out recipient\\n    /// @param amountIn The exact amount of the input to swap\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) internal returns (uint256[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenIn;\\n        path[1] = tokenOut;\\n        uint256 deadline = block.timestamp;\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenIn).allowance(\\n                address(this),\\n                swapRouterAddress\\n            ) < amountIn\\n        ) {\\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(\\n                swapRouterAddress,\\n                amountIn\\n            );\\n        }\\n\\n        return\\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                recipient,\\n                deadline\\n            );\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOutMinimum) {\\n        amountOutMinimum =\\n            (getAmountOut(tokenIn, tokenOut, amountIn) *\\n                (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\\n            SLIPPAGE_DENOMINATOR;\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOut The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"amountIn must be greater than zero\\\");\\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n            tokenIn,\\n            tokenOut\\n        );\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"No liquidity in pool reserves\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * (997);\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return reserveA The reserve balance of tokenA in the pool\\n    /// @return reserveB The reserve balance of tokenB in the pool\\n    function getReserves(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(\\n            pairFor(tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @param token0 The address of sorted token0\\n    /// @param token1 The address of sorted token1\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical token addresses\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address\\\");\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return pair The address of the Sushi pool contract\\n    function pairFor(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\\n    }\\n\\n    /// @dev Returns total amount of pending yield in SUSHI rewards\\n    /// @param token  The pool address to check for pending SUSHI rewards\\n    /// @param poolId  the masterchef pool to retrieve yield for\\n    /// @return Amount of yield available for harvest\\n    function getPendingYield(address token, uint256 poolId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (token == address(0)) return 0;\\n\\n        return\\n            ISushiSwapMasterChef(masterChef).pendingSushi(\\n                poolId,\\n                address(this)\\n            );\\n    }\\n\\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\\n    /// @param poolId The ID of the pool to rebalance\\n    /// @param ratioX1000 reserves ratio to control the price slippage\\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\\n    function rebalancePool(\\n        uint32 poolId,\\n        uint256 ratioX1000,\\n        uint256 maxSellTokenA,\\n        uint256 maxSellTokenB\\n    ) external override onlyManager {\\n        Pool memory pool = getPool(poolId);\\n\\n        require(pools[poolId].tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\\n\\n        // determine which token and how much to swap\\n        (\\n            address swapToken,\\n            uint256 excessAmountToSwap\\n        ) = calculateExcessTokensToSwap(\\n                pool,\\n                getBalance(poolId, pool.tokenA),\\n                getBalance(poolId, pool.tokenB)\\n            );\\n\\n        // handle tokenA vs tokenB, cap at max sell param\\n        address targetToken;\\n        uint256 swapAmount;\\n        if (swapToken == pool.tokenA) {\\n            targetToken = pool.tokenB;\\n            swapAmount = excessAmountToSwap < maxSellTokenA\\n                ? excessAmountToSwap\\n                : maxSellTokenA;\\n        } else {\\n            targetToken = pool.tokenA;\\n            swapAmount = excessAmountToSwap < maxSellTokenB\\n                ? excessAmountToSwap\\n                : maxSellTokenB;\\n        }\\n\\n        // track balance change of targetToken\\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken)\\n            .balanceOf(address(this));\\n\\n        // swap tokens\\n        swapExactInput(\\n            swapToken,\\n            targetToken,\\n            address(this),\\n            swapAmount,\\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\\n        );\\n\\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken)\\n            .balanceOf(address(this)) - targetBalanceBefore;\\n\\n        // update pool token balances\\n        if (amountReceived > 0) {\\n            balances[poolId][swapToken] -= excessAmountToSwap;\\n            balances[poolId][targetToken] += amountReceived;\\n\\n            emit PoolRebalanced(\\n                poolId,\\n                swapToken,\\n                excessAmountToSwap,\\n                targetToken,\\n                amountReceived\\n            );\\n        }\\n    }\\n\\n    function calculateExcessTokensToSwap(\\n        Pool memory pool,\\n        uint256 balanceA,\\n        uint256 balanceB\\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\\n        require(balanceA + balanceB > 0, \\\"SushiSwapIntegration: no balance\\\");\\n        // fetch reserve values from sushi\\n        (uint256 reserveA, uint256 reserveB) = getReserves(\\n            pool.tokenA,\\n            pool.tokenB\\n        );\\n\\n        if (reserveA > reserveB) {\\n            uint256 k = (reserveA * 1000) / reserveB;\\n            uint256 balanceBA = (balanceB * k) / 1000;\\n\\n            if (balanceA < balanceBA) {\\n                // excess tokenB\\n                excessAmountToSwap = (balanceB - ((balanceA * 1000) / k)) / 2;\\n                swapToken = pool.tokenB;\\n            } else if (balanceBA < balanceA) {\\n                // excess tokenA\\n                excessAmountToSwap = (balanceA - balanceBA) / 2;\\n                swapToken = pool.tokenA;\\n            }\\n        } else if (reserveA < reserveB) {\\n            uint256 k = (reserveB * 1000) / reserveA;\\n            uint256 balanceAB = (balanceA * k) / 1000;\\n\\n            if (balanceAB < balanceB) {\\n                // excess tokenB\\n                excessAmountToSwap = (balanceB - balanceAB) / 2;\\n                swapToken = pool.tokenB;\\n            } else if (balanceB < balanceAB) {\\n                // excess tokenA\\n                excessAmountToSwap = (balanceA - ((balanceB * 1000) / k)) / 2;\\n                swapToken = pool.tokenA;\\n            }\\n        }\\n    }\\n\\n    function checkPriceCeiling(\\n        address tokenA,\\n        address tokenB,\\n        uint256 ratioX1000\\n    ) internal view {\\n        address pairAddress = address(pairFor(tokenA, tokenB));\\n        require(pairAddress != address(0), \\\"SushiSwapIntegration:BadPair\\\");\\n\\n        uint256 currentRatio;\\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\\n        if (reserveA < reserveB) {\\n            currentRatio = (reserveB * 1000) / reserveA;\\n        } else if (reserveB < reserveA) {\\n            currentRatio = (reserveA * 1000) / reserveB;\\n        } else {\\n            currentRatio = 1000;\\n        }\\n\\n        // limit to 1% off\\n        if (currentRatio > ratioX1000) {\\n            require(\\n                ((currentRatio - ratioX1000) * 100) / ratioX1000 < 1,\\n                \\\"CeilingLimitReached\\\"\\n            );\\n        } else if (ratioX1000 > currentRatio) {\\n            require(\\n                ((ratioX1000 - currentRatio) * 100) / ratioX1000 < 1,\\n                \\\"CeilingLimitReached\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c413e341fa1dd9580ba7ccb7ce2c5cb7513af5595b1ae55e857b3bdea3ba84c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614a33806100206000396000f3fe6080604052600436106101a05760003560e01c806398cf119b116100ec578063cf73715a1161008a578063e8d991d111610064578063e8d991d114610509578063e94b0dd21461051e578063eb40c5451461053e578063f525cb681461057357600080fd5b8063cf73715a1461049c578063e7daae2e146104bc578063e809529e146104dc57600080fd5b8063a9c75cff116100c6578063a9c75cff1461041c578063ac211b951461043c578063b1cccca21461045c578063ccbfc16c1461047c57600080fd5b806398cf119b1461037f5780639da46ee3146103ac578063a7fc7a07146103fc57600080fd5b80635441c2b611610159578063680c305211610133578063680c3052146102ff578063754a02741461031f5780637db2ddfe1461033f57806398c671ce1461035f57600080fd5b80635441c2b61461029f57806359cf86da146102bf5780635ce564f4146102df57600080fd5b80630c3fa05f146101ac5780630f0a1c6f146101ce5780632da8a1ed14610211578063364d0f5a146102315780634aa066521461025157806351810fb51461027f57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004614552565b6105a5565b005b3480156101da57600080fd5b506000546101f4906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021d57600080fd5b506101cc61022c3660046145d7565b610829565b34801561023d57600080fd5b506101cc61024c3660046145ba565b610afc565b34801561025d57600080fd5b5061027161026c366004614135565b610c26565b604051908152602001610208565b34801561028b57600080fd5b506101cc61029a366004614135565b610d3f565b3480156102ab57600080fd5b506102716102ba36600461456e565b61107e565b3480156102cb57600080fd5b506101cc6102da36600461459b565b6110af565b3480156102eb57600080fd5b506101cc6102fa366004614552565b61120c565b34801561030b57600080fd5b506101cc61031a3660046145ba565b611247565b34801561032b57600080fd5b506101cc61033a3660046141e1565b61136d565b34801561034b57600080fd5b506101cc61035a3660046141a0565b611581565b34801561036b57600080fd5b506101cc61037a366004614228565b6116ab565b34801561038b57600080fd5b5061027161039a3660046140fd565b600d6020526000908152604090205481565b3480156103b857600080fd5b506103cc6103c7366004614552565b6117ab565b6040805182516001600160a01b039081168252602080850151909116908201529181015190820152606001610208565b34801561040857600080fd5b506101cc6104173660046140fd565b61180a565b34801561042857600080fd5b50610271610437366004614175565b611a46565b34801561044857600080fd5b506101cc61045736600461460d565b611ae7565b34801561046857600080fd5b506101cc6104773660046141a0565b611ee1565b34801561048857600080fd5b50610271610497366004614135565b611f49565b3480156104a857600080fd5b506101cc6104b7366004614552565b611f8f565b3480156104c857600080fd5b506101cc6104d7366004614278565b6120a9565b3480156104e857600080fd5b506102716104f7366004614552565b600e6020526000908152604090205481565b34801561051557600080fd5b506101cc612294565b34801561052a57600080fd5b506101f46105393660046144d2565b61243f565b34801561054a57600080fd5b5061055e610559366004614552565b612469565b60408051928352602083019190915201610208565b34801561057f57600080fd5b506009546105909063ffffffff1681565b60405163ffffffff9091168152602001610208565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916105da9190600401614663565b60206040518083038186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561066b57600080fd5b505afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a391906143bf565b6106c85760405162461bcd60e51b81526004016106bf90614738565b60405180910390fd5b63ffffffff81166000908152600860209081526040808320815160608101835281546001600160a01b03908116808352600184015490911694820185905260029092015492810192909252909291610720919061247f565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561076157600080fd5b505afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906144ea565b905080156108245760055463ffffffff84166000908152600b602052604090819020549051631c57762b60e31b81526001600160a01b039092169163e2bbb158916107f1918590600401918252602082015260400190565b600060405180830381600087803b15801561080b57600080fd5b505af115801561081f573d6000803e3d6000fd5b505050505b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161085e9190600401614663565b60206040518083038186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b1580156108ef57600080fd5b505afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092791906143bf565b6109435760405162461bcd60e51b81526004016106bf90614738565b60055463ffffffff84166000908152600b6020526040808220549051631c57762b60e31b81526001600160a01b039093169263e2bbb158926109919291600401918252602082015260400190565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b505050508015610824576006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4591906144ea565b90508015610af657600654600754610a6a916001600160a01b0390811691168561250c565b600654600754600091610a96916001600160a01b0391821691163085610a91848483611f49565b6126a3565b905080600181518110610ab957634e487b7160e01b600052603260045260246000fd5b6020026020010151600e60008763ffffffff1663ffffffff1681526020019081526020016000206000828254610aef919061489f565b9091555050505b50505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610b319190600401614663565b60206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015610bc257600080fd5b505afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906143bf565b610c165760405162461bcd60e51b81526004016106bf90614738565b610c228282600161287c565b5050565b6000808211610c825760405162461bcd60e51b815260206004820152602260248201527f616d6f756e74496e206d7573742062652067726561746572207468616e207a65604482015261726f60f01b60648201526084016106bf565b600080610c8f8686612af6565b91509150600082118015610ca35750600081115b610cef5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c697175696469747920696e20706f6f6c20726573657276657300000060448201526064016106bf565b6000610cfd856103e56148d7565b90506000610d0b83836148d7565b9050600082610d1c866103e86148d7565b610d26919061489f565b9050610d3281836148b7565b9998505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610d749190600401614663565b60206040518083038186803b158015610d8c57600080fd5b505afa158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc49190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015610e0557600080fd5b505afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3d91906143bf565b610e595760405162461bcd60e51b81526004016106bf90614738565b6009805463ffffffff16906000610e6f83614978565b825463ffffffff91821661010093840a9081029083021990911617909255600980548316600090815260086020819052604080832080546001600160a01b038c81166001600160a01b03199283168117909355865489168652838620600190810180548e84169416939093179092559554600a805492830181559095529283047fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805494881660046007909516850290970a96870296909702199093169490941790945583549251636eb1769f60e11b815230948101949094529116602483015260001992509063dd62ed3e9060440160206040518083038186803b158015610f7857600080fd5b505afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb091906144ea565b1015610fd257600454610fd2906001600160a01b038581169116600019612bcd565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b039081166024830152600019919084169063dd62ed3e9060440160206040518083038186803b15801561102457600080fd5b505afa158015611038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105c91906144ea565b101561082457600454610824906001600160a01b038481169116600019612bcd565b63ffffffff82166000908152600c602090815260408083206001600160a01b03851684529091529020545b92915050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916110e49190600401614663565b60206040518083038186803b1580156110fc57600080fd5b505afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ad91906143bf565b6111c95760405162461bcd60e51b81526004016106bf90614738565b63ffffffff83166000908152600c602090815260408083206001600160a01b03861684529091528120805483929061120290849061489f565b9091555050505050565b3360009081526001602052604090205460ff1661123b5760405162461bcd60e51b81526004016106bf90614786565b61124481612d24565b50565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161127c9190600401614663565b60206040518083038186803b15801561129457600080fd5b505afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561130d57600080fd5b505afa158015611321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134591906143bf565b6113615760405162461bcd60e51b81526004016106bf90614738565b610c228282600061287c565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916113a29190600401614663565b60206040518083038186803b1580156113ba57600080fd5b505afa1580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561143357600080fd5b505afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b91906143bf565b6114875760405162461bcd60e51b81526004016106bf90614738565b611491828561107e565b831161157557600080546040516337c61fc560e11b815261153192620100009092046001600160a01b031691636f8c3f8a916114d09190600401614663565b60206040518083038186803b1580156114e857600080fd5b505afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190614119565b6001600160a01b03861690856130b6565b63ffffffff82166000908152600c602090815260408083206001600160a01b03881684529091528120805485929061156a90849061491a565b90915550610af69050565b610af6848484846130e6565b3360009081526001602052604090205460ff166115b05760405162461bcd60e51b81526004016106bf90614786565b6115ba818461107e565b821161169e57600080546040516337c61fc560e11b815261165a92620100009092046001600160a01b031691636f8c3f8a916115f99190600401614663565b60206040518083038186803b15801561161157600080fd5b505afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190614119565b6001600160a01b03851690846130b6565b63ffffffff81166000908152600c602090815260408083206001600160a01b03871684529091528120805484929061169390849061491a565b909155506108249050565b61082483838360006130e6565b600054610100900460ff16806116c4575060005460ff16155b6116e05760405162461bcd60e51b81526004016106bf906146be565b600054610100900460ff16158015611702576000805461ffff19166101011790555b60005b835181101561177757600180600086848151811061173357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061176f8161495d565b915050611705565b50825161178b906002906020860190613fef565b50611795826132d3565b8015610824576000805461ff0019169055505050565b60408051606080820183526000808352602080840182905292840181905263ffffffff94909416845260088252928290208251938401835280546001600160a01b03908116855260018201541691840191909152600201549082015290565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161183f9190600401614663565b60206040518083038186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188f9190614119565b6040516317aa5fb760e11b81523360048201526001600160a01b039190911690632f54bf6e9060240160206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906143bf565b6119675760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016106bf565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b6002548110156119ef57600281815481106119b957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156119dd57600191505b806119e78161495d565b91505061198e565b5080610c2257600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b60006001600160a01b038316611a5e575060006110a9565b60055460405163065509bb60e21b8152600481018490523060248201526001600160a01b039091169063195426ec9060440160206040518083038186803b158015611aa857600080fd5b505afa158015611abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae091906144ea565b9392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91611b1c9190600401614663565b60206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6c9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015611bad57600080fd5b505afa158015611bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be591906143bf565b611c015760405162461bcd60e51b81526004016106bf90614738565b6000611c0c856117ab565b63ffffffff86166000908152600860205260409020549091506001600160a01b0316611c4a5760405162461bcd60e51b81526004016106bf9061470c565b611c5d816000015182602001518661250c565b600080611c8583611c7289866000015161107e565b611c808a876020015161107e565b613361565b9150915060008084600001516001600160a01b0316846001600160a01b03161415611cc75784602001519150868310611cbe5786611cc0565b825b9050611cdd565b84519150858310611cd85785611cda565b825b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015611d1f57600080fd5b505afa158015611d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5791906144ea565b9050611d6b85843085610a918a8989611f49565b506040516370a0823160e01b815230600482015260009082906001600160a01b038616906370a082319060240160206040518083038186803b158015611db057600080fd5b505afa158015611dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de891906144ea565b611df2919061491a565b90508015611ed45763ffffffff8b166000908152600c602090815260408083206001600160a01b038a16845290915281208054879290611e3390849061491a565b909155505063ffffffff8b166000908152600c602090815260408083206001600160a01b038816845290915281208054839290611e7190849061489f565b90915550506040805163ffffffff8d1681526001600160a01b038881166020830152818301889052861660608201526080810183905290517f3318ce2371d9cd19d64b4ca999bd8bdcfcf18e4ec416d7dc611b729b2e59c5009181900360a00190a15b5050505050505050505050565b3360009081526001602052604090205460ff16611f105760405162461bcd60e51b81526004016106bf90614786565b63ffffffff81166000908152600c602090815260408083206001600160a01b03871684529091528120805484929061120290849061489f565b600354600090620f424090611f639062ffffff16826148f6565b62ffffff16611f73868686610c26565b611f7d91906148d7565b611f8791906148b7565b949350505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91611fc49190600401614663565b60206040518083038186803b158015611fdc57600080fd5b505afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120149190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208d91906143bf565b61123b5760405162461bcd60e51b81526004016106bf90614738565b600054610100900460ff16806120c2575060005460ff16155b6120de5760405162461bcd60e51b81526004016106bf906146be565b600054610100900460ff16158015612100576000805461ffff19166101011790555b61210a88886116ab565b60038054600480546001600160a01b03199081166001600160a01b038a81169190911783556005805483168a83161790556001600160b81b031990931663010000008b85160262ffffff19161762ffffff8716178455600680549091168784161790556000546040516337c61fc560e11b81526201000090910490921692636f8c3f8a926121989201614663565b60206040518083038186803b1580156121b057600080fd5b505afa1580156121c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e89190614119565b6001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b15801561222057600080fd5b505afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614119565b600780546001600160a01b0319166001600160a01b0392909216919091179055801561228a576000805461ff00191690555b5050505050505050565b3360009081526001602052604090205460ff166122c35760405162461bcd60e51b81526004016106bf90614786565b6000805b60095463ffffffff908116908216101561236657600e6000600a8363ffffffff168154811061230657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000205482612352919061489f565b91508061235e81614978565b9150506122c7565b508015611244576000546040516337c61fc560e11b8152612409916201000090046001600160a01b031690636f8c3f8a906123a690600290600401614663565b60206040518083038186803b1580156123be57600080fd5b505afa1580156123d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f69190614119565b6007546001600160a01b031690836130b6565b6040518181527fd0e841f234010ad7f57b7c09faffb2245cd240429c6e8fa3cd934a0a8bf58eb09060200160405180910390a150565b6002818154811061244f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008061247583613535565b9094909350915050565b60035460405163e6a4390560e01b81526001600160a01b038481166004830152838116602483015260009263010000009004169063e6a439059060440160206040518083038186803b1580156124d457600080fd5b505afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae09190614119565b6000612518848461247f565b90506001600160a01b0381166125705760405162461bcd60e51b815260206004820152601c60248201527f537573686953776170496e746567726174696f6e3a426164506169720000000060448201526064016106bf565b600080600061257f8787612af6565b91509150808210156125a95781612598826103e86148d7565b6125a291906148b7565b92506125c4565b818110156125be5780612598836103e86148d7565b6103e892505b84831115612636576001856125d9818661491a565b6125e49060646148d7565b6125ee91906148b7565b106126315760405162461bcd60e51b815260206004820152601360248201527210d95a5b1a5b99d31a5b5a5d14995858da1959606a1b60448201526064016106bf565b61081f565b8285111561081f5760018561264b858261491a565b6126569060646148d7565b61266091906148b7565b1061081f5760405162461bcd60e51b815260206004820152601360248201527210d95a5b1a5b99d31a5b5a5d14995858da1959606a1b60448201526064016106bf565b6040805160028082526060808301845292600092919060208301908036833701905050905086816000815181106126ea57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061272c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260048054604051636eb1769f60e11b815230928101929092528216602482015242918691908a169063dd62ed3e9060440160206040518083038186803b15801561278b57600080fd5b505afa15801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c391906144ea565b10156127e3576004546127e3906001600160a01b038a8116911687612bcd565b600480546040516338ed173960e01b81526001600160a01b03909116916338ed17399161281a918991899188918d918991016147da565b600060405180830381600087803b15801561283457600080fd5b505af1158015612848573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612870919081019061432c565b98975050505050505050565b6000612887846117ab565b80519091506001600160a01b03166128b15760405162461bcd60e51b81526004016106bf9061470c565b60018215151461291e5763ffffffff84166000908152600b60205260409020541561291e5760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720616c726561647920636f6e6669677572656400000000000060448201526064016106bf565b600554604051631526fe2760e01b8152600481018590526000916001600160a01b031690631526fe2790602401608060405180830381600087803b15801561296557600080fd5b505af1158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d91906143db565b905060006129b38360000151846020015161247f565b9050806001600160a01b031682600001516001600160a01b031614612a2d5760405162461bcd60e51b815260206004820152602a60248201527f496e636f7272656374204d617374657243686566277320706f6f6c49642077616044820152691cc81c1c9bdd9a59195960b21b60648201526084016106bf565b63ffffffff86166000908152600b6020526040908190208690556005549051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000199183169063dd62ed3e9060440160206040518083038186803b158015612a9457600080fd5b505afa158015612aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acc91906144ea565b1015612aee57600554612aee906001600160a01b038381169116600019612bcd565b505050505050565b6000806000612b05858561388f565b509050600080612b15878761247f565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b859190614497565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614612bbc578082612bbf565b81815b909890975095505050505050565b801580612c565750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5491906144ea565b155b612cc15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106bf565b6040516001600160a01b03831660248201526044810182905261082490849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613968565b6000612d2f826117ab565b63ffffffff83166000908152600860205260409020549091506001600160a01b0316612d6d5760405162461bcd60e51b81526004016106bf9061470c565b6000612d7d83836000015161107e565b90506000612d8f84846020015161107e565b9050811580612d9c575080155b15612da75750505050565b6000806000806000612dc188600001518960200151612af6565b9150915080821115612e6357600081612ddc846103e86148d7565b612de691906148b7565b905060006103e8612df7838a6148d7565b612e0191906148b7565b905080891015612e2c5788965081612e1b886103e86148d7565b612e2591906148b7565b9550612e5c565b88811015612e55576103e8612e41838a6148d7565b612e4b91906148b7565b9650879550612e5c565b8896508795505b5050612efd565b80821015612efd57600082612e7a836103e86148d7565b612e8491906148b7565b905060006103e8612e95838b6148d7565b612e9f91906148b7565b905080881015612eca5781612eb6896103e86148d7565b612ec091906148b7565b9650879550612efa565b87811015612ef3578896506103e8612ee283896148d7565b612eec91906148b7565b9550612efa565b8896508795505b50505b60048054895160208b015160405162e8e33760e81b81526001600160a01b039283169481019490945281166024840152604483018890526064830187905260006084840181905260a48401523060c48401524260e4840152169063e8e337009061010401606060405180830381600087803b158015612f7b57600080fd5b505af1158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb39190614525565b63ffffffff8c166000908152600c602090815260408083208e516001600160a01b0316845290915281208054929750899450925090612ff390849061491a565b909155505063ffffffff89166000908152600c602090815260408083208b8301516001600160a01b031684529091528120805486929061303490849061491a565b90915550506040518381527f250600b7e1d8b908a0f07fa409e087c1b43ef3a5de3c0e23a41998c311f0ea909060200160405180910390a16040805163ffffffff8b168152602081018590527fb28fd890673610fa2a3efb1cf64ae1b26dd83c3261fbd99f0d4a5821ccdaa993910160405180910390a1505050505050505050565b6040516001600160a01b03831660248201526044810182905261082490849063a9059cbb60e01b90606401612ced565b60006130f1836117ab565b9050811561310c5761310c816000015182602001518461250c565b60008061311885613535565b91509150600061312b8383888b8b613a3a565b60055463ffffffff88166000908152600b602052604090819020549051630441a3e760e41b81526004810191909152602481018390529192506001600160a01b03169063441a3e7090604401600060405180830381600087803b15801561319157600080fd5b505af11580156131a5573d6000803e3d6000fd5b5050600454865160208801516131df94506001600160a01b03909216925084916131cf919061247f565b6001600160a01b03169190612bcd565b6004548451602086015160009283926001600160a01b039091169163baa2abde9190868580306132114261016861489f565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b15801561327e57600080fd5b505af1158015613292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b69190614502565b915091506132c786898c8585613bdd565b50505050505050505050565b600054610100900460ff16806132ec575060005460ff16155b6133085760405162461bcd60e51b81526004016106bf906146be565b600054610100900460ff1615801561332a576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610c22576000805461ff00191690555050565b6000808061336f848661489f565b116133bc5760405162461bcd60e51b815260206004820181905260248201527f537573686953776170496e746567726174696f6e3a206e6f2062616c616e636560448201526064016106bf565b6000806133d187600001518860200151612af6565b9150915080821115613482576000816133ec846103e86148d7565b6133f691906148b7565b905060006103e861340783896148d7565b61341191906148b7565b9050808810156134565760028261342a8a6103e86148d7565b61343491906148b7565b61343e908961491a565b61344891906148b7565b94508860200151955061347b565b8781101561347b57600261346a828a61491a565b61347491906148b7565b8951965094505b505061352b565b8082101561352b57600082613499836103e86148d7565b6134a391906148b7565b905060006103e86134b4838a6148d7565b6134be91906148b7565b9050868110156134ec5760026134d4828961491a565b6134de91906148b7565b945088602001519550613528565b8087101561352857600282613503896103e86148d7565b61350d91906148b7565b613517908a61491a565b61352191906148b7565b8951965094505b50505b5050935093915050565b6000806000613543846117ab565b60055463ffffffff86166000908152600b60205260408082205490516393f1a40b60e01b81526004810191909152306024820152929350916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156135a757600080fd5b505afa1580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614449565b51825160208401516135f1919061247f565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561363257600080fd5b505afa158015613646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366a91906144ea565b613674919061489f565b9050600061368a8360000151846020015161247f565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136c257600080fd5b505afa1580156136d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fa91906144ea565b613709836402540be4006148d7565b61371391906148b7565b90506402540be4008184600001516001600160a01b03166370a082316137418760000151886020015161247f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561378057600080fd5b505afa158015613794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b891906144ea565b6137c291906148d7565b6137cc91906148b7565b94506402540be4008184602001516001600160a01b03166370a082316137fa8760000151886020015161247f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561383957600080fd5b505afa15801561384d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387191906144ea565b61387b91906148d7565b61388591906148b7565b9350505050915091565b600080826001600160a01b0316846001600160a01b031614156138f45760405162461bcd60e51b815260206004820152601960248201527f4964656e746963616c20746f6b656e206164647265737365730000000000000060448201526064016106bf565b826001600160a01b0316846001600160a01b031610613914578284613917565b83835b90925090506001600160a01b0382166139615760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016106bf565b9250929050565b60006139bd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ee49092919063ffffffff16565b80519091501561082457808060200190518101906139db91906143bf565b6108245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bf565b600080613a46856117ab565b905060008082600001516001600160a01b0316866001600160a01b03161415613a9357613a746002866148b7565b9150613a8c86846020015160028861026c91906148b7565b9050613ad4565b82602001516001600160a01b0316866001600160a01b03161415613ad4578251613ac490879061026c6002896148b7565b9150613ad16002866148b7565b90505b600089831180613ae357508882115b15613af057506064613b1c565b613afa898b61489f565b613b04838561489f565b613b0f9060646148d7565b613b1991906148b7565b90505b60055463ffffffff89166000908152600b6020526040908190205490516393f1a40b60e01b8152600481019190915230602482015260649183916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015613b8257600080fd5b505afa158015613b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bba9190614449565b51613bc591906148d7565b613bcf91906148b7565b9a9950505050505050505050565b606085600001516001600160a01b0316846001600160a01b03161415613d60576020860151613c1490853085610a91848483611f49565b600080546040516337c61fc560e11b8152929350613ce692620100009091046001600160a01b031691636f8c3f8a91613c509190600401614663565b60206040518083038186803b158015613c6857600080fd5b505afa158015613c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca09190614119565b82600181518110613cc157634e487b7160e01b600052603260045260246000fd5b602002602001015185613cd4919061489f565b88516001600160a01b031691906130b6565b7f6fb183d14e6407db4dfb55deb83841283e9e3015e3aabe210d446b16f1ce0937858483600181518110613d2a57634e487b7160e01b600052603260045260246000fd5b6020026020010151613d3c919061489f565b6040805163ffffffff909316835260208301919091520160405180910390a1612aee565b85602001516001600160a01b0316846001600160a01b03161415612aee578551613d9290853086610a91848483611f49565b600080546040516337c61fc560e11b8152929350613e6792620100009091046001600160a01b031691636f8c3f8a91613dce9190600401614663565b60206040518083038186803b158015613de657600080fd5b505afa158015613dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1e9190614119565b82600181518110613e3f57634e487b7160e01b600052603260045260246000fd5b602002602001015184613e52919061489f565b60208901516001600160a01b031691906130b6565b7f6fb183d14e6407db4dfb55deb83841283e9e3015e3aabe210d446b16f1ce0937858383600181518110613eab57634e487b7160e01b600052603260045260246000fd5b6020026020010151613ebd919061489f565b6040805163ffffffff909316835260208301919091520160405180910390a1505050505050565b6060611f87848460008585843b613f3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bf565b600080866001600160a01b03168587604051613f599190614647565b60006040518083038185875af1925050503d8060008114613f96576040519150601f19603f3d011682016040523d82523d6000602084013e613f9b565b606091505b5091509150613fab828286613fb6565b979650505050505050565b60608315613fc5575081611ae0565b825115613fd55782518084602001fd5b8160405162461bcd60e51b81526004016106bf919061468b565b828054828255906000526020600020908101928215614044579160200282015b8281111561404457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061400f565b50614050929150614054565b5090565b5b808211156140505760008155600101614055565b600082601f830112614079578081fd5b8135602061408e6140898361487b565b61484a565b80838252828201915082860187848660051b89010111156140ad578586fd5b855b858110156140d45781356140c2816149c8565b845292840192908401906001016140af565b5090979650505050505050565b80516001600160701b03811681146140f857600080fd5b919050565b60006020828403121561410e578081fd5b8135611ae0816149c8565b60006020828403121561412a578081fd5b8151611ae0816149c8565b600080600060608486031215614149578182fd5b8335614154816149c8565b92506020840135614164816149c8565b929592945050506040919091013590565b60008060408385031215614187578182fd5b8235614192816149c8565b946020939093013593505050565b6000806000606084860312156141b4578283fd5b83356141bf816149c8565b92506020840135915060408401356141d6816149eb565b809150509250925092565b600080600080608085870312156141f6578081fd5b8435614201816149c8565b9350602085013592506040850135614218816149eb565b9396929550929360600135925050565b6000806040838503121561423a578182fd5b823567ffffffffffffffff811115614250578283fd5b61425c85828601614069565b925050602083013561426d816149c8565b809150509250929050565b600080600080600080600060e0888a031215614292578485fd5b873567ffffffffffffffff8111156142a8578586fd5b6142b48a828b01614069565b97505060208801356142c5816149c8565b955060408801356142d5816149c8565b945060608801356142e5816149c8565b935060808801356142f5816149c8565b925060a0880135614305816149c8565b915060c088013562ffffff8116811461431c578182fd5b8091505092959891949750929550565b6000602080838503121561433e578182fd5b825167ffffffffffffffff811115614354578283fd5b8301601f81018513614364578283fd5b80516143726140898261487b565b80828252848201915084840188868560051b8701011115614391578687fd5b8694505b838510156143b3578051835260019490940193918501918501614395565b50979650505050505050565b6000602082840312156143d0578081fd5b8151611ae0816149dd565b6000608082840312156143ec578081fd5b6040516080810181811067ffffffffffffffff8211171561440f5761440f6149b2565b604052825161441d816149c8565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b60006040828403121561445a578081fd5b6040516040810181811067ffffffffffffffff8211171561447d5761447d6149b2565b604052825181526020928301519281019290925250919050565b6000806000606084860312156144ab578081fd5b6144b4846140e1565b92506144c2602085016140e1565b915060408401516141d6816149eb565b6000602082840312156144e3578081fd5b5035919050565b6000602082840312156144fb578081fd5b5051919050565b60008060408385031215614514578182fd5b505080516020909101519092909150565b600080600060608486031215614539578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215614563578081fd5b8135611ae0816149eb565b60008060408385031215614580578182fd5b823561458b816149eb565b9150602083013561426d816149c8565b6000806000606084860312156145af578081fd5b8335614154816149eb565b600080604083850312156145cc578182fd5b8235614192816149eb565b6000806000606084860312156145eb578081fd5b83356145f6816149eb565b92506020840135915060408401356141d6816149dd565b60008060008060808587031215614622578182fd5b843561462d816149eb565b966020860135965060408601359560600135945092505050565b60008251614659818460208701614931565b9190910192915050565b60208101600a831061468557634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526146aa816040850160208701614931565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260129082015271141bdbdb08191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156148295784516001600160a01b031683529383019391830191600101614804565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614873576148736149b2565b604052919050565b600067ffffffffffffffff821115614895576148956149b2565b5060051b60200190565b600082198211156148b2576148b261499c565b500190565b6000826148d257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156148f1576148f161499c565b500290565b600062ffffff838116908316818110156149125761491261499c565b039392505050565b60008282101561492c5761492c61499c565b500390565b60005b8381101561494c578181015183820152602001614934565b83811115610af65750506000910152565b60006000198214156149715761497161499c565b5060010190565b600063ffffffff808316818114156149925761499261499c565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461124457600080fd5b801515811461124457600080fd5b63ffffffff8116811461124457600080fdfea2646970667358221220fa2a5f579ae614b50deac6860100697e01cc7c3374ec8023e985dd62cfb6b4bf64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c806398cf119b116100ec578063cf73715a1161008a578063e8d991d111610064578063e8d991d114610509578063e94b0dd21461051e578063eb40c5451461053e578063f525cb681461057357600080fd5b8063cf73715a1461049c578063e7daae2e146104bc578063e809529e146104dc57600080fd5b8063a9c75cff116100c6578063a9c75cff1461041c578063ac211b951461043c578063b1cccca21461045c578063ccbfc16c1461047c57600080fd5b806398cf119b1461037f5780639da46ee3146103ac578063a7fc7a07146103fc57600080fd5b80635441c2b611610159578063680c305211610133578063680c3052146102ff578063754a02741461031f5780637db2ddfe1461033f57806398c671ce1461035f57600080fd5b80635441c2b61461029f57806359cf86da146102bf5780635ce564f4146102df57600080fd5b80630c3fa05f146101ac5780630f0a1c6f146101ce5780632da8a1ed14610211578063364d0f5a146102315780634aa066521461025157806351810fb51461027f57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004614552565b6105a5565b005b3480156101da57600080fd5b506000546101f4906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021d57600080fd5b506101cc61022c3660046145d7565b610829565b34801561023d57600080fd5b506101cc61024c3660046145ba565b610afc565b34801561025d57600080fd5b5061027161026c366004614135565b610c26565b604051908152602001610208565b34801561028b57600080fd5b506101cc61029a366004614135565b610d3f565b3480156102ab57600080fd5b506102716102ba36600461456e565b61107e565b3480156102cb57600080fd5b506101cc6102da36600461459b565b6110af565b3480156102eb57600080fd5b506101cc6102fa366004614552565b61120c565b34801561030b57600080fd5b506101cc61031a3660046145ba565b611247565b34801561032b57600080fd5b506101cc61033a3660046141e1565b61136d565b34801561034b57600080fd5b506101cc61035a3660046141a0565b611581565b34801561036b57600080fd5b506101cc61037a366004614228565b6116ab565b34801561038b57600080fd5b5061027161039a3660046140fd565b600d6020526000908152604090205481565b3480156103b857600080fd5b506103cc6103c7366004614552565b6117ab565b6040805182516001600160a01b039081168252602080850151909116908201529181015190820152606001610208565b34801561040857600080fd5b506101cc6104173660046140fd565b61180a565b34801561042857600080fd5b50610271610437366004614175565b611a46565b34801561044857600080fd5b506101cc61045736600461460d565b611ae7565b34801561046857600080fd5b506101cc6104773660046141a0565b611ee1565b34801561048857600080fd5b50610271610497366004614135565b611f49565b3480156104a857600080fd5b506101cc6104b7366004614552565b611f8f565b3480156104c857600080fd5b506101cc6104d7366004614278565b6120a9565b3480156104e857600080fd5b506102716104f7366004614552565b600e6020526000908152604090205481565b34801561051557600080fd5b506101cc612294565b34801561052a57600080fd5b506101f46105393660046144d2565b61243f565b34801561054a57600080fd5b5061055e610559366004614552565b612469565b60408051928352602083019190915201610208565b34801561057f57600080fd5b506009546105909063ffffffff1681565b60405163ffffffff9091168152602001610208565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916105da9190600401614663565b60206040518083038186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561066b57600080fd5b505afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a391906143bf565b6106c85760405162461bcd60e51b81526004016106bf90614738565b60405180910390fd5b63ffffffff81166000908152600860209081526040808320815160608101835281546001600160a01b03908116808352600184015490911694820185905260029092015492810192909252909291610720919061247f565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561076157600080fd5b505afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906144ea565b905080156108245760055463ffffffff84166000908152600b602052604090819020549051631c57762b60e31b81526001600160a01b039092169163e2bbb158916107f1918590600401918252602082015260400190565b600060405180830381600087803b15801561080b57600080fd5b505af115801561081f573d6000803e3d6000fd5b505050505b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161085e9190600401614663565b60206040518083038186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b1580156108ef57600080fd5b505afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092791906143bf565b6109435760405162461bcd60e51b81526004016106bf90614738565b60055463ffffffff84166000908152600b6020526040808220549051631c57762b60e31b81526001600160a01b039093169263e2bbb158926109919291600401918252602082015260400190565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b505050508015610824576006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4591906144ea565b90508015610af657600654600754610a6a916001600160a01b0390811691168561250c565b600654600754600091610a96916001600160a01b0391821691163085610a91848483611f49565b6126a3565b905080600181518110610ab957634e487b7160e01b600052603260045260246000fd5b6020026020010151600e60008763ffffffff1663ffffffff1681526020019081526020016000206000828254610aef919061489f565b9091555050505b50505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610b319190600401614663565b60206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015610bc257600080fd5b505afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906143bf565b610c165760405162461bcd60e51b81526004016106bf90614738565b610c228282600161287c565b5050565b6000808211610c825760405162461bcd60e51b815260206004820152602260248201527f616d6f756e74496e206d7573742062652067726561746572207468616e207a65604482015261726f60f01b60648201526084016106bf565b600080610c8f8686612af6565b91509150600082118015610ca35750600081115b610cef5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c697175696469747920696e20706f6f6c20726573657276657300000060448201526064016106bf565b6000610cfd856103e56148d7565b90506000610d0b83836148d7565b9050600082610d1c866103e86148d7565b610d26919061489f565b9050610d3281836148b7565b9998505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610d749190600401614663565b60206040518083038186803b158015610d8c57600080fd5b505afa158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc49190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015610e0557600080fd5b505afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3d91906143bf565b610e595760405162461bcd60e51b81526004016106bf90614738565b6009805463ffffffff16906000610e6f83614978565b825463ffffffff91821661010093840a9081029083021990911617909255600980548316600090815260086020819052604080832080546001600160a01b038c81166001600160a01b03199283168117909355865489168652838620600190810180548e84169416939093179092559554600a805492830181559095529283047fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805494881660046007909516850290970a96870296909702199093169490941790945583549251636eb1769f60e11b815230948101949094529116602483015260001992509063dd62ed3e9060440160206040518083038186803b158015610f7857600080fd5b505afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb091906144ea565b1015610fd257600454610fd2906001600160a01b038581169116600019612bcd565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b039081166024830152600019919084169063dd62ed3e9060440160206040518083038186803b15801561102457600080fd5b505afa158015611038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105c91906144ea565b101561082457600454610824906001600160a01b038481169116600019612bcd565b63ffffffff82166000908152600c602090815260408083206001600160a01b03851684529091529020545b92915050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916110e49190600401614663565b60206040518083038186803b1580156110fc57600080fd5b505afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ad91906143bf565b6111c95760405162461bcd60e51b81526004016106bf90614738565b63ffffffff83166000908152600c602090815260408083206001600160a01b03861684529091528120805483929061120290849061489f565b9091555050505050565b3360009081526001602052604090205460ff1661123b5760405162461bcd60e51b81526004016106bf90614786565b61124481612d24565b50565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161127c9190600401614663565b60206040518083038186803b15801561129457600080fd5b505afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561130d57600080fd5b505afa158015611321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134591906143bf565b6113615760405162461bcd60e51b81526004016106bf90614738565b610c228282600061287c565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916113a29190600401614663565b60206040518083038186803b1580156113ba57600080fd5b505afa1580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561143357600080fd5b505afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b91906143bf565b6114875760405162461bcd60e51b81526004016106bf90614738565b611491828561107e565b831161157557600080546040516337c61fc560e11b815261153192620100009092046001600160a01b031691636f8c3f8a916114d09190600401614663565b60206040518083038186803b1580156114e857600080fd5b505afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190614119565b6001600160a01b03861690856130b6565b63ffffffff82166000908152600c602090815260408083206001600160a01b03881684529091528120805485929061156a90849061491a565b90915550610af69050565b610af6848484846130e6565b3360009081526001602052604090205460ff166115b05760405162461bcd60e51b81526004016106bf90614786565b6115ba818461107e565b821161169e57600080546040516337c61fc560e11b815261165a92620100009092046001600160a01b031691636f8c3f8a916115f99190600401614663565b60206040518083038186803b15801561161157600080fd5b505afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190614119565b6001600160a01b03851690846130b6565b63ffffffff81166000908152600c602090815260408083206001600160a01b03871684529091528120805484929061169390849061491a565b909155506108249050565b61082483838360006130e6565b600054610100900460ff16806116c4575060005460ff16155b6116e05760405162461bcd60e51b81526004016106bf906146be565b600054610100900460ff16158015611702576000805461ffff19166101011790555b60005b835181101561177757600180600086848151811061173357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061176f8161495d565b915050611705565b50825161178b906002906020860190613fef565b50611795826132d3565b8015610824576000805461ff0019169055505050565b60408051606080820183526000808352602080840182905292840181905263ffffffff94909416845260088252928290208251938401835280546001600160a01b03908116855260018201541691840191909152600201549082015290565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161183f9190600401614663565b60206040518083038186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188f9190614119565b6040516317aa5fb760e11b81523360048201526001600160a01b039190911690632f54bf6e9060240160206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906143bf565b6119675760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016106bf565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b6002548110156119ef57600281815481106119b957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156119dd57600191505b806119e78161495d565b91505061198e565b5080610c2257600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b60006001600160a01b038316611a5e575060006110a9565b60055460405163065509bb60e21b8152600481018490523060248201526001600160a01b039091169063195426ec9060440160206040518083038186803b158015611aa857600080fd5b505afa158015611abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae091906144ea565b9392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91611b1c9190600401614663565b60206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6c9190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b158015611bad57600080fd5b505afa158015611bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be591906143bf565b611c015760405162461bcd60e51b81526004016106bf90614738565b6000611c0c856117ab565b63ffffffff86166000908152600860205260409020549091506001600160a01b0316611c4a5760405162461bcd60e51b81526004016106bf9061470c565b611c5d816000015182602001518661250c565b600080611c8583611c7289866000015161107e565b611c808a876020015161107e565b613361565b9150915060008084600001516001600160a01b0316846001600160a01b03161415611cc75784602001519150868310611cbe5786611cc0565b825b9050611cdd565b84519150858310611cd85785611cda565b825b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015611d1f57600080fd5b505afa158015611d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5791906144ea565b9050611d6b85843085610a918a8989611f49565b506040516370a0823160e01b815230600482015260009082906001600160a01b038616906370a082319060240160206040518083038186803b158015611db057600080fd5b505afa158015611dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de891906144ea565b611df2919061491a565b90508015611ed45763ffffffff8b166000908152600c602090815260408083206001600160a01b038a16845290915281208054879290611e3390849061491a565b909155505063ffffffff8b166000908152600c602090815260408083206001600160a01b038816845290915281208054839290611e7190849061489f565b90915550506040805163ffffffff8d1681526001600160a01b038881166020830152818301889052861660608201526080810183905290517f3318ce2371d9cd19d64b4ca999bd8bdcfcf18e4ec416d7dc611b729b2e59c5009181900360a00190a15b5050505050505050505050565b3360009081526001602052604090205460ff16611f105760405162461bcd60e51b81526004016106bf90614786565b63ffffffff81166000908152600c602090815260408083206001600160a01b03871684529091528120805484929061120290849061489f565b600354600090620f424090611f639062ffffff16826148f6565b62ffffff16611f73868686610c26565b611f7d91906148d7565b611f8791906148b7565b949350505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91611fc49190600401614663565b60206040518083038186803b158015611fdc57600080fd5b505afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120149190614119565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208d91906143bf565b61123b5760405162461bcd60e51b81526004016106bf90614738565b600054610100900460ff16806120c2575060005460ff16155b6120de5760405162461bcd60e51b81526004016106bf906146be565b600054610100900460ff16158015612100576000805461ffff19166101011790555b61210a88886116ab565b60038054600480546001600160a01b03199081166001600160a01b038a81169190911783556005805483168a83161790556001600160b81b031990931663010000008b85160262ffffff19161762ffffff8716178455600680549091168784161790556000546040516337c61fc560e11b81526201000090910490921692636f8c3f8a926121989201614663565b60206040518083038186803b1580156121b057600080fd5b505afa1580156121c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e89190614119565b6001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b15801561222057600080fd5b505afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614119565b600780546001600160a01b0319166001600160a01b0392909216919091179055801561228a576000805461ff00191690555b5050505050505050565b3360009081526001602052604090205460ff166122c35760405162461bcd60e51b81526004016106bf90614786565b6000805b60095463ffffffff908116908216101561236657600e6000600a8363ffffffff168154811061230657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000205482612352919061489f565b91508061235e81614978565b9150506122c7565b508015611244576000546040516337c61fc560e11b8152612409916201000090046001600160a01b031690636f8c3f8a906123a690600290600401614663565b60206040518083038186803b1580156123be57600080fd5b505afa1580156123d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f69190614119565b6007546001600160a01b031690836130b6565b6040518181527fd0e841f234010ad7f57b7c09faffb2245cd240429c6e8fa3cd934a0a8bf58eb09060200160405180910390a150565b6002818154811061244f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008061247583613535565b9094909350915050565b60035460405163e6a4390560e01b81526001600160a01b038481166004830152838116602483015260009263010000009004169063e6a439059060440160206040518083038186803b1580156124d457600080fd5b505afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae09190614119565b6000612518848461247f565b90506001600160a01b0381166125705760405162461bcd60e51b815260206004820152601c60248201527f537573686953776170496e746567726174696f6e3a426164506169720000000060448201526064016106bf565b600080600061257f8787612af6565b91509150808210156125a95781612598826103e86148d7565b6125a291906148b7565b92506125c4565b818110156125be5780612598836103e86148d7565b6103e892505b84831115612636576001856125d9818661491a565b6125e49060646148d7565b6125ee91906148b7565b106126315760405162461bcd60e51b815260206004820152601360248201527210d95a5b1a5b99d31a5b5a5d14995858da1959606a1b60448201526064016106bf565b61081f565b8285111561081f5760018561264b858261491a565b6126569060646148d7565b61266091906148b7565b1061081f5760405162461bcd60e51b815260206004820152601360248201527210d95a5b1a5b99d31a5b5a5d14995858da1959606a1b60448201526064016106bf565b6040805160028082526060808301845292600092919060208301908036833701905050905086816000815181106126ea57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061272c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260048054604051636eb1769f60e11b815230928101929092528216602482015242918691908a169063dd62ed3e9060440160206040518083038186803b15801561278b57600080fd5b505afa15801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c391906144ea565b10156127e3576004546127e3906001600160a01b038a8116911687612bcd565b600480546040516338ed173960e01b81526001600160a01b03909116916338ed17399161281a918991899188918d918991016147da565b600060405180830381600087803b15801561283457600080fd5b505af1158015612848573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612870919081019061432c565b98975050505050505050565b6000612887846117ab565b80519091506001600160a01b03166128b15760405162461bcd60e51b81526004016106bf9061470c565b60018215151461291e5763ffffffff84166000908152600b60205260409020541561291e5760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720616c726561647920636f6e6669677572656400000000000060448201526064016106bf565b600554604051631526fe2760e01b8152600481018590526000916001600160a01b031690631526fe2790602401608060405180830381600087803b15801561296557600080fd5b505af1158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d91906143db565b905060006129b38360000151846020015161247f565b9050806001600160a01b031682600001516001600160a01b031614612a2d5760405162461bcd60e51b815260206004820152602a60248201527f496e636f7272656374204d617374657243686566277320706f6f6c49642077616044820152691cc81c1c9bdd9a59195960b21b60648201526084016106bf565b63ffffffff86166000908152600b6020526040908190208690556005549051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000199183169063dd62ed3e9060440160206040518083038186803b158015612a9457600080fd5b505afa158015612aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acc91906144ea565b1015612aee57600554612aee906001600160a01b038381169116600019612bcd565b505050505050565b6000806000612b05858561388f565b509050600080612b15878761247f565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b859190614497565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614612bbc578082612bbf565b81815b909890975095505050505050565b801580612c565750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5491906144ea565b155b612cc15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106bf565b6040516001600160a01b03831660248201526044810182905261082490849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613968565b6000612d2f826117ab565b63ffffffff83166000908152600860205260409020549091506001600160a01b0316612d6d5760405162461bcd60e51b81526004016106bf9061470c565b6000612d7d83836000015161107e565b90506000612d8f84846020015161107e565b9050811580612d9c575080155b15612da75750505050565b6000806000806000612dc188600001518960200151612af6565b9150915080821115612e6357600081612ddc846103e86148d7565b612de691906148b7565b905060006103e8612df7838a6148d7565b612e0191906148b7565b905080891015612e2c5788965081612e1b886103e86148d7565b612e2591906148b7565b9550612e5c565b88811015612e55576103e8612e41838a6148d7565b612e4b91906148b7565b9650879550612e5c565b8896508795505b5050612efd565b80821015612efd57600082612e7a836103e86148d7565b612e8491906148b7565b905060006103e8612e95838b6148d7565b612e9f91906148b7565b905080881015612eca5781612eb6896103e86148d7565b612ec091906148b7565b9650879550612efa565b87811015612ef3578896506103e8612ee283896148d7565b612eec91906148b7565b9550612efa565b8896508795505b50505b60048054895160208b015160405162e8e33760e81b81526001600160a01b039283169481019490945281166024840152604483018890526064830187905260006084840181905260a48401523060c48401524260e4840152169063e8e337009061010401606060405180830381600087803b158015612f7b57600080fd5b505af1158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb39190614525565b63ffffffff8c166000908152600c602090815260408083208e516001600160a01b0316845290915281208054929750899450925090612ff390849061491a565b909155505063ffffffff89166000908152600c602090815260408083208b8301516001600160a01b031684529091528120805486929061303490849061491a565b90915550506040518381527f250600b7e1d8b908a0f07fa409e087c1b43ef3a5de3c0e23a41998c311f0ea909060200160405180910390a16040805163ffffffff8b168152602081018590527fb28fd890673610fa2a3efb1cf64ae1b26dd83c3261fbd99f0d4a5821ccdaa993910160405180910390a1505050505050505050565b6040516001600160a01b03831660248201526044810182905261082490849063a9059cbb60e01b90606401612ced565b60006130f1836117ab565b9050811561310c5761310c816000015182602001518461250c565b60008061311885613535565b91509150600061312b8383888b8b613a3a565b60055463ffffffff88166000908152600b602052604090819020549051630441a3e760e41b81526004810191909152602481018390529192506001600160a01b03169063441a3e7090604401600060405180830381600087803b15801561319157600080fd5b505af11580156131a5573d6000803e3d6000fd5b5050600454865160208801516131df94506001600160a01b03909216925084916131cf919061247f565b6001600160a01b03169190612bcd565b6004548451602086015160009283926001600160a01b039091169163baa2abde9190868580306132114261016861489f565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b15801561327e57600080fd5b505af1158015613292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b69190614502565b915091506132c786898c8585613bdd565b50505050505050505050565b600054610100900460ff16806132ec575060005460ff16155b6133085760405162461bcd60e51b81526004016106bf906146be565b600054610100900460ff1615801561332a576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610c22576000805461ff00191690555050565b6000808061336f848661489f565b116133bc5760405162461bcd60e51b815260206004820181905260248201527f537573686953776170496e746567726174696f6e3a206e6f2062616c616e636560448201526064016106bf565b6000806133d187600001518860200151612af6565b9150915080821115613482576000816133ec846103e86148d7565b6133f691906148b7565b905060006103e861340783896148d7565b61341191906148b7565b9050808810156134565760028261342a8a6103e86148d7565b61343491906148b7565b61343e908961491a565b61344891906148b7565b94508860200151955061347b565b8781101561347b57600261346a828a61491a565b61347491906148b7565b8951965094505b505061352b565b8082101561352b57600082613499836103e86148d7565b6134a391906148b7565b905060006103e86134b4838a6148d7565b6134be91906148b7565b9050868110156134ec5760026134d4828961491a565b6134de91906148b7565b945088602001519550613528565b8087101561352857600282613503896103e86148d7565b61350d91906148b7565b613517908a61491a565b61352191906148b7565b8951965094505b50505b5050935093915050565b6000806000613543846117ab565b60055463ffffffff86166000908152600b60205260408082205490516393f1a40b60e01b81526004810191909152306024820152929350916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156135a757600080fd5b505afa1580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614449565b51825160208401516135f1919061247f565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561363257600080fd5b505afa158015613646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366a91906144ea565b613674919061489f565b9050600061368a8360000151846020015161247f565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136c257600080fd5b505afa1580156136d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fa91906144ea565b613709836402540be4006148d7565b61371391906148b7565b90506402540be4008184600001516001600160a01b03166370a082316137418760000151886020015161247f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561378057600080fd5b505afa158015613794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b891906144ea565b6137c291906148d7565b6137cc91906148b7565b94506402540be4008184602001516001600160a01b03166370a082316137fa8760000151886020015161247f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561383957600080fd5b505afa15801561384d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387191906144ea565b61387b91906148d7565b61388591906148b7565b9350505050915091565b600080826001600160a01b0316846001600160a01b031614156138f45760405162461bcd60e51b815260206004820152601960248201527f4964656e746963616c20746f6b656e206164647265737365730000000000000060448201526064016106bf565b826001600160a01b0316846001600160a01b031610613914578284613917565b83835b90925090506001600160a01b0382166139615760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016106bf565b9250929050565b60006139bd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ee49092919063ffffffff16565b80519091501561082457808060200190518101906139db91906143bf565b6108245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bf565b600080613a46856117ab565b905060008082600001516001600160a01b0316866001600160a01b03161415613a9357613a746002866148b7565b9150613a8c86846020015160028861026c91906148b7565b9050613ad4565b82602001516001600160a01b0316866001600160a01b03161415613ad4578251613ac490879061026c6002896148b7565b9150613ad16002866148b7565b90505b600089831180613ae357508882115b15613af057506064613b1c565b613afa898b61489f565b613b04838561489f565b613b0f9060646148d7565b613b1991906148b7565b90505b60055463ffffffff89166000908152600b6020526040908190205490516393f1a40b60e01b8152600481019190915230602482015260649183916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015613b8257600080fd5b505afa158015613b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bba9190614449565b51613bc591906148d7565b613bcf91906148b7565b9a9950505050505050505050565b606085600001516001600160a01b0316846001600160a01b03161415613d60576020860151613c1490853085610a91848483611f49565b600080546040516337c61fc560e11b8152929350613ce692620100009091046001600160a01b031691636f8c3f8a91613c509190600401614663565b60206040518083038186803b158015613c6857600080fd5b505afa158015613c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca09190614119565b82600181518110613cc157634e487b7160e01b600052603260045260246000fd5b602002602001015185613cd4919061489f565b88516001600160a01b031691906130b6565b7f6fb183d14e6407db4dfb55deb83841283e9e3015e3aabe210d446b16f1ce0937858483600181518110613d2a57634e487b7160e01b600052603260045260246000fd5b6020026020010151613d3c919061489f565b6040805163ffffffff909316835260208301919091520160405180910390a1612aee565b85602001516001600160a01b0316846001600160a01b03161415612aee578551613d9290853086610a91848483611f49565b600080546040516337c61fc560e11b8152929350613e6792620100009091046001600160a01b031691636f8c3f8a91613dce9190600401614663565b60206040518083038186803b158015613de657600080fd5b505afa158015613dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1e9190614119565b82600181518110613e3f57634e487b7160e01b600052603260045260246000fd5b602002602001015184613e52919061489f565b60208901516001600160a01b031691906130b6565b7f6fb183d14e6407db4dfb55deb83841283e9e3015e3aabe210d446b16f1ce0937858383600181518110613eab57634e487b7160e01b600052603260045260246000fd5b6020026020010151613ebd919061489f565b6040805163ffffffff909316835260208301919091520160405180910390a1505050505050565b6060611f87848460008585843b613f3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bf565b600080866001600160a01b03168587604051613f599190614647565b60006040518083038185875af1925050503d8060008114613f96576040519150601f19603f3d011682016040523d82523d6000602084013e613f9b565b606091505b5091509150613fab828286613fb6565b979650505050505050565b60608315613fc5575081611ae0565b825115613fd55782518084602001fd5b8160405162461bcd60e51b81526004016106bf919061468b565b828054828255906000526020600020908101928215614044579160200282015b8281111561404457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061400f565b50614050929150614054565b5090565b5b808211156140505760008155600101614055565b600082601f830112614079578081fd5b8135602061408e6140898361487b565b61484a565b80838252828201915082860187848660051b89010111156140ad578586fd5b855b858110156140d45781356140c2816149c8565b845292840192908401906001016140af565b5090979650505050505050565b80516001600160701b03811681146140f857600080fd5b919050565b60006020828403121561410e578081fd5b8135611ae0816149c8565b60006020828403121561412a578081fd5b8151611ae0816149c8565b600080600060608486031215614149578182fd5b8335614154816149c8565b92506020840135614164816149c8565b929592945050506040919091013590565b60008060408385031215614187578182fd5b8235614192816149c8565b946020939093013593505050565b6000806000606084860312156141b4578283fd5b83356141bf816149c8565b92506020840135915060408401356141d6816149eb565b809150509250925092565b600080600080608085870312156141f6578081fd5b8435614201816149c8565b9350602085013592506040850135614218816149eb565b9396929550929360600135925050565b6000806040838503121561423a578182fd5b823567ffffffffffffffff811115614250578283fd5b61425c85828601614069565b925050602083013561426d816149c8565b809150509250929050565b600080600080600080600060e0888a031215614292578485fd5b873567ffffffffffffffff8111156142a8578586fd5b6142b48a828b01614069565b97505060208801356142c5816149c8565b955060408801356142d5816149c8565b945060608801356142e5816149c8565b935060808801356142f5816149c8565b925060a0880135614305816149c8565b915060c088013562ffffff8116811461431c578182fd5b8091505092959891949750929550565b6000602080838503121561433e578182fd5b825167ffffffffffffffff811115614354578283fd5b8301601f81018513614364578283fd5b80516143726140898261487b565b80828252848201915084840188868560051b8701011115614391578687fd5b8694505b838510156143b3578051835260019490940193918501918501614395565b50979650505050505050565b6000602082840312156143d0578081fd5b8151611ae0816149dd565b6000608082840312156143ec578081fd5b6040516080810181811067ffffffffffffffff8211171561440f5761440f6149b2565b604052825161441d816149c8565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b60006040828403121561445a578081fd5b6040516040810181811067ffffffffffffffff8211171561447d5761447d6149b2565b604052825181526020928301519281019290925250919050565b6000806000606084860312156144ab578081fd5b6144b4846140e1565b92506144c2602085016140e1565b915060408401516141d6816149eb565b6000602082840312156144e3578081fd5b5035919050565b6000602082840312156144fb578081fd5b5051919050565b60008060408385031215614514578182fd5b505080516020909101519092909150565b600080600060608486031215614539578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215614563578081fd5b8135611ae0816149eb565b60008060408385031215614580578182fd5b823561458b816149eb565b9150602083013561426d816149c8565b6000806000606084860312156145af578081fd5b8335614154816149eb565b600080604083850312156145cc578182fd5b8235614192816149eb565b6000806000606084860312156145eb578081fd5b83356145f6816149eb565b92506020840135915060408401356141d6816149dd565b60008060008060808587031215614622578182fd5b843561462d816149eb565b966020860135965060408601359560600135945092505050565b60008251614659818460208701614931565b9190910192915050565b60208101600a831061468557634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526146aa816040850160208701614931565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260129082015271141bdbdb08191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156148295784516001600160a01b031683529383019391830191600101614804565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614873576148736149b2565b604052919050565b600067ffffffffffffffff821115614895576148956149b2565b5060051b60200190565b600082198211156148b2576148b261499c565b500190565b6000826148d257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156148f1576148f161499c565b500290565b600062ffffff838116908316818110156149125761491261499c565b039392505050565b60008282101561492c5761492c61499c565b500390565b60005b8381101561494c578181015183820152602001614934565b83811115610af65750506000910152565b60006000198214156149715761497161499c565b5060010190565b600063ffffffff808316818114156149925761499261499c565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461124457600080fd5b801515811461124457600080fd5b63ffffffff8116811461124457600080fdfea2646970667358221220fa2a5f579ae614b50deac6860100697e01cc7c3374ec8023e985dd62cfb6b4bf64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,uint32)": {
        "params": {
          "amount": "The amount of the token being deposited",
          "tokenAddress": "The address of the deposited token"
        }
      },
      "getAmountOut(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOut": "The estimated amount of tokenOut to receive"
        }
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOutMinimum": "The minimum amount of tokenOut to receive, factoring in allowable slippage"
        }
      },
      "getBalance(uint32,address)": {
        "returns": {
          "_0": "tokenAddress The address of the token to get the balance of"
        }
      },
      "getPendingYield(address,uint256)": {
        "details": "Returns total amount of pending yield in SUSHI rewards",
        "params": {
          "poolId": "the masterchef pool to retrieve yield for",
          "token": "The pool address to check for pending SUSHI rewards"
        },
        "returns": {
          "_0": "Amount of yield available for harvest"
        }
      },
      "incrementBalance(uint32,address,uint256)": {
        "params": {
          "amount": "The amount of the token being deposited",
          "token": "The address of the deposited token"
        }
      },
      "initialize(address[],address,address,address,address,address,uint24)": {
        "params": {
          "controllers_": "The address of the controlling contract",
          "factoryAddress_": "The address of the SushiSwap factory contract",
          "swapRouterAddress_": "The address of the Sushi swap router contract"
        }
      },
      "rebalancePool(uint32,uint256,uint256,uint256)": {
        "params": {
          "maxSellTokenA": "max amount of tokenA to sell (to limit rebalancing)",
          "maxSellTokenB": "max amount of tokenB to sell (to limit rebalancing)",
          "poolId": "The ID of the pool to rebalance",
          "ratioX1000": "reserves ratio to control the price slippage"
        }
      },
      "withdraw(address,uint256,uint32)": {
        "params": {
          "amount": "The amoutn of the token to withdraw",
          "tokenAddress": "The address of the underlying token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "harvestYieldByPool(uint32,uint256,bool)": {
        "notice": "Harvest available yield for desired pool"
      },
      "rebalancePool(uint32,uint256,uint256,uint256)": {
        "notice": "Rebalances by attempting to swap up to max to get into position ratio"
      },
      "withdraw(address,uint256,uint32)": {
        "notice": "Withdraws token from the integration"
      }
    },
    "notice": "Integrates 0x Nodes to SushiSwap",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 722,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 725,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5806,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)14597"
      },
      {
        "astId": 3042,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3045,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21494,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "slippageNumerator",
        "offset": 0,
        "slot": "3",
        "type": "t_uint24"
      },
      {
        "astId": 21496,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "factoryAddress",
        "offset": 3,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 21498,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21500,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "masterChef",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21502,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "sushi",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21504,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "wethAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 21509,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "pools",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Pool)13763_storage)"
      },
      {
        "astId": 21511,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "poolCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 21514,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "poolIds",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 21518,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "stakings",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 21524,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 21528,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "priceCeilings",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21532,
        "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
        "label": "yieldBalances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)14597": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Pool)13763_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAMMIntegration.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)13763_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)13763_storage": {
        "encoding": "inplace",
        "label": "struct IAMMIntegration.Pool",
        "members": [
          {
            "astId": 13758,
            "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
            "label": "tokenA",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13760,
            "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
            "label": "tokenB",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13762,
            "contract": "contracts/yield-integrations/SushiSwapIntegration.sol:SushiSwapIntegration",
            "label": "positionID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}