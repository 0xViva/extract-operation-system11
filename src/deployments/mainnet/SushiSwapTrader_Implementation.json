{
  "address": "0xe04877B631413156E5Ef0Add161B6415E1269C23",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "ExecutedSwapExactInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "FailedSwapExactInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "name": "SushiSwapSlippageNumeratorUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biosBuyBack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageDenominator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddress_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "updateSlippageNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60634261cb8fdd8307d47ac2f5d0e95ff865ae07fdc3ad20eab3da5cb4da69b4",
  "receipt": {
    "to": null,
    "from": "0xBf98f6DF65dfa2f2b50d4a806cF134A209C7D364",
    "contractAddress": "0xe04877B631413156E5Ef0Add161B6415E1269C23",
    "transactionIndex": 100,
    "gasUsed": "1883598",
    "logsBloom": "0x
    "blockHash": "0x4e589f60144bae95c0ac815e5d28dc5abe0d13ee9d6be63f08772bd03263cf6b",
    "transactionHash": "0x60634261cb8fdd8307d47ac2f5d0e95ff865ae07fdc3ad20eab3da5cb4da69b4",
    "logs": [],
    "blockNumber": 13324453,
    "cumulativeGasUsed": "7112952",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "97ca3d881c0665fbcb6fbd64fc459161",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ExecutedSwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"FailedSwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"SushiSwapSlippageNumeratorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biosBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"updateSlippageNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"biosBuyBack()\":{\"returns\":{\"_0\":\"Bool indicating whether the trade succeeded\"}},\"getAmountOut(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOut\":\"The estimated amount of tokenOut to receive\"}},\"getAmountOutMinimum(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOutMinimum\":\"The minimum amount of tokenOut to receive, factoring in allowable slippage\"}},\"getFactoryAddress()\":{\"returns\":{\"_0\":\"SushiSwap Factory address\"}},\"getSlippageDenominator()\":{\"returns\":{\"_0\":\"The slippage denominator\"}},\"getSlippageNumerator()\":{\"returns\":{\"_0\":\"The slippage numerator\"}},\"initialize(address[],address,address,address,uint24)\":{\"params\":{\"controllers_\":\"The addresses of the controlling contracts\",\"factoryAddress_\":\"The address of the SushiSwap factory contract\",\"moduleMap_\":\"The address of the module map contract\",\"slippageNumerator_\":\"The number divided by the slippage denominator to get the slippage percentage\",\"swapRouterAddress_\":\"The address of the SushiSwap swap router contract\"}},\"swapExactInput(address,address,address,uint256,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"amountOutMin\":\"The minimum amount of tokenOut to receive from the swap\",\"recipient\":\"The address of the token out recipient\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"_0\":\"bool Indicates whether the swap succeeded\"}},\"updateSlippageNumerator(uint24)\":{\"params\":{\"slippageNumerator_\":\"The number divided by the slippage denominator to get the slippage percentage\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"biosBuyBack()\":{\"notice\":\"Swaps all WETH held in this contract for BIOS and sends to the kernel\"}},\"notice\":\"Integrates 0x Nodes to SushiSwap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SushiSwapTrader.sol\":\"SushiSwapTrader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc28d9f2ac7088d478d86ec6c0e1dadd48af1b2d0c1f6d497f9b652339e3002ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n  // controller address => is a controller\\n  mapping(address => bool) internal _controllers;\\n  address[] public controllers;\\n\\n  function __Controlled_init(address[] memory controllers_, address moduleMap_)\\n    public\\n    initializer\\n  {\\n    for (uint256 i; i < controllers_.length; i++) {\\n      _controllers[controllers_[i]] = true;\\n    }\\n    controllers = controllers_;\\n    __ModuleMapConsumer_init(moduleMap_);\\n  }\\n\\n  function addController(address controller) external onlyOwner {\\n    _controllers[controller] = true;\\n    bool added;\\n    for (uint256 i; i < controllers.length; i++) {\\n      if (controller == controllers[i]) {\\n        added = true;\\n      }\\n    }\\n    if (!added) {\\n      controllers.push(controller);\\n    }\\n  }\\n\\n  modifier onlyOwner() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n      \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n      \\\"Controlled::onlyManager: Caller is not manager\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyController() {\\n    require(\\n      _controllers[msg.sender],\\n      \\\"Controlled::onlyController: Caller is not controller\\\"\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xacea8b6724448e01f057a3aab52caa00ee1c117ed665255ed96c431aafe4ffdf\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n  IModuleMap public moduleMap;\\n\\n  function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n    moduleMap = IModuleMap(moduleMap_);\\n  }\\n}\\n\",\"keccak256\":\"0xaf4345a247e5e80ad895d9ca4c3503f53de2416b6a21134897505164c47042cb\",\"license\":\"GPL-2.0\"},\"contracts/core/SushiSwapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/ISushiSwapTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapFactory.sol\\\";\\nimport \\\"../interfaces/ISushiSwapRouter.sol\\\";\\nimport \\\"../interfaces/ISushiSwapPair.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to SushiSwap\\ncontract SushiSwapTrader is\\n  Initializable,\\n  ModuleMapConsumer,\\n  Controlled,\\n  ISushiSwapTrader\\n{\\n  using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n  uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n  uint24 private slippageNumerator;\\n  address private factoryAddress;\\n  address private swapRouterAddress;\\n\\n  event ExecutedSwapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    uint256 amountOut\\n  );\\n\\n  event FailedSwapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  );\\n\\n  event SushiSwapSlippageNumeratorUpdated(uint24 slippageNumerator);\\n\\n  /// @param controllers_ The addresses of the controlling contracts\\n  /// @param moduleMap_ The address of the module map contract\\n  /// @param factoryAddress_ The address of the SushiSwap factory contract\\n  /// @param swapRouterAddress_ The address of the SushiSwap swap router contract\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function initialize(\\n    address[] memory controllers_,\\n    address moduleMap_,\\n    address factoryAddress_,\\n    address swapRouterAddress_,\\n    uint24 slippageNumerator_\\n  ) public initializer {\\n    require(\\n      slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n      \\\"SushiSwapTrader::initialize: Slippage Numerator must be less than or equal to slippage denominator\\\"\\n    );\\n    __Controlled_init(controllers_, moduleMap_);\\n    __ModuleMapConsumer_init(moduleMap_);\\n    factoryAddress = factoryAddress_;\\n    swapRouterAddress = swapRouterAddress_;\\n    slippageNumerator = slippageNumerator_;\\n  }\\n\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function updateSlippageNumerator(uint24 slippageNumerator_)\\n    external\\n    override\\n    onlyManager\\n  {\\n    require(\\n      slippageNumerator_ != slippageNumerator,\\n      \\\"SushiSwapTrader::setSlippageNumerator: Slippage numerator must be set to a new value\\\"\\n    );\\n    require(\\n      slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n      \\\"SushiSwapTrader::setSlippageNumerator: Slippage Numerator must be less than or equal to slippage denominator\\\"\\n    );\\n\\n    slippageNumerator = slippageNumerator_;\\n\\n    emit SushiSwapSlippageNumeratorUpdated(slippageNumerator_);\\n  }\\n\\n  /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n  /// @return Bool indicating whether the trade succeeded\\n  function biosBuyBack() external override onlyController returns (bool) {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    address wethAddress = integrationMap.getWethTokenAddress();\\n    address biosAddress = integrationMap.getBiosTokenAddress();\\n    uint256 wethAmountIn = IERC20MetadataUpgradeable(wethAddress).balanceOf(\\n      address(this)\\n    );\\n\\n    uint256 biosAmountOutMin = getAmountOutMinimum(\\n      wethAddress,\\n      biosAddress,\\n      wethAmountIn\\n    );\\n\\n    return\\n      swapExactInput(\\n        wethAddress,\\n        integrationMap.getBiosTokenAddress(),\\n        moduleMap.getModuleAddress(Modules.Kernel),\\n        wethAmountIn,\\n        biosAmountOutMin\\n      );\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address of the token out recipient\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n  /// @return bool Indicates whether the swap succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  ) public override onlyController returns (bool) {\\n    require(\\n      IERC20MetadataUpgradeable(tokenIn).balanceOf(address(this)) >= amountIn,\\n      \\\"SushiSwapTrader::swapExactInput: Balance is less than trade amount\\\"\\n    );\\n\\n    address[] memory path = new address[](2);\\n    path[0] = tokenIn;\\n    path[1] = tokenOut;\\n    uint256 deadline = block.timestamp;\\n\\n    if (\\n      IERC20MetadataUpgradeable(tokenIn).allowance(\\n        address(this),\\n        swapRouterAddress\\n      ) == 0\\n    ) {\\n      IERC20MetadataUpgradeable(tokenIn).safeApprove(\\n        swapRouterAddress,\\n        type(uint256).max\\n      );\\n    }\\n\\n    uint256 tokenOutBalanceBefore = IERC20MetadataUpgradeable(tokenOut)\\n      .balanceOf(recipient);\\n\\n    try\\n      ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\\n        amountIn,\\n        amountOutMin,\\n        path,\\n        recipient,\\n        deadline\\n      )\\n    {\\n      emit ExecutedSwapExactInput(\\n        tokenIn,\\n        tokenOut,\\n        amountIn,\\n        amountOutMin,\\n        IERC20MetadataUpgradeable(tokenOut).balanceOf(recipient) -\\n          tokenOutBalanceBefore\\n      );\\n      return true;\\n    } catch {\\n      emit FailedSwapExactInput(tokenIn, tokenOut, amountIn, amountOutMin);\\n      return false;\\n    }\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n  function getAmountOutMinimum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 amountOutMinimum) {\\n    amountOutMinimum =\\n      (getAmountOut(tokenIn, tokenOut, amountIn) *\\n        (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\\n      SLIPPAGE_DENOMINATOR;\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOut The estimated amount of tokenOut to receive\\n  function getAmountOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 amountOut) {\\n    require(\\n      amountIn > 0,\\n      \\\"SushiSwapTrader::getAmountOut: amountIn must be greater than zero\\\"\\n    );\\n    (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"SushiSwapTrader::getAmountOut: No liquidity in pool reserves\\\"\\n    );\\n    uint256 amountInWithFee = amountIn * 997;\\n    uint256 numerator = amountInWithFee * (reserveOut);\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return reserveA The reserve balance of tokenA in the pool\\n  /// @return reserveB The reserve balance of tokenB in the pool\\n  function getReserves(address tokenA, address tokenB)\\n    internal\\n    view\\n    returns (uint256 reserveA, uint256 reserveB)\\n  {\\n    (address token0, ) = getTokensSorted(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(\\n      getPairFor(tokenA, tokenB)\\n    ).getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return token0 The address of sorted token0\\n  /// @return token1 The address of sorted token1\\n  function getTokensSorted(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(\\n      tokenA != tokenB,\\n      \\\"SushiSwapTrader::sortToken: Identical token addresses\\\"\\n    );\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"SushiSwapTrader::sortToken: Zero address\\\");\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return pair The address of the SushiSwap pool contract\\n  function getPairFor(address tokenA, address tokenB)\\n    internal\\n    view\\n    returns (address pair)\\n  {\\n    pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\\n  }\\n\\n  /// @return SushiSwap Factory address\\n  function getFactoryAddress() public view returns (address) {\\n    return factoryAddress;\\n  }\\n\\n  /// @return The slippage numerator\\n  function getSlippageNumerator() public view returns (uint24) {\\n    return slippageNumerator;\\n  }\\n\\n  /// @return The slippage denominator\\n  function getSlippageDenominator() public pure returns (uint24) {\\n    return SLIPPAGE_DENOMINATOR;\\n  }\\n}\\n\",\"keccak256\":\"0xe3f134476aa274988d825cf6db999b8c5be76ac49232d2b9848ee32019001f58\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegrationMap {\\n  struct Integration {\\n    bool added;\\n    string name;\\n  }\\n\\n  struct Token {\\n    uint256 id;\\n    bool added;\\n    bool acceptingDeposits;\\n    bool acceptingWithdrawals;\\n    uint256 biosRewardWeight;\\n    uint256 reserveRatioNumerator;\\n  }\\n\\n  /// @param contractAddress The address of the integration contract\\n  /// @param name The name of the protocol being integrated to\\n  function addIntegration(address contractAddress, string memory name) external;\\n\\n  /// @param tokenAddress The address of the ERC20 token contract\\n  /// @param acceptingDeposits Whether token deposits are enabled\\n  /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n  /// @param biosRewardWeight Token weight for BIOS rewards\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function addToken(\\n    address tokenAddress,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @param rewardWeight The updated token BIOS reward weight\\n  function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n    external;\\n\\n  /// @param tokenAddress the address of the token ERC20 contract\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function updateTokenReserveRatioNumerator(\\n    address tokenAddress,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param integrationId The ID of the integration\\n  /// @return The address of the integration contract\\n  function getIntegrationAddress(uint256 integrationId)\\n    external\\n    view\\n    returns (address);\\n\\n  /// @param integrationAddress The address of the integration contract\\n  /// @return The name of the of the protocol being integrated to\\n  function getIntegrationName(address integrationAddress)\\n    external\\n    view\\n    returns (string memory);\\n\\n  /// @return The address of the WETH token\\n  function getWethTokenAddress() external view returns (address);\\n\\n  /// @return The address of the BIOS token\\n  function getBiosTokenAddress() external view returns (address);\\n\\n  /// @param tokenId The ID of the token\\n  /// @return The address of the token ERC20 contract\\n  function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The index of the token in the tokens array\\n  function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The token BIOS reward weight\\n  function getTokenBiosRewardWeight(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return rewardWeightSum reward weight of depositable tokens\\n  function getBiosRewardWeightSum()\\n    external\\n    view\\n    returns (uint256 rewardWeightSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether depositing this token is currently enabled\\n  function getTokenAcceptingDeposits(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether withdrawing this token is currently enabled\\n  function getTokenAcceptingWithdrawals(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  // @param tokenAddress The address of the token ERC20 contract\\n  // @return bool indicating whether the token has been added\\n  function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n  // @param integrationAddress The address of the integration contract\\n  // @return bool indicating whether the integration has been added\\n  function getIsIntegrationAdded(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @notice get the length of supported tokens\\n  /// @return The quantity of tokens added\\n  function getTokenAddressesLength() external view returns (uint256);\\n\\n  /// @notice get the length of supported integrations\\n  /// @return The quantity of integrations added\\n  function getIntegrationAddressesLength() external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The value that gets divided by the reserve ratio denominator\\n  function getTokenReserveRatioNumerator(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The token reserve ratio denominator\\n  function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xc593d1edecb21cbf0d025baf0a746ea80d96b24fa2f22e92427fb9215b0bfd28\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IKernel {\\n  /// @param account The address of the account to check if they are a manager\\n  /// @return Bool indicating whether the account is a manger\\n  function isManager(address account) external view returns (bool);\\n\\n  /// @param account The address of the account to check if they are an owner\\n  /// @return Bool indicating whether the account is an owner\\n  function isOwner(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd74d8d773b033e68e2a025ddb8a88516862921e862a62300829b16d24a3ca392\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nenum Modules {\\n  Kernel, // 0\\n  UserPositions, // 1\\n  YieldManager, // 2\\n  IntegrationMap, // 3\\n  BiosRewards, // 4\\n  EtherRewards, // 5\\n  SushiSwapTrader, // 6\\n  UniswapTrader, // 7\\n  StrategyMap, // 8\\n  StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n  function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x056163d4d803d10eb46fb14b3679f7289996ac6f0b6bdf81981d99c12c5183c3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapFactory {\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n}\\n\",\"keccak256\":\"0x4b0fa979561285dd38ced30cf88bc6ccc01b51f069ebdf460c7abf1133e4a22c\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapPair {\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4c01c178e274d03c5f47243da1acdd8aa05cc52fc3762de7fad36681fdd9e101\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOut, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x2530f4fe4385cf937549750762dda6f109cc17041fda8815676088bb2e536861\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapTrader {\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function updateSlippageNumerator(uint24 slippageNumerator_) external;\\n\\n  /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n  /// @return Bool indicating whether the trade succeeded\\n  function biosBuyBack() external returns (bool);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address of the token out recipient\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n  /// @return bool Indicates whether the swap succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe5e238b50ccf6a0c7ab74fc4c11ff08577f6683311d88b0d763ce3f0305f4922\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061211d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806398c671ce1161008c578063a9c2e36c11610066578063a9c2e36c146101c1578063bbb37017146101d9578063ccbfc16c146101e2578063e94b0dd2146101f557600080fd5b806398c671ce1461017e578063a0cae8f614610191578063a7fc7a07146101ae57600080fd5b80630f0a1c6f146100d4578063257b31851461010a5780632ef318c11461011f57806349470541146101325780634aa06652146101555780638f769ec914610176575b600080fd5b6000546100ed906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61011d610118366004611c19565b610208565b005b61011d61012d366004611d9e565b610394565b610145610140366004611b2f565b61069b565b6040519015158152602001610101565b610168610163366004611b89565b610b58565b604051908152602001610101565b610145610cbc565b61011d61018c366004611bc9565b610ff5565b60035462ffffff165b60405162ffffff9091168152602001610101565b61011d6101bc366004611af7565b6110f6565b600354630100000090046001600160a01b03166100ed565b620f424061019a565b6101686101f0366004611b89565b611331565b6100ed610203366004611db8565b611377565b600054610100900460ff1680610221575060005460ff16155b6102465760405162461bcd60e51b815260040161023d90611e5f565b60405180910390fd5b600054610100900460ff16158015610268576000805461ffff19166101011790555b600354620f424062ffffff909116111561031b5760405162461bcd60e51b815260206004820152606260248201527f5375736869537761705472616465723a3a696e697469616c697a653a20536c6960448201527f7070616765204e756d657261746f72206d757374206265206c6573732074686160648201527f6e206f7220657175616c20746f20736c6970706167652064656e6f6d696e617460848201526137b960f11b60a482015260c40161023d565b6103258686610ff5565b61032e856113a1565b60038054600480546001600160a01b0319166001600160a01b03878116919091179091556001600160b81b031990911663010000009187169190910262ffffff19161762ffffff8416179055801561038c576000805461ff00191690555b505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916103c99190600401611e04565b60206040518083038186803b1580156103e157600080fd5b505afa1580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190611b13565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190611d30565b6104f55760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b606482015260840161023d565b60035462ffffff828116911614156105925760405162461bcd60e51b815260206004820152605460248201527f5375736869537761705472616465723a3a736574536c6970706167654e756d6560448201527f7261746f723a20536c697070616765206e756d657261746f72206d7573742062606482015273652073657420746f2061206e65772076616c756560601b608482015260a40161023d565b600354620f424062ffffff909116111561064f5760405162461bcd60e51b815260206004820152606c60248201527f5375736869537761705472616465723a3a736574536c6970706167654e756d6560448201527f7261746f723a20536c697070616765204e756d657261746f72206d757374206260648201527f65206c657373207468616e206f7220657175616c20746f20736c69707061676560848201526b103232b737b6b4b730ba37b960a11b60a482015260c40161023d565b6003805462ffffff191662ffffff83169081179091556040519081527f2946b3a1ef03d9a59c864dc0f1780b8ce4a27cdf227a341877e28742649efb909060200160405180910390a150565b3360009081526001602052604081205460ff166106ca5760405162461bcd60e51b815260040161023d90611ead565b6040516370a0823160e01b815230600482015283906001600160a01b038816906370a082319060240160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190611dd0565b10156107c25760405162461bcd60e51b815260206004820152604260248201527f5375736869537761705472616465723a3a737761704578616374496e7075743a60448201527f2042616c616e6365206973206c657373207468616e20747261646520616d6f756064820152611b9d60f21b608482015260a40161023d565b604080516002808252606082018352600092602083019080368337019050509050868160008151811061080557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061084757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260048054604051636eb1769f60e11b8152309281019290925282166024820152429189169063dd62ed3e9060440160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190611dd0565b6108fb576004546108fb906001600160a01b038a8116911660001961142f565b6040516370a0823160e01b81526001600160a01b038781166004830152600091908916906370a082319060240160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190611dd0565b600480546040516338ed173960e01b81529293506001600160a01b0316916338ed1739916109b0918a918a9189918e918a9101611f01565b600060405180830381600087803b1580156109ca57600080fd5b505af19250505080156109ff57506040513d6000823e601f3d908101601f191682016040526109fc9190810190611c9d565b60015b610a6157604080516001600160a01b03808c1682528a166020820152908101879052606081018690527fc6025cc9171961a5e71ebf48ad90ba0ec8fe882c4f0c422b084f1b82bbe767e29060800160405180910390a160009350505050610b4f565b506040516370a0823160e01b81526001600160a01b0388811660048301527fbaaf81d8ac8c3accbbfd1f5837a8785ccae1884dcd7f2d30ca408cc7b926af99918b918b918a918a9187918516906370a082319060240160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190611dd0565b610b119190612041565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00160405180910390a1600193505050505b95945050505050565b6000808211610bd95760405162461bcd60e51b815260206004820152604160248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a206160448201527f6d6f756e74496e206d7573742062652067726561746572207468616e207a65726064820152606f60f81b608482015260a40161023d565b600080610be68686611575565b91509150600082118015610bfa5750600081115b610c6c5760405162461bcd60e51b815260206004820152603c60248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a204e60448201527f6f206c697175696469747920696e20706f6f6c20726573657276657300000000606482015260840161023d565b6000610c7a856103e5611ffe565b90506000610c888383611ffe565b9050600082610c99866103e8611ffe565b610ca39190611fc6565b9050610caf8183611fde565b9998505050505050505050565b3360009081526001602052604081205460ff16610ceb5760405162461bcd60e51b815260040161023d90611ead565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610d2290600390600401611e04565b60206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d729190611b13565b90506000816001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de79190611b13565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190611b13565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b158015610ea157600080fd5b505afa158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190611dd0565b90506000610ee8848484611331565b9050610feb84866001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2757600080fd5b505afa158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190611b13565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610f949190600401611e04565b60206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190611b13565b858561069b565b9550505050505090565b600054610100900460ff168061100e575060005460ff16155b61102a5760405162461bcd60e51b815260040161023d90611e5f565b600054610100900460ff1615801561104c576000805461ffff19166101011790555b60005b83518110156110c157600180600086848151811061107d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110b981612088565b91505061104f565b5082516110d59060029060208601906119d6565b506110df826113a1565b80156110f1576000805461ff00191690555b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161112b9190600401611e04565b60206040518083038186803b15801561114357600080fd5b505afa158015611157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117b9190611b13565b6040516317aa5fb760e11b81523360048201526001600160a01b039190911690632f54bf6e9060240160206040518083038186803b1580156111bc57600080fd5b505afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190611d30565b6112535760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161023d565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b6002548110156112db57600281815481106112a557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156112c957600191505b806112d381612088565b91505061127a565b508061132d57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600354600090620f42409061134b9062ffffff168261201d565b62ffffff1661135b868686610b58565b6113659190611ffe565b61136f9190611fde565b949350505050565b6002818154811061138757600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff16806113ba575060005460ff16155b6113d65760405162461bcd60e51b815260040161023d90611e5f565b600054610100900460ff161580156113f8576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561132d576000805461ff00191690555050565b8015806114b85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561147e57600080fd5b505afa158015611492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b69190611dd0565b155b6115235760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161023d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526110f190849061164c565b6000806000611584858561171e565b5090506000806115948787611837565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156115cc57600080fd5b505afa1580156115e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116049190611d50565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461163b57808261163e565b81815b909890975095505050505050565b60006116a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118cb9092919063ffffffff16565b8051909150156110f157808060200190518101906116bf9190611d30565b6110f15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161023d565b600080826001600160a01b0316846001600160a01b031614156117a15760405162461bcd60e51b815260206004820152603560248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a204964656e604482015274746963616c20746f6b656e2061646472657373657360581b606482015260840161023d565b826001600160a01b0316846001600160a01b0316106117c15782846117c4565b83835b90925090506001600160a01b0382166118305760405162461bcd60e51b815260206004820152602860248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a205a65726f604482015267206164647265737360c01b606482015260840161023d565b9250929050565b60035460405163e6a4390560e01b81526001600160a01b038481166004830152838116602483015260009263010000009004169063e6a439059060440160206040518083038186803b15801561188c57600080fd5b505afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190611b13565b9392505050565b606061136f848460008585843b6119245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161023d565b600080866001600160a01b031685876040516119409190611de8565b60006040518083038185875af1925050503d806000811461197d576040519150601f19603f3d011682016040523d82523d6000602084013e611982565b606091505b509150915061199282828661199d565b979650505050505050565b606083156119ac5750816118c4565b8251156119bc5782518084602001fd5b8160405162461bcd60e51b815260040161023d9190611e2c565b828054828255906000526020600020908101928215611a2b579160200282015b82811115611a2b57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906119f6565b50611a37929150611a3b565b5090565b5b80821115611a375760008155600101611a3c565b600082601f830112611a60578081fd5b81356020611a75611a7083611fa2565b611f71565b80838252828201915082860187848660051b8901011115611a94578586fd5b855b85811015611abb578135611aa9816120cf565b84529284019290840190600101611a96565b5090979650505050505050565b80516001600160701b0381168114611adf57600080fd5b919050565b803562ffffff81168114611adf57600080fd5b600060208284031215611b08578081fd5b81356118c4816120cf565b600060208284031215611b24578081fd5b81516118c4816120cf565b600080600080600060a08688031215611b46578081fd5b8535611b51816120cf565b94506020860135611b61816120cf565b93506040860135611b71816120cf565b94979396509394606081013594506080013592915050565b600080600060608486031215611b9d578283fd5b8335611ba8816120cf565b92506020840135611bb8816120cf565b929592945050506040919091013590565b60008060408385031215611bdb578182fd5b823567ffffffffffffffff811115611bf1578283fd5b611bfd85828601611a50565b9250506020830135611c0e816120cf565b809150509250929050565b600080600080600060a08688031215611c30578081fd5b853567ffffffffffffffff811115611c46578182fd5b611c5288828901611a50565b9550506020860135611c63816120cf565b93506040860135611c73816120cf565b92506060860135611c83816120cf565b9150611c9160808701611ae4565b90509295509295909350565b60006020808385031215611caf578182fd5b825167ffffffffffffffff811115611cc5578283fd5b8301601f81018513611cd5578283fd5b8051611ce3611a7082611fa2565b80828252848201915084840188868560051b8701011115611d02578687fd5b8694505b83851015611d24578051835260019490940193918501918501611d06565b50979650505050505050565b600060208284031215611d41578081fd5b815180151581146118c4578182fd5b600080600060608486031215611d64578283fd5b611d6d84611ac8565b9250611d7b60208501611ac8565b9150604084015163ffffffff81168114611d93578182fd5b809150509250925092565b600060208284031215611daf578081fd5b6118c482611ae4565b600060208284031215611dc9578081fd5b5035919050565b600060208284031215611de1578081fd5b5051919050565b60008251611dfa818460208701612058565b9190910192915050565b60208101600a8310611e2657634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152611e4b816040850160208701612058565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611f505784516001600160a01b031683529383019391830191600101611f2b565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f9a57611f9a6120b9565b604052919050565b600067ffffffffffffffff821115611fbc57611fbc6120b9565b5060051b60200190565b60008219821115611fd957611fd96120a3565b500190565b600082611ff957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612018576120186120a3565b500290565b600062ffffff83811690831681811015612039576120396120a3565b039392505050565b600082821015612053576120536120a3565b500390565b60005b8381101561207357818101518382015260200161205b565b83811115612082576000848401525b50505050565b600060001982141561209c5761209c6120a3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146120e457600080fd5b5056fea2646970667358221220939ea69640bb77c2c0582d073379e55755d556f22ee75614c3f70d689a422da364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806398c671ce1161008c578063a9c2e36c11610066578063a9c2e36c146101c1578063bbb37017146101d9578063ccbfc16c146101e2578063e94b0dd2146101f557600080fd5b806398c671ce1461017e578063a0cae8f614610191578063a7fc7a07146101ae57600080fd5b80630f0a1c6f146100d4578063257b31851461010a5780632ef318c11461011f57806349470541146101325780634aa06652146101555780638f769ec914610176575b600080fd5b6000546100ed906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61011d610118366004611c19565b610208565b005b61011d61012d366004611d9e565b610394565b610145610140366004611b2f565b61069b565b6040519015158152602001610101565b610168610163366004611b89565b610b58565b604051908152602001610101565b610145610cbc565b61011d61018c366004611bc9565b610ff5565b60035462ffffff165b60405162ffffff9091168152602001610101565b61011d6101bc366004611af7565b6110f6565b600354630100000090046001600160a01b03166100ed565b620f424061019a565b6101686101f0366004611b89565b611331565b6100ed610203366004611db8565b611377565b600054610100900460ff1680610221575060005460ff16155b6102465760405162461bcd60e51b815260040161023d90611e5f565b60405180910390fd5b600054610100900460ff16158015610268576000805461ffff19166101011790555b600354620f424062ffffff909116111561031b5760405162461bcd60e51b815260206004820152606260248201527f5375736869537761705472616465723a3a696e697469616c697a653a20536c6960448201527f7070616765204e756d657261746f72206d757374206265206c6573732074686160648201527f6e206f7220657175616c20746f20736c6970706167652064656e6f6d696e617460848201526137b960f11b60a482015260c40161023d565b6103258686610ff5565b61032e856113a1565b60038054600480546001600160a01b0319166001600160a01b03878116919091179091556001600160b81b031990911663010000009187169190910262ffffff19161762ffffff8416179055801561038c576000805461ff00191690555b505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916103c99190600401611e04565b60206040518083038186803b1580156103e157600080fd5b505afa1580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190611b13565b60405163f3ae241560e01b81523360048201526001600160a01b03919091169063f3ae24159060240160206040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190611d30565b6104f55760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b606482015260840161023d565b60035462ffffff828116911614156105925760405162461bcd60e51b815260206004820152605460248201527f5375736869537761705472616465723a3a736574536c6970706167654e756d6560448201527f7261746f723a20536c697070616765206e756d657261746f72206d7573742062606482015273652073657420746f2061206e65772076616c756560601b608482015260a40161023d565b600354620f424062ffffff909116111561064f5760405162461bcd60e51b815260206004820152606c60248201527f5375736869537761705472616465723a3a736574536c6970706167654e756d6560448201527f7261746f723a20536c697070616765204e756d657261746f72206d757374206260648201527f65206c657373207468616e206f7220657175616c20746f20736c69707061676560848201526b103232b737b6b4b730ba37b960a11b60a482015260c40161023d565b6003805462ffffff191662ffffff83169081179091556040519081527f2946b3a1ef03d9a59c864dc0f1780b8ce4a27cdf227a341877e28742649efb909060200160405180910390a150565b3360009081526001602052604081205460ff166106ca5760405162461bcd60e51b815260040161023d90611ead565b6040516370a0823160e01b815230600482015283906001600160a01b038816906370a082319060240160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190611dd0565b10156107c25760405162461bcd60e51b815260206004820152604260248201527f5375736869537761705472616465723a3a737761704578616374496e7075743a60448201527f2042616c616e6365206973206c657373207468616e20747261646520616d6f756064820152611b9d60f21b608482015260a40161023d565b604080516002808252606082018352600092602083019080368337019050509050868160008151811061080557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061084757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260048054604051636eb1769f60e11b8152309281019290925282166024820152429189169063dd62ed3e9060440160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190611dd0565b6108fb576004546108fb906001600160a01b038a8116911660001961142f565b6040516370a0823160e01b81526001600160a01b038781166004830152600091908916906370a082319060240160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190611dd0565b600480546040516338ed173960e01b81529293506001600160a01b0316916338ed1739916109b0918a918a9189918e918a9101611f01565b600060405180830381600087803b1580156109ca57600080fd5b505af19250505080156109ff57506040513d6000823e601f3d908101601f191682016040526109fc9190810190611c9d565b60015b610a6157604080516001600160a01b03808c1682528a166020820152908101879052606081018690527fc6025cc9171961a5e71ebf48ad90ba0ec8fe882c4f0c422b084f1b82bbe767e29060800160405180910390a160009350505050610b4f565b506040516370a0823160e01b81526001600160a01b0388811660048301527fbaaf81d8ac8c3accbbfd1f5837a8785ccae1884dcd7f2d30ca408cc7b926af99918b918b918a918a9187918516906370a082319060240160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190611dd0565b610b119190612041565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00160405180910390a1600193505050505b95945050505050565b6000808211610bd95760405162461bcd60e51b815260206004820152604160248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a206160448201527f6d6f756e74496e206d7573742062652067726561746572207468616e207a65726064820152606f60f81b608482015260a40161023d565b600080610be68686611575565b91509150600082118015610bfa5750600081115b610c6c5760405162461bcd60e51b815260206004820152603c60248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a204e60448201527f6f206c697175696469747920696e20706f6f6c20726573657276657300000000606482015260840161023d565b6000610c7a856103e5611ffe565b90506000610c888383611ffe565b9050600082610c99866103e8611ffe565b610ca39190611fc6565b9050610caf8183611fde565b9998505050505050505050565b3360009081526001602052604081205460ff16610ceb5760405162461bcd60e51b815260040161023d90611ead565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610d2290600390600401611e04565b60206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d729190611b13565b90506000816001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de79190611b13565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190611b13565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b158015610ea157600080fd5b505afa158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190611dd0565b90506000610ee8848484611331565b9050610feb84866001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2757600080fd5b505afa158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190611b13565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610f949190600401611e04565b60206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190611b13565b858561069b565b9550505050505090565b600054610100900460ff168061100e575060005460ff16155b61102a5760405162461bcd60e51b815260040161023d90611e5f565b600054610100900460ff1615801561104c576000805461ffff19166101011790555b60005b83518110156110c157600180600086848151811061107d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110b981612088565b91505061104f565b5082516110d59060029060208601906119d6565b506110df826113a1565b80156110f1576000805461ff00191690555b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161112b9190600401611e04565b60206040518083038186803b15801561114357600080fd5b505afa158015611157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117b9190611b13565b6040516317aa5fb760e11b81523360048201526001600160a01b039190911690632f54bf6e9060240160206040518083038186803b1580156111bc57600080fd5b505afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190611d30565b6112535760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161023d565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b6002548110156112db57600281815481106112a557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156112c957600191505b806112d381612088565b91505061127a565b508061132d57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600354600090620f42409061134b9062ffffff168261201d565b62ffffff1661135b868686610b58565b6113659190611ffe565b61136f9190611fde565b949350505050565b6002818154811061138757600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff16806113ba575060005460ff16155b6113d65760405162461bcd60e51b815260040161023d90611e5f565b600054610100900460ff161580156113f8576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561132d576000805461ff00191690555050565b8015806114b85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561147e57600080fd5b505afa158015611492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b69190611dd0565b155b6115235760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161023d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526110f190849061164c565b6000806000611584858561171e565b5090506000806115948787611837565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156115cc57600080fd5b505afa1580156115e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116049190611d50565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461163b57808261163e565b81815b909890975095505050505050565b60006116a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118cb9092919063ffffffff16565b8051909150156110f157808060200190518101906116bf9190611d30565b6110f15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161023d565b600080826001600160a01b0316846001600160a01b031614156117a15760405162461bcd60e51b815260206004820152603560248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a204964656e604482015274746963616c20746f6b656e2061646472657373657360581b606482015260840161023d565b826001600160a01b0316846001600160a01b0316106117c15782846117c4565b83835b90925090506001600160a01b0382166118305760405162461bcd60e51b815260206004820152602860248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a205a65726f604482015267206164647265737360c01b606482015260840161023d565b9250929050565b60035460405163e6a4390560e01b81526001600160a01b038481166004830152838116602483015260009263010000009004169063e6a439059060440160206040518083038186803b15801561188c57600080fd5b505afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190611b13565b9392505050565b606061136f848460008585843b6119245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161023d565b600080866001600160a01b031685876040516119409190611de8565b60006040518083038185875af1925050503d806000811461197d576040519150601f19603f3d011682016040523d82523d6000602084013e611982565b606091505b509150915061199282828661199d565b979650505050505050565b606083156119ac5750816118c4565b8251156119bc5782518084602001fd5b8160405162461bcd60e51b815260040161023d9190611e2c565b828054828255906000526020600020908101928215611a2b579160200282015b82811115611a2b57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906119f6565b50611a37929150611a3b565b5090565b5b80821115611a375760008155600101611a3c565b600082601f830112611a60578081fd5b81356020611a75611a7083611fa2565b611f71565b80838252828201915082860187848660051b8901011115611a94578586fd5b855b85811015611abb578135611aa9816120cf565b84529284019290840190600101611a96565b5090979650505050505050565b80516001600160701b0381168114611adf57600080fd5b919050565b803562ffffff81168114611adf57600080fd5b600060208284031215611b08578081fd5b81356118c4816120cf565b600060208284031215611b24578081fd5b81516118c4816120cf565b600080600080600060a08688031215611b46578081fd5b8535611b51816120cf565b94506020860135611b61816120cf565b93506040860135611b71816120cf565b94979396509394606081013594506080013592915050565b600080600060608486031215611b9d578283fd5b8335611ba8816120cf565b92506020840135611bb8816120cf565b929592945050506040919091013590565b60008060408385031215611bdb578182fd5b823567ffffffffffffffff811115611bf1578283fd5b611bfd85828601611a50565b9250506020830135611c0e816120cf565b809150509250929050565b600080600080600060a08688031215611c30578081fd5b853567ffffffffffffffff811115611c46578182fd5b611c5288828901611a50565b9550506020860135611c63816120cf565b93506040860135611c73816120cf565b92506060860135611c83816120cf565b9150611c9160808701611ae4565b90509295509295909350565b60006020808385031215611caf578182fd5b825167ffffffffffffffff811115611cc5578283fd5b8301601f81018513611cd5578283fd5b8051611ce3611a7082611fa2565b80828252848201915084840188868560051b8701011115611d02578687fd5b8694505b83851015611d24578051835260019490940193918501918501611d06565b50979650505050505050565b600060208284031215611d41578081fd5b815180151581146118c4578182fd5b600080600060608486031215611d64578283fd5b611d6d84611ac8565b9250611d7b60208501611ac8565b9150604084015163ffffffff81168114611d93578182fd5b809150509250925092565b600060208284031215611daf578081fd5b6118c482611ae4565b600060208284031215611dc9578081fd5b5035919050565b600060208284031215611de1578081fd5b5051919050565b60008251611dfa818460208701612058565b9190910192915050565b60208101600a8310611e2657634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152611e4b816040850160208701612058565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611f505784516001600160a01b031683529383019391830191600101611f2b565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f9a57611f9a6120b9565b604052919050565b600067ffffffffffffffff821115611fbc57611fbc6120b9565b5060051b60200190565b60008219821115611fd957611fd96120a3565b500190565b600082611ff957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612018576120186120a3565b500290565b600062ffffff83811690831681811015612039576120396120a3565b039392505050565b600082821015612053576120536120a3565b500390565b60005b8381101561207357818101518382015260200161205b565b83811115612082576000848401525b50505050565b600060001982141561209c5761209c6120a3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146120e457600080fd5b5056fea2646970667358221220939ea69640bb77c2c0582d073379e55755d556f22ee75614c3f70d689a422da364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "biosBuyBack()": {
        "returns": {
          "_0": "Bool indicating whether the trade succeeded"
        }
      },
      "getAmountOut(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOut": "The estimated amount of tokenOut to receive"
        }
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOutMinimum": "The minimum amount of tokenOut to receive, factoring in allowable slippage"
        }
      },
      "getFactoryAddress()": {
        "returns": {
          "_0": "SushiSwap Factory address"
        }
      },
      "getSlippageDenominator()": {
        "returns": {
          "_0": "The slippage denominator"
        }
      },
      "getSlippageNumerator()": {
        "returns": {
          "_0": "The slippage numerator"
        }
      },
      "initialize(address[],address,address,address,uint24)": {
        "params": {
          "controllers_": "The addresses of the controlling contracts",
          "factoryAddress_": "The address of the SushiSwap factory contract",
          "moduleMap_": "The address of the module map contract",
          "slippageNumerator_": "The number divided by the slippage denominator to get the slippage percentage",
          "swapRouterAddress_": "The address of the SushiSwap swap router contract"
        }
      },
      "swapExactInput(address,address,address,uint256,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "amountOutMin": "The minimum amount of tokenOut to receive from the swap",
          "recipient": "The address of the token out recipient",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "_0": "bool Indicates whether the swap succeeded"
        }
      },
      "updateSlippageNumerator(uint24)": {
        "params": {
          "slippageNumerator_": "The number divided by the slippage denominator to get the slippage percentage"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "biosBuyBack()": {
        "notice": "Swaps all WETH held in this contract for BIOS and sends to the kernel"
      }
    },
    "notice": "Integrates 0x Nodes to SushiSwap",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5695,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)13708"
      },
      {
        "astId": 2791,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2794,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7371,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "slippageNumerator",
        "offset": 0,
        "slot": "3",
        "type": "t_uint24"
      },
      {
        "astId": 7373,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "factoryAddress",
        "offset": 3,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7375,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)13708": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}
