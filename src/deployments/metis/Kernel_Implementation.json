{
  "address": "0x6d4F48782B4aB5a50d484815Fc416a016d913d4E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "BiosBuyBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "biosRewards",
          "type": "uint256"
        }
      ],
      "name": "ClaimBiosRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "strategies",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethRewards",
          "type": "uint256"
        }
      ],
      "name": "ClaimEthRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Deploy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DistributeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "biosBuyBackEthWeight",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "treasuryEthWeight",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "protocolFeeEthWeight",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rewardsEthWeight",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "syntheticPoolSupplementWeight",
          "type": "uint32"
        }
      ],
      "name": "EthDistributionWeightsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasAccountTargetEthBalance",
          "type": "uint256"
        }
      ],
      "name": "GasAccountTargetEthBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gasAccount",
          "type": "address"
        }
      ],
      "name": "GasAccountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "HarvestYield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "IntegrationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "biosAmount",
          "type": "uint256"
        }
      ],
      "name": "SeedBiosRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "biosRewardsDuration",
          "type": "uint32"
        }
      ],
      "name": "SetBiosRewardsDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptingDeposits",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptingWithdrawals",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptingLping",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptingBridging",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "biosRewardWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveRatioNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetLiquidityRatioNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeeKValueNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeePlatformRatioNumerator",
          "type": "uint256"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAccount",
          "type": "address"
        }
      ],
      "name": "TreasuryAccountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "strategies",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "withdrawWethAsEth",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "biosRewards",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAllAndClaim",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_PROVIDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addIntegration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "acceptingDeposits",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "acceptingWithdrawals",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "acceptingLping",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "acceptingBridging",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "biosRewardWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveRatioNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLiquidityRatioNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferFeeKValueNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferFeePlatformRatioNumerator",
          "type": "uint256"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "biosBuyBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strategies",
          "type": "uint256[]"
        }
      ],
      "name": "claimAllRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "biosClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBiosRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "biosClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strategies",
          "type": "uint256[]"
        }
      ],
      "name": "claimEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "claimLpFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "internalType": "struct IYieldManager.DeployRequest[]",
          "name": "deployments",
          "type": "tuple[]"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableLpWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strategies",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "positions",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "biosAmount",
          "type": "uint256"
        }
      ],
      "name": "distributeEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableLpWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthRewardsTimePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethRewardsTimePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBiosBuyBackTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastDeployTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastDistributeEthTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpWhitelistEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "manager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityProvider_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLiquidityProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "takeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "biosBuyBackEthWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "treasuryEthWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "protocolFeeEthWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "rewardsEthWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "syntheticPoolSupplementWeight",
          "type": "uint32"
        }
      ],
      "name": "updateEthDistributionWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "gasAccount",
          "type": "address"
        }
      ],
      "name": "updateGasAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasAccountTargetEthBalance",
          "type": "uint256"
        }
      ],
      "name": "updateGasAccountTargetEthBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "treasuryAccount",
          "type": "address"
        }
      ],
      "name": "updateTreasuryAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "withdrawWethAsEth",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "strategies",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "withdrawWethAsEth",
          "type": "bool"
        }
      ],
      "name": "withdrawAllAndClaim",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "ethWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "biosClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6fe15ec543621c8cb0e4097653ee9695b14f3390229acd6e380171364616c806",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0x6d4F48782B4aB5a50d484815Fc416a016d913d4E",
    "transactionIndex": 0,
    "gasUsed": "4467906",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc7b2f63c1b6d6b7e5d623e54de345fbe706b2bc94e3cb700fbe1b9a75cacd2a2",
    "transactionHash": "0x6fe15ec543621c8cb0e4097653ee9695b14f3390229acd6e380171364616c806",
    "logs": [],
    "blockNumber": 2698641,
    "cumulativeGasUsed": "4467906",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8691a89ebd8d69f8412923e433444233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"BiosBuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimBiosRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"strategies\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimEthRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Deploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"syntheticPoolSupplementWeight\",\"type\":\"uint32\"}],\"name\":\"EthDistributionWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance\",\"type\":\"uint256\"}],\"name\":\"GasAccountTargetEthBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"GasAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HarvestYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"IntegrationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosAmount\",\"type\":\"uint256\"}],\"name\":\"SeedBiosRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"biosRewardsDuration\",\"type\":\"uint32\"}],\"name\":\"SetBiosRewardsDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingDeposits\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingWithdrawals\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingLping\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingBridging\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewardWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveRatioNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetLiquidityRatioNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeKValueNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeePlatformRatioNumerator\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"name\":\"TreasuryAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"strategies\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withdrawWethAsEth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewards\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllAndClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_PROVIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addIntegration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acceptingDeposits\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptingWithdrawals\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptingLping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptingBridging\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"biosRewardWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveRatioNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLiquidityRatioNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFeeKValueNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFeePlatformRatioNumerator\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"biosBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strategies\",\"type\":\"uint256[]\"}],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strategies\",\"type\":\"uint256[]\"}],\"name\":\"claimEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimLpFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IYieldManager.DeployRequest[]\",\"name\":\"deployments\",\"type\":\"tuple[]\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLpWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strategies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"positions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"biosAmount\",\"type\":\"uint256\"}],\"name\":\"distributeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLpWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthRewardsTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRewardsTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBiosBuyBackTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDeployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDistributeEthTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpWhitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityProvider_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidityProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"takeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syntheticPoolSupplementWeight\",\"type\":\"uint32\"}],\"name\":\"updateEthDistributionWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"updateGasAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance\",\"type\":\"uint256\"}],\"name\":\"updateGasAccountTargetEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"name\":\"updateTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"withdrawWethAsEth\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"strategies\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"withdrawWethAsEth\",\"type\":\"bool\"}],\"name\":\"withdrawAllAndClaim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"ethWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addIntegration(address,string)\":{\"params\":{\"contractAddress\":\"The address of the integration contract\",\"name\":\"The name of the protocol being integrated to\"}},\"addToken(address,bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"acceptingDeposits\":\"Whether token deposits are enabled\",\"acceptingWithdrawals\":\"Whether token withdrawals are enabled\",\"biosRewardWeight\":\"Token weight for BIOS rewards\",\"reserveRatioNumerator\":\"Number that gets divided by reserve ratio denominator to get reserve ratio\",\"tokenAddress\":\"The address of the ERC20 token contract\"}},\"biosBuyBack(uint256)\":{\"params\":{\"ratioX1000\":\"BIOS/WETH ratio for front runner protection\"}},\"claimAllRewards(uint256[])\":{\"params\":{\"strategies\":\"Array of strategy IDs to claim eth rewards from\"},\"returns\":{\"biosClaimed\":\"The amount of BIOS claimed by the user\",\"ethClaimed\":\"The amount of ETH claimed by the user\"}},\"claimBiosRewards()\":{\"returns\":{\"biosClaimed\":\"The amount of BIOS claimed by the user\"}},\"claimEthRewards(uint256[])\":{\"params\":{\"strategies\":\"Array of strategy IDs to claim rewards from. 0 for BIOS PFA!\"},\"returns\":{\"ethClaimed\":\"The amount of ETH claimed by the user\"}},\"claimLpFees(address[])\":{\"params\":{\"tokens\":\"Array of token the token addresses\"}},\"deposit(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of token amounts\",\"tokens\":\"Array of token the token addresses\"}},\"getEthRewardsTimePeriod()\":{\"returns\":{\"ethRewardsTimePeriod\":\"The number of seconds between the last two ETH payouts\"}},\"getLastBiosBuyBackTimestamp()\":{\"returns\":{\"_0\":\"The timestamp the biosBuyBack function was last called\"}},\"getLastDeployTimestamp()\":{\"returns\":{\"_0\":\"The timestamp the deploy function was last called\"}},\"getLastDistributeEthTimestamp()\":{\"returns\":{\"_0\":\"The timestamp the distributeEth function was last called\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address,address)\":{\"params\":{\"admin_\":\"default administrator, a cold storage address\",\"moduleMap_\":\"Module Map address\",\"owner_\":\"single owner account, used to manage the managers\"}},\"isLiquidityProvider(address)\":{\"params\":{\"account\":\"The address of the account to check if they are a liquidity provider\"},\"returns\":{\"_0\":\"Bool indicating whether the account is a liquidity provider\"}},\"isManager(address)\":{\"params\":{\"account\":\"The address of the account to check if they are a manager\"},\"returns\":{\"_0\":\"Bool indicating whether the account is a manger\"}},\"isOwner(address)\":{\"params\":{\"account\":\"The address of the account to check if they are an owner\"},\"returns\":{\"_0\":\"Bool indicating whether the account is an owner\"}},\"provideLiquidity(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of token amounts\",\"tokens\":\"Array of token the token addresses\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"takeLiquidity(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of token amounts\",\"tokens\":\"Array of token the token addresses\"}},\"updateEthDistributionWeights(uint32,uint32,uint32,uint32,uint32)\":{\"params\":{\"biosBuyBackEthWeight\":\"The relative weight of ETH to send to BIOS buy back\",\"protocolFeeEthWeight\":\"The relative weight of ETH to send to protocol fee accrual\",\"rewardsEthWeight\":\"The relative weight of ETH to send to user rewards\",\"syntheticPoolSupplementWeight\":\"The relative weight of ETH to send to synthetic pool\",\"treasuryEthWeight\":\"The relative weight of ETH to send to the treasury\"}},\"updateGasAccount(address)\":{\"params\":{\"gasAccount\":\"The address of the account to send ETH to gas for executing bulk system functions\"}},\"updateGasAccountTargetEthBalance(uint256)\":{\"params\":{\"gasAccountTargetEthBalance\":\"The target ETH balance of the gas account\"}},\"updateTreasuryAccount(address)\":{\"params\":{\"treasuryAccount\":\"The address of the system treasury account\"}},\"withdraw(address[],uint256[],bool)\":{\"params\":{\"amounts\":\"Array of token amounts\",\"tokens\":\"Array of token the token addresses\",\"withdrawWethAsEth\":\"Boolean indicating whether should receive WETH balance as ETH\"}},\"withdrawAllAndClaim(address[],uint256[],bool)\":{\"params\":{\"strategies\":\"Array of strategyIDs that user is claiming rewards from\",\"tokens\":\"Array of token address that user is exiting positions from\",\"withdrawWethAsEth\":\"Boolean indicating whether should receive WETH balance as ETH\"},\"returns\":{\"biosClaimed\":\"The amount of BIOS being claimed from rewards\",\"ethClaimed\":\"The amount of ETH being claimed from rewards\",\"ethWithdrawn\":\"The amount of WETH balance being withdrawn as ETH\",\"tokenAmounts\":\"The amounts of each token being withdrawn\"}}},\"title\":\"Kernel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addIntegration(address,string)\":{\"notice\":\"This function is used after tokens have been added, and a weight array should be included\"},\"biosBuyBack(uint256)\":{\"notice\":\"Uses any WETH held in the SushiSwap integration to buy back BIOS which is sent to the Kernel\"},\"claimAllRewards(uint256[])\":{\"notice\":\"Allows user to claim their ETH and BIOS rewards\"},\"claimBiosRewards()\":{\"notice\":\"Allows user to claim their BIOS rewards\"},\"claimEthRewards(uint256[])\":{\"notice\":\"Allows user to claim their ETH rewards\"},\"deploy((address,address[],uint32)[])\":{\"notice\":\"Deploys all tokens to all integrations according to configured weights\"},\"deposit(address[],uint256[])\":{\"notice\":\"User is allowed to deposit whitelisted tokens\"},\"distributeEth(uint256[],uint256[],uint256)\":{\"notice\":\"Distributes WETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\"},\"initialize(address,address,address,address,address)\":{\"notice\":\"Initializes contract - used as a replacement for a constructor\"},\"provideLiquidity(address[],uint256[])\":{\"notice\":\"User is allowed to LP whitelisted tokens\"},\"tokenApprovals()\":{\"notice\":\"Gives the UserPositions contract approval to transfer BIOS from Kernel\"},\"withdraw(address[],uint256[],bool)\":{\"notice\":\"User is allowed to withdraw tokens\"},\"withdrawAllAndClaim(address[],uint256[],bool)\":{\"notice\":\"Allows a user to withdraw entire undeployed balances of the specified tokens and claim rewards\"}},\"notice\":\"Allows users to deposit/withdraw erc20 tokensAllows a system admin to control which tokens are depositable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Kernel.sol\":\"Kernel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/core/Kernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n//import \\\"../interfaces/IBiosRewards.sol\\\";\\nimport \\\"../interfaces/IBiosEmitter.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IYieldManager.sol\\\";\\nimport \\\"../interfaces/IInterconnects.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\nimport \\\"../interfaces/IUniswapTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapTrader.sol\\\";\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"../interfaces/IUnwrapper.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\n/// @title Kernel\\n/// @notice Allows users to deposit/withdraw erc20 tokens\\n/// @notice Allows a system admin to control which tokens are depositable\\ncontract Kernel is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    ModuleMapConsumer,\\n    IKernel,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    // constants\\n    bytes32 public constant OWNER_ROLE = 0x72fed0a30cb639f27f755e6f7c6edf975db0859d96eb67b27d2695c6486b1be0; //keccak256(\\\"owner_role\\\");\\n    bytes32 public constant MANAGER_ROLE = 0x45a03fb503c1bf173e1a78fdc6b62e74bfc9c0cac4b0db3c4a667287a0fb7b9d; //keccak256(\\\"manager_role\\\");\\n    uint256 private constant FTM_CHAIN_ID = 250;\\n    uint256 private constant BSC_CHAIN_ID = 56;\\n\\n    uint256 private lastDeployTimestamp;\\n\\n    uint256 private lastHarvestYieldTimestamp;\\n\\n    uint256 private lastDistributeEthTimestamp;\\n    uint256 private lastLastDistributeEthTimestamp;\\n    uint256 private lastBiosBuyBackTimestamp;\\n    uint256 private initializationTimestamp;\\n\\n    bool private lpWhitelistEnabled;\\n\\n    bytes32 public constant LIQUIDITY_PROVIDER_ROLE =\\n        0x6d53deaa1363a9a09a38da6f41ec59fc13a00b08c43141d19c181ddb970e9d2a; //keccak256(\\\"liquidity_provider_role\\\");\\n\\n    modifier onlyGasAccount() {\\n        require(\\n            msg.sender == IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).getGasAccount(),\\n            \\\"Caller is not gas account\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLpWhitelist() {\\n        require(\\n            !lpWhitelistEnabled || hasRole(LIQUIDITY_PROVIDER_ROLE, msg.sender),\\n            \\\"Caller is not whitelisted as a liquidity provider\\\"\\n        );\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Initializes contract - used as a replacement for a constructor\\n    /// @param admin_ default administrator, a cold storage address\\n    /// @param owner_ single owner account, used to manage the managers\\n    /// @param moduleMap_ Module Map address\\n    function initialize(\\n        address admin_,\\n        address owner_,\\n        address manager_,\\n        address liquidityProvider_,\\n        address moduleMap_\\n    ) external initializer {\\n        require(admin_ != address(0), \\\"bad address\\\");\\n        require(owner_ != address(0), \\\"bad address\\\");\\n        require(manager_ != address(0), \\\"bad address\\\");\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        require(liquidityProvider_ != address(0), \\\"bad address\\\");\\n\\n        __ModuleMapConsumer_init(moduleMap_);\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        // make the \\\"admin_\\\" address the default admin role\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\n\\n        // make the \\\"owner_\\\" address the owner of the system\\n        _setupRole(OWNER_ROLE, owner_);\\n\\n        // give the \\\"owner_\\\" address the manager role, too\\n        _setupRole(MANAGER_ROLE, manager_);\\n\\n        // give the \\\"owner_\\\" address the liquidity provider role, too\\n        _setupRole(LIQUIDITY_PROVIDER_ROLE, liquidityProvider_);\\n\\n        // owners are admins of managers\\n        _setRoleAdmin(MANAGER_ROLE, OWNER_ROLE);\\n\\n        // managers are admins of liquidity providers\\n        _setRoleAdmin(LIQUIDITY_PROVIDER_ROLE, MANAGER_ROLE);\\n\\n        initializationTimestamp = block.timestamp;\\n        lpWhitelistEnabled = true;\\n    }\\n\\n    /// @dev DEPRECATED -\\n    // /// @param biosRewardsDuration The duration in seconds for a BIOS rewards period to last\\n    // function setBiosRewardsDuration(uint32 biosRewardsDuration) external onlyRole(MANAGER_ROLE) {\\n    //     IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards)).setBiosRewardsDuration(biosRewardsDuration);\\n\\n    //     emit SetBiosRewardsDuration(biosRewardsDuration);\\n    // }\\n\\n    /// @dev DEPRECATED -\\n    // /// @param biosAmount The amount of BIOS to add to the rewards\\n    // function seedBiosRewards(uint256 biosAmount) external onlyRole(MANAGER_ROLE) {\\n    //     IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards)).seedBiosRewards(msg.sender, biosAmount);\\n\\n    //     emit SeedBiosRewards(biosAmount);\\n    // }\\n\\n    /// @notice This function is used after tokens have been added, and a weight array should be included\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string calldata name) external onlyRole(MANAGER_ROLE) {\\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).addIntegration(contractAddress, name);\\n\\n        emit IntegrationAdded(contractAddress, name);\\n    }\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external onlyRole(MANAGER_ROLE) {\\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).addToken(\\n            tokenAddress,\\n            acceptingDeposits,\\n            acceptingWithdrawals,\\n            acceptingLping,\\n            acceptingBridging,\\n            biosRewardWeight,\\n            reserveRatioNumerator,\\n            targetLiquidityRatioNumerator,\\n            transferFeeKValueNumerator,\\n            transferFeePlatformRatioNumerator\\n        );\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                moduleMap.getModuleAddress(Modules.YieldManager)\\n            ) == 0\\n        ) {\\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\\n                moduleMap.getModuleAddress(Modules.YieldManager),\\n                type(uint256).max\\n            );\\n        }\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                moduleMap.getModuleAddress(Modules.UserPositions)\\n            ) == 0\\n        ) {\\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\\n                moduleMap.getModuleAddress(Modules.UserPositions),\\n                type(uint256).max\\n            );\\n        }\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                moduleMap.getModuleAddress(Modules.SwapManager)\\n            ) == 0\\n        ) {\\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\\n                moduleMap.getModuleAddress(Modules.SwapManager),\\n                type(uint256).max\\n            );\\n        }\\n\\n        emit TokenAdded(\\n            tokenAddress,\\n            acceptingDeposits,\\n            acceptingWithdrawals,\\n            acceptingLping,\\n            acceptingBridging,\\n            biosRewardWeight,\\n            reserveRatioNumerator,\\n            targetLiquidityRatioNumerator,\\n            transferFeeKValueNumerator,\\n            transferFeePlatformRatioNumerator\\n        );\\n    }\\n\\n    /// @param biosBuyBackEthWeight The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight The relative weight of ETH to send to user rewards\\n    /// @param syntheticPoolSupplementWeight The relative weight of ETH to send to synthetic pool\\n    function updateEthDistributionWeights(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    ) external onlyRole(MANAGER_ROLE) {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateEthDistributionWeights(\\n            biosBuyBackEthWeight,\\n            treasuryEthWeight,\\n            protocolFeeEthWeight,\\n            rewardsEthWeight,\\n            syntheticPoolSupplementWeight\\n        );\\n\\n        emit EthDistributionWeightsUpdated(\\n            biosBuyBackEthWeight,\\n            treasuryEthWeight,\\n            protocolFeeEthWeight,\\n            rewardsEthWeight,\\n            syntheticPoolSupplementWeight\\n        );\\n    }\\n\\n    /// @notice Gives the UserPositions contract approval to transfer BIOS from Kernel\\n    function tokenApprovals() external onlyRole(MANAGER_ROLE) {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(integrationMap.getBiosTokenAddress());\\n        IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(integrationMap.getWethTokenAddress());\\n\\n        if (bios.allowance(address(this), moduleMap.getModuleAddress(Modules.BiosRewards)) == 0) {\\n            bios.safeApprove(moduleMap.getModuleAddress(Modules.BiosRewards), type(uint256).max);\\n        }\\n        if (bios.allowance(address(this), moduleMap.getModuleAddress(Modules.YieldManager)) == 0) {\\n            bios.safeApprove(moduleMap.getModuleAddress(Modules.YieldManager), type(uint256).max);\\n        }\\n\\n        if (weth.allowance(address(this), moduleMap.getModuleAddress(Modules.UserPositions)) == 0) {\\n            weth.safeApprove(moduleMap.getModuleAddress(Modules.UserPositions), type(uint256).max);\\n        }\\n\\n        if (weth.allowance(address(this), moduleMap.getModuleAddress(Modules.YieldManager)) == 0) {\\n            weth.safeApprove(moduleMap.getModuleAddress(Modules.YieldManager), type(uint256).max);\\n        }\\n    }\\n\\n    function enableLpWhitelist() external onlyRole(MANAGER_ROLE) {\\n        lpWhitelistEnabled = true;\\n    }\\n\\n    function disableLpWhitelist() external onlyRole(MANAGER_ROLE) {\\n        lpWhitelistEnabled = false;\\n    }\\n\\n    /// @param gasAccount The address of the account to send ETH to gas for executing bulk system functions\\n    function updateGasAccount(address payable gasAccount) external onlyRole(MANAGER_ROLE) {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateGasAccount(gasAccount);\\n\\n        emit GasAccountUpdated(gasAccount);\\n    }\\n\\n    /// @param treasuryAccount The address of the system treasury account\\n    function updateTreasuryAccount(address payable treasuryAccount) external onlyRole(MANAGER_ROLE) {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateTreasuryAccount(treasuryAccount);\\n\\n        emit TreasuryAccountUpdated(treasuryAccount);\\n    }\\n\\n    /// @param gasAccountTargetEthBalance The target ETH balance of the gas account\\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance) external onlyRole(MANAGER_ROLE) {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateGasAccountTargetEthBalance(\\n            gasAccountTargetEthBalance\\n        );\\n\\n        emit GasAccountTargetEthBalanceUpdated(gasAccountTargetEthBalance);\\n    }\\n\\n    /// @notice User is allowed to deposit whitelisted tokens\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    function deposit(address[] calldata tokens, uint256[] calldata amounts) external payable nonReentrant {\\n        if (msg.value > 0) {\\n            // Convert ETH to WETH\\n            address wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n                .getWethTokenAddress();\\n            IWeth9(wethAddress).deposit{value: msg.value}();\\n        }\\n\\n        IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).deposit(\\n            msg.sender,\\n            tokens,\\n            amounts,\\n            msg.value,\\n            false\\n        );\\n    }\\n\\n    /// @notice User is allowed to withdraw tokens\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    function withdraw(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bool withdrawWethAsEth\\n    ) external nonReentrant {\\n        uint256 ethWithdrawn = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).withdraw(\\n            msg.sender,\\n            tokens,\\n            amounts,\\n            withdrawWethAsEth\\n        );\\n\\n        if (ethWithdrawn > 0) {\\n            // unwrap the wnative\\n            _unwrapWnative(\\n                ethWithdrawn,\\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\\n            );\\n\\n            // send to user\\n            _transferAmount(ethWithdrawn, msg.sender);\\n        }\\n\\n        emit Withdraw(msg.sender, tokens, amounts, ethWithdrawn);\\n    }\\n\\n    /// @notice Allows a user to withdraw entire undeployed balances of the specified tokens and claim rewards\\n    /// @param tokens Array of token address that user is exiting positions from\\n    /// @param strategies Array of strategyIDs that user is claiming rewards from\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    /// @return tokenAmounts The amounts of each token being withdrawn\\n    /// @return ethWithdrawn The amount of WETH balance being withdrawn as ETH\\n    /// @return ethClaimed The amount of ETH being claimed from rewards\\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\\n    function withdrawAllAndClaim(\\n        address[] calldata tokens,\\n        uint256[] calldata strategies,\\n        bool withdrawWethAsEth\\n    )\\n        external\\n        returns (\\n            uint256[] memory tokenAmounts,\\n            uint256 ethWithdrawn,\\n            uint256 ethClaimed,\\n            uint256 biosClaimed\\n        )\\n    {\\n        IUserPositions.WithdrawAllAndClaimResponse memory _withdrawAllAndClaimResponse = IUserPositions(\\n            moduleMap.getModuleAddress(Modules.UserPositions)\\n        ).withdrawAllAndClaim(msg.sender, tokens, strategies, withdrawWethAsEth);\\n\\n        tokenAmounts = _withdrawAllAndClaimResponse.tokenAmounts;\\n        ethWithdrawn = _withdrawAllAndClaimResponse.ethWithdrawn;\\n        ethClaimed = _withdrawAllAndClaimResponse.ethClaimed;\\n        biosClaimed = _withdrawAllAndClaimResponse.biosClaimed;\\n\\n        if (ethWithdrawn > 0) {\\n            _unwrapWnative(\\n                ethWithdrawn,\\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\\n            );\\n        }\\n\\n        if (ethWithdrawn + ethClaimed > 0) {\\n            _transferAmount(ethWithdrawn + ethClaimed, msg.sender);\\n        }\\n\\n        emit WithdrawAllAndClaim(\\n            msg.sender,\\n            tokens,\\n            strategies,\\n            withdrawWethAsEth,\\n            tokenAmounts,\\n            ethWithdrawn,\\n            ethClaimed,\\n            biosClaimed\\n        );\\n    }\\n\\n    /// @notice User is allowed to LP whitelisted tokens\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    function provideLiquidity(address[] calldata tokens, uint256[] calldata amounts)\\n        external\\n        onlyLpWhitelist\\n        nonReentrant\\n    {\\n        IInterconnects(moduleMap.getModuleAddress(Modules.Interconnects)).provideLiquidity(msg.sender, tokens, amounts);\\n    }\\n\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    function takeLiquidity(address[] calldata tokens, uint256[] calldata amounts)\\n        external\\n        onlyLpWhitelist\\n        nonReentrant\\n    {\\n        IInterconnects(moduleMap.getModuleAddress(Modules.Interconnects)).takeLiquidity(msg.sender, tokens, amounts);\\n    }\\n\\n    /// @param tokens Array of token the token addresses\\n    function claimLpFees(address[] calldata tokens) external onlyLpWhitelist nonReentrant {\\n        IInterconnects(moduleMap.getModuleAddress(Modules.Interconnects)).claimLpFeeRewards(msg.sender, tokens);\\n    }\\n\\n    /// @notice Allows user to claim their ETH rewards\\n    /// @param strategies Array of strategy IDs to claim rewards from. 0 for BIOS PFA!\\n    /// @return ethClaimed The amount of ETH claimed by the user\\n    function claimEthRewards(uint256[] calldata strategies) public nonReentrant returns (uint256 ethClaimed) {\\n        return _claimEthRewards(strategies);\\n    }\\n\\n    function _claimEthRewards(uint256[] calldata strategies) private returns (uint256 ethClaimed) {\\n        ethClaimed = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).claimEthRewards(\\n            msg.sender,\\n            strategies\\n        );\\n\\n        _transferAmount(ethClaimed, msg.sender);\\n\\n        emit ClaimEthRewards(msg.sender, strategies, ethClaimed);\\n    }\\n\\n    /// @notice Allows user to claim their BIOS rewards\\n    /// @return biosClaimed The amount of BIOS claimed by the user\\n    function claimBiosRewards() external nonReentrant returns (uint256 biosClaimed) {\\n        return _claimBiosRewards(msg.sender);\\n    }\\n\\n    function _claimBiosRewards(address user) private returns (uint256 biosClaimed) {\\n        biosClaimed = IBiosEmitter(moduleMap.getModuleAddress(Modules.BiosEmitter)).harvestAll(user);\\n        emit ClaimBiosRewards(user, biosClaimed);\\n    }\\n\\n    /// @notice Allows user to claim their ETH and BIOS rewards\\n    /// @param strategies Array of strategy IDs to claim eth rewards from\\n    /// @return ethClaimed The amount of ETH claimed by the user\\n    /// @return biosClaimed The amount of BIOS claimed by the user\\n    function claimAllRewards(uint256[] calldata strategies)\\n        external\\n        nonReentrant\\n        returns (uint256 ethClaimed, uint256 biosClaimed)\\n    {\\n        ethClaimed = _claimEthRewards(strategies);\\n        biosClaimed = _claimBiosRewards(msg.sender);\\n    }\\n\\n    /// @notice Deploys all tokens to all integrations according to configured weights\\n    function deploy(IYieldManager.DeployRequest[] calldata deployments) external onlyGasAccount {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).deploy(deployments);\\n        lastDeployTimestamp = block.timestamp;\\n        emit Deploy();\\n    }\\n\\n    /// @notice Distributes WETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n    function distributeEth(\\n        uint256[] calldata strategies,\\n        uint256[] calldata positions,\\n        uint256 biosAmount\\n    ) external onlyGasAccount {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).distributeEth(\\n            strategies,\\n            positions,\\n            biosAmount\\n        );\\n        lastLastDistributeEthTimestamp = lastDistributeEthTimestamp;\\n        lastDistributeEthTimestamp = block.timestamp;\\n        emit DistributeEth();\\n    }\\n\\n    /// @notice Uses any WETH held in the SushiSwap integration to buy back BIOS which is sent to the Kernel\\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\\n    function biosBuyBack(uint256 ratioX1000) external onlyGasAccount {\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).biosBuyBack(ratioX1000);\\n        lastBiosBuyBackTimestamp = block.timestamp;\\n        emit BiosBuyBack();\\n    }\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) public view override returns (bool) {\\n        return hasRole(MANAGER_ROLE, account);\\n    }\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) public view override returns (bool) {\\n        return hasRole(OWNER_ROLE, account);\\n    }\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) public view override returns (bool) {\\n        return hasRole(LIQUIDITY_PROVIDER_ROLE, account);\\n    }\\n\\n    /// @return The timestamp the deploy function was last called\\n    function getLastDeployTimestamp() external view returns (uint256) {\\n        return lastDeployTimestamp;\\n    }\\n\\n    /// @return The timestamp the distributeEth function was last called\\n    function getLastDistributeEthTimestamp() external view returns (uint256) {\\n        return lastDistributeEthTimestamp;\\n    }\\n\\n    /// @return The timestamp the biosBuyBack function was last called\\n    function getLastBiosBuyBackTimestamp() external view returns (uint256) {\\n        return lastBiosBuyBackTimestamp;\\n    }\\n\\n    /// @return ethRewardsTimePeriod The number of seconds between the last two ETH payouts\\n    function getEthRewardsTimePeriod() external view returns (uint256 ethRewardsTimePeriod) {\\n        if (lastDistributeEthTimestamp > 0) {\\n            if (lastLastDistributeEthTimestamp > 0) {\\n                ethRewardsTimePeriod = lastDistributeEthTimestamp - lastLastDistributeEthTimestamp;\\n            } else {\\n                ethRewardsTimePeriod = lastDistributeEthTimestamp - initializationTimestamp;\\n            }\\n        } else {\\n            ethRewardsTimePeriod = 0;\\n        }\\n    }\\n\\n    function getLpWhitelistEnabled() external view returns (bool) {\\n        return lpWhitelistEnabled;\\n    }\\n\\n    function _transferAmount(uint256 amount, address to) internal {\\n        (bool sent, ) = payable(to).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to transfer value\\\");\\n    }\\n\\n    function _unwrapWnative(uint256 amount, address wnativeAddress) internal {\\n        // just add some ORs on here to check for more chains...\\n        if (block.chainid == FTM_CHAIN_ID || block.chainid == BSC_CHAIN_ID) {\\n            // we are on a chain with wnative unwrapping issues\\n\\n            // get unwrapper address\\n            address unwrapper = moduleMap.getModuleAddress(Modules.Unwrapper);\\n\\n            // send wnative to unwrapper and unwrap\\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(unwrapper, amount);\\n            IUnwrapper(unwrapper).unwrap(amount);\\n        } else {\\n            // we are on a chain with working wnative unwrapping, so just do it\\n            IWeth9(wnativeAddress).withdraw(amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7caa913ca9e11cec97fc7908fed731559e1e3466876a37f60a4848f5cb1b49b6\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal onlyInitializing {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0x562431546443640c950a15ccce0cffedeced3e414c41cc2758bf489f4525d1df\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IBiosEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBiosEmitter {\\n    // struct UserInfo {\\n    //     uint256 amount;\\n    //     int256 rewardDebt;\\n    //     bool initialized;\\n    // }\\n\\n    struct PoolInfo {\\n        uint128 accBiosPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        bool initialized;\\n    }\\n\\n    function updatePool(address _token) external returns (IBiosEmitter.PoolInfo memory);\\n\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _depositor\\n    ) external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawer\\n    ) external;\\n\\n    function harvest(address _token, address _harvester) external returns (uint256);\\n\\n    function harvestAll(address _harvester) external returns (uint256);\\n\\n    // function withdrawAndHarvest(\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     address _harvester\\n    // ) external returns (uint256);\\n\\n    function getEligibleToken(address _token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a175ea8cd91367e695abd2bb277d75ded1e69552cd02bdfc6f72c8f9d597ff\",\"license\":\"MIT\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    event Deploy(address token, uint256 amount);\\n    event HarvestYield(address token, uint256 amount);\\n    event Deposit(address token, uint256 amount);\\n    event Withdraw(address token, uint256 amount);\\n\\n    /**\\n     * Used by YieldManager to deposit funds.\\n     * @param tokenAddress The address of the deposited token\\n     * @param amount The amount being deposited\\n     */\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to withdraw funds.\\n     * @param tokenAddress The address of the withdrawal token\\n     * @param amount The amount being withdrawn\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to deploy funds.\\n     * @dev Deploys all tokens held in the integration contract to the integrated protocol\\n     */\\n    function deploy() external;\\n\\n    /**\\n     * Used by YieldManager to harvest funds.\\n     * @dev Harvests token yield from the integration\\n     */\\n    function harvestYield() external;\\n\\n    /**\\n     * Get the integration's balance of a token.\\n     * @dev has been deposited to the integration contract\\n     * @dev This returns the total amount of the underlying token that\\n     * @param tokenAddress The address of the deployed token\\n     * @return The amount of the underlying token that can be withdrawn\\n     */\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /**\\n     * Returns the total amount of yield awaing to be harvested\\n     * using the relevant integration's own function\\n     * @param tokenAddress The token to get the pending yield for\\n     * @return amount The amount of available yield for the specified token\\n     */\\n    function getPendingYield(address tokenAddress) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5f1c0946f3def553313e240f568096ccf9090659b52c51deed14f56d7559f8b8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IInterconnects.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IInterconnects {\\n    // ##### Events\\n    struct lpData {\\n        uint256 position;\\n        uint256 rewards;\\n    }\\n\\n    struct RemoteStrategyExecutionBody {\\n        address user;\\n        uint256 strategyId;\\n        bool enterStrat;\\n        uint256 nonce;\\n        IUserPositions.TokenMovement[] movements;\\n        bytes signature;\\n    }\\n\\n    event ProvideLiquidity(address indexed user, address[] tokens, uint256[] tokenAmounts);\\n    event TakeLiquidity(address indexed user, address[] tokens, uint256[] tokenAmounts);\\n\\n    event ClaimLpFeeRewards(address indexed user, address[] tokens);\\n\\n    event BridgeFrom(address indexed user, address[] tokens, uint256[] amounts);\\n\\n    event UndoBridgeFrom(address indexed user, address[] tokens, uint256[] amounts);\\n\\n    event BridgeTo(address indexed user, address[] tokens, uint256[] amounts);\\n\\n    event RSE(RemoteStrategyExecutionBody req);\\n\\n    event UpdateTokenPoolLpBalances(address[] tokens, uint256[] tokenAmounts, bool[] add);\\n\\n    // ##### Functions\\n    /// @param relayAccount_ The address of relay account\\n    function updateRelayAccount(address payable relayAccount_) external;\\n\\n    /// @return The address of the relay account\\n    function getRelayAccount() external view returns (address);\\n\\n    function updateRSEFeeNumerator(uint32 number) external;\\n\\n    /// @notice User is allowed to LP whitelisted tokens\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function provideLiquidity(\\n        address user,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function takeLiquidity(\\n        address user,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @param user Address of the account LP-ing\\n    /// @param tokens Array of the token addresses\\n    function claimLpFeeRewards(address user, address[] calldata tokens) external;\\n\\n    // @param user Address of the account bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function bridgeFrom(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // @param user Address of the account bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function undoBridgeFrom(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // @param user Address of the account bridging\\n    /// @param tokens Array of the token addresses\\n    /// @param amounts Array of the token amounts\\n    function bridgeTo(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // @param req remote strategy execution request as struct RemoteStrategyExecutionBody\\n    function remoteStrategyExecution(RemoteStrategyExecutionBody calldata req) external;\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function getTokenUserLpBalance(address asset, address account) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenPoolLpBalance(address asset) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenPoolLpActivePositions(address asset) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function getTokenUserLpFeeRewardBalance(address asset, address account) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenLpUsers(address asset) external view returns (address[] memory);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    function getTokenProtocolFeeRewards(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2143c59e5565ce7ae09a27fb8e0c9dee7019243f9cb9b5a421d35255ad989288\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6f4529412860cc773b26bca59c78fd12bc066323470b07501c0d1e9e2de0f54a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    Strategy1155, // 6\\n    SyntheticMap, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c79bb5822bea9209419b3c6eaefc40a8fd950184ff4445eb5745f70460f5310\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    /**\\n     *\\n     * structs\\n     *\\n     **/\\n\\n    struct DeployAmount {\\n        int128 deploy;\\n        uint128 hedge;\\n    }\\n\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n        mapping(address => uint256) maximumCap;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct TokenFunds {\\n        uint256 totalBalance;\\n        // strategy token => strategy balance\\n        mapping(address => uint256) strategyBalance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    struct ReplaceIntegrationParams {\\n        Integration newIntegration;\\n        address token;\\n        uint256 oldIntegrationIndex;\\n        uint32[] weightAmounts;\\n        uint256[] weightTokenIndexes;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * events\\n     *\\n     *\\n     **/\\n\\n    event NewStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens, string name);\\n\\n    event UpdateName(uint256 indexed strategyId, string name);\\n\\n    event UpdateStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens);\\n\\n    event DeleteStrategy(uint256 indexed strategyId);\\n\\n    event IntegrationWeightAdjustment(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        uint32 amount,\\n        bool rebalance\\n    );\\n\\n    event RemoveIntegration(uint256 strategyId, uint256 integrationIndex, address token);\\n\\n    event AddIntegration(uint256 strategyId, Integration integration, address token);\\n\\n    /**\\n     *\\n     *\\n     * manager's functions\\n     *\\n     *\\n     **/\\n\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     @param maxCap  The maximum amount investable in a strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens,\\n        uint256[] memory maxCap\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 strategyId, string calldata name) external;\\n\\n    function addPairToStrategy(\\n        uint256 strategyId,\\n        Integration calldata integration,\\n        address token\\n    ) external;\\n\\n    /**\\n    @dev Changes weights of integrations,optionally rebalancing the integrations\\n        so that current fund allocation reflects new weights\\n     */\\n    function movePairWeight(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        int256 vectorAmount,\\n        uint32 amount,\\n        bool rebalance\\n    ) external;\\n\\n    function removePairFromStrategy(\\n        uint256 strategyId,\\n        uint256 integrationIndex,\\n        address token\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it,\\n        first update the strategy so that the existing tokens are no longer available in the strategy,\\n        then delete the strategy. This will unwind the users positions,\\n        and they will be able to withdraw their funds.\\n    @param strategyId  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 strategyId) external;\\n\\n    /**\\n    @notice Sets availability status for the token\\n    @param strategyId The strategy strategyId\\n    @param token The token address\\n    @param available An availability status. Velue \\\"true\\\" will enable token and vice versa\\n    */\\n    function setAvailableTokens(\\n        uint256 strategyId,\\n        address token,\\n        bool available\\n    ) external;\\n\\n    /**\\n    @notice Sets the maximum investment cap for a strategy and token pair\\n    @param strategyId The strategy strategyId\\n    @param token the token address\\n    @param maxCap The maximum amount of funds that can be invested\\n    */\\n    function setMaximumCap(\\n        uint256 strategyId,\\n        address token,\\n        uint256 maxCap\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * strategy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param strategyId  the strategy to deposit into\\n    @param token Token address\\n    @param amount Amount of the token\\n    @return strategyDebtClosed_ How much negative deploy amount was increased (-x [deploy] + y [amount] = y - x [deploy])\\n     */\\n    function increaseStrategy(\\n        uint256 strategyId,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 strategyDebtClosed_);\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param strategyId  the strategy to withdraw assets from\\n    @param amount  amount of lp token that user have burned\\n     */\\n    function decreaseStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     *\\n     *\\n     * deploy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param deployAmount Amount that went to the corresponding pool\\n    @param hedgeAmount Amount that went to the synthetic pool\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 deployAmount,\\n        uint256 hedgeAmount\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param strategyId  the strategy to return\\n     */\\n    function getStrategy(uint256 strategyId) external view returns (StrategySummary memory);\\n\\n    /**\\n    @notice Returns 1 or more strategies in a single call.\\n    @param strategyIds to return.\\n    */\\n    function getMultipleStrategies(uint256[] calldata strategyIds) external view returns (StrategySummary[] memory);\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param strategyId  the strategy strategyId to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 strategyId, address token) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @param strategies An array of strategies in which total balance will be calculated\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token, uint256[] calldata strategies) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return deployAmount An amount that should be deployed to the corresponding integration\\n    @return hedgeAmount An amount that should be deployed to the synthetic pool \\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256 deployAmount, uint256 hedgeAmount);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy) external view returns (uint256);\\n\\n    /// @notice Retrieves the maximum cap for a strategy/token pair\\n    /// @param strategyId  the strategy strategyId\\n    /// @param token  the token address\\n    /// @return cap  the maximum cap for the strategy/token pair\\n    function getMaximumCap(uint256 strategyId, address token) external view returns (uint256 cap);\\n}\\n\",\"keccak256\":\"0x4c029270bde792eec1344723c6303ceb27e969751b3de246c9bdc30d3bd83283\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapTrader {\\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n    function updateSlippageNumerator(uint24 slippageNumerator_) external;\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address of the token out recipient\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7cd7527d72ee79010bb49eee5ecbfd80b5cf0da8d85dfd5e5bd414aa4218e285\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IUniswapTrader {\\n    struct Path {\\n        address tokenOut;\\n        uint256 firstPoolFee;\\n        address tokenInTokenOut;\\n        uint256 secondPoolFee;\\n        address tokenIn;\\n    }\\n\\n    /// @param tokenA The address of tokenA ERC20 contract\\n    /// @param tokenB The address of tokenB ERC20 contract\\n    /// @param fee The Uniswap pool fee\\n    /// @param slippageNumerator The value divided by the slippage denominator\\n    /// to calculate the allowable slippage\\n    function addPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee,\\n        uint24 slippageNumerator\\n    ) external;\\n\\n    /// @param tokenA The address of tokenA of the pool\\n    /// @param tokenB The address of tokenB of the pool\\n    /// @param poolIndex The index of the pool for the specified token pair\\n    /// @param slippageNumerator The new slippage numerator to update the pool\\n    function updatePoolSlippageNumerator(\\n        address tokenA,\\n        address tokenB,\\n        uint256 poolIndex,\\n        uint24 slippageNumerator\\n    ) external;\\n\\n    /// @notice Changes which Uniswap pool to use as the default pool\\n    /// @notice when swapping between token0 and token1\\n    /// @param tokenA The address of tokenA of the pool\\n    /// @param tokenB The address of tokenB of the pool\\n    /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\\n    function updatePairPrimaryPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 primaryPoolIndex\\n    ) external;\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address to receive the tokens\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return tradeSuccess Indicates whether the trade succeeded\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn\\n    ) external returns (bool tradeSuccess);\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address to receive the tokens\\n    /// @param amountOut The exact amount of the output token to receive\\n    /// @return tradeSuccess Indicates whether the trade succeeded\\n    function swapExactOutput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountOut\\n    ) external returns (bool tradeSuccess);\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountOut The exact amount of token being swapped for\\n    /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\\n    function getAmountInMaximum(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountInMaximum);\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOut The estimated amount of tokenOut to receive\\n    function getEstimatedTokenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getPathFor(address tokenOut, address tokenIn) external view returns (Path memory);\\n\\n    function setPathFor(\\n        address tokenOut,\\n        address tokenIn,\\n        uint256 firstPoolFee,\\n        address tokenInTokenOut,\\n        uint256 secondPoolFee\\n    ) external;\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return token0 The address of the sorted token0\\n    /// @return token1 The address of the sorted token1\\n    function getTokensSorted(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    /// @return The number of token pairs configured\\n    function getTokenPairsLength() external view returns (uint256);\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return The quantity of pools configured for the specified token pair\\n    function getTokenPairPoolsLength(address tokenA, address tokenB) external view returns (uint256);\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @param poolId The index of the pool in the pools mapping\\n    /// @return feeNumerator The numerator that gets divided by the fee denominator\\n    function getPoolFeeNumerator(\\n        address tokenA,\\n        address tokenB,\\n        uint256 poolId\\n    ) external view returns (uint24 feeNumerator);\\n\\n    function getPoolAddress(address tokenA, address tokenB) external view returns (address pool);\\n}\\n\",\"keccak256\":\"0xa89ea55467c8ce959b454452c3f27c33f7d34cebbdba546d78bea8513166a24b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUnwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IWeth9.sol\\\";\\n\\n// Some native tokens can't be unwrapped by upgradeable contracts...\\n// https://forum.openzeppelin.com/t/msg-sender-transfer-runs-out-of-gas-on-a-payable-upgradeable-proxy-contract/3766\\n\\ninterface IUnwrapper {\\n    /// @dev transfer token and then unwrap\\n    // Allows you to unwrap the token in cases where Istanbul causes gas issues\\n    function unwrap(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4fd00a1b6e345a119768eb9d944311413cddc6c726a46142298b87b65e7cc7c0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n\\n    // ##### Events\\n    event EnterStrategy(uint256 indexed strategyId, address indexed user, uint256 amount);\\n    event ExitStrategy(uint256 indexed strategyId, address indexed user, uint256 tokenBurned);\\n    event Deposit(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event Pause(bool isPaused);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * user cycle\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @notice User is allowed to deposit whitelisted tokens\\n     * @param depositor Address of the account depositing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param ethAmount The amount of ETH sent with the deposit\\n     * @param migration flag if this is a migration from the old system\\n     **/\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /**\\n     * @notice Adds a user's funds to a strategy to be deployed\\n     * @param strategyId  The strategy to enter\\n     * @param amount Amount of native coin\\n     **/\\n    function enterStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @param user The address of the user claiming ETH rewards\\n     * @param strategies An array of ids to claim rewards for\\n     **/\\n    function claimEthRewards(address user, uint256[] calldata strategies) external returns (uint256 ethClaimed);\\n\\n    /**\\n     * @notice Marks a user's funds as withdrawable\\n     * @param strategyId  The strategy to withdrawfrom\\n     * @param amount strategyId amount to burn\\n     **/\\n    function exitStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @notice User is allowed to withdraw tokens\\n     * @param recipient The address of the user withdrawing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     **/\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /**\\n     * @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n     * @param recipient The address of the user withdrawing tokens\\n     * @param tokens Array of token address that user is exiting positions from\\n     * @param strategies Array of strategy IDs that user is claiming rewards from\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     * @return _withdrawAllAndClaimResponse\\n     * /// WithdrawAllAndClaimResponse.tokenAmounts The amounts of each token being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethWithdrawn The amount of ETH being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethClaimed The amount of ETH being claimed from rewards\\n     * /// WithdrawAllAndClaimResponse.biosClaimed The amount of BIOS being claimed from rewards\\n     **/\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] calldata strategies,\\n        bool withdrawWethAsEth\\n    ) external returns (WithdrawAllAndClaimResponse memory _withdrawAllAndClaimResponse);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param asset Address of the ERC20 token contract\\n     * @return The total balance of the asset that is not in the strategy\\n     **/\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     * @return The amount that a user has deposited locally, but that isn't in the strategy\\n     **/\\n    function userTokenBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.totalSupply(strategyId);\\n     **/\\n    function totalStrategyBalance(uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @param account An address of the user\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.balanceOf(account, strategyId)\\n     **/\\n    function userStrategyBalance(address account, uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userDeployableBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has interconnected\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userInterconnectBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * interconnections\\n     *\\n     *\\n     *\\n     **/\\n\\n    function _remoteStrategyExecution(\\n        uint256 strategyID,\\n        address user,\\n        address token,\\n        uint256 amount,\\n        bool enterStrat // true to enter, false to exit\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserTokenBalances(\\n        address[] calldata assets,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb4fd1f1d39f045138f9e727a31da165f99d212b4ef7a8cd0e28f3c7a83c8081\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IWeth9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IWeth9 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    /// @param wad The amount of wETH to withdraw into ETH\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x122212ebb8fe6d0190bf812f36fc33de4c1d0539a6d9ef33e34ad05724fa2056\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IYieldManager {\\n    // #### Structs\\n\\n    struct DeployRequest {\\n        address integration;\\n        address[] tokens; // If ammPoolID > 0, this should contain exactly two addresses\\n        uint32 ammPoolID; // The pool to deposit into. This is 0 for non-AMM integrations\\n    }\\n\\n    struct IntegrationYield {\\n        address integration;\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyInfo {\\n        uint256 processedWeth;\\n        uint256 distributedWeth;\\n        uint256 lastHarvest;\\n    }\\n\\n    // #### Functions\\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_) external;\\n\\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n    /// @param syntheticPoolSupplement_ The relative weight of ETH to send to synthetic pool on curve\\n    function updateEthDistributionWeights(\\n        uint32 biosBuyBackEthWeight_,\\n        uint32 treasuryEthWeight_,\\n        uint32 protocolFeeEthWeight_,\\n        uint32 rewardsEthWeight_,\\n        uint32 syntheticPoolSupplement_\\n    ) external;\\n\\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n    function updateGasAccount(address payable gasAccount_) external;\\n\\n    /// @param treasuryAccount_ The address of the system treasury account\\n    function updateTreasuryAccount(address payable treasuryAccount_) external;\\n\\n    /// @notice Deploys all tokens to all integrations according to configured weights\\n    function deploy(DeployRequest[] calldata deployments) external;\\n\\n    /// @notice Harvests available yield from provided and integration, credited to strategy\\n    /// @param strategyId Strategy to credit the yield to\\n    /// @param integrations The integrations to harvest yield from\\n    /// @param amount The\\n    function harvestYield(\\n        uint256 strategyId,\\n        address[] calldata integrations,\\n        uint256 amount,\\n        bool setAccounting\\n    ) external;\\n\\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n    /// @param strategyIds An array of strategies ids to distribute eth for\\n    function distributeEth(\\n        uint256[] calldata strategyIds,\\n        uint256[] calldata positions,\\n        uint256 biosAmount\\n    ) external;\\n\\n    /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\\n    function biosBuyBack(uint256 ratioX1000) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of the token held in the Kernel as reserves\\n    function getReserveTokenBalance(address tokenAddress) external view returns (uint256);\\n\\n    /// @return ethWeightSum The sum of ETH distribution weights\\n    function getEthWeightSum() external view returns (uint32 ethWeightSum);\\n\\n    /// @return The address of the gas account\\n    function getGasAccount() external view returns (address);\\n\\n    /// @return The address of the treasury account\\n    function getTreasuryAccount() external view returns (address);\\n\\n    /// @return The last amount of ETH distributed to rewards\\n    function getLastEthRewardsAmount() external view returns (uint256);\\n\\n    /// @return The target ETH balance of the gas account\\n    function getGasAccountTargetEthBalance() external view returns (uint256);\\n\\n    /// @return The BIOS buyback ETH weight\\n    /// @return The Treasury ETH weight\\n    /// @return The Protocol fee ETH weight\\n    /// @return The rewards ETH weight\\n    /// @return The synthetic pool ETH supplement weight\\n    function getEthDistributionWeights()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        );\\n\\n    function transferClosedPositionsValue(\\n        address destination,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    // function getAllPendingYield(address token)\\n    //     external\\n    //     view\\n    //     returns (IntegrationYield[] memory);\\n}\\n\",\"keccak256\":\"0x3eddcbc8ff31cecfb557576689011016c0605d29ea3c68cd2d597f409b28753d\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addIntegration(address,string)": {
        "params": {
          "contractAddress": "The address of the integration contract",
          "name": "The name of the protocol being integrated to"
        }
      },
      "addToken(address,bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "acceptingDeposits": "Whether token deposits are enabled",
          "acceptingWithdrawals": "Whether token withdrawals are enabled",
          "biosRewardWeight": "Token weight for BIOS rewards",
          "reserveRatioNumerator": "Number that gets divided by reserve ratio denominator to get reserve ratio",
          "tokenAddress": "The address of the ERC20 token contract"
        }
      },
      "biosBuyBack(uint256)": {
        "params": {
          "ratioX1000": "BIOS/WETH ratio for front runner protection"
        }
      },
      "claimAllRewards(uint256[])": {
        "params": {
          "strategies": "Array of strategy IDs to claim eth rewards from"
        },
        "returns": {
          "biosClaimed": "The amount of BIOS claimed by the user",
          "ethClaimed": "The amount of ETH claimed by the user"
        }
      },
      "claimBiosRewards()": {
        "returns": {
          "biosClaimed": "The amount of BIOS claimed by the user"
        }
      },
      "claimEthRewards(uint256[])": {
        "params": {
          "strategies": "Array of strategy IDs to claim rewards from. 0 for BIOS PFA!"
        },
        "returns": {
          "ethClaimed": "The amount of ETH claimed by the user"
        }
      },
      "claimLpFees(address[])": {
        "params": {
          "tokens": "Array of token the token addresses"
        }
      },
      "deposit(address[],uint256[])": {
        "params": {
          "amounts": "Array of token amounts",
          "tokens": "Array of token the token addresses"
        }
      },
      "getEthRewardsTimePeriod()": {
        "returns": {
          "ethRewardsTimePeriod": "The number of seconds between the last two ETH payouts"
        }
      },
      "getLastBiosBuyBackTimestamp()": {
        "returns": {
          "_0": "The timestamp the biosBuyBack function was last called"
        }
      },
      "getLastDeployTimestamp()": {
        "returns": {
          "_0": "The timestamp the deploy function was last called"
        }
      },
      "getLastDistributeEthTimestamp()": {
        "returns": {
          "_0": "The timestamp the distributeEth function was last called"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address,address)": {
        "params": {
          "admin_": "default administrator, a cold storage address",
          "moduleMap_": "Module Map address",
          "owner_": "single owner account, used to manage the managers"
        }
      },
      "isLiquidityProvider(address)": {
        "params": {
          "account": "The address of the account to check if they are a liquidity provider"
        },
        "returns": {
          "_0": "Bool indicating whether the account is a liquidity provider"
        }
      },
      "isManager(address)": {
        "params": {
          "account": "The address of the account to check if they are a manager"
        },
        "returns": {
          "_0": "Bool indicating whether the account is a manger"
        }
      },
      "isOwner(address)": {
        "params": {
          "account": "The address of the account to check if they are an owner"
        },
        "returns": {
          "_0": "Bool indicating whether the account is an owner"
        }
      },
      "provideLiquidity(address[],uint256[])": {
        "params": {
          "amounts": "Array of token amounts",
          "tokens": "Array of token the token addresses"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "takeLiquidity(address[],uint256[])": {
        "params": {
          "amounts": "Array of token amounts",
          "tokens": "Array of token the token addresses"
        }
      },
      "updateEthDistributionWeights(uint32,uint32,uint32,uint32,uint32)": {
        "params": {
          "biosBuyBackEthWeight": "The relative weight of ETH to send to BIOS buy back",
          "protocolFeeEthWeight": "The relative weight of ETH to send to protocol fee accrual",
          "rewardsEthWeight": "The relative weight of ETH to send to user rewards",
          "syntheticPoolSupplementWeight": "The relative weight of ETH to send to synthetic pool",
          "treasuryEthWeight": "The relative weight of ETH to send to the treasury"
        }
      },
      "updateGasAccount(address)": {
        "params": {
          "gasAccount": "The address of the account to send ETH to gas for executing bulk system functions"
        }
      },
      "updateGasAccountTargetEthBalance(uint256)": {
        "params": {
          "gasAccountTargetEthBalance": "The target ETH balance of the gas account"
        }
      },
      "updateTreasuryAccount(address)": {
        "params": {
          "treasuryAccount": "The address of the system treasury account"
        }
      },
      "withdraw(address[],uint256[],bool)": {
        "params": {
          "amounts": "Array of token amounts",
          "tokens": "Array of token the token addresses",
          "withdrawWethAsEth": "Boolean indicating whether should receive WETH balance as ETH"
        }
      },
      "withdrawAllAndClaim(address[],uint256[],bool)": {
        "params": {
          "strategies": "Array of strategyIDs that user is claiming rewards from",
          "tokens": "Array of token address that user is exiting positions from",
          "withdrawWethAsEth": "Boolean indicating whether should receive WETH balance as ETH"
        },
        "returns": {
          "biosClaimed": "The amount of BIOS being claimed from rewards",
          "ethClaimed": "The amount of ETH being claimed from rewards",
          "ethWithdrawn": "The amount of WETH balance being withdrawn as ETH",
          "tokenAmounts": "The amounts of each token being withdrawn"
        }
      }
    },
    "title": "Kernel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addIntegration(address,string)": {
        "notice": "This function is used after tokens have been added, and a weight array should be included"
      },
      "biosBuyBack(uint256)": {
        "notice": "Uses any WETH held in the SushiSwap integration to buy back BIOS which is sent to the Kernel"
      },
      "claimAllRewards(uint256[])": {
        "notice": "Allows user to claim their ETH and BIOS rewards"
      },
      "claimBiosRewards()": {
        "notice": "Allows user to claim their BIOS rewards"
      },
      "claimEthRewards(uint256[])": {
        "notice": "Allows user to claim their ETH rewards"
      },
      "deploy((address,address[],uint32)[])": {
        "notice": "Deploys all tokens to all integrations according to configured weights"
      },
      "deposit(address[],uint256[])": {
        "notice": "User is allowed to deposit whitelisted tokens"
      },
      "distributeEth(uint256[],uint256[],uint256)": {
        "notice": "Distributes WETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards"
      },
      "initialize(address,address,address,address,address)": {
        "notice": "Initializes contract - used as a replacement for a constructor"
      },
      "provideLiquidity(address[],uint256[])": {
        "notice": "User is allowed to LP whitelisted tokens"
      },
      "tokenApprovals()": {
        "notice": "Gives the UserPositions contract approval to transfer BIOS from Kernel"
      },
      "withdraw(address[],uint256[],bool)": {
        "notice": "User is allowed to withdraw tokens"
      },
      "withdrawAllAndClaim(address[],uint256[],bool)": {
        "notice": "Allows a user to withdraw entire undeployed balances of the specified tokens and claim rewards"
      }
    },
    "notice": "Allows users to deposit/withdraw erc20 tokensAllows a system admin to control which tokens are depositable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2052,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2299,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 472,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2712_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15684,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "moduleMap",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IModuleMap)29669"
      },
      {
        "astId": 783,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "_status",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 827,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14233,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "lastDeployTimestamp",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 14235,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "lastHarvestYieldTimestamp",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 14237,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "lastDistributeEthTimestamp",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 14239,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "lastLastDistributeEthTimestamp",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 14241,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "lastBiosBuyBackTimestamp",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 14243,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "initializationTimestamp",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 14245,
        "contract": "contracts/core/Kernel.sol:Kernel",
        "label": "lpWhitelistEnabled",
        "offset": 0,
        "slot": "258",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IModuleMap)29669": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2712_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2712_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2712_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2711,
            "contract": "contracts/core/Kernel.sol:Kernel",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2411_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/core/Kernel.sol:Kernel",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/core/Kernel.sol:Kernel",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2411_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2406,
            "contract": "contracts/core/Kernel.sol:Kernel",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2410,
            "contract": "contracts/core/Kernel.sol:Kernel",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}