{
  "address": "0x7CE19403E3A39515Cd886d64F2c9Fc6DD5877Bc0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Integration",
          "name": "integration",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddIntegration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "DeleteStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "rebalance",
          "type": "bool"
        }
      ],
      "name": "IntegrationWeightAdjustment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NewStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "integrationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveIntegration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "UpdateName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "UpdateStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN_WEIGHT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Integration",
          "name": "integration",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addPairToStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxCap",
          "type": "uint256[]"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_poolID",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deployAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hedgeAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseDeployAmountChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "deleteStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getDeployAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "deployAmount_",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "hedgeAmount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMaximumCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strategyTokens",
          "type": "uint256[]"
        }
      ],
      "name": "getMultipleStrategies",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "integration",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "ammPoolID",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Integration[]",
              "name": "integrations",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "integrationPairIdx",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "weight",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyMap.StrategySummary[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getStrategy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "integration",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "ammPoolID",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Integration[]",
              "name": "integrations",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "integrationPairIdx",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "weight",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyMap.StrategySummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getStrategyTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "getStrategyTokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "strategyIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTokenTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyDebtClosed_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_poolIds",
          "type": "uint32[]"
        }
      ],
      "name": "migrateDeployAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "vectorAmount",
          "type": "int256"
        },
        {
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "rebalance",
          "type": "bool"
        }
      ],
      "name": "movePairWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "integrationIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removePairFromStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "name": "setAvailableTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCap",
          "type": "uint256"
        }
      ],
      "name": "setMaximumCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "integration",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "updateDeployAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "updateName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b48d2594769a07e5b41663da2f1592379edceb51506ddf58a49aa642971d049",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0x7CE19403E3A39515Cd886d64F2c9Fc6DD5877Bc0",
    "transactionIndex": 0,
    "gasUsed": "4413391",
    "logsBloom": "0x
    "blockHash": "0x862a92e618e66d3493d1f50def5fbeb11f2c5f3a2aa8b13a874380b727362255",
    "transactionHash": "0x7b48d2594769a07e5b41663da2f1592379edceb51506ddf58a49aa642971d049",
    "logs": [],
    "blockNumber": 2698304,
    "cumulativeGasUsed": "4413391",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "45afef2d0098b5b4751ca820c0864600",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration\",\"name\":\"integration\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddIntegration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"DeleteStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rebalance\",\"type\":\"bool\"}],\"name\":\"IntegrationWeightAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"integrationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveIntegration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UpdateName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"UpdateStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration\",\"name\":\"integration\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addPairToStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxCap\",\"type\":\"uint256[]\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deployAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hedgeAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseDeployAmountChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"deleteStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDeployAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"deployAmount_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"hedgeAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMaximumCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strategyTokens\",\"type\":\"uint256[]\"}],\"name\":\"getMultipleStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategySummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategySummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStrategyTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"getStrategyTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"strategyIds\",\"type\":\"uint256[]\"}],\"name\":\"getTokenTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyDebtClosed_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_poolIds\",\"type\":\"uint32[]\"}],\"name\":\"migrateDeployAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"vectorAmount\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"rebalance\",\"type\":\"bool\"}],\"name\":\"movePairWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"integrationIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removePairFromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"name\":\"setAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"}],\"name\":\"setMaximumCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"updateDeployAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decreaseStrategy(uint256,uint256)\":{\"params\":{\"amount\":\"amount of lp token that user have burned\",\"strategyId\":\"the strategy to withdraw assets from\"}},\"deleteStrategy(uint256)\":{\"details\":\"This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\",\"params\":{\"strategyId\":\"the strategy to delete\"}},\"getMaximumCap(uint256,address)\":{\"params\":{\"strategyId\":\"the strategy strategyId\",\"token\":\"the token address\"},\"returns\":{\"cap\":\" the maximum cap for the strategy/token pair\"}},\"getStrategyTokenBalance(uint256,address)\":{\"params\":{\"strategyId\":\"the strategy strategyId to check\",\"token\":\"The token to retrieve the balance for\"},\"returns\":{\"_0\":\" the amount of token that is invested in the strategy\"}},\"movePairWeight(uint256,uint256,uint256,int256,uint32,bool)\":{\"details\":\"Changes weights of integrations,optionally rebalancing the integrations so that current fund allocation reflects new weights\"},\"setAvailableTokens(uint256,address,bool)\":{\"params\":{\"available\":\"An availability status. Velue \\\"true\\\" will enable token and vice versa\",\"strategyId\":\"The strategy strategyId\",\"token\":\"The token address\"}},\"setMaximumCap(uint256,address,uint256)\":{\"params\":{\"maxCap\":\"The maximum amount of funds that can be invested\",\"strategyId\":\"The strategy strategyId\",\"token\":\"the token address\"}},\"updateName(uint256,string)\":{\"params\":{\"name\":\"the new name\"}}},\"stateVariables\":{\"_closablePositions\":{\"details\":\"|-***-| Deprecated after tokenization |-***-|Users now are not able to close positions manually because they have synthetic pool for withdrawals\"},\"deployAmount_DEPRECATED\":{\"details\":\"|-***-| Deprecated after tokenization |-***-|use deployAmount instead\"},\"tokenBalances\":{\"details\":\"|-***-| Deprecated after tokenization |-***-|Use IStrategy1155.totalSupplyBatch() instead\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewStrategy(uint256,(address,uint32)[],(uint256,address,uint32)[],string)\":{\"notice\":\"events*\"}},\"kind\":\"user\",\"methods\":{\"addStrategy(string,(address,uint32)[],(uint256,address,uint32)[],uint256[])\":{\"notice\":\"manager's functions*\"},\"decreaseDeployAmountChange(address,uint32,address,uint256,uint256)\":{\"notice\":\"deploy flow*\"},\"decreaseStrategy(uint256,uint256)\":{\"notice\":\"Decreases the amount of a set of tokens invested in a strategy\"},\"deleteStrategy(uint256)\":{\"notice\":\"Deletes a strategy\"},\"getMaximumCap(uint256,address)\":{\"notice\":\"Retrieves the maximum cap for a strategy/token pair\"},\"getStrategy(uint256)\":{\"notice\":\"getters*\"},\"getStrategyTokenBalance(uint256,address)\":{\"notice\":\"Returns the amount of a given token currently invested in a strategy\"},\"idCounter()\":{\"notice\":\"autogenerated getter definition\"},\"increaseStrategy(uint256,address,uint256)\":{\"notice\":\"strategy flow*\"},\"setAvailableTokens(uint256,address,bool)\":{\"notice\":\"Sets availability status for the token\"},\"setMaximumCap(uint256,address,uint256)\":{\"notice\":\"Sets the maximum investment cap for a strategy and token pair\"},\"updateName(uint256,string)\":{\"notice\":\"Updates the strategy name\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StrategyMap.sol\":\"StrategyMap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal onlyInitializing {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xed017271d8ba30d80b8449946ed9ed3c6192d59980f343d26580070da40ede47\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal onlyInitializing {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0x562431546443640c950a15ccce0cffedeced3e414c41cc2758bf489f4525d1df\",\"license\":\"GPL-2.0\"},\"contracts/core/StrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"../interfaces/IStrategy1155.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/ISyntheticERC20.sol\\\";\\nimport \\\"../interfaces/ISyntheticMap.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\n\\ncontract StrategyMap is Initializable, ModuleMapConsumer, Controlled, IStrategyMap {\\n    uint32 public constant TOKEN_WEIGHT = 100000;\\n\\n    // Strategy id => Strategy\\n    mapping(uint256 => Strategy) internal strategies;\\n\\n    /// @dev |-***-| Deprecated after tokenization |-***-|\\n    /// @dev Use IStrategy1155.totalSupplyBatch() instead\\n    mapping(address => uint256) internal tokenBalances;\\n\\n    // Strategy => token => balance\\n    mapping(uint256 => mapping(address => uint256)) internal strategyTokenBalances;\\n\\n    /// @dev |-***-| Deprecated after tokenization |-***-|\\n    /// @dev use deployAmount instead\\n    mapping(address => mapping(uint32 => mapping(address => int256))) internal deployAmount_DEPRECATED;\\n\\n    /// @dev |-***-| Deprecated after tokenization |-***-|\\n    /// @dev Users now are not able to close positions manually because they have synthetic pool for withdrawals\\n    mapping(address => ClosablePosition[]) private _closablePositions;\\n\\n    uint256 public override idCounter;\\n\\n    // Used for strategy verification. Contents are always deleted at the end of a tx to reduce gas hit.\\n    mapping(address => uint256) internal tokenWeights;\\n\\n    // Integration => poolId => token => { deploy; hedge }\\n    mapping(address => mapping(uint32 => mapping(address => DeployAmount))) internal deployAmount;\\n\\n    function initialize(address[] memory controllers_, address moduleMap_) external initializer {\\n        __Controlled_init(controllers_, moduleMap_);\\n    }\\n\\n    /**\\n     *\\n     *\\n     * manager's functions\\n     *\\n     *\\n     **/\\n\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens,\\n        uint256[] calldata maxCap\\n    ) external override onlyController {\\n        require(integrations.length > 0, \\\"integrations missing\\\");\\n        require(tokens.length > 0, \\\"tokens missing\\\");\\n        require(bytes(name).length > 0, \\\"must have a name\\\");\\n        require(tokens.length == maxCap.length, \\\"caps are missing\\\");\\n\\n        idCounter++;\\n        uint256 strategyId = idCounter;\\n\\n        _verifyAndSetStrategy(strategyId, name, integrations, tokens, maxCap);\\n        IStrategy1155(moduleMap.getModuleAddress(Modules.Strategy1155)).deployStrategyToken(\\n            name,\\n            strategyId,\\n            tokens[0].token\\n        );\\n        ISyntheticMap(moduleMap.getModuleAddress(Modules.SyntheticMap)).deploySyntheticTokenIfNotExist(tokens[0].token);\\n\\n        // Emit event\\n        emit NewStrategy(strategyId, integrations, tokens, name);\\n    }\\n\\n    function updateName(uint256 strategyId, string calldata name) external override onlyController {\\n        require(bytes(strategies[strategyId].name).length > 0, \\\"strategy must exist\\\");\\n        require(bytes(name).length > 0, \\\"invalid name\\\");\\n        strategies[strategyId].name = name;\\n        emit UpdateName(strategyId, name);\\n    }\\n\\n    function addPairToStrategy(\\n        uint256 strategyId,\\n        Integration calldata integration,\\n        address token\\n    ) public override onlyManager {\\n        StrategySummary memory current = getStrategy(strategyId);\\n        int256 integrationIndex = -1;\\n        for (uint256 i; i < current.integrations.length; ++i) {\\n            if (current.integrations[i].integration == address(0)) {\\n                integrationIndex = int256(i);\\n                break;\\n            }\\n        }\\n        if (integrationIndex > -1) {\\n            strategies[strategyId].integrations[uint256(integrationIndex)] = integration;\\n        } else {\\n            strategies[strategyId].integrations.push(integration);\\n            integrationIndex = int256(current.integrations.length);\\n        }\\n        int256 tokenIndex = -1;\\n        for (uint256 i; i < current.tokens.length; ++i) {\\n            if (current.tokens[i].token == address(0)) {\\n                tokenIndex = int256(i);\\n                break;\\n            }\\n        }\\n        if (tokenIndex > -1) {\\n            strategies[strategyId].tokens[uint256(tokenIndex)] = Token({\\n                token: token,\\n                integrationPairIdx: uint256(integrationIndex),\\n                weight: 0\\n            });\\n        } else {\\n            strategies[strategyId].tokens.push(\\n                Token({token: token, integrationPairIdx: uint256(integrationIndex), weight: 0})\\n            );\\n        }\\n        emit AddIntegration(strategyId, integration, token);\\n    }\\n\\n    function movePairWeight(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        int256 vectorAmount,\\n        uint32 amount,\\n        bool rebalance\\n    ) external override onlyManager {\\n        require(strategies[strategyId].tokens[sourceIndex].weight >= amount, \\\"invalid amount\\\");\\n        strategies[strategyId].tokens[sourceIndex].weight -= amount;\\n        strategies[strategyId].tokens[destinationIndex].weight += amount;\\n\\n        if (rebalance) {\\n            StrategySummary memory current = getStrategy(strategyId);\\n\\n            // Decrease source deploy amount\\n            decreaseDeployAmount(\\n                current.integrations[current.tokens[sourceIndex].integrationPairIdx].integration,\\n                current.integrations[current.tokens[sourceIndex].integrationPairIdx].ammPoolID,\\n                current.tokens[sourceIndex].token,\\n                vectorAmount, // TODO: split amount to deploy and hedge\\n                0\\n            );\\n\\n            // Increase dest deploy amount\\n            increaseDeployAmount(\\n                current.integrations[current.tokens[destinationIndex].integrationPairIdx].integration,\\n                current.integrations[current.tokens[destinationIndex].integrationPairIdx].ammPoolID,\\n                current.tokens[destinationIndex].token,\\n                vectorAmount, // TODO: split amount to deploy and hedge\\n                0\\n            );\\n        }\\n        emit IntegrationWeightAdjustment(strategyId, sourceIndex, destinationIndex, amount, rebalance);\\n    }\\n\\n    function removePairFromStrategy(\\n        uint256 strategyId,\\n        uint256 integrationIndex,\\n        address token\\n    ) public override onlyManager {\\n        require(strategyId <= idCounter, \\\"Bad strategy\\\");\\n\\n        StrategySummary memory current = getStrategy(strategyId);\\n        require(integrationIndex <= current.integrations.length, \\\"bad integration\\\");\\n\\n        bool shouldRemoveIntegration = true;\\n        for (uint256 i; i < current.tokens.length; ++i) {\\n            if (current.tokens[i].integrationPairIdx == integrationIndex) {\\n                if (current.tokens[i].token == token) {\\n                    require(current.tokens[i].weight == 0, \\\"weight > 0\\\");\\n                    strategies[strategyId].tokens[i] = Token({token: address(0), integrationPairIdx: 0, weight: 0});\\n                } else {\\n                    shouldRemoveIntegration = false;\\n                }\\n            }\\n        }\\n        if (shouldRemoveIntegration) {\\n            strategies[strategyId].integrations[integrationIndex] = Integration({\\n                ammPoolID: 0,\\n                integration: address(0)\\n            });\\n        }\\n        emit RemoveIntegration(strategyId, integrationIndex, token);\\n    }\\n\\n    function deleteStrategy(uint256 strategyId) external override onlyController {\\n        StrategySummary memory strategy = getStrategy(strategyId);\\n        for (uint256 i; i < strategy.tokens.length; ++i) {\\n            require(strategyTokenBalances[strategyId][strategy.tokens[i].token] == 0, \\\"strategy in use\\\");\\n            delete strategies[strategyId].availableTokens[strategy.tokens[i].token];\\n        }\\n        delete strategies[strategyId];\\n        emit DeleteStrategy(strategyId);\\n    }\\n\\n    function setAvailableTokens(\\n        uint256 strategyId,\\n        address token,\\n        bool available\\n    ) external override onlyManager {\\n        strategies[strategyId].availableTokens[token] = available;\\n    }\\n\\n    function setMaximumCap(\\n        uint256 strategyId,\\n        address token,\\n        uint256 maxCap\\n    ) external override onlyManager {\\n        require(token != address(0), \\\"bad token\\\");\\n        require(strategies[strategyId].tokens.length > 0, \\\"invalid strategy\\\");\\n        strategies[strategyId].maximumCap[token] = maxCap;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * strategy flow\\n     *\\n     *\\n     **/\\n\\n    function increaseStrategy(\\n        uint256 _strategyId,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyController returns (uint256 strategyDebtClosed_) {\\n        Strategy storage strategy = strategies[_strategyId];\\n\\n        require(strategy.availableTokens[_token], \\\"invalid token\\\");\\n        {\\n            uint256 maxCap = strategy.maximumCap[_token];\\n            if (maxCap > 0) {\\n                require(maxCap > (strategyTokenBalances[_strategyId][_token] + _amount), \\\"at capacity\\\");\\n            }\\n        }\\n\\n        strategyTokenBalances[_strategyId][_token] += _amount;\\n\\n        uint256 numberOfTokensInStrategy = strategy.tokens.length;\\n        for (uint256 j; j < numberOfTokensInStrategy; j++) {\\n            if (_token == strategy.tokens[j].token) {\\n                Integration storage integration = strategy.integrations[strategy.tokens[j].integrationPairIdx];\\n\\n                (uint256 deployA, uint256 hedgeA) = _splitAmountToDeployAndHedgeAmounts(\\n                    _token,\\n                    (_amount * strategy.tokens[j].weight) / TOKEN_WEIGHT\\n                );\\n\\n                (int256 currentDeploy, ) = getDeployAmount(integration.integration, integration.ammPoolID, _token);\\n\\n                if (currentDeploy < 0) {\\n                    uint256 debt = uint256(-currentDeploy);\\n                    strategyDebtClosed_ += debt > deployA ? deployA : debt;\\n                }\\n\\n                increaseDeployAmount(integration.integration, integration.ammPoolID, _token, deployA, hedgeA);\\n            }\\n        }\\n    }\\n\\n    function _splitAmountToDeployAndHedgeAmounts(address _underlying, uint256 _amount)\\n        private\\n        view\\n        returns (uint256 deploy_, uint256 hedge_)\\n    {\\n        address syntheticERC20 = ISyntheticMap(moduleMap.getModuleAddress(Modules.SyntheticMap)).underlyingToSynthetic(\\n            _underlying\\n        );\\n        (uint256 n, uint256 d) = ISyntheticERC20(syntheticERC20).getHedgePercent();\\n\\n        hedge_ = (_amount * n) / d;\\n        deploy_ = _amount - hedge_;\\n    }\\n\\n    function decreaseStrategy(uint256 strategyId, uint256 amount) external override onlyController {\\n        Strategy storage strategy = strategies[strategyId];\\n        Token[] memory tokens = strategy.tokens;\\n\\n        require(amount <= strategyTokenBalances[strategyId][tokens[0].token], \\\"amount > strategy balance\\\");\\n\\n        uint256 tokenLength = tokens.length;\\n\\n        strategyTokenBalances[strategyId][tokens[0].token] -= amount;\\n\\n        for (uint256 j; j < tokenLength; j++) {\\n            Integration storage integration = strategy.integrations[tokens[j].integrationPairIdx];\\n\\n            (uint256 deployA, ) = _splitAmountToDeployAndHedgeAmounts(\\n                tokens[j].token,\\n                (amount * strategy.tokens[j].weight) / TOKEN_WEIGHT\\n            );\\n\\n            decreaseDeployAmount(integration.integration, integration.ammPoolID, tokens[j].token, deployA, 0);\\n        }\\n    }\\n\\n    /**\\n     *\\n     *\\n     * deploy flow\\n     *\\n     *\\n     **/\\n\\n    function decreaseDeployAmountChange(\\n        address _integration,\\n        uint32 _poolID,\\n        address _token,\\n        uint256 _deployAmount,\\n        uint256 _hedgeAmount\\n    ) public override onlyController {\\n        (int256 currentAmount, ) = getDeployAmount(_integration, _poolID, _token);\\n        if (currentAmount >= 0) {\\n            decreaseDeployAmount(_integration, _poolID, _token, _deployAmount, _hedgeAmount);\\n        } else {\\n            increaseDeployAmount(_integration, _poolID, _token, _deployAmount, _hedgeAmount);\\n        }\\n    }\\n\\n    function updateDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 amount,\\n        bool add\\n    ) external onlyManager {\\n        require(amount <= uint256(type(int256).max), \\\"amount too large\\\");\\n        require(\\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getIsIntegrationAdded(integration),\\n            \\\"Integration not added\\\"\\n        );\\n        if (add) {\\n            increaseDeployAmount(integration, poolID, token, amount, 0);\\n        } else {\\n            decreaseDeployAmount(integration, poolID, token, amount, 0);\\n        }\\n    }\\n\\n    /**\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     **/\\n\\n    function getStrategy(uint256 id) public view override returns (StrategySummary memory) {\\n        StrategySummary memory result;\\n        result.name = strategies[id].name;\\n        result.integrations = strategies[id].integrations;\\n        result.tokens = strategies[id].tokens;\\n        return result;\\n    }\\n\\n    function getMultipleStrategies(uint256[] calldata strategyTokens)\\n        external\\n        view\\n        override\\n        returns (StrategySummary[] memory)\\n    {\\n        StrategySummary[] memory severalStrategies = new StrategySummary[](strategyTokens.length);\\n        for (uint256 i; i < strategyTokens.length; i++) {\\n            severalStrategies[i] = getStrategy(strategyTokens[i]);\\n        }\\n        return severalStrategies;\\n    }\\n\\n    function getStrategyTokenBalance(uint256 strategyId, address token) public view override returns (uint256) {\\n        return strategyTokenBalances[strategyId][token];\\n    }\\n\\n    function getStrategyTokenLength(uint256 strategyId) external view override returns (uint256) {\\n        Token[] storage tokens = strategies[strategyId].tokens;\\n        return tokens.length;\\n    }\\n\\n    function getTokenTotalBalance(address token, uint256[] calldata strategyIds)\\n        public\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        for (uint256 i; i < strategyIds.length; i++) {\\n            amount += strategyTokenBalances[strategyIds[i]][token];\\n        }\\n    }\\n\\n    function getDeployAmount(\\n        address _integration,\\n        uint32 _poolId,\\n        address _token\\n    ) public view override returns (int256 deployAmount_, uint256 hedgeAmount_) {\\n        deployAmount_ = deployAmount[_integration][_poolId][_token].deploy;\\n        hedgeAmount_ = deployAmount[_integration][_poolId][_token].hedge;\\n    }\\n\\n    function getMaximumCap(uint256 strategyId, address token) external view override returns (uint256 cap) {\\n        cap = strategies[strategyId].maximumCap[token];\\n    }\\n\\n    /**\\n     *\\n     *\\n     * help methods\\n     *\\n     *\\n     **/\\n\\n    function increaseDeployAmount(\\n        address _integration,\\n        uint32 _poolId,\\n        address _token,\\n        uint256 _deployAmount,\\n        uint256 _hedgeAmount\\n    ) private {\\n        deployAmount[_integration][_poolId][_token].deploy += int128(uint128(_deployAmount));\\n        deployAmount[_integration][_poolId][_token].hedge += uint128(_hedgeAmount);\\n    }\\n\\n    function decreaseDeployAmount(\\n        address _integration,\\n        uint32 _poolId,\\n        address _token,\\n        uint256 _deployAmount,\\n        uint256 _hedgeAmount\\n    ) private {\\n        deployAmount[_integration][_poolId][_token].deploy -= int128(uint128(_deployAmount));\\n        deployAmount[_integration][_poolId][_token].hedge -= uint128(_hedgeAmount);\\n    }\\n\\n    function increaseDeployAmount(\\n        address _integration,\\n        uint32 _poolId,\\n        address _token,\\n        int256 _deployAmount,\\n        uint256 _hedgeAmount\\n    ) private {\\n        if (_deployAmount > 0) {\\n            increaseDeployAmount(_integration, _poolId, _token, uint256(_deployAmount), _hedgeAmount);\\n        } else {\\n            decreaseDeployAmount(_integration, _poolId, _token, uint256(-_deployAmount), _hedgeAmount);\\n        }\\n    }\\n\\n    function decreaseDeployAmount(\\n        address _integration,\\n        uint32 _poolId,\\n        address _token,\\n        int256 _deployAmount,\\n        uint256 _hedgeAmount\\n    ) private {\\n        if (_deployAmount > 0) {\\n            decreaseDeployAmount(_integration, _poolId, _token, uint256(_deployAmount), _hedgeAmount);\\n        } else {\\n            increaseDeployAmount(_integration, _poolId, _token, uint256(-_deployAmount), _hedgeAmount);\\n        }\\n    }\\n\\n    function _verifyAndSetStrategy(\\n        uint256 strategyId,\\n        string memory name,\\n        Integration[] memory integrations,\\n        Token[] memory tokens,\\n        uint256[] memory maxCap\\n    ) internal {\\n        for (uint256 i; i < integrations.length; ++i) {\\n            require(integrations[i].integration != address(0), \\\"bad integration\\\");\\n        }\\n\\n        address[] memory uniqueTokens = new address[](tokens.length);\\n        uint256 idx;\\n        for (uint256 i; i < tokens.length; ++i) {\\n            require(tokens[i].integrationPairIdx < integrations.length, \\\"integration idx out of bounds\\\");\\n            require(tokens[i].token != address(0), \\\"bad token\\\");\\n\\n            if (tokenWeights[tokens[i].token] == 0) {\\n                uniqueTokens[idx] = tokens[i].token;\\n                idx++;\\n            }\\n            tokenWeights[tokens[i].token] += tokens[i].weight;\\n            strategies[strategyId].maximumCap[tokens[i].token] = maxCap[i];\\n        }\\n\\n        // Verify weights\\n        for (uint256 i; i < idx; ++i) {\\n            require(tokenWeights[uniqueTokens[i]] == TOKEN_WEIGHT, \\\"invalid token weight\\\");\\n            strategies[strategyId].availableTokens[uniqueTokens[i]] = true;\\n            delete tokenWeights[uniqueTokens[i]];\\n        }\\n\\n        strategies[strategyId].name = name;\\n\\n        // Can't copy a memory array directly to storage yet, so we build it manually.\\n        for (uint256 i; i < integrations.length; i++) {\\n            strategies[strategyId].integrations.push(integrations[i]);\\n        }\\n        for (uint256 i; i < tokens.length; i++) {\\n            strategies[strategyId].tokens.push(tokens[i]);\\n        }\\n    }\\n\\n    function migrateDeployAmounts(\\n        address _integration,\\n        address _token,\\n        uint32[] calldata _poolIds\\n    ) external onlyOwner {\\n        for (uint256 i; i < _poolIds.length; i++) {\\n            int256 old = deployAmount_DEPRECATED[_integration][_poolIds[i]][_token];\\n\\n            increaseDeployAmount(_integration, _poolIds[i], _token, old, 0);\\n\\n            delete deployAmount_DEPRECATED[_integration][_poolIds[i]][_token];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x16410d7e1ea4fef67cb4920bf2858985baf7ea158e0641067725994dc5852bbb\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// Events\\n    event CreatePool(address indexed tokenA, address indexed tokenB, uint32 poolID);\\n    event YieldHarvested(uint32 poolID);\\n    event Deposit(address token, uint256 amount, uint32 poolID);\\n    event DepositToPool(uint256 poolId, uint256 amount);\\n    event HarvestYieldError(uint32 indexed poolID);\\n\\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n}\\n\",\"keccak256\":\"0x6cd7b293476a41f7168265fcd8d87edb5ded8baaea0178ac60f84f68789cd9df\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    //tmp here\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6394dcb85782f1f9f9c037041b0dc80742dec2887922eec58b751680cbe9a62c\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    event Deploy(address token, uint256 amount);\\n    event HarvestYield(address token, uint256 amount);\\n    event Deposit(address token, uint256 amount);\\n    event Withdraw(address token, uint256 amount);\\n\\n    /**\\n     * Used by YieldManager to deposit funds.\\n     * @param tokenAddress The address of the deposited token\\n     * @param amount The amount being deposited\\n     */\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to withdraw funds.\\n     * @param tokenAddress The address of the withdrawal token\\n     * @param amount The amount being withdrawn\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to deploy funds.\\n     * @dev Deploys all tokens held in the integration contract to the integrated protocol\\n     */\\n    function deploy() external;\\n\\n    /**\\n     * Used by YieldManager to harvest funds.\\n     * @dev Harvests token yield from the integration\\n     */\\n    function harvestYield() external;\\n\\n    /**\\n     * Get the integration's balance of a token.\\n     * @dev has been deposited to the integration contract\\n     * @dev This returns the total amount of the underlying token that\\n     * @param tokenAddress The address of the deployed token\\n     * @return The amount of the underlying token that can be withdrawn\\n     */\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /**\\n     * Returns the total amount of yield awaing to be harvested\\n     * using the relevant integration's own function\\n     * @param tokenAddress The token to get the pending yield for\\n     * @return amount The amount of available yield for the specified token\\n     */\\n    function getPendingYield(address tokenAddress) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5f1c0946f3def553313e240f568096ccf9090659b52c51deed14f56d7559f8b8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6f4529412860cc773b26bca59c78fd12bc066323470b07501c0d1e9e2de0f54a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    Strategy1155, // 6\\n    SyntheticMap, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c79bb5822bea9209419b3c6eaefc40a8fd950184ff4445eb5745f70460f5310\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategy1155.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IStrategy1155 {\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    function balanceOf(address _account, uint256 _id) external view returns (uint256);\\n\\n    function balanceOfBatch(address _account, uint256[] calldata _ids) external view returns (uint256 totalBalance_);\\n\\n    function totalSupply(uint256 _id) external view returns (uint256);\\n\\n    function totalSupplyBatch(uint256[] calldata _ids) external view returns (uint256);\\n\\n    /// @param _strategyName The name of the strategy for which the token is being created\\n    /// @param _strategyId The ID of the strategy for which the token is being created\\n    /// @param _underlying A underlying token used in the strategy\\n    /// @dev Delegates token creation to ProxyCloneFactory\\n    function deployStrategyToken(\\n        string memory _strategyName,\\n        uint256 _strategyId,\\n        address _underlying\\n    ) external;\\n\\n    function idToUnderlying(uint256 strategyId) external view returns (address underlying);\\n}\\n\",\"keccak256\":\"0x22b019df87368995e74d5402e67c1fe702a8214ee74b8ed171a5d3577cfcb6cb\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    /**\\n     *\\n     * structs\\n     *\\n     **/\\n\\n    struct DeployAmount {\\n        int128 deploy;\\n        uint128 hedge;\\n    }\\n\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n        mapping(address => uint256) maximumCap;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct TokenFunds {\\n        uint256 totalBalance;\\n        // strategy token => strategy balance\\n        mapping(address => uint256) strategyBalance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    struct ReplaceIntegrationParams {\\n        Integration newIntegration;\\n        address token;\\n        uint256 oldIntegrationIndex;\\n        uint32[] weightAmounts;\\n        uint256[] weightTokenIndexes;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * events\\n     *\\n     *\\n     **/\\n\\n    event NewStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens, string name);\\n\\n    event UpdateName(uint256 indexed strategyId, string name);\\n\\n    event UpdateStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens);\\n\\n    event DeleteStrategy(uint256 indexed strategyId);\\n\\n    event IntegrationWeightAdjustment(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        uint32 amount,\\n        bool rebalance\\n    );\\n\\n    event RemoveIntegration(uint256 strategyId, uint256 integrationIndex, address token);\\n\\n    event AddIntegration(uint256 strategyId, Integration integration, address token);\\n\\n    /**\\n     *\\n     *\\n     * manager's functions\\n     *\\n     *\\n     **/\\n\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     @param maxCap  The maximum amount investable in a strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens,\\n        uint256[] memory maxCap\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 strategyId, string calldata name) external;\\n\\n    function addPairToStrategy(\\n        uint256 strategyId,\\n        Integration calldata integration,\\n        address token\\n    ) external;\\n\\n    /**\\n    @dev Changes weights of integrations,optionally rebalancing the integrations\\n        so that current fund allocation reflects new weights\\n     */\\n    function movePairWeight(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        int256 vectorAmount,\\n        uint32 amount,\\n        bool rebalance\\n    ) external;\\n\\n    function removePairFromStrategy(\\n        uint256 strategyId,\\n        uint256 integrationIndex,\\n        address token\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it,\\n        first update the strategy so that the existing tokens are no longer available in the strategy,\\n        then delete the strategy. This will unwind the users positions,\\n        and they will be able to withdraw their funds.\\n    @param strategyId  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 strategyId) external;\\n\\n    /**\\n    @notice Sets availability status for the token\\n    @param strategyId The strategy strategyId\\n    @param token The token address\\n    @param available An availability status. Velue \\\"true\\\" will enable token and vice versa\\n    */\\n    function setAvailableTokens(\\n        uint256 strategyId,\\n        address token,\\n        bool available\\n    ) external;\\n\\n    /**\\n    @notice Sets the maximum investment cap for a strategy and token pair\\n    @param strategyId The strategy strategyId\\n    @param token the token address\\n    @param maxCap The maximum amount of funds that can be invested\\n    */\\n    function setMaximumCap(\\n        uint256 strategyId,\\n        address token,\\n        uint256 maxCap\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * strategy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param strategyId  the strategy to deposit into\\n    @param token Token address\\n    @param amount Amount of the token\\n    @return strategyDebtClosed_ How much negative deploy amount was increased (-x [deploy] + y [amount] = y - x [deploy])\\n     */\\n    function increaseStrategy(\\n        uint256 strategyId,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 strategyDebtClosed_);\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param strategyId  the strategy to withdraw assets from\\n    @param amount  amount of lp token that user have burned\\n     */\\n    function decreaseStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     *\\n     *\\n     * deploy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param deployAmount Amount that went to the corresponding pool\\n    @param hedgeAmount Amount that went to the synthetic pool\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 deployAmount,\\n        uint256 hedgeAmount\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param strategyId  the strategy to return\\n     */\\n    function getStrategy(uint256 strategyId) external view returns (StrategySummary memory);\\n\\n    /**\\n    @notice Returns 1 or more strategies in a single call.\\n    @param strategyIds to return.\\n    */\\n    function getMultipleStrategies(uint256[] calldata strategyIds) external view returns (StrategySummary[] memory);\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param strategyId  the strategy strategyId to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 strategyId, address token) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @param strategies An array of strategies in which total balance will be calculated\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token, uint256[] calldata strategies) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return deployAmount An amount that should be deployed to the corresponding integration\\n    @return hedgeAmount An amount that should be deployed to the synthetic pool \\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256 deployAmount, uint256 hedgeAmount);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy) external view returns (uint256);\\n\\n    /// @notice Retrieves the maximum cap for a strategy/token pair\\n    /// @param strategyId  the strategy strategyId\\n    /// @param token  the token address\\n    /// @return cap  the maximum cap for the strategy/token pair\\n    function getMaximumCap(uint256 strategyId, address token) external view returns (uint256 cap);\\n}\\n\",\"keccak256\":\"0x4c029270bde792eec1344723c6303ceb27e969751b3de246c9bdc30d3bd83283\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISyntheticERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISyntheticERC20 {\\n    struct PoolRatioLimit {\\n        uint32 underlying;\\n        uint32 synthetic;\\n    }\\n\\n    struct Float {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    struct StrategiesDebt {\\n        uint128 swapBackSynthetic;\\n        uint128 withdrawSynthetic;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Default ERC20\\n     *\\n     *\\n     **/\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /**\\n     *\\n     *\\n     * Synthetic pool debt management\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param syntheticSpended How much synthetic was spended to the swap\\n     * @param underlyingReceived How much underlying was received from the swap\\n     **/\\n    function changePoolDebt(uint256 syntheticSpended, uint256 underlyingReceived) external;\\n\\n    function increaseRedemptionOfSynthetic(uint256 _amount) external;\\n\\n    function getAndDeleteDelayedRedemptionOfSynthetic() external returns (uint256 _amount);\\n\\n    /**\\n     * @dev\\n     * When we execute UserPositions._findMoney -> SwapManager.gentleSwapExactIn for x synETH:\\n     * 1) If received x ETH: do not change debt\\n     * 2) Else if we received x + y ETH: debt -= y\\n     * 3) Else if we received x - y ETH: debt += y\\n     *\\n     * In order to pay this debt before deploy to hedge integration we should adjust deposit amount\\n     * For example we want to provide z liquidity to hedge pool and we have y underlying debt (z > y):\\n     * 1) If y == 0:\\n     *          underlyingDeposit = z\\n     *          syntheticDeposit = z\\n     * 2) Else if y > 0:\\n     *          underlyingDeposit = z - y\\n     *          syntheticDeposit = z\\n     * 3) Else if y < 0:\\n     *          underlyingDeposit = z\\n     *          syntheticDeposit = z - y\\n     **/\\n    function adjustLiquidityAccordingToUnderlyingDebt(uint256 _desiredLiquidity)\\n        external\\n        returns (uint256 _underlyingLiquidity, uint256 _syntheticLiquidity);\\n\\n    /**\\n     * @dev\\n     * When we use synthetic pool for withdraw, we eanr a debt that will be paid on the next deploy call.\\n     * This method will calculate how much underlying have to be deposited to synthetic pool and reduce debt\\n     **/\\n    function distributeAccordingToStrategiesDebt(uint256 _gotFromWithdrawal)\\n        external\\n        returns (uint256 hold_, uint256 depositToPool_);\\n\\n    function getAndDeleteStrategiesPoolDebt() external returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     * Getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @return integration_ Integration in which hedge funds will go\\n     * @return ammPoolID_ Integration AMM pool ID\\n     * @return syntheticToken_ Address of the SyntheticERC20 contract on the chain\\n     **/\\n    function getHedgeDeployArgs()\\n        external\\n        view\\n        returns (\\n            address integration_,\\n            uint32 ammPoolID_,\\n            address syntheticToken_\\n        );\\n\\n    function getHedgePercent() external view returns (uint128 numerator_, uint128 denominator_);\\n\\n    /**\\n     * @dev Kernel will be able to withdraw underlying from crv pool\\n     * until pool reach (underlying_ : synthetic_) ratio\\n     **/\\n    function getPoolLimit() external view returns (uint32 underlying_, uint32 synthetic_);\\n}\\n\",\"keccak256\":\"0xcdc0f515fe09a7a9ea133209b29936893cf062d39f988fe7b2724d97ba36baef\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISyntheticMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISyntheticMap {\\n    function underlyingToSynthetic(address _underlying) external view returns (address);\\n\\n    function syntheticToUnderlying(address _synghetic) external view returns (address);\\n\\n    /// @dev Deploys synthetic for an underlying if there is no synthetic for this underlying\\n    function deploySyntheticTokenIfNotExist(address _underlying) external returns (address deployedSynthetic_);\\n}\\n\",\"keccak256\":\"0x2a8e13fb332a9145db2e3285c8139232822e57dc3233d2b61c267f730e9526b5\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n\\n    // ##### Events\\n    event EnterStrategy(uint256 indexed strategyId, address indexed user, uint256 amount);\\n    event ExitStrategy(uint256 indexed strategyId, address indexed user, uint256 tokenBurned);\\n    event Deposit(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event Pause(bool isPaused);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * user cycle\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @notice User is allowed to deposit whitelisted tokens\\n     * @param depositor Address of the account depositing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param ethAmount The amount of ETH sent with the deposit\\n     * @param migration flag if this is a migration from the old system\\n     **/\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /**\\n     * @notice Adds a user's funds to a strategy to be deployed\\n     * @param strategyId  The strategy to enter\\n     * @param amount Amount of native coin\\n     **/\\n    function enterStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @param user The address of the user claiming ETH rewards\\n     * @param strategies An array of ids to claim rewards for\\n     **/\\n    function claimEthRewards(address user, uint256[] calldata strategies) external returns (uint256 ethClaimed);\\n\\n    /**\\n     * @notice Marks a user's funds as withdrawable\\n     * @param strategyId  The strategy to withdrawfrom\\n     * @param amount strategyId amount to burn\\n     **/\\n    function exitStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @notice User is allowed to withdraw tokens\\n     * @param recipient The address of the user withdrawing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     **/\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /**\\n     * @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n     * @param recipient The address of the user withdrawing tokens\\n     * @param tokens Array of token address that user is exiting positions from\\n     * @param strategies Array of strategy IDs that user is claiming rewards from\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     * @return _withdrawAllAndClaimResponse\\n     * /// WithdrawAllAndClaimResponse.tokenAmounts The amounts of each token being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethWithdrawn The amount of ETH being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethClaimed The amount of ETH being claimed from rewards\\n     * /// WithdrawAllAndClaimResponse.biosClaimed The amount of BIOS being claimed from rewards\\n     **/\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] calldata strategies,\\n        bool withdrawWethAsEth\\n    ) external returns (WithdrawAllAndClaimResponse memory _withdrawAllAndClaimResponse);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param asset Address of the ERC20 token contract\\n     * @return The total balance of the asset that is not in the strategy\\n     **/\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     * @return The amount that a user has deposited locally, but that isn't in the strategy\\n     **/\\n    function userTokenBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.totalSupply(strategyId);\\n     **/\\n    function totalStrategyBalance(uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @param account An address of the user\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.balanceOf(account, strategyId)\\n     **/\\n    function userStrategyBalance(address account, uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userDeployableBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has interconnected\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userInterconnectBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * interconnections\\n     *\\n     *\\n     *\\n     **/\\n\\n    function _remoteStrategyExecution(\\n        uint256 strategyID,\\n        address user,\\n        address token,\\n        uint256 amount,\\n        bool enterStrat // true to enter, false to exit\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserTokenBalances(\\n        address[] calldata assets,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb4fd1f1d39f045138f9e727a31da165f99d212b4ef7a8cd0e28f3c7a83c8081\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decreaseStrategy(uint256,uint256)": {
        "params": {
          "amount": "amount of lp token that user have burned",
          "strategyId": "the strategy to withdraw assets from"
        }
      },
      "deleteStrategy(uint256)": {
        "details": "This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.",
        "params": {
          "strategyId": "the strategy to delete"
        }
      },
      "getMaximumCap(uint256,address)": {
        "params": {
          "strategyId": "the strategy strategyId",
          "token": "the token address"
        },
        "returns": {
          "cap": " the maximum cap for the strategy/token pair"
        }
      },
      "getStrategyTokenBalance(uint256,address)": {
        "params": {
          "strategyId": "the strategy strategyId to check",
          "token": "The token to retrieve the balance for"
        },
        "returns": {
          "_0": " the amount of token that is invested in the strategy"
        }
      },
      "movePairWeight(uint256,uint256,uint256,int256,uint32,bool)": {
        "details": "Changes weights of integrations,optionally rebalancing the integrations so that current fund allocation reflects new weights"
      },
      "setAvailableTokens(uint256,address,bool)": {
        "params": {
          "available": "An availability status. Velue \"true\" will enable token and vice versa",
          "strategyId": "The strategy strategyId",
          "token": "The token address"
        }
      },
      "setMaximumCap(uint256,address,uint256)": {
        "params": {
          "maxCap": "The maximum amount of funds that can be invested",
          "strategyId": "The strategy strategyId",
          "token": "the token address"
        }
      },
      "updateName(uint256,string)": {
        "params": {
          "name": "the new name"
        }
      }
    },
    "stateVariables": {
      "_closablePositions": {
        "details": "|-***-| Deprecated after tokenization |-***-|Users now are not able to close positions manually because they have synthetic pool for withdrawals"
      },
      "deployAmount_DEPRECATED": {
        "details": "|-***-| Deprecated after tokenization |-***-|use deployAmount instead"
      },
      "tokenBalances": {
        "details": "|-***-| Deprecated after tokenization |-***-|Use IStrategy1155.totalSupplyBatch() instead"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewStrategy(uint256,(address,uint32)[],(uint256,address,uint32)[],string)": {
        "notice": "events*"
      }
    },
    "kind": "user",
    "methods": {
      "addStrategy(string,(address,uint32)[],(uint256,address,uint32)[],uint256[])": {
        "notice": "manager's functions*"
      },
      "decreaseDeployAmountChange(address,uint32,address,uint256,uint256)": {
        "notice": "deploy flow*"
      },
      "decreaseStrategy(uint256,uint256)": {
        "notice": "Decreases the amount of a set of tokens invested in a strategy"
      },
      "deleteStrategy(uint256)": {
        "notice": "Deletes a strategy"
      },
      "getMaximumCap(uint256,address)": {
        "notice": "Retrieves the maximum cap for a strategy/token pair"
      },
      "getStrategy(uint256)": {
        "notice": "getters*"
      },
      "getStrategyTokenBalance(uint256,address)": {
        "notice": "Returns the amount of a given token currently invested in a strategy"
      },
      "idCounter()": {
        "notice": "autogenerated getter definition"
      },
      "increaseStrategy(uint256,address,uint256)": {
        "notice": "strategy flow*"
      },
      "setAvailableTokens(uint256,address,bool)": {
        "notice": "Sets availability status for the token"
      },
      "setMaximumCap(uint256,address,uint256)": {
        "notice": "Sets the maximum investment cap for a strategy and token pair"
      },
      "updateName(uint256,string)": {
        "notice": "Updates the strategy name"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15684,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)29669"
      },
      {
        "astId": 9016,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9019,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15876,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "strategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Strategy)31072_storage)"
      },
      {
        "astId": 15881,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15887,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "strategyTokenBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 15896,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "deployAmount_DEPRECATED",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_address,t_int256)))"
      },
      {
        "astId": 15903,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_closablePositions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(ClosablePosition)31097_storage)dyn_storage)"
      },
      {
        "astId": 15906,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "idCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 15910,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "tokenWeights",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15919,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "deployAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_address,t_struct(DeployAmount)31041_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClosablePosition)31097_storage)dyn_storage": {
        "base": "t_struct(ClosablePosition)31097_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyMap.ClosablePosition[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Integration)31046_storage)dyn_storage": {
        "base": "t_struct(Integration)31046_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyMap.Integration[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)31053_storage)dyn_storage": {
        "base": "t_struct(Token)31053_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyMap.Token[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)29669": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ClosablePosition)31097_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStrategyMap.ClosablePosition[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ClosablePosition)31097_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_address,t_int256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(address => int256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_address,t_int256))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_address,t_struct(DeployAmount)31041_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(address => struct IStrategyMap.DeployAmount)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_address,t_struct(DeployAmount)31041_storage))"
      },
      "t_mapping(t_address,t_struct(DeployAmount)31041_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStrategyMap.DeployAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(DeployAmount)31041_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Strategy)31072_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStrategyMap.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)31072_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_struct(DeployAmount)31041_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => struct IStrategyMap.DeployAmount))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(DeployAmount)31041_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ClosablePosition)31097_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.ClosablePosition",
        "members": [
          {
            "astId": 31092,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integration",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31094,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "ammPoolID",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 31096,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DeployAmount)31041_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.DeployAmount",
        "members": [
          {
            "astId": 31038,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "deploy",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 31040,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "hedge",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Integration)31046_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.Integration",
        "members": [
          {
            "astId": 31043,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integration",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31045,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "ammPoolID",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)31072_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.Strategy",
        "members": [
          {
            "astId": 31055,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 31059,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integrations",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Integration)31046_storage)dyn_storage"
          },
          {
            "astId": 31063,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Token)31053_storage)dyn_storage"
          },
          {
            "astId": 31067,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "availableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 31071,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "maximumCap",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Token)31053_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.Token",
        "members": [
          {
            "astId": 31048,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integrationPairIdx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31050,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 31052,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "weight",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}