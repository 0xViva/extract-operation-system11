{
  "address": "0x955343f9389913E2Bd9CfF7B4Da32E43652D6552",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "decreaseUserRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethRewardsAmount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "getStrategyInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEtherRewards.StrategyInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalClaimedEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getTotalUserClaimedEthByStrategy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTotalUserClaimedEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getUserEthRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "rewardDebt",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "claimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEtherRewards.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStrategyRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethRewardsAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseEthRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "increaseUserRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastEthDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rpsAtPeriodStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "setEmissionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLastWithdrawalRPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLastWithdrawalTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a9e02cff7c404682c56d2441f04229649a89fa9f6206259ac3fae85ad1cac95",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0x955343f9389913E2Bd9CfF7B4Da32E43652D6552",
    "transactionIndex": 0,
    "gasUsed": "2102045",
    "logsBloom": "0x
    "blockHash": "0xf3d2d40ec17c27de22dc1995f4540ffbc8e747a76dd5015b2fded3148336da0a",
    "transactionHash": "0x4a9e02cff7c404682c56d2441f04229649a89fa9f6206259ac3fae85ad1cac95",
    "logs": [],
    "blockNumber": 2698646,
    "cumulativeGasUsed": "2102045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8691a89ebd8d69f8412923e433444233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"decreaseUserRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethRewardsAmount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"getStrategyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct IEtherRewards.StrategyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimedEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getTotalUserClaimedEthByStrategy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalUserClaimedEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getUserEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct IEtherRewards.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStrategyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethRewardsAmount\",\"type\":\"uint256\"}],\"name\":\"increaseEthRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"increaseUserRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEthDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rpsAtPeriodStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setEmissionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLastWithdrawalRPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLastWithdrawalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimEthRewards(address,uint256[])\":{\"params\":{\"ids\":\"An array of strategyIds to claim rewards for\",\"user\":\"The address of the user\"},\"returns\":{\"ethRewards\":\"The amount of Ether claimed\"}},\"decreaseUserRewards(uint256,uint256,address)\":{\"params\":{\"amount\":\"Amount of token exiting from a strategy\",\"strategyId\":\"Strategy the user exited\",\"user\":\"The address of the user\"}},\"getEthRewards()\":{\"returns\":{\"_0\":\"The total amount of Ether rewards\"}},\"getTotalClaimedEthRewards()\":{\"returns\":{\"_0\":\"The total value of ETH claimed by users\"}},\"getTotalUserClaimedEthRewards(address)\":{\"returns\":{\"_0\":\"The total value of ETH claimed by a user\"}},\"getUserEthRewards(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"ethRewards The amount of Ether claimed\"}},\"getUserEthRewards(address,uint256[])\":{\"params\":{\"ids\":\"An array of strategyIds to claim rewards for\",\"user\":\"The address of the user\"},\"returns\":{\"totalRewards\":\"The amount of Ether claimed\"}},\"getUserStrategyRewards(uint256,address)\":{\"params\":{\"strategyId\":\"The ID of the strategy\",\"user\":\"The address of the user\"},\"returns\":{\"ethRewards\":\"The amount of claimable Ether\"}},\"increaseEthRewards(uint256,uint256)\":{\"details\":\"strategyId = 0 for BIOS PFA!\",\"params\":{\"ethRewardsAmount\":\"The amount of Ether rewards to add\",\"strategyId\":\"The strategyId of the strategy to increase rewards for\"}},\"increaseUserRewards(uint256,uint256,address)\":{\"params\":{\"amount\":\"Amount of token entered into strategy\",\"strategyId\":\"Strategy the user entered into\",\"user\":\"The address of the user\"}},\"initialize(address[],address)\":{\"params\":{\"controllers_\":\"The array of controllers for this contract\",\"moduleMap_\":\"The address of the ModuleMap contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEmissionPeriod(uint256)\":{\"notice\":\"Sets the nominal period between eth distributions\"},\"userLastWithdrawalRPS(address,uint256)\":{\"notice\":\"user => strategy => rps at last withdrawal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/EtherRewards.sol\":\"EtherRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal onlyInitializing {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xed017271d8ba30d80b8449946ed9ed3c6192d59980f343d26580070da40ede47\",\"license\":\"GPL-2.0\"},\"contracts/core/EtherRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IEtherRewards.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\n// https://solmaz.io/2019/02/24/scalable-reward-changing/\\n// https://github.com/sushiswap/sushiswap/blob/canary/contracts/MasterChefV2.sol\\ncontract EtherRewards is Initializable, ModuleMapConsumer, Controlled, IEtherRewards {\\n    uint256 private totalEthRewards;\\n    uint256 private totalClaimedEthRewards;\\n    mapping(address => uint256) private totalUserClaimedEthRewards;\\n\\n    // user => strategyId => UserInfo\\n    mapping(address => mapping(uint256 => UserInfo)) private users;\\n\\n    // strategyId => StrategyInfo\\n    mapping(uint256 => StrategyInfo) private strategies;\\n\\n    // Used for accounting precision\\n    uint256 private constant ACC_PRECISION = 1e12;\\n\\n    // strategy id => time of distribution\\n    mapping(uint256 => uint256) public lastEthDistribution;\\n\\n    // Strategy => Reward per share before the latest distribution was added.\\n    mapping(uint256 => uint256) public rpsAtPeriodStart;\\n\\n    /// user => strategy => rps at last withdrawal\\n    mapping(address => mapping(uint256 => uint256)) public userLastWithdrawalRPS;\\n    // User => strategy => last withdrawal time\\n    mapping(address => mapping(uint256 => uint256)) public userLastWithdrawalTime;\\n    uint256 public emissionPeriod;\\n\\n    /// @param controllers_ The array of controllers for this contract\\n    /// @param moduleMap_ The address of the ModuleMap contract\\n    function initialize(address[] memory controllers_, address moduleMap_) external initializer {\\n        __Controlled_init(controllers_, moduleMap_);\\n    }\\n\\n    function setEmissionPeriod(uint256 period) external override onlyManager {\\n        emissionPeriod = period;\\n    }\\n\\n    /// @param strategyId Strategy the user entered into\\n    /// @param amount Amount of token entered into strategy\\n    /// @param user The address of the user\\n    function increaseUserRewards(\\n        uint256 strategyId,\\n        uint256 amount,\\n        address user\\n    ) external override onlyController {\\n        // Increase reward debt so users don't get back credited\\n        users[user][strategyId].rewardDebt += int256((amount * strategies[strategyId].rewardPerShare) / ACC_PRECISION);\\n    }\\n\\n    /// @param strategyId Strategy the user exited\\n    /// @param amount Amount of token exiting from a strategy\\n    /// @param user The address of the user\\n    function decreaseUserRewards(\\n        uint256 strategyId,\\n        uint256 amount,\\n        address user\\n    ) external override onlyController {\\n        // Decrease reward debt so users don't lose rewards already earned\\n        users[user][strategyId].rewardDebt -= int256((amount * strategies[strategyId].rewardPerShare) / ACC_PRECISION);\\n    }\\n\\n    function donate(uint256 strategyId, uint256 ethRewardsAmount) external payable {\\n        require(ethRewardsAmount > 0 && msg.value == ethRewardsAmount, \\\"need eth\\\");\\n        _increaseEthRewards(strategyId, ethRewardsAmount);\\n    }\\n\\n    /// @dev strategyId = 0 for BIOS PFA!\\n    /// @param strategyId The strategyId of the strategy to increase rewards for\\n    /// @param ethRewardsAmount The amount of Ether rewards to add\\n    function increaseEthRewards(uint256 strategyId, uint256 ethRewardsAmount) external override onlyController {\\n        _increaseEthRewards(strategyId, ethRewardsAmount);\\n    }\\n\\n    function _increaseEthRewards(uint256 strategyId, uint256 ethRewardsAmount) internal {\\n        StrategyInfo storage strategy = strategies[strategyId];\\n\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n\\n        // BIOS is special and just uses deposits, not strategy balance\\n        uint256 tokenTotalAmount = strategyId == 0\\n            ? IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalTokenBalance(\\n                integrationMap.getBiosTokenAddress()\\n            )\\n            : IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).getStrategyTokenBalance(\\n                strategyId,\\n                _getStrategyToken(strategyId)\\n            );\\n        require(tokenTotalAmount > 0, \\\"EtherRewards::tokenNotDeposited\\\");\\n\\n        rpsAtPeriodStart[strategyId] = strategy.rewardPerShare;\\n        lastEthDistribution[strategyId] = block.timestamp;\\n\\n        // Update strategy rate and total\\n        strategy.rewardPerShare += (ethRewardsAmount * ACC_PRECISION) / tokenTotalAmount;\\n        strategy.totalRewards += ethRewardsAmount;\\n\\n        // Update global rewards\\n        totalEthRewards += ethRewardsAmount;\\n    }\\n\\n    /// @param user The address of the user\\n    /// @param ids An array of strategyIds to claim rewards for\\n    /// @return ethRewards The amount of Ether claimed\\n    function claimEthRewards(address user, uint256[] calldata ids)\\n        external\\n        override\\n        onlyController\\n        returns (uint256 ethRewards)\\n    {\\n        for (uint256 i; i < ids.length; ++i) {\\n            ethRewards += _claimStrategyRewards(ids[i], user);\\n        }\\n    }\\n\\n    /// @param strategyId The strategy to claim rewards from\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of Ether claimed\\n    function _claimStrategyRewards(uint256 strategyId, address user) private returns (uint256) {\\n        (uint256 ethRewards, uint256 userAmount) = _getUserStrategyRewards(strategyId, user);\\n\\n        if (ethRewards > 0) {\\n            int256 rewardDebt = users[user][strategyId].rewardDebt;\\n            uint256 rpsStart = rpsAtPeriodStart[strategyId];\\n\\n            uint256 currentRewardPerShare = strategies[strategyId].rewardPerShare;\\n            rpsStart = rpsStart == 0 ? currentRewardPerShare : rpsStart;\\n\\n            uint256 userLastRPS = userLastWithdrawalRPS[user][strategyId];\\n\\n            // Process fully released rewards (rpsAtPeriodStart - lastWithdrawalRPS)\\n            uint256 pendingRPS;\\n            if (userLastRPS < rpsStart) {\\n                pendingRPS = rpsStart - userLastRPS;\\n                rewardDebt += int256((pendingRPS * userAmount) / ACC_PRECISION);\\n            }\\n\\n            // Handle partially released rewards (currentRPS - rpsAtPeriodStart)\\n            uint256 userWithdrawalTime = userLastWithdrawalTime[user][strategyId];\\n            userWithdrawalTime = userWithdrawalTime == 0 ? block.timestamp : userWithdrawalTime;\\n\\n            uint256 lastDistributionTime = lastEthDistribution[strategyId];\\n            lastDistributionTime = lastDistributionTime == 0 ? block.timestamp : lastDistributionTime;\\n\\n            pendingRPS =\\n                ((currentRewardPerShare - rpsStart) / (emissionPeriod == 0 ? 1 : emissionPeriod)) *\\n                (\\n                    block.timestamp - userWithdrawalTime > lastDistributionTime\\n                        ? userWithdrawalTime\\n                        : lastDistributionTime\\n                );\\n\\n            // User accounting\\n            rewardDebt += int256((pendingRPS * userAmount) / ACC_PRECISION);\\n            users[user][strategyId].rewardDebt = rewardDebt;\\n            userLastWithdrawalRPS[user][strategyId] = rpsStart + pendingRPS;\\n            userLastWithdrawalTime[user][strategyId] = block.timestamp;\\n\\n            // Global accounting\\n            totalClaimedEthRewards += ethRewards;\\n            totalUserClaimedEthRewards[user] += ethRewards;\\n        }\\n\\n        return ethRewards;\\n    }\\n\\n    /// @param strategyId The ID of the strategy\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of claimable Ether\\n    function getUserStrategyRewards(uint256 strategyId, address user)\\n        external\\n        view\\n        override\\n        returns (uint256 ethRewards)\\n    {\\n        (ethRewards, ) = _getUserStrategyRewards(strategyId, user);\\n    }\\n\\n    function _getUserStrategyRewards(uint256 strategyId, address user)\\n        private\\n        view\\n        returns (uint256 ethRewards, uint256 userAmount)\\n    {\\n        UserInfo memory userInfo = users[user][strategyId];\\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\\n\\n        userAmount = userPositions.userStrategyBalance(user, strategyId);\\n\\n        ethRewards = _subtractDebt(\\n            ((strategies[strategyId].rewardPerShare * userAmount) / ACC_PRECISION),\\n            userInfo.rewardDebt\\n        );\\n    }\\n\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserEthRewards(address user) external view override returns (uint256) {\\n        IStrategyMap strategyMap = IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap));\\n\\n        uint256 totalRewards;\\n\\n        // We purposefully check 0 for BIOS (PFA)\\n        for (uint256 i; i <= strategyMap.idCounter(); ++i) {\\n            (uint256 rewards, ) = _getUserStrategyRewards(i, user);\\n            totalRewards += rewards;\\n        }\\n\\n        return totalRewards;\\n    }\\n\\n    function getUserEthRewards(address user, uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (uint256 totalRewards)\\n    {\\n        for (uint256 i; i < ids.length; i++) {\\n            (uint256 rewards, ) = _getUserStrategyRewards(i, user);\\n            totalRewards += rewards;\\n        }\\n    }\\n\\n    /// @return The total value of ETH claimed by users\\n    function getTotalClaimedEthRewards() external view override returns (uint256) {\\n        return totalClaimedEthRewards;\\n    }\\n\\n    /// @return The total value of ETH claimed by a user\\n    function getTotalUserClaimedEthRewards(address account) external view override returns (uint256) {\\n        return totalUserClaimedEthRewards[account];\\n    }\\n\\n    function getTotalUserClaimedEthByStrategy(address user, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory claimed = new uint256[](ids.length);\\n        for (uint256 i; i < ids.length; ++i) {\\n            claimed[i] = users[user][ids[i]].claimedRewards;\\n        }\\n        return claimed;\\n    }\\n\\n    /// @return The total amount of Ether rewards\\n    function getEthRewards() external view override returns (uint256) {\\n        return totalEthRewards;\\n    }\\n\\n    function getStrategyInfo(uint256 strategyId) external view returns (StrategyInfo memory) {\\n        return strategies[strategyId];\\n    }\\n\\n    function getUserInfo(uint256 strategyId, address user) external view returns (UserInfo memory) {\\n        return users[user][strategyId];\\n    }\\n\\n    function _getStrategyToken(uint256 strategyId) internal view returns (address) {\\n        if (strategyId == 0) {\\n            return IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getBiosTokenAddress();\\n        } else {\\n            return\\n                IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).getStrategy(strategyId).tokens[0].token;\\n        }\\n    }\\n\\n    /// @notice Helper function for math between uint and int\\n    function _subtractDebt(uint256 rewards, int256 debt) private pure returns (uint256) {\\n        if (debt < 0) {\\n            return rewards + uint256(debt * -1);\\n        } else {\\n            return rewards - uint256(debt);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccf350336794ed2295e2722cca29691de829fe2c5a6917324ca4a9d683e71a6a\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal onlyInitializing {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0x562431546443640c950a15ccce0cffedeced3e414c41cc2758bf489f4525d1df\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IEtherRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IEtherRewards {\\n    // structs\\n    struct UserInfo {\\n        // rewardDebt uses MCV2 technology, it can be negative!\\n        int256 rewardDebt;\\n        uint256 claimedRewards;\\n    }\\n\\n    struct StrategyInfo {\\n        uint256 rewardPerShare; // rewardPerShare * 1e12\\n        uint256 totalRewards;\\n    }\\n\\n    /// @param strategyId The strategy the user entered\\n    /// @param amount The amount of token entered by the user\\n    /// @param user The address of the user\\n    function increaseUserRewards(\\n        uint256 strategyId,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    /// @param strategyId The strategy the user exited\\n    /// @param amount The amount of token exited by the user\\n    /// @param user The address of the user\\n    function decreaseUserRewards(\\n        uint256 strategyId,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    /// @param strategyId The strategy to the rewards are for\\n    /// @param ethRewardsAmount The amount of Ether rewards to add\\n    function increaseEthRewards(uint256 strategyId, uint256 ethRewardsAmount) external;\\n\\n    /// @param user The address of the user\\n    /// @param ids An array of strategyIds to claim rewards for\\n    /// @return ethRewards The amount of Ether claimed\\n    function claimEthRewards(address user, uint256[] calldata ids) external returns (uint256 ethRewards);\\n\\n    /// @param strategyId The ID of the strategy\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserStrategyRewards(uint256 strategyId, address user) external view returns (uint256 ethRewards);\\n\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserEthRewards(address user) external view returns (uint256 ethRewards);\\n\\n    /// @param user The address of the user\\n    /// @param ids An array of strategyIds to claim rewards for\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserEthRewards(address user, uint256[] calldata ids) external view returns (uint256 ethRewards);\\n\\n    /// @return The total value of ETH claimed by users\\n    function getTotalClaimedEthRewards() external view returns (uint256);\\n\\n    /// @return The total value of ETH claimed by a user\\n    function getTotalUserClaimedEthRewards(address user) external view returns (uint256);\\n\\n    /// @return The total amount of Ether rewards\\n    function getEthRewards() external view returns (uint256);\\n\\n    /// @notice Sets the nominal period between eth distributions\\n    function setEmissionPeriod(uint256 period) external;\\n}\\n\",\"keccak256\":\"0xe0ad65e3bf6a9fe30e407f268338c14516649ce7777850960bacc2821de61c50\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    event Deploy(address token, uint256 amount);\\n    event HarvestYield(address token, uint256 amount);\\n    event Deposit(address token, uint256 amount);\\n    event Withdraw(address token, uint256 amount);\\n\\n    /**\\n     * Used by YieldManager to deposit funds.\\n     * @param tokenAddress The address of the deposited token\\n     * @param amount The amount being deposited\\n     */\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to withdraw funds.\\n     * @param tokenAddress The address of the withdrawal token\\n     * @param amount The amount being withdrawn\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to deploy funds.\\n     * @dev Deploys all tokens held in the integration contract to the integrated protocol\\n     */\\n    function deploy() external;\\n\\n    /**\\n     * Used by YieldManager to harvest funds.\\n     * @dev Harvests token yield from the integration\\n     */\\n    function harvestYield() external;\\n\\n    /**\\n     * Get the integration's balance of a token.\\n     * @dev has been deposited to the integration contract\\n     * @dev This returns the total amount of the underlying token that\\n     * @param tokenAddress The address of the deployed token\\n     * @return The amount of the underlying token that can be withdrawn\\n     */\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /**\\n     * Returns the total amount of yield awaing to be harvested\\n     * using the relevant integration's own function\\n     * @param tokenAddress The token to get the pending yield for\\n     * @return amount The amount of available yield for the specified token\\n     */\\n    function getPendingYield(address tokenAddress) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5f1c0946f3def553313e240f568096ccf9090659b52c51deed14f56d7559f8b8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6f4529412860cc773b26bca59c78fd12bc066323470b07501c0d1e9e2de0f54a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    Strategy1155, // 6\\n    SyntheticMap, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c79bb5822bea9209419b3c6eaefc40a8fd950184ff4445eb5745f70460f5310\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    /**\\n     *\\n     * structs\\n     *\\n     **/\\n\\n    struct DeployAmount {\\n        int128 deploy;\\n        uint128 hedge;\\n    }\\n\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n        mapping(address => uint256) maximumCap;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct TokenFunds {\\n        uint256 totalBalance;\\n        // strategy token => strategy balance\\n        mapping(address => uint256) strategyBalance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    struct ReplaceIntegrationParams {\\n        Integration newIntegration;\\n        address token;\\n        uint256 oldIntegrationIndex;\\n        uint32[] weightAmounts;\\n        uint256[] weightTokenIndexes;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * events\\n     *\\n     *\\n     **/\\n\\n    event NewStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens, string name);\\n\\n    event UpdateName(uint256 indexed strategyId, string name);\\n\\n    event UpdateStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens);\\n\\n    event DeleteStrategy(uint256 indexed strategyId);\\n\\n    event IntegrationWeightAdjustment(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        uint32 amount,\\n        bool rebalance\\n    );\\n\\n    event RemoveIntegration(uint256 strategyId, uint256 integrationIndex, address token);\\n\\n    event AddIntegration(uint256 strategyId, Integration integration, address token);\\n\\n    /**\\n     *\\n     *\\n     * manager's functions\\n     *\\n     *\\n     **/\\n\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     @param maxCap  The maximum amount investable in a strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens,\\n        uint256[] memory maxCap\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 strategyId, string calldata name) external;\\n\\n    function addPairToStrategy(\\n        uint256 strategyId,\\n        Integration calldata integration,\\n        address token\\n    ) external;\\n\\n    /**\\n    @dev Changes weights of integrations,optionally rebalancing the integrations\\n        so that current fund allocation reflects new weights\\n     */\\n    function movePairWeight(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        int256 vectorAmount,\\n        uint32 amount,\\n        bool rebalance\\n    ) external;\\n\\n    function removePairFromStrategy(\\n        uint256 strategyId,\\n        uint256 integrationIndex,\\n        address token\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it,\\n        first update the strategy so that the existing tokens are no longer available in the strategy,\\n        then delete the strategy. This will unwind the users positions,\\n        and they will be able to withdraw their funds.\\n    @param strategyId  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 strategyId) external;\\n\\n    /**\\n    @notice Sets availability status for the token\\n    @param strategyId The strategy strategyId\\n    @param token The token address\\n    @param available An availability status. Velue \\\"true\\\" will enable token and vice versa\\n    */\\n    function setAvailableTokens(\\n        uint256 strategyId,\\n        address token,\\n        bool available\\n    ) external;\\n\\n    /**\\n    @notice Sets the maximum investment cap for a strategy and token pair\\n    @param strategyId The strategy strategyId\\n    @param token the token address\\n    @param maxCap The maximum amount of funds that can be invested\\n    */\\n    function setMaximumCap(\\n        uint256 strategyId,\\n        address token,\\n        uint256 maxCap\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * strategy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param strategyId  the strategy to deposit into\\n    @param token Token address\\n    @param amount Amount of the token\\n    @return strategyDebtClosed_ How much negative deploy amount was increased (-x [deploy] + y [amount] = y - x [deploy])\\n     */\\n    function increaseStrategy(\\n        uint256 strategyId,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 strategyDebtClosed_);\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param strategyId  the strategy to withdraw assets from\\n    @param amount  amount of lp token that user have burned\\n     */\\n    function decreaseStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     *\\n     *\\n     * deploy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param deployAmount Amount that went to the corresponding pool\\n    @param hedgeAmount Amount that went to the synthetic pool\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 deployAmount,\\n        uint256 hedgeAmount\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param strategyId  the strategy to return\\n     */\\n    function getStrategy(uint256 strategyId) external view returns (StrategySummary memory);\\n\\n    /**\\n    @notice Returns 1 or more strategies in a single call.\\n    @param strategyIds to return.\\n    */\\n    function getMultipleStrategies(uint256[] calldata strategyIds) external view returns (StrategySummary[] memory);\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param strategyId  the strategy strategyId to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 strategyId, address token) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @param strategies An array of strategies in which total balance will be calculated\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token, uint256[] calldata strategies) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return deployAmount An amount that should be deployed to the corresponding integration\\n    @return hedgeAmount An amount that should be deployed to the synthetic pool \\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256 deployAmount, uint256 hedgeAmount);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy) external view returns (uint256);\\n\\n    /// @notice Retrieves the maximum cap for a strategy/token pair\\n    /// @param strategyId  the strategy strategyId\\n    /// @param token  the token address\\n    /// @return cap  the maximum cap for the strategy/token pair\\n    function getMaximumCap(uint256 strategyId, address token) external view returns (uint256 cap);\\n}\\n\",\"keccak256\":\"0x4c029270bde792eec1344723c6303ceb27e969751b3de246c9bdc30d3bd83283\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n\\n    // ##### Events\\n    event EnterStrategy(uint256 indexed strategyId, address indexed user, uint256 amount);\\n    event ExitStrategy(uint256 indexed strategyId, address indexed user, uint256 tokenBurned);\\n    event Deposit(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event Pause(bool isPaused);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * user cycle\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @notice User is allowed to deposit whitelisted tokens\\n     * @param depositor Address of the account depositing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param ethAmount The amount of ETH sent with the deposit\\n     * @param migration flag if this is a migration from the old system\\n     **/\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /**\\n     * @notice Adds a user's funds to a strategy to be deployed\\n     * @param strategyId  The strategy to enter\\n     * @param amount Amount of native coin\\n     **/\\n    function enterStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @param user The address of the user claiming ETH rewards\\n     * @param strategies An array of ids to claim rewards for\\n     **/\\n    function claimEthRewards(address user, uint256[] calldata strategies) external returns (uint256 ethClaimed);\\n\\n    /**\\n     * @notice Marks a user's funds as withdrawable\\n     * @param strategyId  The strategy to withdrawfrom\\n     * @param amount strategyId amount to burn\\n     **/\\n    function exitStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @notice User is allowed to withdraw tokens\\n     * @param recipient The address of the user withdrawing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     **/\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /**\\n     * @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n     * @param recipient The address of the user withdrawing tokens\\n     * @param tokens Array of token address that user is exiting positions from\\n     * @param strategies Array of strategy IDs that user is claiming rewards from\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     * @return _withdrawAllAndClaimResponse\\n     * /// WithdrawAllAndClaimResponse.tokenAmounts The amounts of each token being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethWithdrawn The amount of ETH being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethClaimed The amount of ETH being claimed from rewards\\n     * /// WithdrawAllAndClaimResponse.biosClaimed The amount of BIOS being claimed from rewards\\n     **/\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] calldata strategies,\\n        bool withdrawWethAsEth\\n    ) external returns (WithdrawAllAndClaimResponse memory _withdrawAllAndClaimResponse);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param asset Address of the ERC20 token contract\\n     * @return The total balance of the asset that is not in the strategy\\n     **/\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     * @return The amount that a user has deposited locally, but that isn't in the strategy\\n     **/\\n    function userTokenBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.totalSupply(strategyId);\\n     **/\\n    function totalStrategyBalance(uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @param account An address of the user\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.balanceOf(account, strategyId)\\n     **/\\n    function userStrategyBalance(address account, uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userDeployableBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has interconnected\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userInterconnectBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * interconnections\\n     *\\n     *\\n     *\\n     **/\\n\\n    function _remoteStrategyExecution(\\n        uint256 strategyID,\\n        address user,\\n        address token,\\n        uint256 amount,\\n        bool enterStrat // true to enter, false to exit\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserTokenBalances(\\n        address[] calldata assets,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb4fd1f1d39f045138f9e727a31da165f99d212b4ef7a8cd0e28f3c7a83c8081\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612512806100206000396000f3fe6080604052600436106101315760003560e01c80630c52b797146101365780630cdd53f61461015a5780630f0a1c6f1461016f5780631069f3b5146101a257806313cf6b00146101dd5780631e97e4ca146101fd578063337993cb14610235578063462d0b2e1461025757806354ed0e59146102775780636500d90f14610297578063991f2fac146102cd578063a179802e146102ed578063a22aecd11461031a578063a5fbe1b71461033a578063a7fc7a0714610350578063b429afeb14610370578063ba8b482c146103b9578063bd48c397146103f1578063c3b2a7f414610411578063d390c73a14610431578063db089e791461045e578063e87e88dc146104b7578063e94b0dd2146104cc578063ebfd2da4146104ec578063f15230dd1461050c578063f4f104b514610539575b600080fd5b34801561014257600080fd5b506004545b6040519081526020015b60405180910390f35b61016d610168366004612091565b610559565b005b34801561017b57600080fd5b50600054610195906201000090046001600160a01b031681565b60405161015191906120ea565b3480156101ae57600080fd5b506101c26101bd366004612062565b6105b2565b60408051825181526020928301519281019290925201610151565b3480156101e957600080fd5b5061016d6101f83660046120b2565b6105fe565b34801561020957600080fd5b50610147610218366004611e21565b600a60209081526000928352604080842090915290825290205481565b34801561024157600080fd5b5061024a610694565b60405161015191906120fe565b34801561026357600080fd5b5061016d610272366004611e4c565b6106f6565b34801561028357600080fd5b50610147610292366004611d60565b6107bb565b3480156102a357600080fd5b506101476102b2366004611d60565b6001600160a01b031660009081526005602052604090205490565b3480156102d957600080fd5b5061016d6102e8366004612032565b6108f5565b3480156102f957600080fd5b50610147610308366004612032565b60096020526000908152604090205481565b34801561032657600080fd5b5061016d6103353660046120b2565b610a5d565b34801561034657600080fd5b50610147600c5481565b34801561035c57600080fd5b5061016d61036b366004611d60565b610ae9565b34801561037c57600080fd5b506103a961038b366004611d60565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610151565b3480156103c557600080fd5b506101476103d4366004611e21565b600b60209081526000928352604080842090915290825290205481565b3480156103fd57600080fd5b5061014761040c366004611d9f565b610d25565b34801561041d57600080fd5b5061014761042c366004611d9f565b610d60565b34801561043d57600080fd5b5061045161044c366004611d9f565b610de6565b604051610151919061214b565b34801561046a57600080fd5b506101c2610479366004612032565b604080518082019091526000808252602082015250600090815260076020908152604091829020825180840190935280548352600101549082015290565b3480156104c357600080fd5b50600354610147565b3480156104d857600080fd5b506101956104e7366004612032565b610edd565b3480156104f857600080fd5b50610147610507366004612062565b610f07565b34801561051857600080fd5b50610147610527366004612032565b60086020526000908152604090205481565b34801561054557600080fd5b5061016d610554366004612091565b610f13565b60008111801561056857508034145b6105a45760405162461bcd60e51b81526020600482015260086024820152670dccacac840cae8d60c31b60448201526064015b60405180910390fd5b6105ae8282610f42565b5050565b604080518082018252600080825260209182018190526001600160a01b038416815260068252828120858252825282902082518084019093528054835260010154908201525b92915050565b3360009081526001602052604090205460ff1661062d5760405162461bcd60e51b815260040161059b906121d0565b60008381526007602052604090205464e8d4a510009061064d9084612408565b6106579190612365565b6001600160a01b03821660009081526006602090815260408083208784529091528120805490919061068a90849061230c565b9091555050505050565b606060028054806020026020016040519081016040528092919081815260200182805480156106ec57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106ce575b5050505050905090565b600054610100900460ff166107115760005460ff1615610715565b303b155b6107785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059b565b600054610100900460ff1615801561079a576000805461ffff19166101011790555b6107a48383611350565b80156107b6576000805461ff00191690555b505050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a906107f390600890600401612183565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190611d83565b90506000805b826001600160a01b031663eb08ab286040518163ffffffff1660e01b815260040160206040518083038186803b15801561088257600080fd5b505afa158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba919061204a565b81116108ed5760006108cc82876114a5565b5090506108d9818461234d565b925050806108e69061247d565b9050610849565b509392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161092a9190600401612183565b60206040518083038186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611d83565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016109a591906120ea565b60206040518083038186803b1580156109bd57600080fd5b505afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190611ef9565b610a585760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b606482015260840161059b565b600c55565b3360009081526001602052604090205460ff16610a8c5760405162461bcd60e51b815260040161059b906121d0565b60008381526007602052604090205464e8d4a5100090610aac9084612408565b610ab69190612365565b6001600160a01b03821660009081526006602090815260408083208784529091528120805490919061068a908490612427565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610b1e9190600401612183565b60206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e9190611d83565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401610b9991906120ea565b60206040518083038186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be99190611ef9565b610c485760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161059b565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015610cce5760028181548110610c9a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415610cbe57600191505b610cc78161247d565b9050610c6f565b50806105ae57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b6000805b828110156108ed576000610d3d82876114a5565b509050610d4a818461234d565b9250508080610d589061247d565b915050610d29565b3360009081526001602052604081205460ff16610d8f5760405162461bcd60e51b815260040161059b906121d0565b60005b828110156108ed57610dca848483818110610dbd57634e487b7160e01b600052603260045260246000fd5b905060200201358661162a565b610dd4908361234d565b9150610ddf8161247d565b9050610d92565b60606000826001600160401b03811115610e1057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e39578160200160208202803683370190505b50905060005b83811015610ed4576001600160a01b038616600090815260066020526040812090868684818110610e8057634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060010154828281518110610eb957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610ecd8161247d565b9050610e3f565b50949350505050565b60028181548110610eed57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006108ed83836114a5565b3360009081526001602052604090205460ff166105a45760405162461bcd60e51b815260040161059b906121d0565b600082815260076020526040808220825491516337c61fc560e11b81529092916201000090046001600160a01b031690636f8c3f8a90610f8790600390600401612183565b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190611d83565b905060008415611101576000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061101790600890600401612183565b60206040518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110679190611d83565b6001600160a01b0316639d6eaec28661107f886118bf565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc919061204a565b611272565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061113790600190600401612183565b60206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190611d83565b6001600160a01b031663f5465992836001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112069190611d83565b6040518263ffffffff1660e01b815260040161122291906120ea565b60206040518083038186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611272919061204a565b9050600081116112c45760405162461bcd60e51b815260206004820152601f60248201527f4574686572526577617264733a3a746f6b656e4e6f744465706f736974656400604482015260640161059b565b82546000868152600960209081526040808320939093556008905220429055806112f364e8d4a5100086612408565b6112fd9190612365565b836000016000828254611310919061234d565b925050819055508383600101600082825461132b919061234d565b925050819055508360036000828254611344919061234d565b90915550505050505050565b600054610100900460ff166113775760405162461bcd60e51b815260040161059b90612224565b6001600160a01b03811661139d5760405162461bcd60e51b815260040161059b906121ab565b60005b82518110156114135760006001600160a01b03168382815181106113d457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156114035760405162461bcd60e51b815260040161059b906121ab565b61140c8161247d565b90506113a0565b5060005b825181101561148757600180600085848151811061144557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556114808161247d565b9050611417565b50815161149b906002906020850190611b81565b506105ae81611aff565b6001600160a01b0380821660009081526006602090815260408083208684528252808320815180830183528154815260019182015493810193909352835491516337c61fc560e11b815293948594859362010000900490911691636f8c3f8a916115129190600401612183565b60206040518083038186803b15801561152a57600080fd5b505afa15801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190611d83565b604051632dae18b360e01b81526001600160a01b0387811660048301526024820189905291925090821690632dae18b39060440160206040518083038186803b1580156115ae57600080fd5b505afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e6919061204a565b60008781526007602052604090205490935061161f9064e8d4a510009061160e908690612408565b6116189190612365565b8351611b50565b935050509250929050565b600080600061163985856114a5565b909250905081156108ed576001600160a01b03841660009081526006602090815260408083208884528252808320546009835281842054600790935292205481156116845781611686565b805b6001600160a01b0388166000908152600a602090815260408083208c8452909152812054919350838210156116e8576116bf8285612466565b905064e8d4a510006116d18783612408565b6116db9190612365565b6116e5908661230c565b94505b6001600160a01b0389166000908152600b602090815260408083208d84529091529020548015611718578061171a565b425b60008c8152600860205260409020549091508015611738578061173a565b425b9050806117478342612466565b116117525780611754565b815b600c541561176457600c54611767565b60015b6117718888612466565b61177b9190612365565b6117859190612408565b925064e8d4a510006117978985612408565b6117a19190612365565b6117ab908861230c565b965086600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e81526020019081526020016000206000018190555082866117f7919061234d565b600a60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e81526020019081526020016000208190555042600b60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002081905550886004600082825461187e919061234d565b90915550506001600160a01b038b16600090815260056020526040812080548b92906118ab90849061234d565b909155505050505050505050509392505050565b6000816119bc576000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906118fc90600390600401612183565b60206040518083038186803b15801561191457600080fd5b505afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c9190611d83565b6001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190611d83565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906119f290600890600401612183565b60206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190611d83565b6001600160a01b031663cfc0cc34836040518263ffffffff1660e01b8152600401611a6f91815260200190565b60006040518083038186803b158015611a8757600080fd5b505afa158015611a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ac39190810190611f19565b60400151600081518110611ae757634e487b7160e01b600052603260045260246000fd5b6020026020010151602001519050919050565b919050565b600054610100900460ff16611b265760405162461bcd60e51b815260040161059b90612224565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600080821215611b7757611b6682600019612385565b611b70908461234d565b90506105f8565b611b708284612466565b828054828255906000526020600020908101928215611bd6579160200282015b82811115611bd657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611ba1565b50611be2929150611be6565b5090565b5b80821115611be25760008155600101611be7565b8035611afa816124c4565b600082601f830112611c16578081fd5b81516020611c2b611c26836122e9565b6122b9565b80838252828201915082860187848660061b8901011115611c4a578586fd5b855b85811015611c9b57604080838b031215611c64578788fd5b611c6c61226f565b8351611c77816124c4565b8152611c84848801611d4c565b818801528552938501939190910190600101611c4c565b5090979650505050505050565b600082601f830112611cb8578081fd5b81516020611cc8611c26836122e9565b82815281810190858301606080860288018501891015611ce6578687fd5b865b86811015611d3e5781838b031215611cfe578788fd5b611d06612297565b8351815286840151611d17816124c4565b818801526040611d28858201611d4c565b9082015285529385019391810191600101611ce8565b509198975050505050505050565b805163ffffffff81168114611afa57600080fd5b600060208284031215611d71578081fd5b8135611d7c816124c4565b9392505050565b600060208284031215611d94578081fd5b8151611d7c816124c4565b600080600060408486031215611db3578182fd5b8335611dbe816124c4565b925060208401356001600160401b0380821115611dd9578384fd5b818601915086601f830112611dec578384fd5b813581811115611dfa578485fd5b8760208260051b8501011115611e0e578485fd5b6020830194508093505050509250925092565b60008060408385031215611e33578182fd5b8235611e3e816124c4565b946020939093013593505050565b60008060408385031215611e5e578182fd5b82356001600160401b03811115611e73578283fd5b8301601f81018513611e83578283fd5b80356020611e93611c26836122e9565b80838252828201915082850189848660051b8801011115611eb2578788fd5b8795505b84861015611edd578035611ec9816124c4565b835260019590950194918301918301611eb6565b509550611eed9050868201611bfb565b93505050509250929050565b600060208284031215611f0a578081fd5b81518015158114611d7c578182fd5b60006020808385031215611f2b578182fd5b82516001600160401b0380821115611f41578384fd5b9084019060608287031215611f54578384fd5b611f5c612297565b825182811115611f6a578586fd5b8301601f81018813611f7a578586fd5b805183811115611f8c57611f8c6124ae565b611f9e601f8201601f191687016122b9565b8181528987838501011115611fb1578788fd5b875b82811015611fce578381018801518282018901528701611fb3565b82811115611fde57888884840101525b50835250508284015182811115611ff3578586fd5b611fff88828601611c06565b85830152506040830151935081841115612017578485fd5b61202387858501611ca8565b60408201529695505050505050565b600060208284031215612043578081fd5b5035919050565b60006020828403121561205b578081fd5b5051919050565b60008060408385031215612074578182fd5b823591506020830135612086816124c4565b809150509250929050565b600080604083850312156120a3578182fd5b50508035926020909101359150565b6000806000606084860312156120c6578081fd5b833592506020840135915060408401356120df816124c4565b809150509250925092565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561213f5783516001600160a01b03168352928401929184019160010161211a565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561213f57835183529284019291840191600101612167565b60208101600e83106121a557634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604080519081016001600160401b0381118282101715612291576122916124ae565b60405290565b604051606081016001600160401b0381118282101715612291576122916124ae565b604051601f8201601f191681016001600160401b03811182821017156122e1576122e16124ae565b604052919050565b60006001600160401b03821115612302576123026124ae565b5060051b60200190565b600080821280156001600160ff1b038490038513161561232e5761232e612498565b600160ff1b839003841281161561234757612347612498565b50500190565b6000821982111561236057612360612498565b500190565b60008261238057634e487b7160e01b81526012600452602481fd5b500490565b60006001600160ff1b03818413828413808216868404861116156123ab576123ab612498565b600160ff1b848712828116878305891216156123c9576123c9612498565b8587129250878205871284841616156123e4576123e4612498565b878505871281841616156123fa576123fa612498565b505050929093029392505050565b600081600019048311821515161561242257612422612498565b500290565b60008083128015600160ff1b85018412161561244557612445612498565b6001600160ff1b038401831381161561246057612460612498565b50500390565b60008282101561247857612478612498565b500390565b600060001982141561249157612491612498565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124d957600080fd5b5056fea26469706673582212202d7484e4dbf235868aaf8f8f0c74a6306da25b71c302ebf4fca6ae6187afc0fc64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101315760003560e01c80630c52b797146101365780630cdd53f61461015a5780630f0a1c6f1461016f5780631069f3b5146101a257806313cf6b00146101dd5780631e97e4ca146101fd578063337993cb14610235578063462d0b2e1461025757806354ed0e59146102775780636500d90f14610297578063991f2fac146102cd578063a179802e146102ed578063a22aecd11461031a578063a5fbe1b71461033a578063a7fc7a0714610350578063b429afeb14610370578063ba8b482c146103b9578063bd48c397146103f1578063c3b2a7f414610411578063d390c73a14610431578063db089e791461045e578063e87e88dc146104b7578063e94b0dd2146104cc578063ebfd2da4146104ec578063f15230dd1461050c578063f4f104b514610539575b600080fd5b34801561014257600080fd5b506004545b6040519081526020015b60405180910390f35b61016d610168366004612091565b610559565b005b34801561017b57600080fd5b50600054610195906201000090046001600160a01b031681565b60405161015191906120ea565b3480156101ae57600080fd5b506101c26101bd366004612062565b6105b2565b60408051825181526020928301519281019290925201610151565b3480156101e957600080fd5b5061016d6101f83660046120b2565b6105fe565b34801561020957600080fd5b50610147610218366004611e21565b600a60209081526000928352604080842090915290825290205481565b34801561024157600080fd5b5061024a610694565b60405161015191906120fe565b34801561026357600080fd5b5061016d610272366004611e4c565b6106f6565b34801561028357600080fd5b50610147610292366004611d60565b6107bb565b3480156102a357600080fd5b506101476102b2366004611d60565b6001600160a01b031660009081526005602052604090205490565b3480156102d957600080fd5b5061016d6102e8366004612032565b6108f5565b3480156102f957600080fd5b50610147610308366004612032565b60096020526000908152604090205481565b34801561032657600080fd5b5061016d6103353660046120b2565b610a5d565b34801561034657600080fd5b50610147600c5481565b34801561035c57600080fd5b5061016d61036b366004611d60565b610ae9565b34801561037c57600080fd5b506103a961038b366004611d60565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610151565b3480156103c557600080fd5b506101476103d4366004611e21565b600b60209081526000928352604080842090915290825290205481565b3480156103fd57600080fd5b5061014761040c366004611d9f565b610d25565b34801561041d57600080fd5b5061014761042c366004611d9f565b610d60565b34801561043d57600080fd5b5061045161044c366004611d9f565b610de6565b604051610151919061214b565b34801561046a57600080fd5b506101c2610479366004612032565b604080518082019091526000808252602082015250600090815260076020908152604091829020825180840190935280548352600101549082015290565b3480156104c357600080fd5b50600354610147565b3480156104d857600080fd5b506101956104e7366004612032565b610edd565b3480156104f857600080fd5b50610147610507366004612062565b610f07565b34801561051857600080fd5b50610147610527366004612032565b60086020526000908152604090205481565b34801561054557600080fd5b5061016d610554366004612091565b610f13565b60008111801561056857508034145b6105a45760405162461bcd60e51b81526020600482015260086024820152670dccacac840cae8d60c31b60448201526064015b60405180910390fd5b6105ae8282610f42565b5050565b604080518082018252600080825260209182018190526001600160a01b038416815260068252828120858252825282902082518084019093528054835260010154908201525b92915050565b3360009081526001602052604090205460ff1661062d5760405162461bcd60e51b815260040161059b906121d0565b60008381526007602052604090205464e8d4a510009061064d9084612408565b6106579190612365565b6001600160a01b03821660009081526006602090815260408083208784529091528120805490919061068a90849061230c565b9091555050505050565b606060028054806020026020016040519081016040528092919081815260200182805480156106ec57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106ce575b5050505050905090565b600054610100900460ff166107115760005460ff1615610715565b303b155b6107785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059b565b600054610100900460ff1615801561079a576000805461ffff19166101011790555b6107a48383611350565b80156107b6576000805461ff00191690555b505050565b600080546040516337c61fc560e11b815282916201000090046001600160a01b031690636f8c3f8a906107f390600890600401612183565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190611d83565b90506000805b826001600160a01b031663eb08ab286040518163ffffffff1660e01b815260040160206040518083038186803b15801561088257600080fd5b505afa158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba919061204a565b81116108ed5760006108cc82876114a5565b5090506108d9818461234d565b925050806108e69061247d565b9050610849565b509392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161092a9190600401612183565b60206040518083038186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611d83565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016109a591906120ea565b60206040518083038186803b1580156109bd57600080fd5b505afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190611ef9565b610a585760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b606482015260840161059b565b600c55565b3360009081526001602052604090205460ff16610a8c5760405162461bcd60e51b815260040161059b906121d0565b60008381526007602052604090205464e8d4a5100090610aac9084612408565b610ab69190612365565b6001600160a01b03821660009081526006602090815260408083208784529091528120805490919061068a908490612427565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610b1e9190600401612183565b60206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e9190611d83565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b8152600401610b9991906120ea565b60206040518083038186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be99190611ef9565b610c485760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161059b565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015610cce5760028181548110610c9a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415610cbe57600191505b610cc78161247d565b9050610c6f565b50806105ae57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b6000805b828110156108ed576000610d3d82876114a5565b509050610d4a818461234d565b9250508080610d589061247d565b915050610d29565b3360009081526001602052604081205460ff16610d8f5760405162461bcd60e51b815260040161059b906121d0565b60005b828110156108ed57610dca848483818110610dbd57634e487b7160e01b600052603260045260246000fd5b905060200201358661162a565b610dd4908361234d565b9150610ddf8161247d565b9050610d92565b60606000826001600160401b03811115610e1057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e39578160200160208202803683370190505b50905060005b83811015610ed4576001600160a01b038616600090815260066020526040812090868684818110610e8057634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060010154828281518110610eb957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610ecd8161247d565b9050610e3f565b50949350505050565b60028181548110610eed57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006108ed83836114a5565b3360009081526001602052604090205460ff166105a45760405162461bcd60e51b815260040161059b906121d0565b600082815260076020526040808220825491516337c61fc560e11b81529092916201000090046001600160a01b031690636f8c3f8a90610f8790600390600401612183565b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190611d83565b905060008415611101576000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061101790600890600401612183565b60206040518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110679190611d83565b6001600160a01b0316639d6eaec28661107f886118bf565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc919061204a565b611272565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061113790600190600401612183565b60206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190611d83565b6001600160a01b031663f5465992836001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112069190611d83565b6040518263ffffffff1660e01b815260040161122291906120ea565b60206040518083038186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611272919061204a565b9050600081116112c45760405162461bcd60e51b815260206004820152601f60248201527f4574686572526577617264733a3a746f6b656e4e6f744465706f736974656400604482015260640161059b565b82546000868152600960209081526040808320939093556008905220429055806112f364e8d4a5100086612408565b6112fd9190612365565b836000016000828254611310919061234d565b925050819055508383600101600082825461132b919061234d565b925050819055508360036000828254611344919061234d565b90915550505050505050565b600054610100900460ff166113775760405162461bcd60e51b815260040161059b90612224565b6001600160a01b03811661139d5760405162461bcd60e51b815260040161059b906121ab565b60005b82518110156114135760006001600160a01b03168382815181106113d457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156114035760405162461bcd60e51b815260040161059b906121ab565b61140c8161247d565b90506113a0565b5060005b825181101561148757600180600085848151811061144557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556114808161247d565b9050611417565b50815161149b906002906020850190611b81565b506105ae81611aff565b6001600160a01b0380821660009081526006602090815260408083208684528252808320815180830183528154815260019182015493810193909352835491516337c61fc560e11b815293948594859362010000900490911691636f8c3f8a916115129190600401612183565b60206040518083038186803b15801561152a57600080fd5b505afa15801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190611d83565b604051632dae18b360e01b81526001600160a01b0387811660048301526024820189905291925090821690632dae18b39060440160206040518083038186803b1580156115ae57600080fd5b505afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e6919061204a565b60008781526007602052604090205490935061161f9064e8d4a510009061160e908690612408565b6116189190612365565b8351611b50565b935050509250929050565b600080600061163985856114a5565b909250905081156108ed576001600160a01b03841660009081526006602090815260408083208884528252808320546009835281842054600790935292205481156116845781611686565b805b6001600160a01b0388166000908152600a602090815260408083208c8452909152812054919350838210156116e8576116bf8285612466565b905064e8d4a510006116d18783612408565b6116db9190612365565b6116e5908661230c565b94505b6001600160a01b0389166000908152600b602090815260408083208d84529091529020548015611718578061171a565b425b60008c8152600860205260409020549091508015611738578061173a565b425b9050806117478342612466565b116117525780611754565b815b600c541561176457600c54611767565b60015b6117718888612466565b61177b9190612365565b6117859190612408565b925064e8d4a510006117978985612408565b6117a19190612365565b6117ab908861230c565b965086600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e81526020019081526020016000206000018190555082866117f7919061234d565b600a60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e81526020019081526020016000208190555042600b60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002081905550886004600082825461187e919061234d565b90915550506001600160a01b038b16600090815260056020526040812080548b92906118ab90849061234d565b909155505050505050505050509392505050565b6000816119bc576000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906118fc90600390600401612183565b60206040518083038186803b15801561191457600080fd5b505afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c9190611d83565b6001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190611d83565b6000546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906119f290600890600401612183565b60206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190611d83565b6001600160a01b031663cfc0cc34836040518263ffffffff1660e01b8152600401611a6f91815260200190565b60006040518083038186803b158015611a8757600080fd5b505afa158015611a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ac39190810190611f19565b60400151600081518110611ae757634e487b7160e01b600052603260045260246000fd5b6020026020010151602001519050919050565b919050565b600054610100900460ff16611b265760405162461bcd60e51b815260040161059b90612224565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600080821215611b7757611b6682600019612385565b611b70908461234d565b90506105f8565b611b708284612466565b828054828255906000526020600020908101928215611bd6579160200282015b82811115611bd657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611ba1565b50611be2929150611be6565b5090565b5b80821115611be25760008155600101611be7565b8035611afa816124c4565b600082601f830112611c16578081fd5b81516020611c2b611c26836122e9565b6122b9565b80838252828201915082860187848660061b8901011115611c4a578586fd5b855b85811015611c9b57604080838b031215611c64578788fd5b611c6c61226f565b8351611c77816124c4565b8152611c84848801611d4c565b818801528552938501939190910190600101611c4c565b5090979650505050505050565b600082601f830112611cb8578081fd5b81516020611cc8611c26836122e9565b82815281810190858301606080860288018501891015611ce6578687fd5b865b86811015611d3e5781838b031215611cfe578788fd5b611d06612297565b8351815286840151611d17816124c4565b818801526040611d28858201611d4c565b9082015285529385019391810191600101611ce8565b509198975050505050505050565b805163ffffffff81168114611afa57600080fd5b600060208284031215611d71578081fd5b8135611d7c816124c4565b9392505050565b600060208284031215611d94578081fd5b8151611d7c816124c4565b600080600060408486031215611db3578182fd5b8335611dbe816124c4565b925060208401356001600160401b0380821115611dd9578384fd5b818601915086601f830112611dec578384fd5b813581811115611dfa578485fd5b8760208260051b8501011115611e0e578485fd5b6020830194508093505050509250925092565b60008060408385031215611e33578182fd5b8235611e3e816124c4565b946020939093013593505050565b60008060408385031215611e5e578182fd5b82356001600160401b03811115611e73578283fd5b8301601f81018513611e83578283fd5b80356020611e93611c26836122e9565b80838252828201915082850189848660051b8801011115611eb2578788fd5b8795505b84861015611edd578035611ec9816124c4565b835260019590950194918301918301611eb6565b509550611eed9050868201611bfb565b93505050509250929050565b600060208284031215611f0a578081fd5b81518015158114611d7c578182fd5b60006020808385031215611f2b578182fd5b82516001600160401b0380821115611f41578384fd5b9084019060608287031215611f54578384fd5b611f5c612297565b825182811115611f6a578586fd5b8301601f81018813611f7a578586fd5b805183811115611f8c57611f8c6124ae565b611f9e601f8201601f191687016122b9565b8181528987838501011115611fb1578788fd5b875b82811015611fce578381018801518282018901528701611fb3565b82811115611fde57888884840101525b50835250508284015182811115611ff3578586fd5b611fff88828601611c06565b85830152506040830151935081841115612017578485fd5b61202387858501611ca8565b60408201529695505050505050565b600060208284031215612043578081fd5b5035919050565b60006020828403121561205b578081fd5b5051919050565b60008060408385031215612074578182fd5b823591506020830135612086816124c4565b809150509250929050565b600080604083850312156120a3578182fd5b50508035926020909101359150565b6000806000606084860312156120c6578081fd5b833592506020840135915060408401356120df816124c4565b809150509250925092565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561213f5783516001600160a01b03168352928401929184019160010161211a565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561213f57835183529284019291840191600101612167565b60208101600e83106121a557634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604080519081016001600160401b0381118282101715612291576122916124ae565b60405290565b604051606081016001600160401b0381118282101715612291576122916124ae565b604051601f8201601f191681016001600160401b03811182821017156122e1576122e16124ae565b604052919050565b60006001600160401b03821115612302576123026124ae565b5060051b60200190565b600080821280156001600160ff1b038490038513161561232e5761232e612498565b600160ff1b839003841281161561234757612347612498565b50500190565b6000821982111561236057612360612498565b500190565b60008261238057634e487b7160e01b81526012600452602481fd5b500490565b60006001600160ff1b03818413828413808216868404861116156123ab576123ab612498565b600160ff1b848712828116878305891216156123c9576123c9612498565b8587129250878205871284841616156123e4576123e4612498565b878505871281841616156123fa576123fa612498565b505050929093029392505050565b600081600019048311821515161561242257612422612498565b500290565b60008083128015600160ff1b85018412161561244557612445612498565b6001600160ff1b038401831381161561246057612460612498565b50500390565b60008282101561247857612478612498565b500390565b600060001982141561249157612491612498565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124d957600080fd5b5056fea26469706673582212202d7484e4dbf235868aaf8f8f0c74a6306da25b71c302ebf4fca6ae6187afc0fc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimEthRewards(address,uint256[])": {
        "params": {
          "ids": "An array of strategyIds to claim rewards for",
          "user": "The address of the user"
        },
        "returns": {
          "ethRewards": "The amount of Ether claimed"
        }
      },
      "decreaseUserRewards(uint256,uint256,address)": {
        "params": {
          "amount": "Amount of token exiting from a strategy",
          "strategyId": "Strategy the user exited",
          "user": "The address of the user"
        }
      },
      "getEthRewards()": {
        "returns": {
          "_0": "The total amount of Ether rewards"
        }
      },
      "getTotalClaimedEthRewards()": {
        "returns": {
          "_0": "The total value of ETH claimed by users"
        }
      },
      "getTotalUserClaimedEthRewards(address)": {
        "returns": {
          "_0": "The total value of ETH claimed by a user"
        }
      },
      "getUserEthRewards(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "ethRewards The amount of Ether claimed"
        }
      },
      "getUserEthRewards(address,uint256[])": {
        "params": {
          "ids": "An array of strategyIds to claim rewards for",
          "user": "The address of the user"
        },
        "returns": {
          "totalRewards": "The amount of Ether claimed"
        }
      },
      "getUserStrategyRewards(uint256,address)": {
        "params": {
          "strategyId": "The ID of the strategy",
          "user": "The address of the user"
        },
        "returns": {
          "ethRewards": "The amount of claimable Ether"
        }
      },
      "increaseEthRewards(uint256,uint256)": {
        "details": "strategyId = 0 for BIOS PFA!",
        "params": {
          "ethRewardsAmount": "The amount of Ether rewards to add",
          "strategyId": "The strategyId of the strategy to increase rewards for"
        }
      },
      "increaseUserRewards(uint256,uint256,address)": {
        "params": {
          "amount": "Amount of token entered into strategy",
          "strategyId": "Strategy the user entered into",
          "user": "The address of the user"
        }
      },
      "initialize(address[],address)": {
        "params": {
          "controllers_": "The array of controllers for this contract",
          "moduleMap_": "The address of the ModuleMap contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEmissionPeriod(uint256)": {
        "notice": "Sets the nominal period between eth distributions"
      },
      "userLastWithdrawalRPS(address,uint256)": {
        "notice": "user => strategy => rps at last withdrawal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15684,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)29669"
      },
      {
        "astId": 9016,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9019,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9233,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "totalEthRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9235,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "totalClaimedEthRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9239,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "totalUserClaimedEthRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9246,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "users",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)28345_storage))"
      },
      {
        "astId": 9251,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "strategies",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(StrategyInfo)28350_storage)"
      },
      {
        "astId": 9258,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "lastEthDistribution",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9262,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "rpsAtPeriodStart",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9269,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "userLastWithdrawalRPS",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9275,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "userLastWithdrawalTime",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9277,
        "contract": "contracts/core/EtherRewards.sol:EtherRewards",
        "label": "emissionPeriod",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)29669": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)28345_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IEtherRewards.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserInfo)28345_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(StrategyInfo)28350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEtherRewards.StrategyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyInfo)28350_storage"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)28345_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEtherRewards.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)28345_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StrategyInfo)28350_storage": {
        "encoding": "inplace",
        "label": "struct IEtherRewards.StrategyInfo",
        "members": [
          {
            "astId": 28347,
            "contract": "contracts/core/EtherRewards.sol:EtherRewards",
            "label": "rewardPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28349,
            "contract": "contracts/core/EtherRewards.sol:EtherRewards",
            "label": "totalRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)28345_storage": {
        "encoding": "inplace",
        "label": "struct IEtherRewards.UserInfo",
        "members": [
          {
            "astId": 28342,
            "contract": "contracts/core/EtherRewards.sol:EtherRewards",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 28344,
            "contract": "contracts/core/EtherRewards.sol:EtherRewards",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}