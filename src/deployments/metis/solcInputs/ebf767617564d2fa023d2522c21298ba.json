{
  "language": "Solidity",
  "sources": {
    "contracts/core/BiosRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IBiosRewards.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\ncontract BiosRewards is Initializable, ModuleMapConsumer, Controlled, IBiosRewards {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint256 private totalBiosRewards;\n    uint256 private totalClaimedBiosRewards;\n    mapping(address => uint256) private totalUserClaimedBiosRewards;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\n    mapping(address => mapping(address => uint256)) public rewards;\n\n    uint32 private _biosRewardsDuration;\n\n    event RewardAdded(address indexed token, uint256 reward, uint32 duration);\n\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        uint32 biosRewardsDuration\n    ) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        _biosRewardsDuration = biosRewardsDuration;\n    }\n\n    modifier updateReward(address token, address account) {\n        rewardPerTokenStored[token] = rewardPerToken(token);\n        lastUpdateTime[token] = lastTimeRewardApplicable(token);\n        if (account != address(0)) {\n            rewards[token][account] = earned(token, account);\n            userRewardPerTokenPaid[token][account] = rewardPerTokenStored[token];\n        }\n        _;\n    }\n\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_) external override onlyController {\n        require(\n            _biosRewardsDuration != biosRewardsDuration_,\n            \"BiosRewards::setBiosRewardsDuration: Duration must be set to a new value\"\n        );\n        require(biosRewardsDuration_ > 0, \"BiosRewards::setBiosRewardsDuration: Duration must be greater than zero\");\n\n        _biosRewardsDuration = biosRewardsDuration_;\n    }\n\n    /// @param sender The account seeding BIOS rewards\n    /// @param biosAmount The amount of BIOS to add to rewards\n    function seedBiosRewards(address sender, uint256 biosAmount) external override onlyController {\n        require(biosAmount > 0, \"BiosRewards::seedBiosRewards: BIOS amount must be greater than zero\");\n\n        IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getBiosTokenAddress()\n        );\n\n        bios.safeTransferFrom(sender, moduleMap.getModuleAddress(Modules.Kernel), biosAmount);\n\n        _increaseBiosRewards();\n    }\n\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\n    function increaseBiosRewards() external override onlyController {\n        _increaseBiosRewards();\n    }\n\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\n    function _increaseBiosRewards() private {\n        IBiosRewards biosRewards = IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards));\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        address biosAddress = integrationMap.getBiosTokenAddress();\n        uint256 kernelBiosBalance = IERC20MetadataUpgradeable(biosAddress).balanceOf(\n            moduleMap.getModuleAddress(Modules.Kernel)\n        );\n\n        require(\n            kernelBiosBalance > biosRewards.getBiosRewards() + userPositions.totalTokenBalance(biosAddress),\n            \"BiosRewards::increaseBiosRewards: No available BIOS to add to rewards\"\n        );\n\n        uint256 availableBiosRewards = kernelBiosBalance -\n            biosRewards.getBiosRewards() -\n            userPositions.totalTokenBalance(biosAddress);\n\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n        uint256 biosRewardWeightSum = integrationMap.getBiosRewardWeightSum();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address token = integrationMap.getTokenAddress(tokenId);\n            uint256 tokenBiosRewardWeight = integrationMap.getTokenBiosRewardWeight(token);\n            uint256 tokenBiosRewardAmount = (availableBiosRewards * tokenBiosRewardWeight) / biosRewardWeightSum;\n            _increaseTokenBiosRewards(token, tokenBiosRewardAmount);\n        }\n    }\n\n    /// @param token The address of the ERC20 token contract\n    /// @param biosReward The added reward amount\n    function _increaseTokenBiosRewards(address token, uint256 biosReward) private {\n        IBiosRewards biosRewards = IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards));\n\n        require(\n            IERC20MetadataUpgradeable(\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getBiosTokenAddress()\n            ).balanceOf(moduleMap.getModuleAddress(Modules.Kernel)) >= biosReward + biosRewards.getBiosRewards(),\n            \"BiosRewards::increaseTokenBiosRewards: Not enough available BIOS for specified amount\"\n        );\n\n        _notifyRewardAmount(token, biosReward, _biosRewardsDuration);\n    }\n\n    /// @notice Allows users to claim their BIOS rewards for each token\n    /// @param recipient The address of the user claiming BIOS rewards\n    function claimBiosRewards(address recipient) external override onlyController returns (uint256 biosClaimed) {\n        biosClaimed = _claimBiosRewards(recipient);\n    }\n\n    /// @notice Allows users to claim their BIOS rewards for each token\n    /// @param recipient The address of the user claiming BIOS rewards\n    function _claimBiosRewards(address recipient) private returns (uint256 biosClaimed) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\n            address token = integrationMap.getTokenAddress(tokenId);\n\n            if (earned(token, recipient) > 0) {\n                biosClaimed += claimReward(token, recipient);\n            }\n        }\n\n        IERC20MetadataUpgradeable(integrationMap.getBiosTokenAddress()).safeTransferFrom(\n            moduleMap.getModuleAddress(Modules.Kernel),\n            recipient,\n            biosClaimed\n        );\n    }\n\n    /// @param token The address of the ERC20 token contract\n    /// @param reward The updated reward amount\n    /// @param duration The duration of the rewards period\n    function notifyRewardAmount(\n        address token,\n        uint256 reward,\n        uint32 duration\n    ) external override {\n        _notifyRewardAmount(token, reward, duration);\n    }\n\n    function _notifyRewardAmount(\n        address token,\n        uint256 reward,\n        uint32 duration\n    ) private updateReward(token, address(0)) {\n        if (block.timestamp >= periodFinish[token]) {\n            rewardRate[token] = reward / duration;\n        } else {\n            uint256 remaining = periodFinish[token] - block.timestamp;\n            uint256 leftover = remaining * rewardRate[token];\n            rewardRate[token] = (reward + leftover) / duration;\n        }\n        lastUpdateTime[token] = block.timestamp;\n        periodFinish[token] = block.timestamp + duration;\n        totalBiosRewards += reward;\n        emit RewardAdded(token, reward, duration);\n    }\n\n    function increaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) public override onlyController updateReward(token, account) {\n        require(amount > 0, \"BiosRewards::increaseRewards: Cannot increase 0\");\n    }\n\n    function decreaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) public override onlyController updateReward(token, account) {\n        require(amount > 0, \"BiosRewards::decreaseRewards: Cannot decrease 0\");\n    }\n\n    function claimReward(address token, address account)\n        public\n        override\n        onlyController\n        updateReward(token, account)\n        returns (uint256 reward)\n    {\n        reward = earned(token, account);\n        if (reward > 0) {\n            rewards[token][account] = 0;\n            totalBiosRewards -= reward;\n            totalClaimedBiosRewards += reward;\n            totalUserClaimedBiosRewards[account] += reward;\n        }\n        return reward;\n    }\n\n    function lastTimeRewardApplicable(address token) public view override returns (uint256) {\n        return MathUpgradeable.min(block.timestamp, periodFinish[token]);\n    }\n\n    function rewardPerToken(address token) public view override returns (uint256) {\n        uint256 totalSupply = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalTokenBalance(\n            token\n        );\n        if (totalSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) - lastUpdateTime[token]) * rewardRate[token] * 1e18) / totalSupply);\n    }\n\n    function earned(address token, address account) public view override returns (uint256) {\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        return\n            ((userPositions.userTokenBalance(token, account) *\n                (rewardPerToken(token) - userRewardPerTokenPaid[token][account])) / 1e18) + rewards[token][account];\n    }\n\n    function getUserBiosRewards(address account) external view override returns (uint256 userBiosRewards) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n\n        for (uint256 tokenId; tokenId < integrationMap.getTokenAddressesLength(); tokenId++) {\n            userBiosRewards += earned(integrationMap.getTokenAddress(tokenId), account);\n        }\n    }\n\n    function getTotalClaimedBiosRewards() external view override returns (uint256) {\n        return totalClaimedBiosRewards;\n    }\n\n    function getTotalUserClaimedBiosRewards(address account) external view override returns (uint256) {\n        return totalUserClaimedBiosRewards[account];\n    }\n\n    function getBiosRewards() external view override returns (uint256) {\n        return totalBiosRewards;\n    }\n\n    /// @return The Bios Rewards Duration\n    function getBiosRewardsDuration() public view override returns (uint32) {\n        return _biosRewardsDuration;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IBiosRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IBiosRewards {\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_) external;\n\n    /// @param sender The account seeding BIOS rewards\n    /// @param biosAmount The amount of BIOS to add to rewards\n    function seedBiosRewards(address sender, uint256 biosAmount) external;\n\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\n    function increaseBiosRewards() external;\n\n    /// @notice Allows users to claim their BIOS rewards for each token\n    /// @param recipient The address of the usuer claiming BIOS rewards\n    function claimBiosRewards(address recipient) external returns (uint256 biosClaimed);\n\n    /// @return The Bios Rewards Duration\n    function getBiosRewardsDuration() external view returns (uint32);\n\n    /// @param token The address of the ERC20 token contract\n    /// @param reward The updated reward amount\n    /// @param duration The duration of the rewards period\n    function notifyRewardAmount(\n        address token,\n        uint256 reward,\n        uint32 duration\n    ) external;\n\n    function increaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) external;\n\n    function decreaseRewards(\n        address token,\n        address account,\n        uint256 amount\n    ) external;\n\n    function claimReward(address asset, address account) external returns (uint256 reward);\n\n    function lastTimeRewardApplicable(address token) external view returns (uint256);\n\n    function rewardPerToken(address token) external view returns (uint256);\n\n    function earned(address token, address account) external view returns (uint256);\n\n    function getUserBiosRewards(address account) external view returns (uint256 userBiosRewards);\n\n    function getTotalClaimedBiosRewards() external view returns (uint256);\n\n    function getTotalUserClaimedBiosRewards(address account) external view returns (uint256);\n\n    function getBiosRewards() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUserPositions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"./IStrategyMap.sol\";\n\ninterface IUserPositions {\n    // ##### Structs\n    struct TokenMovement {\n        address token;\n        uint256 amount;\n    }\n\n    struct StrategyRecord {\n        uint256 strategyId;\n        uint256 timestamp;\n    }\n    struct MigrateStrategy {\n        address user;\n        TokenMovement[] tokens;\n    }\n\n    // ##### Events\n    event EnterStrategy(uint256 indexed id, address indexed user, TokenMovement[] tokens);\n    event ExitStrategy(uint256 indexed id, address indexed user, TokenMovement[] tokens);\n    event Deposit(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\n    event Pause(bool isPaused);\n\n    // ##### Functions\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param depositor Address of the account depositing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param ethAmount The amount of ETH sent with the deposit\n    /// @param migration flag if this is a migration from the old system\n    function deposit(\n        address depositor,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256 ethAmount,\n        bool migration\n    ) external;\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param recipient The address of the user withdrawing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function withdraw(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) external returns (uint256 ethWithdrawn);\n\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\n    /// @param recipient The address of the user withdrawing tokens\n    /// @param tokens Array of token address that user is exiting positions from\n    /// @param strategies Array of strategy IDs that user is claiming rewards from\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    /// @return tokenAmounts The amounts of each token being withdrawn\n    /// @return ethWithdrawn The amount of ETH being withdrawn\n    /// @return ethClaimed The amount of ETH being claimed from rewards\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\n    function withdrawAllAndClaim(\n        address recipient,\n        address[] memory tokens,\n        uint256[] calldata strategies,\n        bool withdrawWethAsEth\n    )\n        external\n        returns (\n            uint256[] memory tokenAmounts,\n            uint256 ethWithdrawn,\n            uint256 ethClaimed,\n            uint256 biosClaimed\n        );\n\n    /// @param user The address of the user claiming ETH rewards\n    /// @param strategies An array of strategyIDs to claim rewards for\n    function claimEthRewards(address user, uint256[] calldata strategies) external returns (uint256 ethClaimed);\n\n    /// @param asset Address of the ERC20 token contract\n    /// @return The total balance of the asset deposited in the system\n    function totalTokenBalance(address asset) external view returns (uint256);\n\n    /// @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userTokenBalance(address asset, address account) external view returns (uint256);\n\n    /// @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userDeployableBalance(address asset, address account) external view returns (uint256);\n\n    /// @notice Returns the amount that a user has interconnected\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userInterconnectBalance(address asset, address account) external view returns (uint256);\n\n    /**\n    @notice Adds a user's funds to a strategy to be deployed\n    @param strategyID  The strategy to enter\n    @param tokens  The tokens and amounts to enter into the strategy\n     */\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens) external;\n\n    function _remoteStrategyExecution(\n        uint256 strategyID,\n        address user,\n        TokenMovement[] calldata tokens,\n        bool enterStrat // true to enter, false to exit\n    ) external;\n\n    /**\n    @notice Marks a user's funds as withdrawable\n    @param strategyID  The strategy to withdrawfrom\n    @param tokens  The tokens and amounts to withdraw\n     */\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens) external;\n\n    /**\n    @notice Updates a user's local balance. Only called by controlled contracts or relayer\n    @param assets list of tokens to update\n    @param account user \n    @param amounts list of amounts to update \n     */\n    function updateUserTokenBalances(\n        address[] calldata assets,\n        address account,\n        uint256[] calldata amounts,\n        bool[] memory add\n    ) external;\n\n    /**\n    @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\n    @param assets list of tokens to update\n    @param account user \n    @param amounts list of amounts to update \n     */\n    function updateUserInterconnectBalances(\n        address[] memory assets,\n        address account,\n        uint256[] memory amounts,\n        bool[] memory add\n    ) external;\n\n    /**\n    @notice returns the amount of a given token a user has invested in a given strategy\n    @param id  the strategy id\n    @param token  the token address\n    @param user  the user who holds the funds\n    @return amount  the amount of token that the user has invested in the strategy \n     */\n    function getUserStrategyBalanceByToken(\n        uint256 id,\n        address token,\n        address user\n    ) external view returns (uint256 amount);\n\n    /**\n    @notice Returns the amount of a given token that a user has invested across all strategies\n    @param token  the token address\n    @param user  the user holding the funds\n    @return amount  the amount of tokens the user has invested across all strategies\n     */\n    function getUserInvestedAmountByToken(address token, address user) external view returns (uint256 amount);\n\n    /**\n    @notice Returns a user's balances for requested strategies, and the users total invested amounts for each token requested\n    @param user  the user to request for\n    @param _strategies  the strategies to get balances for\n    @param _tokens  the tokens to get balances for\n    @return userStrategyBalances  The user's invested funds in the strategies\n    @return userBalance  User total token balances\n     */\n    function getUserBalances(\n        address user,\n        uint256[] calldata _strategies,\n        address[] calldata _tokens\n    )\n        external\n        view\n        returns (\n            IStrategyMap.StrategyBalance[] memory userStrategyBalances,\n            IStrategyMap.GeneralBalance[] memory userBalance\n        );\n}\n"
    },
    "contracts/interfaces/IIntegrationMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"../libraries/TokenConfigs.sol\";\n\ninterface IIntegrationMap {\n    event TokenSettingToggled(\n        address indexed token,\n        TokenConfigs.TokenSettingName indexed settingName,\n        bool indexed newValue\n    );\n\n    event TokenSettingUpdated(\n        address indexed token,\n        TokenConfigs.TokenSettingName indexed settingName,\n        uint256 indexed newValue\n    );\n\n    event BiosAddressUpdated(address newAddress, address oldAddress);\n\n    struct Integration {\n        bool added;\n        string name;\n    }\n\n    struct Token {\n        uint256 id;\n        bool added;\n        bool acceptingDeposits;\n        bool acceptingWithdrawals;\n        bool acceptingLping;\n        bool acceptingBridging;\n        uint256 biosRewardWeight;\n        uint256 reserveRatioNumerator;\n        uint256 targetLiquidityRatioNumerator;\n        uint256 transferFeeKValueNumerator;\n        uint256 transferFeePlatformRatioNumerator;\n    }\n\n    /// @param contractAddress The address of the integration contract\n    /// @param name The name of the protocol being integrated to\n    function addIntegration(address contractAddress, string memory name) external;\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param acceptingLping Whether LPing is enabled\n    /// @param acceptingBridging Whether bridging is enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\n    function addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        bool acceptingLping,\n        bool acceptingBridging,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator,\n        uint256 targetLiquidityRatioNumerator,\n        uint256 transferFeeKValueNumerator,\n        uint256 transferFeePlatformRatioNumerator\n    ) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenDeposits(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenDeposits(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenWithdrawals(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenWithdrawals(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenLping(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenLping(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenBridging(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenBridging(address tokenAddress) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @param rewardWeight The updated token BIOS reward weight\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\n        external;\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\n    function updateTokenTransferFeePlatformRatioNumerator(\n        address tokenAddress,\n        uint256 transferFeePlatformRatioNumerator\n    ) external;\n\n    /// @param integrationId The ID of the integration\n    /// @return The address of the integration contract\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\n\n    /// @param integrationAddress The address of the integration contract\n    /// @return The name of the of the protocol being integrated to\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\n\n    /// @return The address of the WETH token\n    function getWethTokenAddress() external view returns (address);\n\n    /// @return The address of the BIOS token\n    function getBiosTokenAddress() external view returns (address);\n\n    /// @param tokenId The ID of the token\n    /// @return The address of the token ERC20 contract\n    function getTokenAddress(uint256 tokenId) external view returns (address);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The index of the token in the tokens array\n    function getTokenId(address tokenAddress) external view returns (uint256);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The token BIOS reward weight\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\n\n    /// @return rewardWeightSum reward weight of depositable tokens\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether depositing this token is currently enabled\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether withdrawing this token is currently enabled\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether Lping this token is currently enabled\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether bridging this token is currently enabled\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\n\n    // @param tokenAddress The address of the token ERC20 contract\n    // @return bool indicating whether the token has been added\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\n\n    // @param integrationAddress The address of the integration contract\n    // @return bool indicating whether the integration has been added\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\n\n    /// @notice get the length of supported tokens\n    /// @return The quantity of tokens added\n    function getTokenAddressesLength() external view returns (uint256);\n\n    /// @notice get the length of supported integrations\n    /// @return The quantity of integrations added\n    function getIntegrationAddressesLength() external view returns (uint256);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by reserve ratio denominator\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\n\n    /// @return The reserve ratio denominator\n    function getReserveRatioDenominator() external view returns (uint32);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by target liquidity ratio denominator\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\n\n    /// @return The target liquidity ratio denominator\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by transfer fee K-value denominator\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\n\n    /// @return The transfer fee K-value denominator\n    function getTransferFeeKValueDenominator() external view returns (uint32);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by transfer fee platform ratio denominator\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\n\n    /// @return The transfer fee platform ratio denominator\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\n}\n"
    },
    "contracts/core/Controlled.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/IKernel.sol\";\n\nabstract contract Controlled is Initializable, ModuleMapConsumer {\n    // controller address => is a controller\n    mapping(address => bool) internal _controllers;\n    address[] public controllers;\n\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal initializer {\n        require(moduleMap_ != address(0), \"bad address\");\n        for (uint256 i; i < controllers_.length; ++i) {\n            require(controllers_[i] != address(0), \"bad address\");\n        }\n        for (uint256 i; i < controllers_.length; ++i) {\n            _controllers[controllers_[i]] = true;\n        }\n        controllers = controllers_;\n        __ModuleMapConsumer_init(moduleMap_);\n    }\n\n    function addController(address controller) external onlyOwner {\n        _controllers[controller] = true;\n        bool added;\n        for (uint256 i; i < controllers.length; ++i) {\n            if (controller == controllers[i]) {\n                added = true;\n            }\n        }\n        if (!added) {\n            controllers.push(controller);\n        }\n    }\n\n    modifier onlyOwner() {\n        require(\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\n            \"Controlled::onlyOwner: Caller is not owner\"\n        );\n        _;\n    }\n\n    modifier onlyManager() {\n        require(\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\n            \"Controlled::onlyManager: Caller is not manager\"\n        );\n        _;\n    }\n\n    modifier onlyController() {\n        require(_controllers[msg.sender], \"Controlled::onlyController: Caller is not controller\");\n        _;\n    }\n\n    function isController(address controller) external view returns (bool status) {\n        status = _controllers[controller];\n    }\n\n    function getAllControllers() external view returns (address[] memory currentControllers) {\n        return controllers;\n    }\n}\n"
    },
    "contracts/core/ModuleMapConsumer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IModuleMap.sol\";\n\nabstract contract ModuleMapConsumer is Initializable {\n    IModuleMap public moduleMap;\n\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\n        moduleMap = IModuleMap(moduleMap_);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IStrategyMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"../interfaces/IIntegration.sol\";\nimport \"./IUserPositions.sol\";\n\ninterface IStrategyMap {\n    // #### Structs\n    struct Integration {\n        address integration;\n        uint32 ammPoolID;\n    }\n    struct Token {\n        uint256 integrationPairIdx;\n        address token;\n        uint32 weight;\n    }\n\n    struct TokenDeploy {\n        address integration;\n        uint32 ammPoolID;\n        address token;\n        uint256 amount;\n    }\n\n    struct Strategy {\n        string name;\n        Integration[] integrations;\n        Token[] tokens;\n        mapping(address => bool) availableTokens;\n        mapping(address => uint256) maximumCap;\n    }\n\n    struct StrategySummary {\n        string name;\n        Integration[] integrations;\n        Token[] tokens;\n    }\n\n    struct StrategyBalance {\n        uint256 strategyID;\n        GeneralBalance[] tokens;\n    }\n\n    struct GeneralBalance {\n        address token;\n        uint256 balance;\n    }\n\n    struct ClosablePosition {\n        address integration;\n        uint32 ammPoolID;\n        uint256 amount;\n    }\n\n    struct ReplaceIntegrationParams {\n        Integration newIntegration;\n        address token;\n        uint256 oldIntegrationIndex;\n        uint32[] weightAmounts;\n        uint256[] weightTokenIndexes;\n    }\n\n    // #### Events\n    event NewStrategy(uint256 indexed id, Integration[] integrations, Token[] tokens, string name);\n    event UpdateName(uint256 indexed id, string name);\n    event DeleteStrategy(uint256 indexed id);\n    event IntegrationWeightAdjustment(\n        uint256 strategyId,\n        uint256 sourceIndex,\n        uint256 destinationIndex,\n        uint32 amount,\n        bool rebalance\n    );\n    event RemoveIntegration(uint256 strategyId, uint256 integrationIndex, address token);\n    event AddIntegration(uint256 strategyId, Integration integration, address token);\n\n    // #### Functions\n    /**\n     @notice Adds a new strategy to the list of available strategies\n     @param name  the name of the new strategy\n     @param integrations  the integrations and weights that form the strategy\n     @param maxCap  The maximum amount investable in a strategy\n     */\n    function addStrategy(\n        string calldata name,\n        Integration[] calldata integrations,\n        Token[] calldata tokens,\n        uint256[] memory maxCap\n    ) external;\n\n    /**\n    @notice Updates the strategy name\n    @param name  the new name\n     */\n    function updateName(uint256 id, string calldata name) external;\n\n    function addPairToStrategy(\n        uint256 strategyId,\n        Integration calldata integration,\n        address token\n    ) external;\n\n    /// @dev Changes weights of integrations, optionally rebalancing the integrations so that current fund allocation reflects new weights\n    function movePairWeight(\n        uint256 strategyId,\n        uint256 sourceIndex,\n        uint256 destinationIndex,\n        int256 vectorAmount,\n        uint32 amount,\n        bool rebalance\n    ) external;\n\n    function removePairFromStrategy(\n        uint256 strategyId,\n        uint256 integrationIndex,\n        address token\n    ) external;\n\n    /**\n    @notice Deletes a strategy\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\n    @dev To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\n    @param id  the strategy to delete\n     */\n    function deleteStrategy(uint256 id) external;\n\n    /**\n    @notice Increases the amount of a set of tokens in a strategy\n    @param id  the strategy to deposit into\n    @param tokens  the tokens to deposit\n     */\n    function increaseStrategy(uint256 id, IUserPositions.TokenMovement[] calldata tokens) external;\n\n    /**\n    @notice Decreases the amount of a set of tokens invested in a strategy\n    @param id  the strategy to withdraw assets from\n    @param tokens  details of the tokens being deposited\n     */\n    function decreaseStrategy(uint256 id, IUserPositions.TokenMovement[] calldata tokens) external;\n\n    /**\n    @notice Getter function to return the nested arrays as well as the name\n    @param id  the strategy to return\n     */\n    function getStrategy(uint256 id) external view returns (StrategySummary memory);\n\n    /**\n    @notice Decreases the deployable amount after a deployment/withdrawal\n    @param integration  the integration that was changed\n    @param poolID  the pool within the integration that handled the tokens\n    @param token  the token to decrease for\n    @param amount  the amount to reduce the vector by\n     */\n    function decreaseDeployAmountChange(\n        address integration,\n        uint32 poolID,\n        address token,\n        uint256 amount\n    ) external;\n\n    /**\n    @notice Returns the amount of a given token currently invested in a strategy\n    @param id  the strategy id to check\n    @param token  The token to retrieve the balance for\n    @return amount  the amount of token that is invested in the strategy\n     */\n    function getStrategyTokenBalance(uint256 id, address token) external view returns (uint256 amount);\n\n    /**\n    @notice Returns the total amount of a token invested across all strategies\n    @param token  the token to fetch the balance for\n    @return amount  the amount of the token currently invested\n    */\n    function getTokenTotalBalance(address token) external view returns (uint256 amount);\n\n    /**\n    @notice Returns the current amount awaiting deployment\n    @param integration  the integration to deploy to\n    @param poolID  the pool within the integration that should receive the tokens\n    @param token  the token to be deployed\n    @return the pending deploy amount\n     */\n    function getDeployAmount(\n        address integration,\n        uint32 poolID,\n        address token\n    ) external view returns (int256);\n\n    /**\n    @notice Returns balances per strategy, and total invested balances\n    @param _strategies  The strategies to retrieve balances for\n    @param _tokens  The tokens to retrieve\n     */\n    function getStrategyBalances(uint256[] calldata _strategies, address[] calldata _tokens)\n        external\n        view\n        returns (StrategyBalance[] memory strategyBalances, GeneralBalance[] memory generalBalances);\n\n    /**\n  @notice Returns 1 or more strategies in a single call.\n  @param ids  The ids of the strategies to return.\n   */\n    function getMultipleStrategies(uint256[] calldata ids) external view returns (StrategySummary[] memory);\n\n    /// @notice autogenerated getter definition\n    function idCounter() external view returns (uint256);\n\n    /**\n    @notice returns the length of the tokens array in a strategy\n    @param strategy  the strategy to look up\n    @return the length\n    */\n    function getStrategyTokenLength(uint256 strategy) external view returns (uint256);\n\n    /**\n    @notice Clears the list of positions that can be closed to supply a token\n    @param tokens  The list of tokens to clear\n     */\n    function clearClosablePositions(address[] calldata tokens) external;\n\n    /**\n    @notice Closes enough positions to provide a requested amount of a token\n    @param token  the token to source\n    @param amount  the amount to source\n     */\n    function closePositionsForWithdrawal(address token, uint256 amount) external;\n\n    /// @notice Sets the maximum investment cap for a strategy and token pair\n    /// @param id The strategy id\n    /// @param token  the token address\n    /// @param maxCap  The maximum amount of funds that can be invested\n    function setMaximumCap(\n        uint256 id,\n        address token,\n        uint256 maxCap\n    ) external;\n\n    /// @notice Retrieves the maximum cap for a strategy/token pair\n    /// @param id  the strategy id\n    /// @param token  the token address\n    /// @return cap  the maximum cap for the strategy/token pair\n    function getMaximumCap(uint256 id, address token) external view returns (uint256 cap);\n}\n"
    },
    "contracts/interfaces/IIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IIntegration {\n    event Deploy(address token, uint256 amount);\n    event HarvestYield(address token, uint256 amount);\n    event Deposit(address token, uint256 amount);\n    event Withdraw(address token, uint256 amount);\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount) external;\n\n    /// @param tokenAddress The address of the withdrawal token\n    /// @param amount The amount of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount) external;\n\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\n    function deploy() external;\n\n    /// @dev Harvests token yield from the integration\n    function harvestYield() external;\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @param tokenAddress The address of the deployed token\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address tokenAddress) external view returns (uint256);\n\n    /// @dev Returns the total amount of yield awaiting to be harvested\n    /// @dev using the relevant integration's own function\n    /// @param amount The amount of available yield for the specified token\n    function getPendingYield(address) external view returns (uint256 amount);\n}\n"
    },
    "contracts/libraries/TokenConfigs.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\nlibrary TokenConfigs {\n    enum TokenSettingName {\n        rewardWeight,\n        reserveRatioNumerator,\n        targetLiquidityRatioNumerator,\n        transferFeeKValueNumerator,\n        transferFeePlatformRatioNumerator,\n        deposit,\n        withdraw,\n        lp,\n        bridge\n    }\n\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\n\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IKernel.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IKernel {\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\n    event WithdrawAllAndClaim(\n        address indexed user,\n        address[] tokens,\n        uint256[] strategies,\n        bool withdrawWethAsEth,\n        uint256[] tokenAmounts,\n        uint256 ethWithdrawn,\n        uint256 ethRewards,\n        uint256 biosRewards\n    );\n    event TokenAdded(\n        address indexed tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        bool acceptingLping,\n        bool acceptingBridging,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator,\n        uint256 targetLiquidityRatioNumerator,\n        uint256 transferFeeKValueNumerator,\n        uint256 transferFeePlatformRatioNumerator\n    );\n\n    event GasAccountUpdated(address gasAccount);\n    event TreasuryAccountUpdated(address treasuryAccount);\n    event IntegrationAdded(address indexed contractAddress, string name);\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\n    event SeedBiosRewards(uint256 biosAmount);\n    event Deploy();\n    event HarvestYield();\n    event DistributeEth();\n    event BiosBuyBack();\n    event EthDistributionWeightsUpdated(\n        uint32 biosBuyBackEthWeight,\n        uint32 treasuryEthWeight,\n        uint32 protocolFeeEthWeight,\n        uint32 rewardsEthWeight\n    );\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\n\n    /// @param account The address of the account to check if they are a manager\n    /// @return Bool indicating whether the account is a manger\n    function isManager(address account) external view returns (bool);\n\n    /// @param account The address of the account to check if they are an owner\n    /// @return Bool indicating whether the account is an owner\n    function isOwner(address account) external view returns (bool);\n\n    /// @param account The address of the account to check if they are a liquidity provider\n    /// @return Bool indicating whether the account is a liquidity provider\n    function isLiquidityProvider(address account) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IModuleMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nenum Modules {\n    Kernel, // 0\n    UserPositions, // 1\n    YieldManager, // 2\n    IntegrationMap, // 3\n    BiosRewards, // 4\n    EtherRewards, // 5\n    SushiSwapTrader, // 6\n    UniswapTrader, // 7\n    StrategyMap, // 8\n    StrategyManager, // 9\n    Interconnects, // 10\n    SwapManager, // 11\n    Unwrapper // 12\n}\n\ninterface IModuleMap {\n    function getModuleAddress(Modules key) external view returns (address);\n}\n"
    },
    "contracts/yield-integrations/YearnIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IYearnRegistry.sol\";\nimport \"../interfaces/IYearnVault.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\n\n/// @notice Integrates 0x Nodes to Yearn v2 vaults\ncontract YearnIntegration is Initializable, ModuleMapConsumer, Controlled, IIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private yearnRegistryAddress;\n    mapping(address => uint256) private balances;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param yearnRegistryAddress_ The address of the Yearn registry contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address yearnRegistryAddress_\n    ) external initializer {\n        require(yearnRegistryAddress_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        yearnRegistryAddress = yearnRegistryAddress_;\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount) external override onlyController {\n        balances[tokenAddress] += amount;\n        emit Deposit(tokenAddress, amount);\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount) public override onlyController {\n        // Bypass this for now...\n        // require(\n        //     amount <= balances[tokenAddress],\n        //     \"YearnIntegration::withdraw: Withdraw amount exceeds balance\"\n        // );\n        _withdraw(tokenAddress, amount);\n    }\n\n    /// @notice Withdraws ALL the tokens from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    function retrievePrincipal(address tokenAddress) external onlyManager {\n        _withdraw(tokenAddress, getVaultWithdrawableAmount(tokenAddress));\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function _withdraw(address tokenAddress, uint256 amount) internal {\n        address vaultAddress = getVaultAddress(tokenAddress);\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(tokenAddress);\n\n        if (token.balanceOf(address(this)) < amount) {\n            // Need to withdraw tokens from Yearn vault\n            uint256 vaultWithdrawableAmount = getVaultWithdrawableAmount(tokenAddress);\n            if (vaultWithdrawableAmount > 0) {\n                // Add 1% to shares amount to withdraw to account for fees\n                uint256 sharesAmount = (101 *\n                    amount *\n                    IERC20MetadataUpgradeable(vaultAddress).balanceOf(address(this))) /\n                    vaultWithdrawableAmount /\n                    100;\n\n                if (sharesAmount > IERC20MetadataUpgradeable(vaultAddress).balanceOf(address(this))) {\n                    sharesAmount = IERC20MetadataUpgradeable(vaultAddress).balanceOf(address(this));\n                }\n\n                try IYearnVault(vaultAddress).withdraw(sharesAmount) {} catch {}\n            }\n        }\n\n        // If there still isn't enough of the withdrawn token, change\n        // The withdraw amount to the balance of this contract\n        if (token.balanceOf(address(this)) < amount) {\n            amount = token.balanceOf(address(this));\n        }\n\n        // balances are too low so need to allow the tokens to leave\n        if (balances[tokenAddress] != 0) {\n            if (amount > balances[tokenAddress]) {\n                balances[tokenAddress] = 0;\n            } else {\n                balances[tokenAddress] -= amount;\n            }\n        }\n\n        token.safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n        emit Withdraw(tokenAddress, amount);\n    }\n\n    /// @notice Deploys all available tokens to Aave\n    function deploy() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; ++tokenId) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(integrationMap.getTokenAddress(tokenId));\n            uint256 tokenAmount = token.balanceOf(address(this));\n            address vaultAddress = getVaultAddress(address(token));\n\n            // Check if a vault for this token exists\n            if (vaultAddress != address(0)) {\n                if (token.allowance(address(this), vaultAddress) == 0) {\n                    token.safeApprove(vaultAddress, type(uint256).max);\n                }\n\n                if (tokenAmount > 0) {\n                    try IYearnVault(vaultAddress).deposit(tokenAmount, address(this)) {} catch {}\n                    emit Deploy(address(token), tokenAmount);\n                }\n            }\n        }\n    }\n\n    /// @notice Harvests all token yield from the Aave lending pool\n    function harvestYield() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; ++tokenId) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(integrationMap.getTokenAddress(tokenId));\n            address vaultAddress = getVaultAddress(address(token));\n\n            // Check if a vault exists for the current token\n            if (vaultAddress != address(0)) {\n                uint256 availableYieldInShares = getAvailableYieldInShares(address(token));\n                if (availableYieldInShares > 0) {\n                    uint256 balanceBefore = token.balanceOf(address(this));\n\n                    // Harvest the available yield from Yearn vault\n                    try IYearnVault(getVaultAddress(address(token))).withdraw(availableYieldInShares) {\n                        uint256 harvestedAmount = token.balanceOf(address(this)) - balanceBefore;\n                        if (harvestedAmount > 0) {\n                            // Yield has been harvested, transfer it to the Yield Manager\n                            token.safeTransfer(moduleMap.getModuleAddress(Modules.YieldManager), harvestedAmount);\n                            emit HarvestYield(address(token), harvestedAmount);\n                        }\n                    } catch {}\n                }\n            }\n        }\n    }\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @param token The address of the deployed token\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address token) external view override returns (uint256) {\n        return balances[token];\n    }\n\n    /// @param token The address of the token\n    /// @return The address of the vault for the specified token\n    function getVaultAddress(address token) public view returns (address) {\n        try IYearnRegistry(yearnRegistryAddress).latestVault(token) returns (address vaultAddress) {\n            return vaultAddress;\n        } catch {\n            return address(0);\n        }\n    }\n\n    /// @param token The address of the deposited token\n    /// @return The price per vault share in the underlying asset\n    function getPricePerShare(address token) public view returns (uint256) {\n        return IYearnVault(getVaultAddress(token)).pricePerShare();\n    }\n\n    /// @param token The address of the deposited token\n    /// @return The amount of available yield to be harvested in value of the share token\n    function getAvailableYieldInShares(address token) public view returns (uint256) {\n        uint256 vaultWithdrawableAmount = getVaultWithdrawableAmount(token);\n\n        if (vaultWithdrawableAmount > balances[token]) {\n            return vaultWithdrawableAmount - balances[token];\n        } else {\n            return 0;\n        }\n    }\n\n    /// @param token The address of the deposited token\n    /// @return The amount of the deposited token that can be withdrawn from the vault\n    function getVaultWithdrawableAmount(address token) public view returns (uint256) {\n        IERC20MetadataUpgradeable shareToken = IERC20MetadataUpgradeable(getVaultAddress(token));\n\n        return (getPricePerShare(token) * shareToken.balanceOf(address(this))) / (10**shareToken.decimals());\n    }\n\n    /// @dev Returns total amount of pending yield for the specified token in Yearn\n    /// @param token The of the token to check for available yield\n    /// @return Amount of yield available for harvest\n    function getPendingYield(address token) external view override returns (uint256) {\n        return getAvailableYieldInShares(token);\n    }\n}\n"
    },
    "contracts/interfaces/IYearnRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IYearnRegistry {\n    /// @notice Gets the vault to use for the specified token\n    /// @param token The address of the token\n    /// @return The address of the vault\n    function latestVault(address token) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IYearnVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IYearnVault {\n    function deposit(uint256 amount, address recipient) external returns (uint256 shares);\n\n    function withdraw(uint256 shares) external;\n\n    function pricePerShare() external view returns (uint256);\n}\n"
    },
    "contracts/yield-integrations/UniswapV3Integration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapV3Integration.sol\";\nimport \"../vendors/uniswap-v3/INonfungiblePositionManager.sol\";\nimport \"../vendors/uniswap-v3/LiquidityAmounts.sol\";\nimport \"../vendors/uniswap-v3/IUniswapV3Factory.sol\";\nimport \"../vendors/uniswap-v3/IUniswapV3Pool.sol\";\nimport \"../vendors/uniswap-v3/TickMath.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\n\n/// @notice Integrates 0x Nodes into Uniswap V3\n/// @notice The Kernel contract should be added as the controller\ncontract UniswapV3Integration is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IAMMIntegration,\n    IUniswapV3Integration,\n    IERC721Receiver\n{\n    /// Libraries\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    /// State\n    INonfungiblePositionManager public positionManager;\n\n    IUniswapV3Factory public factory;\n\n    uint32 public override poolIDCounter;\n\n    /// Pool ID => Pool details\n    mapping(uint32 => PositionNFT) internal pools;\n\n    // Pool ID => token address => balance held within this contract\n    mapping(uint32 => mapping(address => uint256)) public override balances;\n\n    /// Functions\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param nonfungiblePositionManager_ The address of the Uniswap Non fungible position mananger\n    /// @param uniswapFactory_ the\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address nonfungiblePositionManager_,\n        address uniswapFactory_\n    ) external initializer {\n        require(uniswapFactory_ != address(0), \"bad address\");\n        require(nonfungiblePositionManager_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        positionManager = INonfungiblePositionManager(nonfungiblePositionManager_);\n        factory = IUniswapV3Factory(uniswapFactory_);\n    }\n\n    function _verifyPoolAndTokens(address token, uint32 poolID) internal view {\n        require(poolID <= poolIDCounter, \"invalid pool\");\n        require(token != address(0), \"bad address\");\n        PositionNFT memory position = pools[poolID];\n        if (position.tokenA != token && position.tokenB != token) {\n            revert(\"invalid token\");\n        }\n    }\n\n    modifier verifyPoolAndTokens(address token, uint32 poolID) {\n        // Uses a function call to prevent a stack too deep error in the withdraw function\n        _verifyPoolAndTokens(token, poolID);\n        _;\n    }\n\n    function deposit(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external override verifyPoolAndTokens(token, poolID) onlyController {\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n        balances[poolID][token] += amount;\n        emit Deposit(token, amount, poolID);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external override verifyPoolAndTokens(token, poolID) onlyController {\n        // Fill first from reserves\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n        uint256 transferAmount = amount;\n        uint256 reserveAmount = balances[poolID][token];\n        PositionNFT memory position = pools[poolID];\n\n        uint256 amount0Withdrawn = 0;\n        uint256 amount1Withdrawn = 0;\n\n        if (reserveAmount < amount) {\n            // Close positions\n            if (reserveAmount > 0) {\n                balances[poolID][token] = 0;\n            }\n\n            // First, calculate the required drop in liquidity\n            // Reduce and collect the calculated amount\n            (amount0Withdrawn, amount1Withdrawn) = positionManager.decreaseLiquidity(\n                _getDecreaseParams(\n                    CalculateDecreaseParams(\n                        position.positionID,\n                        position.uniPool,\n                        token == position.tokenA,\n                        amount - reserveAmount\n                    )\n                )\n            );\n\n            // Attribute the spare token to balances to be redeployed later\n            if (token == position.tokenA) {\n                balances[poolID][position.tokenB] += amount1Withdrawn;\n                transferAmount = amount0Withdrawn + reserveAmount;\n            } else {\n                balances[poolID][position.tokenA] += amount0Withdrawn;\n                transferAmount = amount1Withdrawn + reserveAmount;\n            }\n\n            positionManager.collect(\n                INonfungiblePositionManager.CollectParams({\n                    tokenId: position.positionID,\n                    recipient: address(this),\n                    amount0Max: uint128(amount0Withdrawn),\n                    amount1Max: uint128(amount1Withdrawn)\n                })\n            );\n        } else {\n            // Transfer from reserves\n            balances[poolID][token] -= amount;\n        }\n\n        // Transfer the funds\n        IERC20MetadataUpgradeable(token).transfer(\n            moduleMap.getModuleAddress(Modules.Kernel),\n            transferAmount // Change to account for partial inavailability\n        );\n    }\n\n    struct CalculateDecreaseParams {\n        uint256 positionID;\n        address uniPool;\n        bool isTokenA;\n        uint256 amount;\n    }\n\n    function _getDecreaseParams(CalculateDecreaseParams memory params)\n        internal\n        view\n        returns (INonfungiblePositionManager.DecreaseLiquidityParams memory output)\n    {\n        (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = positionManager.positions(\n            params.positionID\n        );\n\n        (uint160 currentPrice, , , , , , ) = IUniswapV3Pool(params.uniPool).slot0();\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\n            currentPrice,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            liquidity\n        );\n\n        if (params.isTokenA) {\n            if (amount0 <= params.amount) {\n                output.liquidity = liquidity;\n            } else {\n                output.liquidity = LiquidityAmounts.getLiquidityForAmount0(\n                    TickMath.getSqrtRatioAtTick(tickLower),\n                    TickMath.getSqrtRatioAtTick(tickUpper),\n                    params.amount\n                );\n            }\n        } else {\n            if (amount1 <= params.amount) {\n                output.liquidity = liquidity;\n            } else {\n                output.liquidity = LiquidityAmounts.getLiquidityForAmount1(\n                    TickMath.getSqrtRatioAtTick(tickLower),\n                    TickMath.getSqrtRatioAtTick(tickUpper),\n                    params.amount\n                );\n            }\n        }\n        (uint256 amountA, uint256 amountB) = LiquidityAmounts.getAmountsForLiquidity(\n            currentPrice,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            output.liquidity\n        );\n\n        output.amount0Min = amountA > 0 ? amountA / 10 : amountA;\n        output.amount1Min = amountB > 0 ? amountB / 10 : amountB;\n\n        output.deadline = block.timestamp + 1;\n        output.tokenId = params.positionID;\n    }\n\n    function deploy(uint32) external pure override {\n        return;\n    }\n\n    function manualDeploy(\n        uint32 poolID,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) external onlyManager {\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n\n        PositionNFT memory position = pools[poolID];\n\n        uint256 amountA = 0;\n        uint256 amountB = 0;\n        if (position.positionID == 0) {\n            // Mint new position\n            (uint256 tokenId, , uint256 amount0, uint256 amount1) = positionManager.mint(\n                INonfungiblePositionManager.MintParams({\n                    token0: position.tokenA,\n                    token1: position.tokenB,\n                    fee: position.fee,\n                    tickLower: position.tickLower,\n                    tickUpper: position.tickUpper,\n                    amount0Desired: balances[poolID][position.tokenA],\n                    amount1Desired: balances[poolID][position.tokenB],\n                    amount0Min: amount0Min,\n                    amount1Min: amount0Min,\n                    recipient: address(this),\n                    deadline: block.timestamp\n                })\n            );\n            pools[poolID].positionID = tokenId;\n            balances[poolID][position.tokenA] -= amount0;\n            balances[poolID][position.tokenB] -= amount1;\n            amountA = amount0;\n            amountB = amount1;\n        } else {\n            // Increase current position\n            (, amountA, amountB) = positionManager.increaseLiquidity(\n                INonfungiblePositionManager.IncreaseLiquidityParams(\n                    position.positionID,\n                    balances[poolID][position.tokenA],\n                    balances[poolID][position.tokenB],\n                    amount0Min,\n                    amount1Min,\n                    block.timestamp\n                )\n            );\n            balances[poolID][position.tokenA] -= amountA;\n            balances[poolID][position.tokenB] -= amountB;\n        }\n\n        emit DeploySuccess(poolID, amountA, amountB);\n    }\n\n    function harvestYield() external override onlyController {\n        PositionNFT memory position;\n        address yieldManager = moduleMap.getModuleAddress(Modules.YieldManager);\n        for (uint32 i = 1; i <= poolIDCounter; ++i) {\n            position = pools[i];\n            if (position.positionID > 0) {\n                try\n                    positionManager.collect(\n                        INonfungiblePositionManager.CollectParams(\n                            position.positionID,\n                            yieldManager,\n                            type(uint128).max,\n                            type(uint128).max\n                        )\n                    )\n                returns (uint256, uint256) {} catch {\n                    emit HarvestYieldError(i);\n                }\n                emit YieldHarvested(i);\n            }\n        }\n    }\n\n    function getPoolBalance(uint32 poolID) external view returns (uint256 tokenA, uint256 tokenB) {\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n        PositionNFT memory position = pools[poolID];\n        // Returns the uniswap pool balances\n        (, , , , , , , uint128 liquidity, , , , ) = positionManager.positions(position.positionID);\n        (uint160 price, , , , , , ) = IUniswapV3Pool(position.uniPool).slot0();\n        (tokenA, tokenB) = LiquidityAmounts.getAmountsForLiquidity(\n            price,\n            TickMath.getSqrtRatioAtTick(position.tickLower),\n            TickMath.getSqrtRatioAtTick(position.tickUpper),\n            liquidity\n        );\n    }\n\n    function getPool(uint32 poolID) external view override returns (PositionNFT memory pool) {\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n        return pools[poolID];\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper\n    ) external onlyManager {\n        require(tokenA != address(0), \"invalid token A address\");\n        require(tokenB != address(0), \"invalid token B address\");\n        require(tokenA != tokenB, \"same token\");\n        require(fee > 0, \"invalid fee\");\n        require(tickLower < tickUpper, \"invalid ticks\");\n\n        // Sort the tokens into the canonical uniswap order\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        poolIDCounter++;\n        pools[poolIDCounter] = PositionNFT(\n            fee,\n            tickLower,\n            tickUpper,\n            token0,\n            token1,\n            factory.getPool(token0, token1, fee),\n            0\n        );\n        emit CreatePool(token0, token1, poolIDCounter);\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), address(positionManager)) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).approve(address(positionManager), 0);\n            require(\n                IERC20MetadataUpgradeable(tokenA).approve(address(positionManager), type(uint256).max),\n                \"approval failed\"\n            );\n        }\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), address(positionManager)) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).approve(address(positionManager), 0);\n            require(\n                IERC20MetadataUpgradeable(tokenB).approve(address(positionManager), type(uint256).max),\n                \"approval failed\"\n            );\n        }\n    }\n\n    function getPendingYield(uint32 poolID) external view returns (uint256 tokenA, uint256 tokenB) {\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            ,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        ) = positionManager.positions(pools[poolID].positionID);\n\n        PositionNFT memory position = pools[poolID];\n\n        if (liquidity > 0) {\n            tokenA = uint256(tokensOwed0);\n            tokenB = uint256(tokensOwed1);\n\n            tokenA += FullMath.mulDiv(\n                IUniswapV3Pool(position.uniPool).feeGrowthGlobal0X128() - feeGrowthInside0LastX128,\n                liquidity,\n                0x100000000000000000000000000000000 //FixedPoint128.Q128\n            );\n\n            tokenB += FullMath.mulDiv(\n                IUniswapV3Pool(position.uniPool).feeGrowthGlobal1X128() - feeGrowthInside1LastX128,\n                liquidity,\n                0x100000000000000000000000000000000 //FixedPoint128.Q128\n            );\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IAMMIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IAMMIntegration {\n    struct Pool {\n        address tokenA;\n        address tokenB;\n        uint256 positionID; // Used for Uniswap V3\n    }\n\n    /// Events\n    event CreatePool(address indexed tokenA, address indexed tokenB, uint32 poolID);\n    event YieldHarvested(uint32 poolID);\n    event Deposit(address token, uint256 amount, uint32 poolID);\n    event HarvestYieldError(uint32 indexed poolID);\n\n    event TransferBetweenPools(uint32 source, uint32 destination, uint256[] amounts, address[] tokens);\n\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of token being deposited\n    /// @param poolID  The id of the pool to deposit into\n    function deposit(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external;\n\n    /// @param token  the token to withdraw\n    /// @param amount The amount of token in the pool to withdraw\n    /// @param poolID  the pool to withdraw from\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external;\n\n    /// @dev Deploys all the tokens for the specified pools\n    function deploy(uint32 poolID) external;\n\n    /// @dev Harvests token yield from the integration\n    function harvestYield() external;\n}\n"
    },
    "contracts/interfaces/IUniswapV3Integration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"../interfaces/IAMMIntegration.sol\";\n\ninterface IUniswapV3Integration {\n    /// Structs\n    struct PositionNFT {\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        address tokenA;\n        address tokenB;\n        address uniPool;\n        uint256 positionID;\n    }\n\n    // Events\n    event DeployError(uint32 indexed poolID);\n    event DeploySuccess(uint32 indexed poolID, uint256 indexed amount0, uint256 indexed amount1);\n\n    function getPool(uint32 poolID) external view returns (PositionNFT memory pool);\n\n    /// Autogenerated getter function definitions\n    function poolIDCounter() external view returns (uint32);\n\n    function balances(uint32 poolID, address token) external view returns (uint256);\n}\n"
    },
    "contracts/vendors/uniswap-v3/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/// Modified so it compiles with solidity 0.8.4.\npragma solidity 0.8.4;\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager {\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/vendors/uniswap-v3/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "contracts/vendors/uniswap-v3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/vendors/uniswap-v3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "contracts/vendors/uniswap-v3/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(int256(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "contracts/vendors/uniswap-v3/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "contracts/vendors/uniswap-v3/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/yield-integrations/DROIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapV3Integration.sol\";\nimport \"../vendors/uniswap-v3/INonfungiblePositionManager.sol\";\nimport \"../vendors/uniswap-v3/LiquidityAmounts.sol\";\nimport \"../vendors/uniswap-v3/IUniswapV3Factory.sol\";\nimport \"../vendors/uniswap-v3/IUniswapV3Pool.sol\";\nimport \"../vendors/uniswap-v3/TickMath.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IDROIntegration.sol\";\nimport \"../interfaces/IUniswapV3SwapRouter.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract DROIntegration is\n    Initializable,\n    ModuleMapConsumer,\n    Controlled,\n    IAMMIntegration,\n    IUniswapV3Integration,\n    IERC721Receiver,\n    IDROIntegration\n{\n    /// Libraries\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    /// State variables\n    INonfungiblePositionManager public positionManager;\n\n    IUniswapV3Factory public factory;\n\n    IUniswapV3SwapRouter public swapRouter;\n\n    uint32 public override poolIDCounter;\n\n    // Pool ID => token address => balance held within this contract\n    mapping(uint32 => mapping(address => uint256)) public override balances;\n\n    // Pool ID => Current position (nft) ID for the pool\n    mapping(uint32 => uint256) public override positionID;\n\n    // Pool ID => token address => balance of yield available to be transferred out of the integration\n    mapping(uint32 => mapping(address => uint256)) public override availableYield;\n\n    /// Functions\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address nonfungiblePositionManager_,\n        address uniswapFactory_,\n        address swapRouter_\n    ) public initializer {\n        require(nonfungiblePositionManager_ != address(0), \"bad address\");\n        require(uniswapFactory_ != address(0), \"bad address\");\n        require(swapRouter_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        positionManager = INonfungiblePositionManager(nonfungiblePositionManager_);\n        swapRouter = IUniswapV3SwapRouter(swapRouter_);\n        factory = IUniswapV3Factory(uniswapFactory_);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /// IAMMInterface Functions\n    function deposit(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external override onlyController {\n        require(poolID <= poolIDCounter, \"invalid pool\");\n        require(token != address(0), \"bad address\");\n        balances[poolID][token] += amount;\n    }\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolID\n    ) external override onlyController {\n        // To be used for a user initiated forced withdrawal. No mev protection, so they get what's offered.\n        // Manual withdrawal should be used when processing negative deploy amounts.\n        require(poolID <= poolIDCounter && poolID > 0, \"Invalid pool\");\n        require(token != address(0), \"invalid token\");\n\n        uint256 balance = balances[poolID][token];\n        uint256 amountOut = amount;\n        if (balance >= amount) {\n            // Fill from reserves\n            balances[poolID][token] -= amount;\n        } else {\n            uint256 excess = amount - balance;\n            balances[poolID][token] = 0;\n\n            // Pull liquidity to fill the amount out\n            uint128 liquidity = 0;\n\n            (, , address token0, , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(\n                positionID[poolID]\n            );\n            bool isToken0 = token == token0;\n            uint256 offsideAmount = 0;\n            if (token0 == token) {\n                liquidity = LiquidityAmounts.getLiquidityForAmount0(\n                    TickMath.getSqrtRatioAtTick(tickLower),\n                    TickMath.getSqrtRatioAtTick(tickUpper),\n                    excess\n                );\n                offsideAmount = LiquidityAmounts.getAmount1ForLiquidity(\n                    TickMath.getSqrtRatioAtTick(tickLower),\n                    TickMath.getSqrtRatioAtTick(tickUpper),\n                    liquidity\n                );\n            } else {\n                liquidity = liquidity = LiquidityAmounts.getLiquidityForAmount0(\n                    TickMath.getSqrtRatioAtTick(tickLower),\n                    TickMath.getSqrtRatioAtTick(tickUpper),\n                    excess\n                );\n                offsideAmount = LiquidityAmounts.getAmount0ForLiquidity(\n                    TickMath.getSqrtRatioAtTick(tickLower),\n                    TickMath.getSqrtRatioAtTick(tickUpper),\n                    liquidity\n                );\n            }\n            (uint256 amount0, uint256 amount1) = _withdraw(\n                poolID,\n                liquidity,\n                isToken0 ? excess - ((excess / 10) / 2) : offsideAmount - ((offsideAmount / 10) / 2),\n                !isToken0 ? excess - ((excess / 10) / 2) : offsideAmount - ((offsideAmount / 10) / 2)\n            );\n            amountOut = balance + (isToken0 ? amount0 : amount1);\n        }\n        IERC20MetadataUpgradeable(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amountOut);\n    }\n\n    function deploy(uint32) external view override onlyController {\n        // No mev protection. It's here to satisfy the interface, not to actually be used.\n        return;\n    }\n\n    function harvestYield() external override onlyController {\n        address yieldManager = moduleMap.getModuleAddress(Modules.YieldManager);\n        for (uint32 i = 1; i <= poolIDCounter; i++) {\n            (, , address token0, address token1, , , , , , , , ) = positionManager.positions(positionID[i]);\n            uint256 yieldAmount0 = availableYield[i][token0];\n            uint256 yieldAmount1 = availableYield[i][token1];\n            if (yieldAmount0 > 0) {\n                IERC20MetadataUpgradeable(token0).safeTransfer(yieldManager, yieldAmount0);\n                emit YieldReceived(yieldAmount0, token0, i);\n            }\n            if (yieldAmount1 > 0) {\n                IERC20MetadataUpgradeable(token1).safeTransfer(yieldManager, yieldAmount1);\n                emit YieldReceived(yieldAmount1, token1, i);\n            }\n        }\n    }\n\n    /// Management functions\n    function manualDeploy(\n        uint32 poolID,\n        uint256 amount0Desired,\n        uint256 amount1Desired,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) external onlyManager {\n        require(poolID <= poolIDCounter, \"Invalid pool\");\n\n        uint256 tokenId = positionID[poolID];\n        require(tokenId > 0, \"Pool position invalid\");\n\n        (, , address token0, address token1, , , , , , , , ) = positionManager.positions(positionID[poolID]);\n        require(balances[poolID][token0] >= amount0Desired, \"insufficient amount 0\");\n        require(balances[poolID][token1] >= amount1Desired, \"insufficient amount 1\");\n\n        // Increase liquidity of existing position\n        (, uint256 amount0, uint256 amount1) = positionManager.increaseLiquidity(\n            INonfungiblePositionManager.IncreaseLiquidityParams(\n                tokenId,\n                amount0Desired,\n                amount1Desired,\n                amount0Min,\n                amount1Min,\n                block.timestamp\n            )\n        );\n        // Update balances\n        balances[poolID][token0] -= amount0;\n        balances[poolID][token1] -= amount1;\n    }\n\n    function rebalancePool(uint32 poolID, SwapParams calldata params) external override onlyManager {\n        // Swaps the currently deposited funds into the correct range\n        require(poolID <= poolIDCounter, \"Invalid pool\");\n\n        require(balances[poolID][params.tokenIn] >= params.amountIn, \"insufficient amount in\");\n        uint256 balanceA = balances[poolID][params.tokenIn];\n        uint256 balanceB = balances[poolID][params.tokenOut];\n\n        // Swap out\n        uint256 amountOut = _swapExactTokens(params);\n\n        balanceA -= params.amountIn;\n        balanceB += amountOut;\n        balances[poolID][params.tokenIn] = balanceA;\n        balances[poolID][params.tokenOut] = balanceB;\n    }\n\n    function manualWithdraw(\n        uint32 poolID,\n        address token,\n        uint256 amount,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) external override onlyManager {\n        require(poolID <= poolIDCounter && poolID > 0, \"Invalid pool\");\n        require(token != address(0), \"invalid token\");\n\n        uint256 balance = balances[poolID][token];\n        uint256 amountOut = amount;\n        if (balance >= amount) {\n            // Fill from reserves\n            balances[poolID][token] -= amount;\n        } else {\n            balances[poolID][token] = 0;\n            // Pull liquidity to fill the amount out\n            (, , address token0, address token1, , int24 tickLower, int24 tickUpper, , , , , ) = positionManager\n                .positions(positionID[poolID]);\n            uint256 amount0;\n            uint256 amount1;\n            if (token == token0) {\n                (amount0, amount1) = _withdraw(\n                    poolID,\n                    LiquidityAmounts.getLiquidityForAmount0(\n                        TickMath.getSqrtRatioAtTick(tickLower),\n                        TickMath.getSqrtRatioAtTick(tickUpper),\n                        amount\n                    ),\n                    amount0Min,\n                    amount1Min\n                );\n            } else {\n                (amount0, amount1) = _withdraw(\n                    poolID,\n                    LiquidityAmounts.getLiquidityForAmount1(\n                        TickMath.getSqrtRatioAtTick(tickLower),\n                        TickMath.getSqrtRatioAtTick(tickUpper),\n                        amount\n                    ),\n                    amount0Min,\n                    amount1Min\n                );\n            }\n\n            balances[poolID][token == token0 ? token1 : token0] += token == token0 ? amount1 : amount0;\n            amountOut = balance + (token == token0 ? amount0 : amount1);\n        }\n        IERC20MetadataUpgradeable(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amountOut);\n    }\n\n    function _withdraw(\n        uint32 poolID,\n        uint128 liquidity,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) internal returns (uint256 amount0, uint256 amount1) {\n        // Remove liquidity\n        uint256 tokenId = positionID[poolID];\n        (amount0, amount1) = positionManager.decreaseLiquidity(\n            INonfungiblePositionManager.DecreaseLiquidityParams(\n                tokenId,\n                liquidity,\n                amount0Min,\n                amount1Min,\n                block.timestamp\n            )\n        );\n\n        (uint256 amount0Collected, uint256 amount1Collected) = positionManager.collect(\n            INonfungiblePositionManager.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max)\n        );\n\n        // Account for the yield in availableYield\n        (, , address token0, address token1, , , , , , , , ) = positionManager.positions(tokenId);\n\n        availableYield[poolID][token0] += amount0Collected - amount0;\n        availableYield[poolID][token1] += amount1Collected - amount1;\n    }\n\n    function createPool() external override onlyManager {\n        poolIDCounter++;\n        emit PoolCreated(poolIDCounter);\n    }\n\n    function harvestYieldByPool(uint32 poolID) external override onlyManager {\n        // Collect all fees owing to the pool\n        require(poolID <= poolIDCounter, \"invalid pool\");\n        uint256 tokenId = positionID[poolID];\n        require(tokenId > 0, \"pool has no position\");\n\n        (uint256 amount0, uint256 amount1) = positionManager.collect(\n            INonfungiblePositionManager.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max)\n        );\n\n        // Account for the yield in availableYield\n        (, , address token0, address token1, , , , , , , , ) = positionManager.positions(tokenId);\n        availableYield[poolID][token0] += amount0;\n        availableYield[poolID][token1] += amount1;\n    }\n\n    function exitPosition(CloseParams calldata params) external override onlyManager {\n        uint256 position = positionID[params.poolID];\n        require(position > 0, \"pool has no position\");\n        require(params.poolID <= poolIDCounter, \"invalid pool\");\n        (, , address token0, address token1, , , , uint128 liquidity, , , , ) = positionManager.positions(position);\n\n        // Liquidate and burn current position\n        (uint256 amount0, uint256 amount1) = _liquidatePosition(\n            LiquidateParams(\n                params.poolID,\n                token0,\n                token1,\n                liquidity,\n                position,\n                params.decreaseAmount0Min,\n                params.decreaseAmount1Min\n            )\n        );\n        if (amount0 > 0) {\n            balances[params.poolID][token0] += amount0;\n        }\n        if (amount1 > 0) {\n            balances[params.poolID][token1] += amount1;\n        }\n    }\n\n    function enterPosition(EnterParams calldata params) external override onlyManager {\n        require(positionID[params.poolID] == 0, \"position still open\");\n        require(params.poolID <= poolIDCounter, \"Invalid pool\");\n\n        // Trade to get enough of the other half\n        uint256 amount0 = balances[params.poolID][params.token0];\n        uint256 amount1 = balances[params.poolID][params.token1];\n        if (\n            IERC20MetadataUpgradeable(params.token0).allowance(address(this), address(positionManager)) !=\n            type(uint256).max\n        ) {\n            IERC20MetadataUpgradeable(params.token0).approve(address(positionManager), type(uint256).max);\n        }\n        if (\n            IERC20MetadataUpgradeable(params.token1).allowance(address(this), address(positionManager)) !=\n            type(uint256).max\n        ) {\n            IERC20MetadataUpgradeable(params.token1).approve(address(positionManager), type(uint256).max);\n        }\n        // Mint a new position and save position id\n        (uint256 tokenId, , uint256 amount0Invested, uint256 amount1Invested) = positionManager.mint(\n            INonfungiblePositionManager.MintParams(\n                params.token0,\n                params.token1,\n                params.newFee,\n                params.tickLower,\n                params.tickUpper,\n                amount0,\n                amount1,\n                params.amount0Min,\n                params.amount1Min,\n                address(this),\n                block.timestamp\n            )\n        );\n        positionID[params.poolID] = tokenId;\n        balances[params.poolID][params.token0] -= amount0Invested;\n        balances[params.poolID][params.token1] -= amount1Invested;\n    }\n\n    function _liquidatePosition(LiquidateParams memory params) internal returns (uint256 amount0, uint256 amount1) {\n        (amount0, amount1) = positionManager.decreaseLiquidity(\n            INonfungiblePositionManager.DecreaseLiquidityParams(\n                params.position,\n                params.liquidity,\n                params.decreaseAmount0Min,\n                params.decreaseAmount1Min,\n                block.timestamp\n            )\n        );\n        (uint256 collect0, uint256 collect1) = positionManager.collect(\n            INonfungiblePositionManager.CollectParams(\n                params.position,\n                address(this),\n                type(uint128).max,\n                type(uint128).max\n            )\n        );\n\n        // Account for any harvested yield\n        if (collect0 > amount0) {\n            availableYield[params.poolID][params.token0] += collect0 - amount0;\n        }\n        if (collect1 > amount1) {\n            availableYield[params.poolID][params.token1] += collect1 - amount1;\n        }\n\n        positionManager.burn(params.position);\n        delete positionID[params.poolID];\n    }\n\n    function _swapExactTokens(SwapParams memory swap) internal returns (uint256 amountOut) {\n        // Call to swap tokens\n\n        IERC20MetadataUpgradeable(swap.tokenIn).approve(address(swapRouter), type(uint256).max);\n        amountOut = swapRouter.exactInputSingle(\n            IUniswapV3SwapRouter.ExactInputSingleParams(\n                swap.tokenIn,\n                swap.tokenOut,\n                swap.fee,\n                address(this),\n                swap.amountIn,\n                swap.amountOutMinimum,\n                swap.sqrtPriceLimitX96\n            )\n        );\n    }\n\n    /// Getter functions\n    function getPoolBalance(uint32 poolID) external view override returns (uint256 tokenA, uint256 tokenB) {\n        require(poolID > 0 && poolID <= poolIDCounter, \"invalid pool\");\n        uint256 position = positionID[poolID];\n        require(position > 0, \"position is invalid\");\n\n        // Returns the uniswap pool balances\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            ,\n            ,\n            ,\n\n        ) = positionManager.positions(position);\n        (uint160 price, , , , , , ) = IUniswapV3Pool(factory.getPool(token0, token1, fee)).slot0();\n        (tokenA, tokenB) = LiquidityAmounts.getAmountsForLiquidity(\n            price,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            liquidity\n        );\n    }\n\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        override\n        returns (address[] memory tokens, uint256[] memory amounts)\n    {\n        require(poolId > 0 && poolId <= poolIDCounter, \"invalid pool\");\n        require(positionID[poolId] != 0, \"invalid position\");\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            ,\n            ,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        ) = positionManager.positions(positionID[poolId]);\n\n        if (liquidity > 0) {\n            tokens = new address[](2);\n            amounts = new uint256[](2);\n            tokens[0] = token0;\n            tokens[1] = token1;\n            amounts[0] = uint256(tokensOwed0);\n            amounts[1] = uint256(tokensOwed1);\n\n            address uniswapPool = factory.getPool(token0, token1, fee);\n\n            amounts[0] += FullMath.mulDiv(\n                IUniswapV3Pool(uniswapPool).feeGrowthGlobal0X128() - feeGrowthInside0LastX128,\n                liquidity,\n                0x100000000000000000000000000000000 //FixedPoint128.Q128\n            );\n\n            amounts[1] += FullMath.mulDiv(\n                IUniswapV3Pool(uniswapPool).feeGrowthGlobal1X128() - feeGrowthInside1LastX128,\n                liquidity,\n                0x100000000000000000000000000000000 //FixedPoint128.Q128\n            );\n        }\n    }\n\n    function getPool(uint32 poolID) external view override returns (PositionNFT memory pool) {\n        (, , address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, , , , , ) = positionManager\n            .positions(positionID[poolID]);\n        pool.fee = fee;\n        pool.tickLower = tickLower;\n        pool.tickUpper = tickUpper;\n        pool.tokenA = token0;\n        pool.tokenB = token1;\n        pool.uniPool = factory.getPool(token0, token1, fee);\n        pool.positionID = positionID[poolID];\n    }\n\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n\n    function getRawPoolData(uint32 poolID)\n        external\n        view\n        override\n        returns (\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {\n        (, , token0, token1, fee, tickLower, tickUpper, liquidity, , , tokensOwed0, tokensOwed1) = positionManager\n            .positions(positionID[poolID]);\n    }\n\n    function getAmountMinimums(\n        uint256 amount0,\n        uint256 amount1,\n        int24 tickLower,\n        int24 tickUpper,\n        uint160 currentPrice\n    ) external pure returns (uint256 amount0Min, uint256 amount1Min) {\n        uint160 priceLower = TickMath.getSqrtRatioAtTick(tickLower);\n        uint160 priceUpper = TickMath.getSqrtRatioAtTick(tickUpper);\n        uint128 liquidity = LiquidityAmounts.getLiquidityForAmounts(\n            currentPrice,\n            priceLower,\n            priceUpper,\n            amount0,\n            amount1\n        );\n        (amount0Min, amount1Min) = LiquidityAmounts.getAmountsForLiquidity(\n            currentPrice,\n            priceLower,\n            priceUpper,\n            liquidity\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IDROIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IDROIntegration {\n    /// Structs\n    struct CloseParams {\n        uint32 poolID;\n        uint256 decreaseAmount0Min; // If the position is out of range, only one of these will be > 0\n        uint256 decreaseAmount1Min; // If the position is out of range, only one of these will be > 0\n    }\n    struct EnterParams {\n        address token0;\n        uint24 newFee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint32 poolID;\n        address token1;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    struct LiquidateParams {\n        uint32 poolID;\n        address token0;\n        address token1;\n        uint128 liquidity;\n        uint256 position;\n        uint256 decreaseAmount0Min;\n        uint256 decreaseAmount1Min;\n    }\n\n    struct SwapParams {\n        uint160 sqrtPriceLimitX96;\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    struct RebalanceParams {\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0;\n        uint256 amount1;\n    }\n\n    /// Events\n    event PoolCreated(uint32 poolID);\n    event YieldReceived(uint256 amount, address token, uint32 poolID);\n\n    /// Functions\n    function createPool() external;\n\n    function enterPosition(EnterParams calldata params) external;\n\n    /// @notice Changes the composition of deposits in preparation of a deploy\n    /// @param poolID The pool to change\n    /// @param params The swap parameters\n    function rebalancePool(uint32 poolID, SwapParams calldata params) external;\n\n    function exitPosition(CloseParams calldata params) external;\n\n    function harvestYieldByPool(uint32 poolID) external;\n\n    function manualWithdraw(\n        uint32 poolID,\n        address token,\n        uint256 amount,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) external;\n\n    function getPoolBalance(uint32 poolID) external view returns (uint256 tokenA, uint256 tokenB);\n\n    function getPendingYield(uint32 poolId) external view returns (address[] memory tokens, uint256[] memory amounts);\n\n    function getRawPoolData(uint32 poolID)\n        external\n        view\n        returns (\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// Autogenerated getter function definitions\n    function availableYield(uint32 poolID, address token) external view returns (uint256 amount);\n\n    function positionID(uint32 poolID) external view returns (uint256 id);\n}\n"
    },
    "contracts/interfaces/IUniswapV3SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.4;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface IUniswapV3SwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// that may remain in the router after the swap.\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// that may remain in the router after the swap.\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/core/Interconnects.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./Controlled.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/IInterconnects.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../libraries/VerifySignature.sol\";\nimport \"../libraries/AddArr.sol\";\nimport \"hardhat/console.sol\";\n\ncontract Interconnects is Initializable, ModuleMapConsumer, Controlled, IInterconnects, ReentrancyGuardUpgradeable {\n    // Address of the relay account\n    address payable private _relayAccount;\n\n    // Token address => User address => Balance of tokens a user has in that token's liquidity pool\n    mapping(address => mapping(address => lpData)) private _tokenUserLpBalances;\n\n    // Token address => total liquidity pool for a token held by the contract\n    mapping(address => uint256) private _tokenPoolLpBalances;\n\n    // Token address => total protocol fees from bridging\n    mapping(address => uint256) private _tokenProtocolFeeRewards;\n\n    // Token address => The list of users currently LPing the token\n    mapping(address => address[]) private _tokenLpUsers;\n\n    // bytes 32 hash => whether this hash has been used before in a bridge or rse transaction\n    mapping(bytes => bool) private relayTxns;\n\n    // Token address => total RSE fees\n    mapping(address => uint256) private _tokenRSEFees;\n\n    uint32 public constant RSE_FEE_DENOMINATOR = 1_000_000;\n    uint32 public rseFeeNumerator;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Address of the Module Map\n    /// @param relayAccount_ The address of the relay account that will control this account\n    /// @param _rseFeeNumerator The numerator for RSE fees. Denominator is 1,000,000. So 10,000 = 1% fee.\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address payable relayAccount_,\n        uint32 _rseFeeNumerator\n    ) external initializer {\n        require(relayAccount_ != address(0), \"bad address\");\n\n        __Controlled_init(controllers_, moduleMap_);\n        _relayAccount = relayAccount_;\n        rseFeeNumerator = _rseFeeNumerator;\n    }\n\n    modifier onlyRelayAccount() {\n        require(msg.sender == _relayAccount, \"Interconnects::onlyRelayAccount: Caller is not relay account\");\n        _;\n    }\n\n    modifier validateBridging(address[] memory tokens, uint256[] memory amounts) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        require(\n            tokens.length == amounts.length,\n            \"Interconnects::validateBridging: Length of tokens and amounts must be equal\"\n        );\n        for (uint256 i; i < tokens.length; ++i) {\n            require(\n                integrationMap.getTokenAcceptingBridging(tokens[i]),\n                \"Interconnects::validateBridging: Token is not accepting bridging\"\n            );\n        }\n        _;\n    }\n    modifier validateRSE(RemoteStrategyExecutionBody memory req) {\n        require(verifyRSE(req), \"Interconnects::validateBridging: Signature is invalid\");\n        _;\n    }\n\n    /// @param relayAccount_ The address of the relay account\n    function updateRelayAccount(address payable relayAccount_) external override onlyManager {\n        _relayAccount = relayAccount_;\n    }\n\n    /// @return The address of the gas account\n    function getRelayAccount() public view override returns (address) {\n        return _relayAccount;\n    }\n\n    /// @param numerator fee numerator\n    function updateRSEFeeNumerator(uint32 numerator) external override onlyManager {\n        rseFeeNumerator = numerator;\n    }\n\n    /// @notice User is allowed to LP whitelisted tokens\n    /// @param user Address of the account LP-ing\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function provideLiquidity(\n        address user,\n        address[] calldata tokens,\n        uint256[] calldata amounts\n    ) external override onlyController {\n        require(\n            tokens.length == amounts.length,\n            \"Interconnects::provideLiquidity: Length of tokens and amounts must be equal\"\n        );\n\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        address[] memory tokenArr = new address[](tokens.length);\n        uint256[] memory amountArr = new uint256[](amounts.length);\n        bool[] memory addArr = new bool[](tokens.length);\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            require(\n                integrationMap.getTokenAcceptingLping(tokens[tokenId]),\n                \"Interconnects::provideLiquidity: This token is not accepting LP positions\"\n            );\n            address token = tokens[tokenId];\n            require(\n                amounts[tokenId] > 0 && amounts[tokenId] <= userPositions.userTokenBalance(token, user),\n                \"Interconnects::provideLiquidity: LP amount must be greater than zero and no more than the user's balance\"\n            );\n            tokenArr[tokenId] = token;\n            amountArr[tokenId] = amounts[tokenId];\n            addArr[tokenId] = false;\n\n            // Keep track of who is currently LPing\n            if (_tokenUserLpBalances[token][user].position == 0) {\n                _tokenLpUsers[token].push(user);\n            }\n\n            _tokenUserLpBalances[token][user].position += amounts[tokenId];\n            _tokenPoolLpBalances[token] += amounts[tokenId];\n        }\n        userPositions.updateUserTokenBalances(tokenArr, user, amountArr, addArr);\n        emit ProvideLiquidity(user, tokens, amounts);\n    }\n\n    /// @param user Address of the account LP-ing\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function takeLiquidity(\n        address user,\n        address[] calldata tokens,\n        uint256[] calldata amounts\n    ) external override onlyController {\n        require(\n            tokens.length == amounts.length,\n            \"Interconnects::takeLiquidity: Length of tokens and amounts must be equal\"\n        );\n\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        address[] memory tokenArr = new address[](tokens.length);\n        uint256[] memory amountArr = new uint256[](amounts.length);\n        bool[] memory addArr = new bool[](tokens.length);\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            address token = tokens[tokenId];\n            require(\n                amounts[tokenId] > 0 && amounts[tokenId] <= _tokenUserLpBalances[token][user].position,\n                \"Interconnects::takeLiquidity: LP amount must be greater than zero and no more than the user's balance for the token\"\n            );\n            require(\n                amounts[tokenId] <= _tokenPoolLpBalances[token],\n                \"Interconnects::takeLiquidity: LP amount must be no more than the available amount in the token pool\"\n            );\n\n            tokenArr[tokenId] = token;\n            amountArr[tokenId] = amounts[tokenId];\n            addArr[tokenId] = true;\n\n            _tokenUserLpBalances[token][user].position -= amounts[tokenId];\n            _tokenPoolLpBalances[token] -= amounts[tokenId];\n\n            // User has withdrawn all liquidity, so remove from list of LP users\n            if (_tokenUserLpBalances[token][user].position == 0) {\n                // Iterate through tokenLpUsers[token] and remove this user\n                for (uint256 lpUserIdx; lpUserIdx < _tokenLpUsers[token].length; lpUserIdx++) {\n                    if (_tokenLpUsers[token][lpUserIdx] == user) {\n                        _tokenLpUsers[token][lpUserIdx] = _tokenLpUsers[token][_tokenLpUsers[token].length - 1];\n                        _tokenLpUsers[token].pop();\n                        break;\n                    }\n                }\n            }\n        }\n        userPositions.updateUserTokenBalances(tokenArr, user, amountArr, addArr);\n        emit TakeLiquidity(user, tokens, amounts);\n    }\n\n    /// @notice User is allowed to claim fees\n    /// @param user Address of the account LP-ing\n    /// @param tokens Array of the token addresses\n    function claimLpFeeRewards(address user, address[] calldata tokens) external override onlyController nonReentrant {\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        uint256[] memory amounts = new uint256[](tokens.length);\n        bool[] memory add = new bool[](tokens.length);\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            address token = tokens[tokenId];\n            uint256 fees = _tokenUserLpBalances[token][user].rewards;\n            require(fees > 0, \"Interconnects::claimLpFees: LP fee reward balance must be greater than zero\");\n            _tokenUserLpBalances[token][user].rewards = 0;\n            amounts[tokenId] = fees;\n            add[tokenId] = true;\n        }\n        userPositions.updateUserTokenBalances(tokens, user, amounts, add);\n\n        emit ClaimLpFeeRewards(user, tokens);\n    }\n\n    /// @dev Wrapper around userPositions func to decrease user's token balance\n    /// @param user user bridging\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function bridgeFrom(\n        address user,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external override onlyRelayAccount validateBridging(tokens, amounts) nonReentrant {\n        // create add array with a false boolean for each address in tokens\n        bool[] memory addArr = new bool[](tokens.length);\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        userPositions.updateUserTokenBalances(tokens, user, amounts, addArr);\n        emit BridgeFrom(user, tokens, amounts);\n    }\n\n    /// @dev Wrapper around userPositions func to increase user's token balance\n    /// @param user user bridging\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function undoBridgeFrom(\n        address user,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external override onlyRelayAccount validateBridging(tokens, amounts) nonReentrant {\n        // create add array with a true boolean for each address in tokens\n        bool[] memory addArr = new bool[](tokens.length);\n        for (uint256 i; i < tokens.length; ++i) {\n            addArr[i] = true;\n        }\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        userPositions.updateUserTokenBalances(tokens, user, amounts, addArr);\n        emit UndoBridgeFrom(user, tokens, amounts);\n    }\n\n    /// @dev Wrapper around userPositions func, updateTokenPoolLpBalances, and feeHandler\n    /// @param user user bridging\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function bridgeTo(\n        address user,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external override onlyRelayAccount validateBridging(tokens, amounts) nonReentrant {\n        // create add array with a true boolean for each address in tokens\n        bool[] memory addArr = new bool[](tokens.length);\n        bool[] memory subArr = new bool[](tokens.length);\n        for (uint256 i; i < tokens.length; ++i) {\n            addArr[i] = true;\n        }\n        (\n            uint256[] memory protocolFees,\n            uint256[] memory liquidityProviderFees,\n            uint256[] memory netBridgeAmounts\n        ) = calculateBridgeFeesAndNetAmount(tokens, amounts);\n        updateTokenPoolLpBalances(tokens, amounts, subArr);\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        userPositions.updateUserInterconnectBalances(tokens, user, netBridgeAmounts, addArr);\n        for (uint256 i; i < tokens.length; ++i) {\n            address token = tokens[i];\n            uint256 lpFee = liquidityProviderFees[i];\n            uint256 protocolFee = protocolFees[i];\n            updateTokenUserLpFeeRewardBalances(token, lpFee);\n            _tokenProtocolFeeRewards[token] += protocolFee;\n        }\n        emit BridgeTo(user, tokens, amounts);\n    }\n\n    function remoteStrategyExecution(RemoteStrategyExecutionBody memory req)\n        external\n        override\n        onlyRelayAccount\n        validateRSE(req)\n        nonReentrant\n    {\n        markTxnAsCompleted(req.signature);\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n        uint256[] memory fees = calculateRSEFees(req.movements);\n        address[] memory tokens = new address[](req.movements.length);\n        for (uint256 i; i < req.movements.length; ++i) {\n            tokens[i] = req.movements[i].token;\n            _tokenRSEFees[req.movements[i].token] += fees[i];\n        }\n\n        // if they are entering a strategy remotely, we want to take fees before entering\n        if (req.enterStrat) {\n            // taking fees = decreasing their local balance by the amount of the fee for each token\n            userPositions.updateUserTokenBalances(tokens, req.user, fees, new bool[](tokens.length));\n        }\n\n        userPositions._remoteStrategyExecution(req.strategyId, req.user, req.movements, req.enterStrat);\n\n        // if they are exiting a strategy remotely, we want to take the fees after they exit the strategy\n        if (!req.enterStrat) {\n            userPositions.updateUserTokenBalances(tokens, req.user, fees, new bool[](tokens.length));\n        }\n\n        emit RSE(req);\n    }\n\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    /// @param add Array of boolean values, true if adding, false if removing\n    function updateTokenPoolLpBalances(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool[] memory add\n    ) internal {\n        require(\n            tokens.length == amounts.length && tokens.length == add.length,\n            \"Interconnects::updateTokenPoolLpBalances: Length of tokens, amounts, and add/subtract must be equal\"\n        );\n\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            require(\n                integrationMap.getTokenAcceptingLping(tokens[tokenId]),\n                \"Interconnects::updateTokenPoolLpBalances: This token is not accepting LP positions\"\n            );\n\n            uint256 newBalance;\n            if (add[tokenId]) {\n                newBalance = _tokenPoolLpBalances[tokens[tokenId]] + amounts[tokenId];\n            } else {\n                newBalance = _tokenPoolLpBalances[tokens[tokenId]] - amounts[tokenId];\n            }\n\n            _tokenPoolLpBalances[tokens[tokenId]] = newBalance;\n        }\n        emit UpdateTokenPoolLpBalances(tokens, amounts, add);\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param lpTransferFeeAmt Total fee amount which will be divided among the LPers\n    function updateTokenUserLpFeeRewardBalances(address asset, uint256 lpTransferFeeAmt) internal {\n        uint256 totalAmountAllocated = getTokenPoolLpActivePositions(asset);\n        for (uint256 lpUserIdx; lpUserIdx < _tokenLpUsers[asset].length; lpUserIdx++) {\n            address lpUser = _tokenLpUsers[asset][lpUserIdx];\n            // User gets a portion of the fee proportional to their share of the pool\n            _tokenUserLpBalances[asset][lpUser].rewards +=\n                (lpTransferFeeAmt * _tokenUserLpBalances[asset][lpUser].position) /\n                totalAmountAllocated;\n        }\n    }\n\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function calculateBridgeFeesAndNetAmount(address[] memory tokens, uint256[] memory amounts)\n        internal\n        view\n        returns (\n            uint256[] memory protocolFees,\n            uint256[] memory liquidityProviderFees,\n            uint256[] memory netBridgeAmounts\n        )\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint32 targetLiquidityRatioDenominator = integrationMap.getTargetLiquidityRatioDenominator();\n        uint32 kValueDenominator = integrationMap.getTransferFeeKValueDenominator();\n        uint32 protocolFeeDenominator = integrationMap.getTransferFeePlatformRatioDenominator();\n        protocolFees = new uint256[](tokens.length);\n        liquidityProviderFees = new uint256[](tokens.length);\n        netBridgeAmounts = new uint256[](tokens.length);\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            address token = tokens[tokenId];\n            uint256 protocolFeeNumerator = integrationMap.getTokenTransferFeePlatformRatioNumerator(token);\n\n            // x is the unallocated (currently available) liquidity divided by the target liquidity\n            uint256 x = (_tokenPoolLpBalances[token] * targetLiquidityRatioDenominator) /\n                (integrationMap.getTokenTargetLiquidityRatioNumerator(token) * getTokenPoolLpActivePositions(token));\n\n            uint256 totalFee = (integrationMap.getTokenTransferFeeKValueNumerator(token) * amounts[tokenId]) /\n                (kValueDenominator * x);\n\n            protocolFees[tokenId] = (totalFee * protocolFeeNumerator) / protocolFeeDenominator;\n            liquidityProviderFees[tokenId] = totalFee - protocolFees[tokenId];\n            netBridgeAmounts[tokenId] = amounts[tokenId] - totalFee;\n        }\n\n        return (protocolFees, liquidityProviderFees, netBridgeAmounts);\n    }\n\n    /// @param movements tokens and amounts\n    function calculateRSEFees(IUserPositions.TokenMovement[] memory movements)\n        internal\n        view\n        returns (uint256[] memory protocolFees)\n    {\n        protocolFees = new uint256[](movements.length);\n        for (uint256 i; i < movements.length; ++i) {\n            protocolFees[i] = (movements[i].amount * rseFeeNumerator) / RSE_FEE_DENOMINATOR;\n        }\n        return protocolFees;\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param user Address of the user account\n    function getTokenUserLpBalance(address asset, address user) public view override returns (uint256) {\n        return _tokenUserLpBalances[asset][user].position;\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenPoolLpBalance(address asset) public view override returns (uint256) {\n        return _tokenPoolLpBalances[asset];\n    }\n\n    /// @dev this returns the sum of all active LP positions for a given token. This is different than the LP balance, as the LP balance is the available amount of this sum. This number is gte the LP balance, usually greater than.\n    /// @param asset Address of the ERC20 token contract\n    function getTokenPoolLpActivePositions(address asset) public view override returns (uint256) {\n        uint256 sum = 0;\n        address[] memory lpUsers = _tokenLpUsers[asset];\n        for (uint256 lpUserIdx; lpUserIdx < lpUsers.length; lpUserIdx++) {\n            address lpUser = lpUsers[lpUserIdx];\n            sum += _tokenUserLpBalances[asset][lpUser].position;\n        }\n        return sum;\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param user Address of the user account\n    function getTokenUserLpFeeRewardBalance(address asset, address user) public view override returns (uint256) {\n        return _tokenUserLpBalances[asset][user].rewards;\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenLpUsers(address asset) public view override returns (address[] memory) {\n        return _tokenLpUsers[asset];\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenProtocolFeeRewards(address asset) public view override returns (uint256) {\n        return _tokenProtocolFeeRewards[asset];\n    }\n\n    /// @dev this function verifies that the signature is from the signer and contains the correct hashed contents\n    /// @param req - RSE request as struct RemoteStrategyExecutionBody\n    function verifyRSE(RemoteStrategyExecutionBody memory req) public pure returns (bool) {\n        bytes32 messageHash = keccak256(abi.encode(req.user, req.strategyId, req.enterStrat, req.nonce, req.movements));\n        bytes32 ethSignedMessageHash = VerifySignature.getEthSignedMessageHash(messageHash);\n        return VerifySignature.recoverSigner(ethSignedMessageHash, req.signature) == req.user;\n    }\n\n    /// @dev this function hashes this data and marks it as a completed transaction\n    /// @param signature - signature of the user\n    function markTxnAsCompleted(bytes memory signature) internal {\n        require(!relayTxns[signature], \"Interconnects::markTxnAsCompleted: Already completed!\");\n        relayTxns[signature] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IInterconnects.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"./IUserPositions.sol\";\n\ninterface IInterconnects {\n    // ##### Events\n    struct lpData {\n        uint256 position;\n        uint256 rewards;\n    }\n\n    struct RemoteStrategyExecutionBody {\n        address user;\n        uint256 strategyId;\n        bool enterStrat;\n        uint256 nonce;\n        IUserPositions.TokenMovement[] movements;\n        bytes signature;\n    }\n\n    event ProvideLiquidity(address indexed user, address[] tokens, uint256[] tokenAmounts);\n    event TakeLiquidity(address indexed user, address[] tokens, uint256[] tokenAmounts);\n\n    event ClaimLpFeeRewards(address indexed user, address[] tokens);\n\n    event BridgeFrom(address indexed user, address[] tokens, uint256[] amounts);\n\n    event UndoBridgeFrom(address indexed user, address[] tokens, uint256[] amounts);\n\n    event BridgeTo(address indexed user, address[] tokens, uint256[] amounts);\n\n    event RSE(RemoteStrategyExecutionBody req);\n\n    event UpdateTokenPoolLpBalances(address[] tokens, uint256[] tokenAmounts, bool[] add);\n\n    // ##### Functions\n    /// @param relayAccount_ The address of relay account\n    function updateRelayAccount(address payable relayAccount_) external;\n\n    /// @return The address of the relay account\n    function getRelayAccount() external view returns (address);\n\n    function updateRSEFeeNumerator(uint32 number) external;\n\n    /// @notice User is allowed to LP whitelisted tokens\n    /// @param user Address of the account LP-ing\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function provideLiquidity(\n        address user,\n        address[] calldata tokens,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @param user Address of the account LP-ing\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function takeLiquidity(\n        address user,\n        address[] calldata tokens,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @param user Address of the account LP-ing\n    /// @param tokens Array of the token addresses\n    function claimLpFeeRewards(address user, address[] calldata tokens) external;\n\n    // @param user Address of the account bridging\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function bridgeFrom(\n        address user,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    // @param user Address of the account bridging\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function undoBridgeFrom(\n        address user,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    // @param user Address of the account bridging\n    /// @param tokens Array of the token addresses\n    /// @param amounts Array of the token amounts\n    function bridgeTo(\n        address user,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    // @param req remote strategy execution request as struct RemoteStrategyExecutionBody\n    function remoteStrategyExecution(RemoteStrategyExecutionBody calldata req) external;\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function getTokenUserLpBalance(address asset, address account) external view returns (uint256);\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenPoolLpBalance(address asset) external view returns (uint256);\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenPoolLpActivePositions(address asset) external view returns (uint256);\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function getTokenUserLpFeeRewardBalance(address asset, address account) external view returns (uint256);\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenLpUsers(address asset) external view returns (address[] memory);\n\n    /// @param asset Address of the ERC20 token contract\n    function getTokenProtocolFeeRewards(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/VerifySignature.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\n/// @title SignatureVerification allows you to verify an off-chain signature on-chain\nlibrary VerifySignature {\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n    }\n\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n"
    },
    "contracts/libraries/AddArr.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\n/// @title AddArr\n/// @notice A library for create a list of booleans that are true. Allows you to specify whether you want to add or subtract an int from a uint\n/// @dev Used in Interconnects.col\nlibrary AddArr {\n    function getAddArr(uint256 amount) internal pure returns (bool[] memory) {\n        bool[] memory result = new bool[](amount);\n        for (uint256 i; i < amount; ++i) {\n            result[i] = true;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/UserMigration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IIntegration.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IYieldManager.sol\";\nimport \"./interfaces/IUserPositions.sol\";\n\n/// @title Kernel\n/// @notice Allows users to deposit/withdraw erc20 tokens\n/// @notice Allows a system admin to control which tokens are depositable\ncontract UserMigration is Initializable, OwnableUpgradeable {\n    struct MigrateDeposits {\n        address user;\n        address[] tokens;\n        uint256[] amounts;\n    }\n\n    function initialize() external initializer {\n        __Ownable_init();\n    }\n\n    function transferFunds(\n        address yieldManager,\n        address kernel,\n        address[] calldata ymTokens,\n        uint256[] calldata ymAmounts\n    ) external onlyOwner {\n        require(ymAmounts.length == ymTokens.length, \"incorrect lengths\");\n\n        for (uint256 i; i < ymTokens.length; ++i) {\n            IYieldManager(yieldManager).transferClosedPositionsValue(kernel, ymTokens[i], ymAmounts[i]);\n        }\n    }\n\n    function moveDeposits(address newUserPositions, MigrateDeposits[] calldata users) external onlyOwner {\n        for (uint256 i; i < users.length; ++i) {\n            // Move amount in user positions\n            IUserPositions(newUserPositions).deposit(users[i].user, users[i].tokens, users[i].amounts, 0, true);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    //tmp here\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IYieldManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IYieldManager {\n    // #### Structs\n\n    struct DeployRequest {\n        address integration;\n        address[] tokens; // If ammPoolID > 0, this should contain exactly two addresses\n        uint32 ammPoolID; // The pool to deposit into. This is 0 for non-AMM integrations\n    }\n\n    struct IntegrationYield {\n        address integration;\n        address token;\n        uint256 amount;\n    }\n\n    struct StrategyInfo {\n        uint256 processedWeth;\n        uint256 distributedWeth;\n        uint256 lastHarvest;\n    }\n\n    // #### Functions\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_) external;\n\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\n    function updateEthDistributionWeights(\n        uint32 biosBuyBackEthWeight_,\n        uint32 treasuryEthWeight_,\n        uint32 protocolFeeEthWeight_,\n        uint32 rewardsEthWeight_\n    ) external;\n\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\n    function updateGasAccount(address payable gasAccount_) external;\n\n    /// @param treasuryAccount_ The address of the system treasury account\n    function updateTreasuryAccount(address payable treasuryAccount_) external;\n\n    /// @notice Deploys all tokens to all integrations according to configured weights\n    function deploy(DeployRequest[] calldata deployments) external;\n\n    /// @notice Harvests available yield from provided and integration, credited to strategy\n    /// @param strategyId Strategy to credit the yield to\n    /// @param integrations The integrations to harvest yield from\n    /// @param amount The\n    function harvestYield(\n        uint256 strategyId,\n        address[] calldata integrations,\n        uint256 amount,\n        bool setAccounting\n    ) external;\n\n    function strategyAccounting(\n        uint256 strategyId,\n        uint256 amount,\n        bool add\n    ) external;\n\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\n    /// @param ids An array of strategy IDs to distribute eth for\n    function distributeEth(\n        uint256[] calldata ids,\n        uint256[] calldata positions,\n        uint256 biosAmount\n    ) external;\n\n    /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\n    function biosBuyBack(uint256 ratioX1000) external;\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The amount of the token held in the Kernel as reserves\n    function getReserveTokenBalance(address tokenAddress) external view returns (uint256);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The desired amount of the token to hold in the Kernel as reserves\n    function getDesiredReserveTokenBalance(address tokenAddress) external view returns (uint256);\n\n    /// @return ethWeightSum The sum of ETH distribution weights\n    function getEthWeightSum() external view returns (uint32 ethWeightSum);\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\n    function getTokenTotalIntegrationBalance(address tokenAddress)\n        external\n        view\n        returns (uint256 tokenTotalIntegrationBalance);\n\n    /// @return The address of the gas account\n    function getGasAccount() external view returns (address);\n\n    /// @return The address of the treasury account\n    function getTreasuryAccount() external view returns (address);\n\n    /// @return The last amount of ETH distributed to rewards\n    function getLastEthRewardsAmount() external view returns (uint256);\n\n    /// @return The target ETH balance of the gas account\n    function getGasAccountTargetEthBalance() external view returns (uint256);\n\n    /// @return The BIOS buyback ETH weight\n    /// @return The Treasury ETH weight\n    /// @return The Protocol fee ETH weight\n    /// @return The rewards ETH weight\n    function getEthDistributionWeights()\n        external\n        view\n        returns (\n            uint32,\n            uint32,\n            uint32,\n            uint32\n        );\n\n    function transferClosedPositionsValue(\n        address destination,\n        address token,\n        uint256 amount\n    ) external;\n\n    // function getAllPendingYield(address token)\n    //     external\n    //     view\n    //     returns (IntegrationYield[] memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/core/YieldManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IBiosRewards.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IEtherRewards.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/ISushiSwapTrader.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"../interfaces/ISwapManager.sol\";\nimport \"../interfaces/IUnwrapper.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\n/// @title Yield Manager\n/// @notice Manages yield deployments, harvesting, processing, and distribution\ncontract YieldManager is Initializable, ModuleMapConsumer, Controlled, IYieldManager {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    // constants\n    uint256 private constant FTM_CHAIN_ID = 250;\n    uint256 private constant BSC_CHAIN_ID = 56;\n\n    uint256 private gasAccountTargetEthBalance;\n    uint32 private biosBuyBackEthWeight;\n    uint32 private treasuryEthWeight;\n    uint32 private protocolFeeEthWeight;\n    uint32 private rewardsEthWeight;\n    uint256 private lastEthRewardsAmount;\n\n    address payable private gasAccount;\n    address payable private treasuryAccount;\n\n    mapping(address => uint256) private processedWethByToken;\n    mapping(address => uint256) private lastHarvestTimestampByIntegration;\n\n    // strategyId => StrategyInfo\n    mapping(uint256 => StrategyInfo) private strategies;\n\n    event HarvestYield(uint256 strategyId, address[] integration, uint256 amount);\n\n    receive() external payable {}\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Address of the Module Map\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\n    /// @param treasuryAccount_ The address of the system treasury account\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        uint256 gasAccountTargetEthBalance_,\n        uint32 biosBuyBackEthWeight_,\n        uint32 treasuryEthWeight_,\n        uint32 protocolFeeEthWeight_,\n        uint32 rewardsEthWeight_,\n        address payable gasAccount_,\n        address payable treasuryAccount_\n    ) external initializer {\n        require(gasAccount_ != address(0), \"bad address\");\n        require(treasuryAccount_ != address(0), \"bad address\");\n\n        __Controlled_init(controllers_, moduleMap_);\n        gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\n        biosBuyBackEthWeight = biosBuyBackEthWeight_;\n        treasuryEthWeight = treasuryEthWeight_;\n        protocolFeeEthWeight = protocolFeeEthWeight_;\n        rewardsEthWeight = rewardsEthWeight_;\n        gasAccount = gasAccount_;\n        treasuryAccount = treasuryAccount_;\n    }\n\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_) external override onlyController {\n        gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\n    }\n\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\n    function updateEthDistributionWeights(\n        uint32 biosBuyBackEthWeight_,\n        uint32 treasuryEthWeight_,\n        uint32 protocolFeeEthWeight_,\n        uint32 rewardsEthWeight_\n    ) external override onlyController {\n        biosBuyBackEthWeight = biosBuyBackEthWeight_;\n        treasuryEthWeight = treasuryEthWeight_;\n        protocolFeeEthWeight = protocolFeeEthWeight_;\n        rewardsEthWeight = rewardsEthWeight_;\n    }\n\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\n    function updateGasAccount(address payable gasAccount_) external override onlyController {\n        require(gasAccount_ != address(0), \"bad address\");\n        gasAccount = gasAccount_;\n    }\n\n    /// @param treasuryAccount_ The address of the system treasury account\n    function updateTreasuryAccount(address payable treasuryAccount_) external override onlyController {\n        require(treasuryAccount_ != address(0), \"bad address\");\n        treasuryAccount = treasuryAccount_;\n    }\n\n    /// @notice Deploys all tokens to all integrations according to configured weights\n    function deploy(DeployRequest[] calldata deployments) external override onlyController {\n        IStrategyMap strategyMap = IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap));\n\n        for (uint256 i; i < deployments.length; ++i) {\n            if (deployments[i].ammPoolID > 0) {\n                require(deployments[i].tokens.length <= 2, \"too many tokens\");\n            }\n\n            for (uint256 j; j < deployments[i].tokens.length; j++) {\n                int256 deployAmount = strategyMap.getDeployAmount(\n                    deployments[i].integration,\n                    deployments[i].ammPoolID,\n                    deployments[i].tokens[j]\n                );\n\n                uint256 reserveBalance = IERC20MetadataUpgradeable(deployments[i].tokens[j]).balanceOf(\n                    moduleMap.getModuleAddress(Modules.Kernel)\n                );\n                if (deployAmount > 0 && reserveBalance < abs(deployAmount)) {\n                    strategyMap.closePositionsForWithdrawal(deployments[i].tokens[j], type(uint256).max);\n                    deployAmount = strategyMap.getDeployAmount(\n                        deployments[i].integration,\n                        deployments[i].ammPoolID,\n                        deployments[i].tokens[j]\n                    );\n                }\n\n                if (deployments[i].ammPoolID > 0) {\n                    IAMMIntegration integration = IAMMIntegration(deployments[i].integration);\n\n                    if (deployAmount > 0) {\n                        uint256 balanceBefore = IERC20MetadataUpgradeable(deployments[i].tokens[j]).balanceOf(\n                            deployments[i].integration\n                        );\n\n                        IERC20MetadataUpgradeable(deployments[i].tokens[j]).safeTransferFrom(\n                            moduleMap.getModuleAddress(Modules.Kernel),\n                            deployments[i].integration,\n                            abs(deployAmount)\n                        );\n                        uint256 balanceAfter = IERC20MetadataUpgradeable(deployments[i].tokens[j]).balanceOf(\n                            deployments[i].integration\n                        );\n                        integration.deposit(\n                            deployments[i].tokens[j],\n                            balanceAfter - balanceBefore,\n                            deployments[i].ammPoolID\n                        );\n                        integration.deploy(deployments[i].ammPoolID);\n                    } else if (deployAmount < 0) {\n                        integration.withdraw(deployments[i].tokens[j], abs(deployAmount), deployments[i].ammPoolID);\n                    }\n                } else {\n                    IIntegration integration = IIntegration(deployments[i].integration);\n                    if (deployAmount > 0) {\n                        uint256 balanceBefore = IERC20MetadataUpgradeable(deployments[i].tokens[j]).balanceOf(\n                            deployments[i].integration\n                        );\n                        IERC20MetadataUpgradeable(deployments[i].tokens[j]).safeTransferFrom(\n                            moduleMap.getModuleAddress(Modules.Kernel),\n                            deployments[i].integration,\n                            abs(deployAmount)\n                        );\n                        uint256 balanceAfter = IERC20MetadataUpgradeable(deployments[i].tokens[j]).balanceOf(\n                            deployments[i].integration\n                        );\n\n                        integration.deposit(deployments[i].tokens[j], balanceAfter - balanceBefore);\n                        integration.deploy();\n                    } else if (deployAmount < 0) {\n                        integration.withdraw(deployments[i].tokens[j], abs(deployAmount));\n                    }\n                }\n                strategyMap.decreaseDeployAmountChange(\n                    deployments[i].integration,\n                    deployments[i].ammPoolID,\n                    deployments[i].tokens[j],\n                    abs(deployAmount)\n                );\n            }\n            strategyMap.clearClosablePositions(deployments[i].tokens);\n        }\n    }\n\n    function abs(int256 val) internal pure returns (uint256) {\n        return uint256(val >= 0 ? val : -val);\n    }\n\n    function _calculateReserveAmount(\n        uint256 amount,\n        uint256 numerator,\n        uint256 denominator\n    ) internal pure returns (uint256) {\n        return (amount == 0 ? 1 : amount * numerator) / denominator;\n    }\n\n    /// @notice Harvests available yield from provided and integration, credited to strategy\n    /// @param strategyId Strategy to credit the yield to\n    /// @param integrations The integrations to harvest yield from\n    function harvestYield(\n        uint256 strategyId,\n        address[] calldata integrations,\n        uint256 amount,\n        bool setAccounting\n    ) external override onlyManager {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        address wethAddress = integrationMap.getWethTokenAddress();\n        IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(wethAddress);\n\n        // Harvest yield and account the weth\n        uint256 balanceBefore = weth.balanceOf(address(this));\n        for (uint256 i; i < integrations.length; ++i) {\n            IIntegration(integrations[i]).harvestYield();\n        }\n\n        uint256 receivedWeth = weth.balanceOf(address(this)) - balanceBefore;\n\n        // update accounting\n        if (setAccounting) {\n            StrategyInfo storage strategy = strategies[strategyId];\n\n            uint256 updateAmount = amount > 0 ? amount : receivedWeth;\n\n            strategy.lastHarvest = block.timestamp;\n            strategy.processedWeth += updateAmount;\n        }\n\n        emit HarvestYield(strategyId, integrations, receivedWeth);\n    }\n\n    function strategyAccounting(\n        uint256 strategyId,\n        uint256 amount,\n        bool add\n    ) external override onlyManager {\n        StrategyInfo storage strategy = strategies[strategyId];\n\n        strategy.lastHarvest = block.timestamp;\n\n        if (add) {\n            strategy.processedWeth += amount;\n        } else {\n            strategy.processedWeth -= amount;\n        }\n    }\n\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\n    /// @param ids An aray of strategy IDs to distribute eth for\n    /// @param positions An array of the total position value for the strategy to prevent flashing\n    /// @param biosAmount Amount of bios deposited to prevent flashing\n    function distributeEth(\n        uint256[] calldata ids,\n        uint256[] calldata positions,\n        uint256 biosAmount\n    ) external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        address wethAddress = integrationMap.getWethTokenAddress();\n\n        if (biosAmount > 0) {\n            // Check against BIOS flashing\n            require(\n                IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalTokenBalance(\n                    integrationMap.getBiosTokenAddress()\n                ) <= biosAmount,\n                \"YieldManager::expected BIOS exceeded\"\n            );\n        }\n\n        // First fill up gas wallet with ETH\n        // We just skip this for now :)\n        // If you are going to enable, don't forget to account for where\n        // the eth will come from!!\n        // uint256 gasAmount = _ethToGasAccount();\n\n        uint256 totalRewards;\n\n        for (uint256 i; i < ids.length; ++i) {\n            // Don't run this for BIOS strat :p\n            require(ids[i] > 0, \"YieldManager::invalid strategy\");\n\n            // check positions to prevent flasher\n            require(\n                IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).getStrategyTokenBalance(\n                    ids[i],\n                    wethAddress\n                ) <= positions[i],\n                \"YieldManager::position exceeded\"\n            );\n\n            StrategyInfo storage strategy = strategies[ids[i]];\n\n            uint256 wethToDistribute = strategy.processedWeth - strategy.distributedWeth;\n\n            if (wethToDistribute > 0) {\n                (\n                    uint256 biosBuyBackWethAmount,\n                    uint256 treasuryWethAmount,\n                    uint256 protocolFeeWethAmount,\n                    uint256 rewardsWethAmount\n                ) = _calculateRewardAmounts(wethToDistribute);\n\n                // Send WETH to SushiSwap trader for BIOS buy back\n                if (biosBuyBackWethAmount > 0) {\n                    IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n                        moduleMap.getModuleAddress(Modules.SushiSwapTrader),\n                        biosBuyBackWethAmount\n                    );\n                }\n\n                // Swap WETH for ETH and transfer to the treasury account\n                _unwrapWnative(treasuryWethAmount, wethAddress);\n                _transferAmount(treasuryWethAmount, treasuryAccount);\n\n                if (protocolFeeWethAmount > 0) {\n                    // Send ETH to protocol fee accrual rewards (BIOS stakers)\n                    _ethToProtocolFeeAccrual(protocolFeeWethAmount);\n                }\n\n                // Send ETH to strategy rewards\n                _ethToRewards(ids[i], rewardsWethAmount);\n                totalRewards += rewardsWethAmount;\n\n                // Update accounting\n                strategy.distributedWeth += wethToDistribute;\n            }\n        }\n\n        // Update stats metric\n        lastEthRewardsAmount = totalRewards;\n    }\n\n    /// @notice Distributes WETH to gas wallet\n    function _ethToGasAccount() private returns (uint256 ethAmountToGasAccount) {\n        address wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n        uint256 wethBalance = IERC20MetadataUpgradeable(wethAddress).balanceOf(address(this));\n\n        if (wethBalance > 0) {\n            uint256 gasAccountActualEthBalance = gasAccount.balance;\n            if (gasAccountActualEthBalance < gasAccountTargetEthBalance) {\n                // Need to send ETH to gas account\n                if (wethBalance < gasAccountTargetEthBalance - gasAccountActualEthBalance) {\n                    // Send all of WETH to gas wallet\n                    ethAmountToGasAccount = wethBalance;\n                } else {\n                    // Send portion of WETH to gas wallet\n                    ethAmountToGasAccount = gasAccountTargetEthBalance - gasAccountActualEthBalance;\n                }\n                _unwrapWnative(ethAmountToGasAccount, wethAddress);\n                _transferAmount(ethAmountToGasAccount, gasAccount);\n            }\n        }\n    }\n\n    /// @notice Uses any WETH held in the SushiSwap trader to buy back BIOS which is sent to the Kernel\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\n    function biosBuyBack(uint256 ratioX1000) external override onlyController {\n        if (\n            IERC20MetadataUpgradeable(\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\n            ).balanceOf(moduleMap.getModuleAddress(Modules.SushiSwapTrader)) > 0\n        ) {\n            // Use all ETH sent to the SushiSwap trader to buy BIOS\n            ISushiSwapTrader(moduleMap.getModuleAddress(Modules.SushiSwapTrader)).biosBuyBack(ratioX1000);\n\n            // Use all BIOS transferred to the Kernel to increase bios rewards\n            IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards)).increaseBiosRewards();\n        }\n    }\n\n    /// @notice Distributes ETH to Rewards per token\n    /// @param strategyId The Strategy ID to distribute the rewards to\n    /// @param ethRewardsAmount The amount of ETH rewards to distribute\n    function _ethToRewards(uint256 strategyId, uint256 ethRewardsAmount) private {\n        if (ethRewardsAmount > 0) {\n            // Distribute eth rewards\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).increaseEthRewards(\n                strategyId,\n                ethRewardsAmount\n            );\n\n            // Convert to eth and send\n            _unwrapWnative(\n                ethRewardsAmount,\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\n            );\n            _transferAmount(ethRewardsAmount, moduleMap.getModuleAddress(Modules.Kernel));\n        }\n    }\n\n    /// @notice Distributes ETH to protocol fee accrual (BIOS staker rewards)\n    /// @param protocolFeeEthRewardsAmount Amount of ETH to distribute to protocol fee accrual\n    function _ethToProtocolFeeAccrual(uint256 protocolFeeEthRewardsAmount) private {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n\n        if (\n            IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalTokenBalance(\n                integrationMap.getBiosTokenAddress()\n            ) > 0\n        ) {\n            // BIOS has been deposited, increase Ether rewards for BIOS depositors\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).increaseEthRewards(\n                0,\n                protocolFeeEthRewardsAmount\n            );\n\n            _unwrapWnative(protocolFeeEthRewardsAmount, integrationMap.getWethTokenAddress());\n\n            _transferAmount(protocolFeeEthRewardsAmount, moduleMap.getModuleAddress(Modules.Kernel));\n        } else {\n            // No BIOS has been deposited, send WETH back to Kernel as reserves\n            IERC20MetadataUpgradeable(integrationMap.getWethTokenAddress()).transfer(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                protocolFeeEthRewardsAmount\n            );\n        }\n    }\n\n    function _calculateRewardAmounts(uint256 amount)\n        internal\n        view\n        returns (\n            uint256 biosBuyBackAmount,\n            uint256 treasuryAmount,\n            uint256 protocolFeeAmount,\n            uint256 rewardsAmount\n        )\n    {\n        uint256 weightSum = getEthWeightSum();\n        biosBuyBackAmount = (amount * biosBuyBackEthWeight) / weightSum;\n        treasuryAmount = (amount * treasuryEthWeight) / weightSum;\n        protocolFeeAmount = (amount * protocolFeeEthWeight) / weightSum;\n        rewardsAmount = amount - biosBuyBackAmount - treasuryAmount - protocolFeeAmount;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The amount of the token held in the Kernel as reserves\n    function getReserveTokenBalance(address tokenAddress) public view override returns (uint256) {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getIsTokenAdded(tokenAddress),\n            \"YieldManager::getReserveTokenBalance: Token not added\"\n        );\n        return IERC20MetadataUpgradeable(tokenAddress).balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The desired amount of the token to hold in the Kernel as reserves\n    function getDesiredReserveTokenBalance(address tokenAddress) public view override returns (uint256) {\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getIsTokenAdded(tokenAddress),\n            \"YieldManager::getDesiredReserveTokenBalance: Token not added\"\n        );\n        uint256 tokenReserveRatioNumerator = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n            .getTokenReserveRatioNumerator(tokenAddress);\n        uint256 tokenTotalBalance = IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).getTokenTotalBalance(\n            tokenAddress\n        );\n        return\n            (tokenTotalBalance * tokenReserveRatioNumerator) /\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getReserveRatioDenominator();\n    }\n\n    /// @return ethWeightSum The sum of ETH distribution weights\n    function getEthWeightSum() public view override returns (uint32 ethWeightSum) {\n        ethWeightSum = biosBuyBackEthWeight + treasuryEthWeight + protocolFeeEthWeight + rewardsEthWeight;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\n    function getTokenTotalIntegrationBalance(address tokenAddress)\n        public\n        view\n        override\n        returns (uint256 tokenTotalIntegrationBalance)\n    {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\n\n        for (uint256 integrationId; integrationId < integrationCount; integrationId++) {\n            tokenTotalIntegrationBalance += IIntegration(integrationMap.getIntegrationAddress(integrationId))\n                .getBalance(tokenAddress);\n        }\n    }\n\n    /// @return The address of the gas account\n    function getGasAccount() public view override returns (address) {\n        return gasAccount;\n    }\n\n    /// @return The address of the treasury account\n    function getTreasuryAccount() public view override returns (address) {\n        return treasuryAccount;\n    }\n\n    /// @return The last amount of ETH distributed to rewards\n    function getLastEthRewardsAmount() public view override returns (uint256) {\n        return lastEthRewardsAmount;\n    }\n\n    /// @return The target ETH balance of the gas account\n    function getGasAccountTargetEthBalance() public view override returns (uint256) {\n        return gasAccountTargetEthBalance;\n    }\n\n    /// @return The BIOS buyback ETH weight\n    /// @return The Treasury ETH weight\n    /// @return The Protocol fee ETH weight\n    /// @return The rewards ETH weight\n    function getEthDistributionWeights()\n        public\n        view\n        override\n        returns (\n            uint32,\n            uint32,\n            uint32,\n            uint32\n        )\n    {\n        return (biosBuyBackEthWeight, treasuryEthWeight, protocolFeeEthWeight, rewardsEthWeight);\n    }\n\n    /// @return The timestamp the harvestYield function was last called\n    function getLastHarvestYieldTimestamp(address integrationAddress) external view returns (uint256) {\n        return lastHarvestTimestampByIntegration[integrationAddress];\n    }\n\n    function getStrategyInfo(uint256 strategyId) external view returns (StrategyInfo memory) {\n        return strategies[strategyId];\n    }\n\n    function transferClosedPositionsValue(\n        address destination,\n        address token,\n        uint256 amount\n    ) external override onlyController {\n        require(destination != address(0), \"bad address\");\n        IERC20MetadataUpgradeable(token).safeTransfer(destination, amount);\n    }\n\n    function getAllPendingYield(address token) external view returns (IntegrationYield[] memory pendingYieldData) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\n\n        pendingYieldData = new IntegrationYield[](integrationCount);\n\n        for (uint256 integrationId; integrationId < integrationCount; integrationId++) {\n            address integrationAddress = integrationMap.getIntegrationAddress(integrationId);\n            uint256 pendingYield = IIntegration(integrationAddress).getPendingYield(token);\n\n            pendingYieldData[integrationId] = IntegrationYield(integrationAddress, token, pendingYield);\n        }\n    }\n\n    function _transferAmount(uint256 amount, address to) internal {\n        (bool sent, ) = payable(to).call{value: amount}(\"\");\n        require(sent, \"Failed to transfer value\");\n    }\n\n    function _unwrapWnative(uint256 amount, address wnativeAddress) internal {\n        // just add some ORs on here to check for more chains...\n        if (block.chainid == FTM_CHAIN_ID || block.chainid == BSC_CHAIN_ID) {\n            // we are on a chain with wnative unwrapping issues\n\n            // get unwrapper address\n            address unwrapper = moduleMap.getModuleAddress(Modules.Unwrapper);\n\n            // send wnative to unwrapper and unwrap\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(unwrapper, amount);\n            IUnwrapper(unwrapper).unwrap(amount);\n        } else {\n            // we are on a chain with working wnative unwrapping, so just do it\n            IWeth9(wnativeAddress).withdraw(amount);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IEtherRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IEtherRewards {\n    // structs\n    struct UserInfo {\n        // rewardDebt uses MCV2 technology, it can be negative!\n        int256 rewardDebt;\n        uint256 claimedRewards;\n    }\n\n    struct StrategyInfo {\n        uint256 rewardPerShare; // rewardPerShare * 1e12\n        uint256 totalRewards;\n    }\n\n    /// @param strategyId The strategy the user entered\n    /// @param amount The amount of token entered by the user\n    /// @param user The address of the user\n    function increaseUserRewards(\n        uint256 strategyId,\n        uint256 amount,\n        address user\n    ) external;\n\n    /// @param strategyId The strategy the user exited\n    /// @param amount The amount of token exited by the user\n    /// @param user The address of the user\n    function decreaseUserRewards(\n        uint256 strategyId,\n        uint256 amount,\n        address user\n    ) external;\n\n    /// @param strategyId The strategy to the rewards are for\n    /// @param ethRewardsAmount The amount of Ether rewards to add\n    function increaseEthRewards(uint256 strategyId, uint256 ethRewardsAmount) external;\n\n    /// @param user The address of the user\n    /// @param ids An array of strategyIds to claim rewards for\n    /// @return ethRewards The amount of Ether claimed\n    function claimEthRewards(address user, uint256[] calldata ids) external returns (uint256 ethRewards);\n\n    /// @param strategyId The ID of the strategy\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserStrategyRewards(uint256 strategyId, address user) external view returns (uint256 ethRewards);\n\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserEthRewards(address user) external view returns (uint256 ethRewards);\n\n    /// @return The total value of ETH claimed by users\n    function getTotalClaimedEthRewards() external view returns (uint256);\n\n    /// @return The total value of ETH claimed by a user\n    function getTotalUserClaimedEthRewards(address user) external view returns (uint256);\n\n    /// @return The total amount of Ether rewards\n    function getEthRewards() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISushiSwapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapTrader {\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\n    function updateSlippageNumerator(uint24 slippageNumerator_) external;\n\n    /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\n    /// @return Bool indicating whether the trade succeeded\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\n    function biosBuyBack(uint256 ratioX1000) external returns (bool);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return bool Indicates whether the swap succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IWeth9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IWeth9 {\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function deposit() external payable;\n\n    /// @param wad The amount of wETH to withdraw into ETH\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/interfaces/ISwapManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISwapManager {\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _recipient The address of the token out recipient\n    /// @param _amountIn The exact amount of the input to swap\n    /// @param _minAmountOut The minimum amount of _tokenOut to receive\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\n    function swapExactIn(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn,\n        uint256 _minAmountOut\n    ) external returns (bool tradeSuccess_);\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _recipient The address of the token out recipient\n    /// @param _amountIn The exact amount of the input to swap\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\n    function swapExactIn(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn\n    ) external returns (bool tradeSuccess_);\n}\n"
    },
    "contracts/interfaces/IUnwrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"../interfaces/IWeth9.sol\";\n\n// Some native tokens can't be unwrapped by upgradeable contracts...\n// https://forum.openzeppelin.com/t/msg-sender-transfer-runs-out-of-gas-on-a-payable-upgradeable-proxy-contract/3766\n\ninterface IUnwrapper {\n    /// @dev transfer token and then unwrap\n    // Allows you to unwrap the token in cases where Istanbul causes gas issues\n    function unwrap(uint256 amount) external;\n}\n"
    },
    "contracts/yield-integrations/TethysIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IDexTrader.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISushiSwapMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IOlympusTokenMigrator.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to Tethys\ncontract TethysIntegration is Controlled, IAMMIntegration, IDexTrader {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address sushi;\n    address wethAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // Token price ceilings to add some protection against front-runners\n    // pairAddress => ratio * 1000\n    // DEPRECATED but this var has already been deployed and cannot be removed\n    mapping(address => uint256) public priceCeilings;\n\n    // yield amounts in weth. Harvested by integration, not yet by YieldManager\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // sushi allocated per pool\n    mapping(uint32 => uint256) private sushiBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the Sushi swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address sushi_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(sushi_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        sushi = sushi_;\n        wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    // third param positionID is unused for sushi\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n        ISushiSwapMasterChef.PoolInfo memory poolInfo = ISushiSwapMasterChef(masterChef).poolInfo(masterChefPoolId);\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n        require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n        stakings[poolId] = masterChefPoolId;\n        // let master chef pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) < type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            // MCV1 sends sushi when staking\n            uint256 sushiBefore = _selfBalance(sushi);\n\n            ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], balance);\n\n            _receivedSushi(poolId, sushiBefore);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint32 i; i < poolCount; ++i) {\n            uint256 poolYield = yieldBalances[poolIds[i]];\n            if (poolYield > 0) {\n                yieldAmount += poolYield;\n                harvestedYield[poolIds[i]] += poolYield;\n                yieldBalances[poolIds[i]] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 sushiRatioX1000, // price ratio for SUSHI!\n        uint256, // unused rewards ratio\n        bool // unused conversion flag\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        uint256 sushiBefore = _selfBalance(sushi);\n        ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], 0);\n        _receivedSushi(poolId, sushiBefore);\n\n        // check and convert any sushi\n        uint256 sushiBalance = sushiBalances[poolId];\n\n        if (sushiBalance > 0) {\n            checkPriceCeiling(sushi, wethAddress, sushiRatioX1000);\n            uint256[] memory amounts = _swapExactInput(\n                sushi,\n                wethAddress,\n                address(this),\n                sushiBalance,\n                getAmountOutMinimum(sushi, wethAddress, sushiBalance)\n            );\n\n            sushiBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0, true);\n        }\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) public onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            ISushiSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISushiSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // MCV1 sends sushi when unstaking\n        uint256 sushiBefore = _selfBalance(sushi);\n\n        ISushiSwapMasterChef(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        // Account for sushi\n        _receivedSushi(poolId, sushiBefore);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        if (tokenAddress == pool.tokenA) {\n            uint256[] memory amountsOfTokenReceived = _swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            uint256[] memory amountsOfTokenReceived = _swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    // for SwapManager\n    function swapExactInput(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn,\n        uint256 _amountOutMin\n    ) external override onlyController returns (bool) {\n        return _swapExactInput(_tokenIn, _tokenOut, _recipient, _amountIn, _amountOutMin)[1] > 0;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        require(amountIn > 0, \"amountIn must be greater than zero\");\n\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the Sushi pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SUSHI rewards\n    /// @param poolId  the masterchef pool to retrieve yield for\n    /// @return tokens Token addresses of pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId) public view returns (address[1] memory tokens, uint256[1] memory amounts) {\n        // pending yield is pending in Master Chef plus in sushiBalances\n        tokens[0] = sushi;\n        amounts[0] =\n            ISushiSwapMasterChef(masterChef).pendingSushi(stakings[poolId], address(this)) +\n            sushiBalances[poolId];\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = _selfBalance(targetToken);\n\n        // swap tokens\n        _swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = _selfBalance(targetToken) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"SushiSwapIntegration: no balance\");\n        // fetch reserve values from sushi\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getSushiBalances(uint32[] calldata pids) external view returns (uint256[] memory sushiAmounts) {\n        sushiAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            sushiAmounts[i] = sushiBalances[pids[i]];\n        }\n    }\n\n    function _receivedSushi(uint32 poolId, uint256 sushiBefore) internal returns (uint256 sushiAdded) {\n        sushiAdded = _selfBalance(sushi) - sushiBefore;\n        if (sushiAdded > 0) {\n            sushiBalances[poolId] += sushiAdded;\n        }\n    }\n\n    function countExtraSushi() external onlyManager returns (uint256 extraSushi, uint256 accountedSushi) {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra sushi when no pools exist\");\n\n        // Find total amount of sushi that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedSushi += sushiBalances[i + 1];\n        }\n\n        extraSushi = _selfBalance(sushi) - accountedSushi;\n        if (extraSushi > 0) {\n            sushiBalances[1] += extraSushi;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n\n    function isPoolExist(address _tokenA, address _tokenB) external view override returns (bool) {\n        (address token0, address token1) = AMMLibrary.sortTokens(_tokenA, _tokenB);\n        return pairFor(token0, token1) != address(0);\n    }\n}\n"
    },
    "contracts/interfaces/IDexTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IDexTrader {\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _recipient The address of the token out recipient\n    /// @param _amountIn The exact amount of the input to swap\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return bool Indicates whether the swap succeeded\n    function swapExactInput(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn,\n        uint256 _amountOutMin\n    ) external returns (bool);\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _amountIn The exact amount of the input to swap\n    /// @return uint256 The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) external returns (uint256);\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _amountIn The exact amount of the input to swap\n    /// @return uint256 The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) external returns (uint256);\n\n    /// @param _tokenA The address of the first  token from the token pair\n    /// @param _tokenB The address of the second token from the token pair\n    /// return true if pool exist else overwise\n    function isPoolExist(address _tokenA, address _tokenB) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ISushiSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "contracts/interfaces/ISushiSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function WETH() external pure returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/ISushiSwapPair.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiSwapPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/ISushiSwapMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface ISushiSwapMasterChef {\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    }\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    function poolInfo(uint256 input) external returns (PoolInfo memory);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\n}\n"
    },
    "contracts/interfaces/IOlympusTokenMigrator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IOlympusTokenMigrator {\n    enum TYPE {\n        UNSTAKED,\n        STAKED,\n        WRAPPED\n    }\n\n    // migrate all olympus tokens held\n    function migrateAll(TYPE _to) external;\n}\n"
    },
    "contracts/libraries/AMMLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/IERC20.sol\";\n\nlibrary AMMLibrary {\n    function getDeployAmounts(\n        uint256 balanceA,\n        uint256 balanceB,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\n        if (reserveA > reserveB) {\n            uint256 k = (reserveA * 1000) / reserveB;\n            uint256 balanceBA = (balanceB * k) / 1000;\n\n            if (balanceA < balanceBA) {\n                amountA = balanceA;\n                amountB = (balanceA * 1000) / k;\n            } else if (balanceBA < balanceA) {\n                amountA = (balanceB * k) / 1000;\n                amountB = balanceB;\n            } else {\n                amountA = balanceA;\n                amountB = balanceB;\n            }\n        } else if (reserveA < reserveB) {\n            uint256 k = (reserveB * 1000) / reserveA;\n            uint256 balanceAB = (balanceA * k) / 1000;\n\n            if (balanceB < balanceAB) {\n                amountA = (balanceB * 1000) / k;\n                amountB = balanceB;\n            } else if (balanceAB < balanceB) {\n                amountA = balanceA;\n                amountB = (balanceA * k) / 1000;\n            } else {\n                amountA = balanceA;\n                amountB = balanceB;\n            }\n        }\n    }\n\n    function getExcessTokenAmounts(\n        IAMMIntegration.Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (address swapToken, uint256 excessAmountToSwap) {\n        if (reserveA > reserveB) {\n            uint256 k = (reserveA * 1000) / reserveB;\n            uint256 balanceBA = (balanceB * k) / 1000;\n\n            if (balanceA < balanceBA) {\n                // excess tokenB\n                excessAmountToSwap = (balanceB - ((balanceA * 1000) / k)) / 2;\n                swapToken = pool.tokenB;\n            } else if (balanceBA < balanceA) {\n                // excess tokenA\n                excessAmountToSwap = (balanceA - balanceBA) / 2;\n                swapToken = pool.tokenA;\n            }\n        } else if (reserveA < reserveB) {\n            uint256 k = (reserveB * 1000) / reserveA;\n            uint256 balanceAB = (balanceA * k) / 1000;\n\n            if (balanceAB < balanceB) {\n                // excess tokenB\n                excessAmountToSwap = (balanceB - balanceAB) / 2;\n                swapToken = pool.tokenB;\n            } else if (balanceB < balanceAB) {\n                // excess tokenA\n                excessAmountToSwap = (balanceA - ((balanceB * 1000) / k)) / 2;\n                swapToken = pool.tokenA;\n            }\n        }\n    }\n\n    function getAmountOfTokensInPool(\n        uint256 lpAmount,\n        uint256 totalSupply,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\n        uint256 sharePercent = (lpAmount * 10000000000) / totalSupply;\n        amountA = (balanceA * sharePercent) / 10000000000;\n        amountB = (balanceB * sharePercent) / 10000000000;\n    }\n\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"Identical token addresses\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"Zero address\");\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"amountIn must be greater than zero\");\n        require(reserveIn > 0 && reserveOut > 0, \"No liquidity in pool reserves\");\n        uint256 amountInWithFee = amountIn * (997);\n        uint256 numerator = amountInWithFee * (reserveOut);\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function getRebalanceAmounts(\n        address swapToken,\n        IAMMIntegration.Pool memory pool,\n        uint256 excessAmountToSwap,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) internal pure returns (uint256 swapAmount, address targetToken) {\n        if (swapToken == pool.tokenA) {\n            targetToken = pool.tokenB;\n            swapAmount = excessAmountToSwap < maxSellTokenA ? excessAmountToSwap : maxSellTokenA;\n        } else {\n            targetToken = pool.tokenA;\n            swapAmount = excessAmountToSwap < maxSellTokenB ? excessAmountToSwap : maxSellTokenB;\n        }\n    }\n\n    function checkPriceCeiling(\n        address pairAddress,\n        uint256 reserveA,\n        uint256 reserveB,\n        uint256 ratioX1000\n    ) internal pure {\n        require(pairAddress != address(0), \"TraderJoeIntegration:BadPair\");\n\n        uint256 currentRatio;\n\n        if (reserveA < reserveB) {\n            currentRatio = (reserveB * 1000) / reserveA;\n        } else if (reserveB < reserveA) {\n            currentRatio = (reserveA * 1000) / reserveB;\n        } else {\n            currentRatio = 1000;\n        }\n\n        // limit to 1% off\n        if (currentRatio > ratioX1000) {\n            require(((currentRatio - ratioX1000) * 100) / ratioX1000 < 1, \"CeilingLimitReached\");\n        } else if (ratioX1000 > currentRatio) {\n            require(((ratioX1000 - currentRatio) * 100) / ratioX1000 < 1, \"CeilingLimitReached\");\n        }\n    }\n\n    function getLiquidityToWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint256 availableLiquidity,\n        uint256 reserve0,\n        uint256 reserve1,\n        uint256 totalSupply,\n        IAMMIntegration.Pool memory pool\n    ) internal pure returns (uint256 liquidityToWithdraw) {\n        uint256 tokensPerLP;\n\n        if (tokenAddress == pool.tokenA) {\n            tokensPerLP = totalSupply == 0 ? 0 : (reserve0 * 1e18) / totalSupply;\n        } else {\n            tokensPerLP = totalSupply == 0 ? 0 : (reserve1 * 1e18) / totalSupply;\n        }\n\n        if (tokensPerLP == 0) {\n            return 0;\n        }\n\n        liquidityToWithdraw = ((amount / 2) * 1e18) / tokensPerLP;\n\n        if (liquidityToWithdraw > availableLiquidity) {\n            liquidityToWithdraw = availableLiquidity;\n        }\n    }\n}\n"
    },
    "contracts/yield-integrations/SushiSwapIntegrationV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiRewarder.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISushiSwapMasterChefV2.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to SushiSwap\ncontract SushiSwapIntegrationV2 is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address sushi;\n    address wethAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // Token price ceilings to add some protection against front-runners\n    // pairAddress => ratio * 1000\n    // This is deprecated but deployed so we cannot remove it!\n    mapping(address => uint256) public priceCeilings;\n\n    // yield amounts in weth. Harvested by integration, not yet by YieldManager\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // total harvested yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // received rewards (non sushi, non weth)\n    mapping(uint32 => mapping(address => uint256)) private rewardBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the Sushi swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address sushi_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(sushi_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        sushi = sushi_;\n        wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    // third param is uniswap positionID, not used by sushiswap\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) == 0) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) == 0) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(\n            ISushiSwapMasterChefV2(masterChef).lpToken(masterChefPoolId) == pairAddress,\n            \"Incorrect MasterChef's poolId was provided\"\n        );\n\n        stakings[poolId] = masterChefPoolId;\n\n        // let masterChefV2 pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) < type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address token,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][token] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return token The address of the token to get the balance of\n    function getBalance(uint32 poolId, address token) public view returns (uint256) {\n        return balances[poolId][token];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        // SushiRewarder often sends tokens with staking/unstaking LP tokens\n        uint256 startingBalanceA = _selfBalance(pool.tokenA);\n        uint256 startingBalanceB = _selfBalance(pool.tokenB);\n\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            ISushiSwapMasterChefV2(masterChef).deposit(stakings[poolId], balance, address(this));\n        }\n\n        // Account any received rewards\n        _receivedRewards(poolId, pool.tokenA, startingBalanceA);\n        _receivedRewards(poolId, pool.tokenB, startingBalanceB);\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint256 poolYield = yieldBalances[poolIds[i]];\n            if (poolYield > 0) {\n                yieldAmount += poolYield;\n                harvestedYield[poolIds[i]] += poolYield;\n                // yield balance will be shipped to YieldManager\n                yieldBalances[poolIds[i]] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for all pools positions\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 sushiRatioX1000, // SUSHI-WETH\n        uint256 tokenRatioX1000, // TOKEN-WETH\n        bool convertToWeth\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        // check ratio ceilings\n        if (convertToWeth) {\n            checkPriceCeiling(sushi, wethAddress, sushiRatioX1000);\n        }\n\n        // check balances before harvesting\n        uint256 tokenABalanceBefore = _selfBalance(pool.tokenA);\n        uint256 tokenBBalanceBefore = _selfBalance(pool.tokenB);\n\n        // harvest\n        ISushiSwapMasterChefV2(masterChef).harvest(stakings[poolId], address(this));\n\n        uint256 tokenADiff = _selfBalance(pool.tokenA) + rewardBalances[poolId][pool.tokenA] - tokenABalanceBefore;\n        uint256 tokenBDiff = _selfBalance(pool.tokenB) + rewardBalances[poolId][pool.tokenB] - tokenBBalanceBefore;\n\n        // convert any rewards received EXCEPT BIOS (and WETH)\n        uint256 yieldAmount;\n        if (tokenADiff > 0) {\n            if (address(pool.tokenA) == address(wethAddress)) {\n                // WETH is already yield\n                yieldAmount += tokenADiff;\n            } else if (convertToWeth) {\n                // Liquidate into yield\n                checkPriceCeiling(pool.tokenA, wethAddress, tokenRatioX1000);\n                uint256[] memory amounts = swapExactInput(pool.tokenA, wethAddress, address(this), tokenADiff);\n                yieldAmount += amounts[1];\n                // reward tokens have been liquidated\n                rewardBalances[poolId][pool.tokenA] = 0;\n            } else {\n                // add it back to the pools balance\n                balances[poolId][pool.tokenA] += tokenADiff;\n            }\n        }\n        if (tokenBDiff > 0) {\n            if (address(pool.tokenB) == address(wethAddress)) {\n                yieldAmount += tokenBDiff;\n            } else if (convertToWeth) {\n                // Liquidate into yield\n                checkPriceCeiling(pool.tokenB, wethAddress, tokenRatioX1000);\n                uint256[] memory amounts = swapExactInput(pool.tokenB, wethAddress, address(this), tokenBDiff);\n                yieldAmount += amounts[1];\n                // reward tokens have been liquidated\n                rewardBalances[poolId][pool.tokenB] = 0;\n            } else {\n                balances[poolId][pool.tokenB] += tokenBDiff;\n            }\n        }\n        // check and convert any sushi\n        yieldAmount += _liquidateSushi();\n\n        if (yieldAmount > 0) {\n            yieldBalances[poolId] += yieldAmount;\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0, true);\n        }\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            ISushiSwapMasterChefV2(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        uint256 sharePercent = (lpAmount * 10000000000) / IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply();\n\n        amountOfTokenAInPool =\n            (IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)) * sharePercent) /\n            10000000000;\n        amountOfTokenBInPool =\n            (IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB)) * sharePercent) /\n            10000000000;\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n        }\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISushiSwapMasterChefV2(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // rewards are sent back with LP is unstaked\n        uint256 beforeA = _selfBalance(pool.tokenA);\n        uint256 beforeB = _selfBalance(pool.tokenB);\n\n        ISushiSwapMasterChefV2(masterChef).withdraw(stakings[poolId], liquidityToWithdraw, address(this));\n\n        _receivedRewards(poolId, pool.tokenA, beforeA);\n        _receivedRewards(poolId, pool.tokenB, beforeB);\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        if (tokenAddress == pool.tokenA) {\n            uint256 amountWithdrawn = amountTokenA + _liquidateToken(pool.tokenB, amountTokenB, pool.tokenA);\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountWithdrawn\n                );\n            } else {\n                balances[poolId][pool.tokenA] += amountWithdrawn;\n            }\n            emit WithdrawnFromPool(poolId, amountWithdrawn);\n        } else if (tokenAddress == pool.tokenB) {\n            uint256 amountWithdrawn = amountTokenB + _liquidateToken(pool.tokenA, amountTokenA, pool.tokenB);\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountWithdrawn\n                );\n            } else {\n                balances[poolId][pool.tokenB] += amountWithdrawn;\n            }\n            emit WithdrawnFromPool(poolId, amountWithdrawn);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) internal returns (uint256[] memory) {\n        uint256 amountOutMin = getAmountOutMinimum(tokenIn, tokenOut, amountIn);\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n\n    /// @return pair The address of the Sushi pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SUSHI rewards\n    /// @return tokens Returns the addresses of the yield tokens\n    /// @return amounts Returns the amounts of the yield tokens\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[3] memory tokens, uint256[3] memory amounts)\n    {\n        // yield is sushi in contract for pool + pending sushi in master chef + rewards tokens\n        Pool memory pool = getPool(poolId);\n        if (pool.tokenA != address(0)) {\n            // Check sushi\n            tokens[0] = sushi;\n            amounts[0] = ISushiSwapMasterChefV2(masterChef).pendingSushi(stakings[poolId], address(this));\n\n            // Check WETH\n            tokens[1] = wethAddress;\n            amounts[1] = _getYieldBalance(poolId);\n\n            if (pool.tokenA != wethAddress) {\n                tokens[2] = pool.tokenA;\n                amounts[2] = _getPendingRewards(poolId) + rewardBalances[poolId][pool.tokenA];\n            } else {\n                tokens[2] = pool.tokenB;\n                amounts[2] = _getPendingRewards(poolId) + rewardBalances[poolId][pool.tokenB];\n            }\n        }\n    }\n\n    function _getPendingRewards(uint32 poolId) internal view returns (uint256) {\n        uint256 sushiPoolId = stakings[poolId];\n        return\n            ISushiRewarder(ISushiSwapMasterChefV2(masterChef).rewarder(sushiPoolId)).pendingToken(\n                sushiPoolId,\n                address(this)\n            );\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getRewardTokenAmounts(uint32 poolId) external view returns (uint256[] memory, address[] memory) {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool does not exist\");\n\n        uint256[] memory amounts = new uint256[](2);\n        address[] memory tokens = new address[](2);\n\n        tokens[0] = pool.tokenA;\n        amounts[0] = (pool.tokenA == wethAddress) ? 0 : rewardBalances[poolId][pool.tokenA];\n\n        tokens[1] = pool.tokenB;\n        amounts[1] = (pool.tokenB == wethAddress) ? 0 : rewardBalances[poolId][pool.tokenB];\n\n        return (amounts, tokens);\n    }\n\n    function _liquidateSushi() internal returns (uint256 wethAmount) {\n        uint256 sushiAmount = _selfBalance(sushi);\n\n        if (sushiAmount > 0) {\n            uint256[] memory amounts = swapExactInput(sushi, wethAddress, address(this), sushiAmount);\n            wethAmount = amounts[1];\n        }\n    }\n\n    function _liquidateToken(\n        address tokenIn,\n        uint256 tokenInAmount,\n        address tokenOut\n    ) internal returns (uint256) {\n        uint256[] memory amountsOfTokenReceived = swapExactInput(tokenIn, tokenOut, address(this), tokenInAmount);\n        return amountsOfTokenReceived[1];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() public view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param maxSellTokenA max amount of tokenA to sell\n    /// @param maxSellTokenB max amount of tokenB to sell\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\n\n        // swap tokens\n        swapExactInput(swapToken, targetToken, address(this), swapAmount);\n\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        // fetch reserve values from sushi\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function _receivedRewards(\n        uint32 poolId,\n        address token,\n        uint256 initialAmount\n    ) internal returns (uint256 receivedAmount) {\n        receivedAmount = _selfBalance(token) - initialAmount;\n        if (receivedAmount > 0) {\n            rewardBalances[poolId][token] += receivedAmount;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n\n    /// @dev only call without max for pools that have an exclusive (non-weth) token :)\n    /// @param poolId The amm pool ID of the pool to fix\n    /// @param max The maximum amount of rewards to account, or 0 for all\n    function countExtraRewards(uint32 poolId, uint256 max) external onlyManager returns (uint256 rewards) {\n        Pool memory pool = getPool(poolId);\n        address token = (address(pool.tokenA) == wethAddress) ? pool.tokenB : pool.tokenA;\n\n        uint256 missing = _selfBalance(token) - getBalance(poolId, token);\n\n        // max = 0 means use the missing amount\n        rewards = max > 0 && max < missing ? max : missing;\n\n        if (rewards > 0) {\n            rewardBalances[poolId][token] = rewards;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISushiRewarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface ISushiRewarder {\n    function pendingToken(uint256 pid, address user) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISushiSwapMasterChefV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface ISushiSwapMasterChefV2 {\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n    }\n\n    /// @notice Info of each MCV2 pool.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    /// Also known as the amount of SUSHI to distribute per block.\n    struct PoolInfo {\n        uint128 accSushiPerShare;\n        uint64 lastRewardBlock;\n        uint64 allocPoint;\n    }\n\n    function deposit(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) external;\n\n    function updateBalance(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) external;\n\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n\n    function withdraw(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) external;\n\n    function harvest(uint256 pid, address to) external;\n\n    function userInfo(uint256 pid, address user) external view returns (UserInfo memory);\n\n    function lpToken(uint256 input) external view returns (address);\n\n    function rewarder(uint256 input) external view returns (address);\n}\n"
    },
    "contracts/yield-integrations/SushiSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISushiSwapMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IOlympusTokenMigrator.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to SushiSwap\ncontract SushiSwapIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address sushi;\n    address wethAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // Token price ceilings to add some protection against front-runners\n    // pairAddress => ratio * 1000\n    // DEPRECATED but this var has already been deployed and cannot be removed\n    mapping(address => uint256) public priceCeilings;\n\n    // yield amounts in weth. Harvested by integration, not yet by YieldManager\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // sushi allocated per pool\n    mapping(uint32 => uint256) private sushiBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the Sushi swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address sushi_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(sushi_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        sushi = sushi_;\n        wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    // third param positionID is unused for sushi\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyOwner {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        // Pool memory pool = getPool(poolId);\n        // require(pool.tokenA != address(0), \"Pool doesn't exist\");\n        // if (overwrite != true) {\n        //     require(stakings[poolId] == 0, \"Staking already configured\");\n        // }\n        // ISushiSwapMasterChef.PoolInfo memory poolInfo = ISushiSwapMasterChef(masterChef).poolInfo(masterChefPoolId);\n        // address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n        // require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n        // stakings[poolId] = masterChefPoolId;\n        // // let master chef pull tokens\n        // if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) < type(uint256).max) {\n        //     IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n        //     IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        // }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        // Pool memory pool = getPool(poolId);\n        // require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n        // uint256 balanceA = getBalance(poolId, pool.tokenA);\n        // uint256 balanceB = getBalance(poolId, pool.tokenB);\n        // if (balanceA == 0 || balanceB == 0) {\n        //     return;\n        // } else {\n        //     (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n        //     (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n        //     (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n        //         pool.tokenA,\n        //         pool.tokenB,\n        //         amountA,\n        //         amountB,\n        //         0,\n        //         0,\n        //         address(this),\n        //         block.timestamp\n        //     );\n        //     balances[poolId][pool.tokenA] -= amountA;\n        //     balances[poolId][pool.tokenB] -= amountB;\n        //     emit LPTokensAcquired(liquidityAcquired);\n        //     emit DepositToPool(poolId, liquidityAcquired);\n        // }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            // MCV1 sends sushi when staking\n            uint256 sushiBefore = _selfBalance(sushi);\n\n            ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], balance);\n\n            _receivedSushi(poolId, sushiBefore);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint32 i; i < poolCount; ++i) {\n            uint256 poolYield = yieldBalances[poolIds[i]];\n            if (poolYield > 0) {\n                yieldAmount += poolYield;\n                harvestedYield[poolIds[i]] += poolYield;\n                yieldBalances[poolIds[i]] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 sushiRatioX1000, // price ratio for SUSHI!\n        uint256, // unused rewards ratio\n        bool // unused conversion flag\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        uint256 sushiBefore = _selfBalance(sushi);\n        ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], 0);\n        _receivedSushi(poolId, sushiBefore);\n\n        // check and convert any sushi\n        uint256 sushiBalance = sushiBalances[poolId];\n\n        if (sushiBalance > 0) {\n            checkPriceCeiling(sushi, wethAddress, sushiRatioX1000);\n            uint256[] memory amounts = swapExactInput(\n                sushi,\n                wethAddress,\n                address(this),\n                sushiBalance,\n                getAmountOutMinimum(sushi, wethAddress, sushiBalance)\n            );\n\n            sushiBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0, true);\n        }\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) public onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            ISushiSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISushiSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // MCV1 sends sushi when unstaking\n        uint256 sushiBefore = _selfBalance(sushi);\n\n        ISushiSwapMasterChef(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        // Account for sushi\n        _receivedSushi(poolId, sushiBefore);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        if (tokenAddress == pool.tokenA) {\n            uint256[] memory amountsOfTokenReceived = swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            uint256[] memory amountsOfTokenReceived = swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        require(amountIn > 0, \"amountIn must be greater than zero\");\n\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the Sushi pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SUSHI rewards\n    /// @param poolId  the masterchef pool to retrieve yield for\n    /// @return tokens Token addresses of pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId) public view returns (address[1] memory tokens, uint256[1] memory amounts) {\n        // pending yield is pending in Master Chef plus in sushiBalances\n        tokens[0] = sushi;\n        amounts[0] =\n            ISushiSwapMasterChef(masterChef).pendingSushi(stakings[poolId], address(this)) +\n            sushiBalances[poolId];\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = _selfBalance(targetToken);\n\n        // swap tokens\n        swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = _selfBalance(targetToken) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"SushiSwapIntegration: no balance\");\n        // fetch reserve values from sushi\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getSushiBalances(uint32[] calldata pids) external view returns (uint256[] memory sushiAmounts) {\n        sushiAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            sushiAmounts[i] = sushiBalances[pids[i]];\n        }\n    }\n\n    function _receivedSushi(uint32 poolId, uint256 sushiBefore) internal returns (uint256 sushiAdded) {\n        sushiAdded = _selfBalance(sushi) - sushiBefore;\n        if (sushiAdded > 0) {\n            sushiBalances[poolId] += sushiAdded;\n        }\n    }\n\n    function countExtraSushi() external onlyManager returns (uint256 extraSushi, uint256 accountedSushi) {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra sushi when no pools exist\");\n\n        // Find total amount of sushi that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedSushi += sushiBalances[i + 1];\n        }\n\n        extraSushi = _selfBalance(sushi) - accountedSushi;\n        if (extraSushi > 0) {\n            sushiBalances[1] += extraSushi;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n\n    function migrateOhm(\n        address _OHMv1,\n        address _gOHM,\n        address _migrator,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) external onlyManager {\n        uint256 sushiBefore = _selfBalance(sushi);\n        ISushiSwapMasterChef(masterChef).deposit(stakings[1], 0);\n        _receivedSushi(1, sushiBefore);\n\n        // Unstake lp tokens\n        ISushiSwapMasterChef.UserInfo memory userInfo = ISushiSwapMasterChef(masterChef).userInfo(\n            stakings[1],\n            address(this)\n        );\n\n        Pool memory pool = pools[1];\n\n        ISushiSwapMasterChef(masterChef).withdraw(stakings[1], userInfo.amount);\n\n        address pair = pairFor(pool.tokenA, pool.tokenB);\n        uint256 availableBalance = ISushiSwapPair(pair).balanceOf(address(this));\n\n        // Withdraw liquidity\n        IERC20MetadataUpgradeable(pair).safeApprove(swapRouterAddress, type(uint256).max);\n        (uint256 amountA, uint256 amountB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            availableBalance,\n            amountAMin,\n            amountBMin,\n            address(this),\n            block.timestamp\n        );\n\n        balances[1][pool.tokenA] = amountA;\n        balances[1][pool.tokenB] = amountB;\n\n        // Approve and migrate OHM\n        IERC20MetadataUpgradeable(_OHMv1).safeApprove(_migrator, type(uint256).max);\n\n        IOlympusTokenMigrator(_migrator).migrateAll(IOlympusTokenMigrator.TYPE.WRAPPED);\n\n        // Store liquid amounts of gOHM in pool for later withdrawal\n        balances[1][_gOHM] = IERC20MetadataUpgradeable(_gOHM).balanceOf(address(this));\n    }\n\n    function transferMigratedOhm(\n        address _destination,\n        address _gOHM,\n        bool convertToWeth,\n        uint256 amountOutMin\n    ) external onlyManager {\n        if (convertToWeth) {\n            // Sell it on sushiswap using amountOutMin\n            address[] memory path = new address[](2);\n            path[0] = _gOHM;\n            path[1] = wethAddress;\n            IERC20MetadataUpgradeable(_gOHM).approve(swapRouterAddress, type(uint256).max);\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                balances[1][_gOHM],\n                amountOutMin,\n                path,\n                _destination,\n                block.timestamp\n            );\n        } else {\n            IERC20MetadataUpgradeable(_gOHM).transfer(_destination, balances[1][_gOHM]);\n        }\n        IERC20MetadataUpgradeable(wethAddress).transfer(_destination, balances[1][wethAddress]);\n        Pool memory pool = pools[1];\n        delete balances[1][pool.tokenA];\n        delete balances[1][pool.tokenB];\n        delete balances[1][_gOHM];\n    }\n}\n"
    },
    "contracts/yield-integrations/PolygonQuickSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IDragonLair.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/IStakingRewards.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to QuickSwap in Polygon\n/// Stakes against https://github.com/QuickSwap/quickswap-core/blob/master/contracts/staking/StakingRewards.sol\n/// The StakingRewards only send back rewards when explicitly harvested\ncontract PolygonQuickSwapIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private constant DQUICK_ADDRESS = 0xf28164A485B0B2C90639E47b0f377b4a438a16B1;\n    address private constant QUICK_ADDRESS = 0x831753DD7087CaC61aB5644b308642cc1c33Dc13;\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address wnativeAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // PoolId => StakingRewards address\n    mapping(uint256 => IStakingRewards) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // yield amounts\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // total harvested yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // reward allocated per pool\n    mapping(uint32 => uint256) private rewardBalances;\n\n    // the reward token of a pool\n    mapping(uint32 => address) private rewardToken;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the QuickSwap factory contract\n    /// @param swapRouterAddress_ The address of the Quick swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        slippageNumerator = slippageNumerator_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256 // unused\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, address stakingRewards) external onlyManager {\n        _configureStaking(poolId, stakingRewards, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, address stakingRewards) external onlyManager {\n        _configureStaking(poolId, stakingRewards, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        address stakingRewards_,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(address(stakings[poolId]) == address(0), \"Staking already configured\");\n        }\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        IStakingRewards stakingRewards = IStakingRewards(stakingRewards_);\n        require(stakingRewards.stakingToken() == pairAddress, \"Incorrect staking address\");\n\n        stakings[poolId] = stakingRewards;\n        rewardToken[poolId] = stakingRewards.rewardsToken();\n\n        // let staking contract pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), stakingRewards_) != type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(stakingRewards_, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(stakingRewards_, type(uint256).max);\n        }\n    }\n\n    function updateRewardToken(uint32[] memory pids) external onlyManager {\n        for (uint256 i; i < pids.length; ++i) {\n            address token = stakings[pids[i]].rewardsToken();\n            require(token != address(0), \"Invalid rewards token\");\n\n            rewardToken[pids[i]] = token;\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    // @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    // @param token The address of the deposited token\n    /// @param amount The amount of the token being decreased\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        stakings[poolId].stake(balance);\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint32 poolId = poolIds[i];\n            uint256 poolYield = yieldBalances[poolId];\n            if (poolYield > 0) {\n                yieldAmount += poolYield;\n                harvestedYield[poolId] += poolYield;\n\n                // yield balance will be shipped to YieldManager\n                yieldBalances[poolId] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    // TODO make this work :)\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 rewardRatioX1000, // price ratio for rewards token! if dquick, use quick instead\n        uint256, // unused ratio\n        bool // unused\n    ) external onlyManager {\n        address token = rewardToken[poolId];\n\n        // check initial balances\n        uint256 amountBefore = _selfBalance(token);\n\n        // harvest\n        stakings[poolId].getReward();\n\n        // check and convert\n        uint256 rewardAmount = _selfBalance(token) - amountBefore;\n\n        if (rewardAmount > 0) {\n            address actualToken;\n            uint256 actualAmount;\n            if (token == DQUICK_ADDRESS) {\n                // We got DQUICK, so unstake it and swap the received QUICK\n                actualToken = QUICK_ADDRESS;\n                actualAmount = _unstake(rewardAmount);\n            } else {\n                // we got a regular token, so hopefully we can just liquidate it\n                actualToken = token;\n                actualAmount = rewardAmount;\n            }\n\n            checkPriceCeiling(actualToken, wnativeAddress, rewardRatioX1000);\n            uint256[] memory amounts = _swapExactInput(\n                actualToken,\n                wnativeAddress,\n                address(this),\n                actualAmount,\n                getAmountOutMinimum(actualToken, wnativeAddress, actualAmount) / 20\n            );\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    function _unstake(uint256 dQuickAmount) internal returns (uint256 quickAmount) {\n        if (dQuickAmount > 0) {\n            uint256 amountBefore = _selfBalance(QUICK_ADDRESS);\n\n            // unstake the DQuick\n            IDragonLair(DQUICK_ADDRESS).leave(dQuickAmount);\n\n            quickAmount = _selfBalance(QUICK_ADDRESS) - amountBefore;\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) public override onlyController {\n        require(amount <= getBalance(poolId, tokenAddress), \"integration: balance exceeded\");\n\n        balances[poolId][tokenAddress] -= amount;\n\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) public onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            stakings[poolId].balanceOf(address(this));\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            stakings[poolId].balanceOf(address(this)),\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        stakings[poolId].withdraw(liquidityToWithdraw);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    // external for swap manager\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external onlyController returns (uint256[] memory) {\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n\n    /// @return pair The address of the Sushi pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SUSHI rewards\n    /// @param poolId The integration pool to check for pending SUSHI rewards\n    /// @return tokens Token addresses of of the pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[2] memory tokens, uint256[2] memory amounts)\n    {\n        return (\n            [stakings[poolId].rewardsToken(), wnativeAddress],\n            [stakings[poolId].earned(address(this)), yieldBalances[poolId]]\n        );\n    }\n\n    function getStakingAddress(uint32 poolId) external view returns (address) {\n        return address(stakings[poolId]);\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() public view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\n\n        // swap tokens\n        _swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"QuickSwapIntegration: no balance\");\n        // fetch reserve values from quickswap\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory rewardAmounts) {\n        rewardAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            rewardAmounts[i] = rewardBalances[pids[i]];\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IDragonLair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface IDragonLair {\n    function enter(uint256 _quickAmount) external;\n\n    function leave(uint256 _dQuickAmount) external;\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.8.4;\n\ninterface IStakingRewards {\n    // Getters\n    function stakingToken() external view returns (address);\n\n    function rewardsToken() external view returns (address);\n\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n}\n"
    },
    "contracts/interfaces/IPolygonQuickSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.8.4;\n\nimport \"./ISushiSwapMasterChef.sol\";\nimport \"./IIntegration.sol\";\nimport \"./IStakingRewards.sol\";\n\ninterface IPolygonQuickSwapIntegration is IIntegration {\n    struct QuickLiquidityPosition {\n        IStakingRewards stakingRewards;\n        address token0;\n        address token1;\n        uint256 weight;\n        bool configured;\n    }\n\n    function configureLiquidityPosition(\n        address pairAddress,\n        address stakingRewards,\n        uint256 weight\n    ) external;\n\n    function getPairInfo(address pair) external view returns (QuickLiquidityPosition memory);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) external returns (uint256[] memory);\n\n    function getTokenToAdd(address token0, address token1) external view returns (address);\n\n    function checkYield(address stakingRewards) external view returns (uint256);\n}\n"
    },
    "contracts/yield-integrations/AaveIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IAaveLendingPool.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\n\n/// @notice Integrates 0x Nodes to the Aave lending pool\n/// @notice The Kernel contract should be added as the controller\ncontract AaveIntegration is Initializable, ModuleMapConsumer, Controlled, IIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address private lendingPoolAddress;\n    mapping(address => uint256) private balances;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param lendingPoolAddress_ The address of the Aave lending pool contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address lendingPoolAddress_\n    ) external initializer {\n        require(lendingPoolAddress_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        lendingPoolAddress = lendingPoolAddress_;\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(address tokenAddress, uint256 amount) external override onlyController {\n        balances[tokenAddress] += amount;\n        emit Deposit(tokenAddress, amount);\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    function retrievePrincipal(address tokenAddress) external onlyManager {\n        address aTokenAddress = getATokenAddress(tokenAddress);\n        uint256 amount = IERC20MetadataUpgradeable(aTokenAddress).balanceOf(address(this));\n        _withdraw(tokenAddress, amount);\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(address tokenAddress, uint256 amount) public override onlyController {\n        // Bypass for now...\n        // require(\n        //     amount <= balances[tokenAddress],\n        //     \"AaveIntegration::withdraw: Withdraw amount exceeds balance\"\n        // );\n        _withdraw(tokenAddress, amount);\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function _withdraw(address tokenAddress, uint256 amount) private {\n        if (amount > IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this))) {\n            try IAaveLendingPool(lendingPoolAddress).withdraw(tokenAddress, amount, address(this)) {} catch {}\n        }\n\n        if (amount > IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this))) {\n            amount = IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this));\n        }\n\n        // balances are too low so need to allow the tokens to leave\n        if (balances[tokenAddress] != 0) {\n            if (amount > balances[tokenAddress]) {\n                balances[tokenAddress] = 0;\n            } else {\n                balances[tokenAddress] -= amount;\n            }\n        }\n\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n        emit Withdraw(tokenAddress, amount);\n    }\n\n    /// @notice Deploys all available tokens to Aave\n    function deploy() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\n            IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(integrationMap.getTokenAddress(tokenId));\n            uint256 tokenAmount = token.balanceOf(address(this));\n\n            if (token.allowance(address(this), lendingPoolAddress) == 0) {\n                token.safeApprove(lendingPoolAddress, type(uint256).max);\n            }\n\n            if (tokenAmount > 0) {\n                try\n                    IAaveLendingPool(lendingPoolAddress).deposit(address(token), tokenAmount, address(this), 0)\n                {} catch {}\n                emit Deploy(address(token), tokenAmount);\n            }\n        }\n    }\n\n    /// @notice Harvests all token yield from the Aave lending pool\n    function harvestYield() external override onlyController {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        uint256 tokenCount = integrationMap.getTokenAddressesLength();\n\n        for (uint256 tokenId = 0; tokenId < tokenCount; tokenId++) {\n            address tokenAddress = integrationMap.getTokenAddress(tokenId);\n            address aTokenAddress = getATokenAddress(tokenAddress);\n            if (aTokenAddress != address(0)) {\n                uint256 aTokenBalance = IERC20MetadataUpgradeable(aTokenAddress).balanceOf(address(this));\n                if (aTokenBalance > balances[tokenAddress]) {\n                    uint256 harvestAmount = aTokenBalance - balances[tokenAddress];\n                    try\n                        IAaveLendingPool(lendingPoolAddress).withdraw(\n                            tokenAddress,\n                            harvestAmount,\n                            address(moduleMap.getModuleAddress(Modules.YieldManager))\n                        )\n                    {} catch {}\n                    emit HarvestYield(tokenAddress, harvestAmount);\n                }\n            }\n        }\n    }\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @param tokenAddress The address of the deployed token\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address tokenAddress) external view override returns (uint256) {\n        return balances[tokenAddress];\n    }\n\n    /// @param underlyingTokenAddress The address of the underlying token\n    /// @return The address of the corresponding aToken\n    function getATokenAddress(address underlyingTokenAddress) public view returns (address) {\n        IAaveLendingPool.ReserveData memory reserveData = IAaveLendingPool(lendingPoolAddress).getReserveData(\n            underlyingTokenAddress\n        );\n\n        return reserveData.aTokenAddress;\n    }\n\n    /// @dev This is used to recover lost funds from the contract to the Kernel\n    /// @dev Be super careful not to transfer out the wrong tokens!\n    /// @dev We should make it a point to remove this function relatively soon\n    /// @param tokenAddress The address of the token to recover\n    function recoverTokens(address tokenAddress, uint256 amount) external onlyOwner {\n        require(tokenAddress == address(tokenAddress), \"Invalid tokenAddress\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(tokenAddress);\n        require(amount <= token.balanceOf(address(this)));\n\n        if (amount > 0) {\n            // Send tokens back to Kernel\n            token.safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n        }\n    }\n\n    /// @dev Returns total amount of pending yield for the specified token in Aave\n    /// @param token The of the token to check for available yield\n    /// @return Amount of yield available for harvest\n    function getPendingYield(address token) external view override returns (uint256) {\n        uint256 aTokenBalance = IERC20MetadataUpgradeable(getATokenAddress(token)).balanceOf(address(this));\n        if (aTokenBalance > balances[token]) return aTokenBalance - balances[token];\n        else return 0;\n    }\n}\n"
    },
    "contracts/interfaces/IAaveLendingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IAaveLendingPool {\n    struct ReserveConfigurationMap {\n        uint256 data;\n    }\n\n    struct ReserveData {\n        ReserveConfigurationMap configuration;\n        uint128 liquidityIndex;\n        uint128 variableBorrowIndex;\n        uint128 currentLiquidityRate;\n        uint128 currentVariableBorrowRate;\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        address interestRateStrategyAddress;\n        uint8 id;\n    }\n\n    /// @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n    /// @param asset The address of the underlying asset to deposit\n    /// @param amount The amount to be deposited\n    /// @param onBehalfOf The address that will receive the aTokens\n    /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /// @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n    /// @param asset The address of the underlying asset to withdraw\n    /// @param amount The underlying amount to be withdrawn\n    /// @param to Address that will receive the underlying, same as msg.sender if the user\n    /// @return The final amount withdrawn\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /// @dev Returns the state and configuration of the reserve\n    /// @param asset The address of the underlying asset of the reserve\n    /// @return The state of the reserve\n    function getReserveData(address asset) external view returns (ReserveData memory);\n}\n"
    },
    "contracts/yield-integrations/NetSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IDexTrader.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IJoeFactory.sol\";\nimport \"../interfaces/IJoeRouter.sol\";\nimport \"../interfaces/IJoePair.sol\";\nimport \"../interfaces/INetswapMasterchef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to TraderJoe in Avalanche\ncontract NetSwapIntegration is Controlled, IAMMIntegration, IDexTrader {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address rewardToken;\n    address wnativeAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // yield amounts\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // reward allocated per pool\n    mapping(uint32 => uint256) private rewardBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the TraderJoe factory contract\n    /// @param swapRouterAddress_ The address of the TraderJoe  router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address rewardToken_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(rewardToken_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        rewardToken = rewardToken_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256 // unused\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n\n        INETTFarm.PoolInfo memory poolInfo = INETTFarm(masterChef).poolInfo(masterChefPoolId);\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n\n        stakings[poolId] = masterChefPoolId;\n\n        // let master chef pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) != type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = IJoeRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            // MCV1 sends reward when staking\n            uint256 rewardBefore = _selfBalance(rewardToken);\n\n            INETTFarm(masterChef).deposit(stakings[poolId], balance);\n\n            _receivedReward(poolId, rewardBefore);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint32 poolId = poolIds[i];\n            uint256 poolYield = yieldBalances[poolId];\n            if (poolYield > 0) {\n                yieldAmount += yieldBalances[poolId];\n                harvestedYield[poolId] += poolYield;\n                yieldBalances[poolId] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 rewardRatioX1000, // price ratio for SUSHI!\n        uint256, // unused dual rewards ratio\n        bool\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        uint256 rewardBefore = _selfBalance(rewardToken);\n        INETTFarm(masterChef).deposit(stakings[poolId], 0);\n        _receivedReward(poolId, rewardBefore);\n\n        // check and convert any joe\n        // make sure all the rewards were already accounted :)\n        uint256 rewardBalance = rewardBalances[poolId];\n\n        if (rewardBalance > 0) {\n            checkPriceCeiling(rewardToken, wnativeAddress, rewardRatioX1000);\n            uint256[] memory amounts = _swapExactInput(\n                rewardToken,\n                wnativeAddress,\n                address(this),\n                rewardBalance,\n                getAmountOutMinimum(rewardToken, wnativeAddress, rewardBalance)\n            );\n\n            rewardBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        require(amount <= getBalance(poolId, tokenAddress), \"integration: balance exceeded\");\n\n        balances[poolId][tokenAddress] -= amount;\n\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            INETTFarm(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            INETTFarm(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // MCV1 sends reward when unstaking\n        uint256 rewardBefore = _selfBalance(rewardToken);\n\n        INETTFarm(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        // account for reward\n        _receivedReward(poolId, rewardBefore);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = IJoeRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            IJoeRouter(swapRouterAddress).swapExactTokensForTokens(amountIn, amountOutMin, path, recipient, deadline);\n    }\n\n    // external for swap manager\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external override onlyController returns (bool) {\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin)[1] > 0;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IJoePair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the Joe pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = IJoeFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SPIRIT rewards\n    /// @param poolId  the integration pool to retrieve yield for\n    /// @return tokens Token addresses of pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[1] memory tokens, uint256[1] memory amounts)\n    {\n        // pending yield is pending in Master Chef plus in rewardBalances\n        (uint256 pendingNETT, , , ) = INETTFarm(masterChef).pendingTokens(stakings[poolId], address(this));\n        tokens[0] = rewardToken;\n        amounts[0] = pendingNETT + rewardBalances[poolId];\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\n\n        // swap tokens\n        _swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"TraderJoeIntegration: no balance\");\n        // fetch reserve values from joe\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory rewardAmounts) {\n        rewardAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            rewardAmounts[i] = rewardBalances[pids[i]];\n        }\n    }\n\n    function _receivedReward(uint32 poolId, uint256 rewardBefore) internal returns (uint256 rewardAdded) {\n        rewardAdded = _selfBalance(rewardToken) - rewardBefore;\n        if (rewardAdded > 0) {\n            rewardBalances[poolId] += rewardAdded;\n        }\n    }\n\n    function countExtraReward(uint32 poolId, uint256 max)\n        external\n        onlyManager\n        returns (\n            uint256 addedReward,\n            uint256 accountedReward,\n            uint256 extraReward\n        )\n    {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra reward when no pools exist\");\n\n        // Find total amount of reward that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedReward += rewardBalances[i + 1];\n        }\n\n        extraReward = _selfBalance(rewardToken) - accountedReward;\n        if (extraReward > 0) {\n            addedReward = (max > 0 && max < extraReward) ? max : extraReward;\n            rewardBalances[poolId] += addedReward;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n\n    function isPoolExist(address _tokenA, address _tokenB) external view override returns (bool) {\n        (address token0, address token1) = AMMLibrary.sortTokens(_tokenA, _tokenB);\n        return pairFor(token0, token1) != address(0);\n    }\n}\n"
    },
    "contracts/interfaces/IJoeFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IJoeFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "contracts/interfaces/IJoeRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IJoeRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityAVAX(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityAVAX(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapAVAXForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactAVAXForTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function WETH() external pure returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IJoePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IJoePair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "contracts/interfaces/INetswapMasterchef.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface INETTFarm {\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of NETTs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accNETTPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accNETTPerShare` (and `lastRewardTimestamp`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        address lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. NETTs to distribute per second.\n        uint256 lastRewardTimestamp; // Last timestamp that NETTs distribution occurs.\n        uint256 accNETTPerShare; // Accumulated NETTs per share, times 1e12. See below.\n        uint256 lpSupply;\n        address rewarder;\n    }\n\n    event Add(uint256 indexed pid, uint256 allocPoint, address indexed lpToken, address indexed rewarder);\n    event Set(uint256 indexed pid, uint256 allocPoint, address indexed rewarder, bool overwrite);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accNETTPerShare);\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event SetDevAddress(address indexed oldAddress, address indexed newAddress);\n    event UpdateEmissionRate(address indexed user, uint256 _nettPerSec);\n\n    function poolInfo(uint256 pid) external returns (PoolInfo memory);\n\n    function userInfo(uint256 pid, address user) external view returns (UserInfo memory);\n\n    function poolLength() external view returns (uint256);\n\n    // View function to see pending NETTs on frontend.\n    function pendingTokens(uint256 _pid, address _user)\n        external\n        view\n        returns (\n            uint256 pendingNETT,\n            address bonusTokenAddress,\n            string memory bonusTokenSymbol,\n            uint256 pendingBonusToken\n        );\n\n    // Get bonus token info from the rewarder contract for a given pool, if it is a 2xreward farm\n    function rewarderBonusTokenInfo(uint256 _pid)\n        external\n        view\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() external;\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) external;\n\n    // Deposit LP tokens to NETTFarm for NETT allocation\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    // Withdraw LP tokens from NETTFarm.\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external;\n\n    // Update dev address by the previous dev.\n    function dev(address _devAddr) external;\n}\n"
    },
    "contracts/yield-integrations/AvalancheTraderJoeIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IJoeFactory.sol\";\nimport \"../interfaces/IJoeRouter.sol\";\nimport \"../interfaces/IJoePair.sol\";\nimport \"../interfaces/IJoeMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to TraderJoe in Avalanche\ncontract AvalancheTraderJoeIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address rewardToken;\n    address wnativeAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // yield amounts\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // reward allocated per pool\n    mapping(uint32 => uint256) private rewardBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the TraderJoe factory contract\n    /// @param swapRouterAddress_ The address of the TraderJoe  router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address rewardToken_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(rewardToken_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        rewardToken = rewardToken_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256 // unused\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) != type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n\n        IJoeMasterChef.PoolInfo memory poolInfo = IJoeMasterChef(masterChef).poolInfo(masterChefPoolId);\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n\n        stakings[poolId] = masterChefPoolId;\n\n        // let master chef pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) != type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = IJoeRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            // MCV1 sends reward when staking\n            uint256 rewardBefore = _selfBalance(rewardToken);\n\n            IJoeMasterChef(masterChef).deposit(stakings[poolId], balance);\n\n            _receivedReward(poolId, rewardBefore);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint32 poolId = poolIds[i];\n            uint256 poolYield = yieldBalances[poolId];\n            if (poolYield > 0) {\n                yieldAmount += yieldBalances[poolId];\n                harvestedYield[poolId] += poolYield;\n                yieldBalances[poolId] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 rewardRatioX1000, // price ratio for SUSHI!\n        uint256, // unused dual rewards ratio\n        bool\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        uint256 rewardBefore = _selfBalance(rewardToken);\n        IJoeMasterChef(masterChef).deposit(stakings[poolId], 0);\n        _receivedReward(poolId, rewardBefore);\n\n        // check and convert any joe\n        // make sure all the rewards were already accounted :)\n        uint256 rewardBalance = rewardBalances[poolId];\n\n        if (rewardBalance > 0) {\n            checkPriceCeiling(rewardToken, wnativeAddress, rewardRatioX1000);\n            uint256[] memory amounts = _swapExactInput(\n                rewardToken,\n                wnativeAddress,\n                address(this),\n                rewardBalance,\n                getAmountOutMinimum(rewardToken, wnativeAddress, rewardBalance)\n            );\n\n            rewardBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        require(amount <= getBalance(poolId, tokenAddress), \"integration: balance exceeded\");\n\n        balances[poolId][tokenAddress] -= amount;\n\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            IJoeMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            IJoeMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // MCV1 sends reward when unstaking\n        uint256 rewardBefore = _selfBalance(rewardToken);\n\n        IJoeMasterChef(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        // account for reward\n        _receivedReward(poolId, rewardBefore);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = IJoeRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            IJoeRouter(swapRouterAddress).swapExactTokensForTokens(amountIn, amountOutMin, path, recipient, deadline);\n    }\n\n    // external for swap manager\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external onlyController returns (uint256[] memory) {\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IJoePair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the Joe pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = IJoeFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SPIRIT rewards\n    /// @param poolId  the integration pool to retrieve yield for\n    /// @return tokens Token addresses of pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[1] memory tokens, uint256[1] memory amounts)\n    {\n        // pending yield is pending in Master Chef plus in rewardBalances\n        tokens[0] = rewardToken;\n        amounts[0] = IJoeMasterChef(masterChef).pendingTokens(stakings[poolId], address(this)) + rewardBalances[poolId];\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\n\n        // swap tokens\n        _swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"TraderJoeIntegration: no balance\");\n        // fetch reserve values from joe\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory rewardAmounts) {\n        rewardAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            rewardAmounts[i] = rewardBalances[pids[i]];\n        }\n    }\n\n    function _receivedReward(uint32 poolId, uint256 rewardBefore) internal returns (uint256 rewardAdded) {\n        rewardAdded = _selfBalance(rewardToken) - rewardBefore;\n        if (rewardAdded > 0) {\n            rewardBalances[poolId] += rewardAdded;\n        }\n    }\n\n    function countExtraReward(uint32 poolId, uint256 max)\n        external\n        onlyManager\n        returns (\n            uint256 addedReward,\n            uint256 accountedReward,\n            uint256 extraReward\n        )\n    {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra reward when no pools exist\");\n\n        // Find total amount of reward that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedReward += rewardBalances[i + 1];\n        }\n\n        extraReward = _selfBalance(rewardToken) - accountedReward;\n        if (extraReward > 0) {\n            addedReward = (max > 0 && max < extraReward) ? max : extraReward;\n            rewardBalances[poolId] += addedReward;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IJoeMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IJoeMasterChef {\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    }\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    function poolInfo(uint256 input) external view returns (PoolInfo memory);\n\n    function poolLength() external view returns (uint256 count);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function pendingTokens(uint256 _pid, address _user) external view returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\n}\n"
    },
    "contracts/yield-integrations/MaiaDaoHermesIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISwapManager.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../libraries/AMMLibrary.sol\";\nimport \"../interfaces/ISolidlyGauge.sol\";\nimport \"../interfaces/ISolidlyPairV1.sol\";\nimport \"../interfaces/ISolidlyRouterV1.sol\";\nimport \"../interfaces/ISolidlyFactoryV1.sol\";\n\ncontract MaiaDaoHermesIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    address public constant rewardToken = 0xb27BbeaACA2C00d6258C3118BAB6b5B6975161c8;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address wnativeAddress;\n    uint32 public poolIdCounter;\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    // poolId => Token => Amount currently available to deploy\n    mapping(uint32 => mapping(address => uint256)) public balances;\n    // Pool ID => Pool data\n    mapping(uint32 => Pool) public pools;\n    // Pool ID => whether it's a solidly stable pair\n    mapping(uint32 => bool) public stablePools;\n    // Pool id => yield available\n    mapping(uint32 => uint256) public yieldBalances;\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) public harvestedYield;\n    // poolId => Gauge\n    mapping(uint32 => ISolidlyGauge) private stakings;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        slippageNumerator = slippageNumerator_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    function deposit(\n        address token,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][token] += amount;\n    }\n\n    /// @param token  the token to withdraw\n    /// @param amount The amount of token in the pool to withdraw\n    /// @param poolId  the pool to withdraw from\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        require(balances[poolId][token] >= amount, \"insufficient integration balances\");\n        balances[poolId][token] -= amount;\n        IERC20MetadataUpgradeable(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n    }\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyController {\n        if (amount <= balances[poolId][token]) {\n            balances[poolId][token] -= amount;\n            IERC20MetadataUpgradeable(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n        } else {\n            _withdraw(token, amount, poolId, ratioX1000, true);\n        }\n        require(balances[poolId][token] >= amount, \"insufficient integration balances\");\n    }\n\n    function manualWithdraw(\n        address token,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager returns (uint256 amountToWithdraw) {\n        return _withdraw(token, amount, poolId, ratioX1000, false);\n    }\n\n    function _withdraw(\n        address token,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal returns (uint256 amountWithdrawn) {\n        Pool memory pool = pools[poolId];\n        bool stable = stablePools[poolId];\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, stable, ratioX1000);\n        }\n        // calculate amount of LP tokens\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB, stable);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            token,\n            amount,\n            stakings[poolId].balanceOf(address(this)),\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB, stable)).totalSupply(),\n            pool\n        );\n\n        // unstake LP tokens from gauge\n        stakings[poolId].withdraw(liquidityToWithdraw);\n\n        // remove liquidity\n        (uint256 amountTokenA, uint256 amountTokenB) = ISolidlyRouterV1(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            stable,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n\n        if (pool.tokenA == token) {\n            amountWithdrawn =\n                amountTokenA +\n                _swapViaManager(\n                    pool.tokenB,\n                    pool.tokenA,\n                    address(this),\n                    amountTokenB,\n                    ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenB, amountTokenB),\n                    stable\n                )[1];\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountWithdrawn\n                );\n            } else {\n                balances[poolId][pool.tokenA] += amountWithdrawn;\n            }\n        } else {\n            amountWithdrawn =\n                amountTokenB +\n                _swapViaManager(\n                    pool.tokenA,\n                    pool.tokenB,\n                    address(this),\n                    amountTokenA,\n                    ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenA, amountTokenA),\n                    stable\n                )[1];\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountWithdrawn\n                );\n            } else {\n                balances[poolId][pool.tokenB] += amountWithdrawn;\n            }\n        }\n\n        emit WithdrawnFromPool(poolId, amountWithdrawn);\n    }\n\n    /// @dev Deploys all the tokens for the specified pools\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = pools[poolId];\n        require(pool.tokenA != address(0), \"pool doesn't exist\");\n\n        uint256 balanceA = balances[poolId][pool.tokenA];\n        uint256 balanceB = balances[poolId][pool.tokenB];\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        }\n        bool stable = stablePools[poolId];\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB, stable);\n\n        (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n        // Hermes must always claim fees before deploying more funds\n        _harvestPoolFees(poolId, pool);\n\n        (uint256 amountAActual, uint256 amountBActual, uint256 liquidityAcquired) = ISolidlyRouterV1(swapRouterAddress)\n            .addLiquidity(pool.tokenA, pool.tokenB, stable, amountA, amountB, 0, 0, address(this), block.timestamp);\n        balances[poolId][pool.tokenA] -= amountAActual;\n        balances[poolId][pool.tokenB] -= amountBActual;\n        emit LPTokensAcquired(liquidityAcquired);\n        emit DepositToPool(poolId, liquidityAcquired);\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        stakings[poolId].depositAll(0); // 0 unless we put our NFT in here?\n    }\n\n    /// @dev Harvests token yield from the integration\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint32 i; i <= poolIdCounter; ++i) {\n            uint256 poolYield = yieldBalances[i];\n            if (poolYield > 0) {\n                yieldAmount += poolYield;\n                yieldBalances[i] = 0;\n                harvestedYield[i] += yieldAmount;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    function _harvestYieldByPool(\n        uint32 poolId,\n        bool claimFees,\n        bool claimRewards\n    ) internal {\n        Pool memory pool = pools[poolId];\n        if (pool.tokenA != address(0)) {\n            if (claimFees) {\n                _harvestPoolFees(poolId, pool);\n            }\n            if (claimRewards) {\n                _harvestGaugeRewards(poolId);\n            }\n        }\n    }\n\n    function _harvestPoolFees(uint32 poolId, Pool memory pool) internal {\n        (uint256 token0Amount, uint256 token1Amount) = ISolidlyPairV1(\n            pairFor(pool.tokenA, pool.tokenB, stablePools[poolId])\n        ).claimFees();\n        bool stable = stablePools[poolId];\n        // Swap for ETH, account to yieldBalances\n        if (pool.tokenA == wnativeAddress) {\n            yieldBalances[poolId] +=\n                token0Amount +\n                _swapViaManager(\n                    pool.tokenB,\n                    pool.tokenA,\n                    address(this),\n                    token1Amount,\n                    ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenB, token1Amount),\n                    stable\n                )[1];\n        } else if (pool.tokenB == wnativeAddress) {\n            yieldBalances[poolId] +=\n                token1Amount +\n                _swapViaManager(\n                    pool.tokenA,\n                    pool.tokenB,\n                    address(this),\n                    token0Amount,\n                    ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenA, token0Amount),\n                    stable\n                )[1];\n        } else {\n            yieldBalances[poolId] +=\n                _swapViaManager(\n                    pool.tokenA,\n                    wnativeAddress,\n                    address(this),\n                    token0Amount,\n                    ISolidlyPairV1(pairFor(pool.tokenA, wnativeAddress, false)).current(pool.tokenA, token0Amount),\n                    false\n                )[1] +\n                _swapViaManager(\n                    pool.tokenB,\n                    wnativeAddress,\n                    address(this),\n                    token1Amount,\n                    ISolidlyPairV1(pairFor(pool.tokenB, wnativeAddress, false)).current(pool.tokenB, token1Amount),\n                    false\n                )[1];\n        }\n    }\n\n    function _harvestGaugeRewards(uint32 poolId) internal {\n        // get the reward and count how much\n        address[] memory rewards = new address[](1);\n        rewards[0] = rewardToken;\n        stakings[poolId].getReward(address(this), rewards);\n        uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n\n        // liquidate the reward\n        if (rewardAmount > 0) {\n            yieldBalances[poolId] += _swapExactInput(\n                rewardToken,\n                wnativeAddress,\n                address(this),\n                rewardAmount,\n                ISolidlyPairV1(pairFor(rewardToken, wnativeAddress, false)).current(rewardToken, rewardAmount),\n                false\n            )[1];\n        }\n    }\n\n    function harvestYieldByPool(uint32 poolId) external onlyManager {\n        _harvestYieldByPool(poolId, true, true);\n    }\n\n    function harvestYieldByPools(uint32[] calldata poolIds) external onlyManager {\n        uint256 length = poolIds.length;\n        for (uint256 i; i < length; ++i) {\n            _harvestYieldByPool(poolIds[i], true, true);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = pools[poolId];\n        bool stable = stablePools[poolId];\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, stable, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = _calculateExcessTokensToSwap(\n            pool,\n            balances[poolId][pool.tokenA],\n            balances[poolId][pool.tokenB],\n            stable\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // swap tokens\n        uint256 amountReceived = _swapViaManager(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount, stable),\n            stable\n        )[1];\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external onlyManager {\n        poolIdCounter++;\n        uint32 id = poolIdCounter;\n        (address token0, address token1) = AMMLibrary.sortTokens(tokenA, tokenB);\n        stablePools[id] = stable;\n        pools[id] = Pool({tokenA: token0, tokenB: token1, positionID: 0});\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) == 0) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n        if (IERC20(tokenB).allowance(address(this), swapRouterAddress) == 0) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureAllowance() external onlyManager {\n        IERC20MetadataUpgradeable(rewardToken).safeApprove(swapRouterAddress, type(uint256).max);\n    }\n\n    function configureStaking(uint32 poolId, address gaugeAddress) external onlyManager {\n        _configureStaking(poolId, gaugeAddress, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, address gaugeAddress) external onlyManager {\n        _configureStaking(poolId, gaugeAddress, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        address gaugeAddress,\n        bool overwrite\n    ) internal {\n        Pool memory pool = pools[poolId];\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(address(stakings[poolId]) == address(0), \"Staking already configured\");\n        }\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB, stablePools[poolId]);\n\n        ISolidlyGauge gauge = ISolidlyGauge(gaugeAddress);\n        require(gauge.stake() == pairAddress, \"Incorrect gauge address\");\n\n        stakings[poolId] = gauge;\n\n        // let gauge pull tokens\n        IERC20MetadataUpgradeable pairToken = IERC20MetadataUpgradeable(pairAddress);\n        if (pairToken.allowance(address(this), gaugeAddress) <= type(uint256).max) {\n            pairToken.safeApprove(gaugeAddress, 0);\n            pairToken.safeApprove(gaugeAddress, type(uint256).max);\n        }\n    }\n\n    function _calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB,\n        bool stable\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"hermes: no balance\");\n        // fetch reserve values from hermes\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB, stable);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function getReserves(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISolidlyPairV1(pairFor(tokenA, tokenB, stable)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the pool contract\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) internal view returns (address pair) {\n        pair = ISolidlyFactoryV1(factoryAddress).getPair(tokenA, tokenB, stable);\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB, stable));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB, stable);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        bool stable\n    ) internal returns (uint256[] memory amounts) {\n        ISolidlyRouterV1.route[] memory path = new ISolidlyRouterV1.route[](1);\n        path[0] = ISolidlyRouterV1.route({from: tokenIn, to: tokenOut, stable: stable});\n        uint256 deadline = block.timestamp;\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n        return\n            ISolidlyRouterV1(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapViaManager(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256, // amountOutMin | fake params to match _swapExactInput sig\n        bool // stable\n    ) internal returns (uint256[] memory amounts) {\n        IERC20 token = IERC20(tokenOut);\n        uint256 balanceBefore = token.balanceOf(address(this));\n        address swapManagerAddress = moduleMap.getModuleAddress(Modules.SwapManager);\n        IERC20MetadataUpgradeable(tokenIn).safeTransfer(swapManagerAddress, amountIn);\n        bool success = ISwapManager(swapManagerAddress).swapExactIn(tokenIn, tokenOut, recipient, amountIn);\n        require(success, \"hermes: swap failed\");\n        amounts = new uint256[](2);\n        amounts[0] = amountIn;\n        amounts[1] = token.balanceOf(address(this)) - balanceBefore;\n        return amounts;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        bool stable\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn, stable) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        bool stable\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut, stable);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getPool(uint32 poolId) external view returns (Pool memory) {\n        return pools[poolId];\n    }\n\n    function getBalance(uint32 poolId, address token) external view returns (uint256) {\n        return balances[poolId][token];\n    }\n}\n"
    },
    "contracts/interfaces/ISolidlyGauge.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface ISolidlyGauge {\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\n\n    function getReward(address account, address[] memory tokens) external;\n\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\n    function earned(address token, address account) external view returns (uint256);\n\n    function depositAll(uint256 tokenId) external;\n\n    function deposit(uint256 amount, uint256 tokenId) external;\n\n    function withdrawAll() external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawToken(uint256 amount, uint256 tokenId) external;\n\n    function left(address token) external view returns (uint256);\n\n    function stake() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISolidlyPairV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface ISolidlyPairV1 {\n    function current(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\n\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        );\n\n    function getAmountOut(uint256, address) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISolidlyRouterV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface ISolidlyRouterV1 {\n    struct route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external view returns (address pair);\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external view returns (uint256 reserveA, uint256 reserveB);\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256 amount, bool stable);\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(uint256 amountIn, route[] memory routes) external view returns (uint256[] memory amounts);\n\n    function isPair(address pair) external view returns (bool);\n\n    function quoteAddLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired\n    )\n        external\n        view\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function quoteRemoveLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity\n    ) external view returns (uint256 amountA, uint256 amountB);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityFTM(\n        address token,\n        bool stable,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountFTMMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountFTM,\n            uint256 liquidity\n        );\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityFTM(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountFTMMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountFTM);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityFTMWithPermit(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountFTMMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountFTM);\n\n    function swapExactTokensForTokensSimple(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address tokenFrom,\n        address tokenTo,\n        bool stable,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactFTMForTokens(\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForFTM(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/ISolidlyFactoryV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface ISolidlyFactoryV1 {\n    function allPairsLength() external view returns (uint256);\n\n    function isPair(address pair) external view returns (bool);\n\n    function pairCodeHash() external pure returns (bytes32);\n\n    function getPair(\n        address tokenA,\n        address token,\n        bool stable\n    ) external view returns (address);\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external returns (address pair);\n}\n"
    },
    "contracts/core/SwapManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"../interfaces/ISwapManager.sol\";\nimport \"../interfaces/IDexTrader.sol\";\n\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\ncontract SwapManager is Initializable, ModuleMapConsumer, Controlled, ISwapManager {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    // Addresses of dex traders.\n    // For easy adding new dexes, this contract use traders addresses\n    // instead of enum values in moduleMap.\n    EnumerableSet.AddressSet traders;\n    // address of the contract (user) which will be used for internal swaps\n    address internalWallet;\n\n    function initialize(address[] memory _controllers, address _moduleMap) external initializer {\n        __Controlled_init(_controllers, _moduleMap);\n        internalWallet = moduleMap.getModuleAddress(Modules.Kernel);\n    }\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _recipient The address of the token out recipient\n    /// @param _amountIn The exact amount of the input to swap\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\n    function swapExactIn(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn\n    ) external override onlyController returns (bool tradeSuccess_) {\n        return swapExactIn(_tokenIn, _tokenOut, _recipient, _amountIn, 0);\n    }\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _recipient The address of the token out recipient\n    /// @param _amountIn The exact amount of the input to swap\n    /// @param _minAmountOut The minimum amount of _tokenOut to receive\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\n    function swapExactIn(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn,\n        uint256 _minAmountOut\n    ) public override onlyController returns (bool tradeSuccess_) {\n        (address bestTrader, uint256 minOut) = getBestTraderForTheSwap(_tokenIn, _tokenOut, _amountIn);\n\n        uint256 trueMinAmountOut = minOut >= _minAmountOut ? minOut : _minAmountOut;\n\n        tradeSuccess_ = swapUsingInternalWallet(_tokenIn, _tokenOut, _recipient, _amountIn, trueMinAmountOut);\n        if (tradeSuccess_) return tradeSuccess_;\n\n        IDexTrader trader = IDexTrader(bestTrader);\n        IERC20MetadataUpgradeable(_tokenIn).safeTransfer(bestTrader, _amountIn);\n        tradeSuccess_ = trader.swapExactInput(_tokenIn, _tokenOut, _recipient, _amountIn, trueMinAmountOut);\n    }\n\n    /// @param _traderAddress Address of the contract implementing IDexTrader interface\n    function addTrader(address _traderAddress) external onlyManager {\n        require(!traders.contains(_traderAddress), \"SwapManager::addTrader: Trader already added\");\n        traders.add(_traderAddress);\n    }\n\n    /// @param _traderAddress Address of the contract implementing IDexTrader interface\n    function removeTrader(address _traderAddress) external onlyManager {\n        require(traders.contains(_traderAddress), \"SwapManager::removeTrader: Trader was not added\");\n        traders.remove(_traderAddress);\n    }\n\n    /// @param _traderAddress Address of the contract implementing IDexTrader interface\n    function hasTrader(address _traderAddress) external view onlyManager returns (bool) {\n        return traders.contains(_traderAddress);\n    }\n\n    /// @param _walletAddress The address of the contract (user) which will be used for internal swaps. Set to Zero address to disable internal\n    function setInternalWallet(address _walletAddress) external onlyManager {\n        internalWallet = _walletAddress;\n    }\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _amountIn The exact amount of the input to swap\n    /// @return bestTrader_ Address of found trader\n    /// @return minAmountOut_ The minimum amount of tokenOut to receive, factoring in allowable slippage\n    /// @dev iterates over all added traders and finds best for swapping\n    /// @dev uses getAmountOut() for comparing\n    function getBestTraderForTheSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal returns (address bestTrader_, uint256 minAmountOut_) {\n        uint256 maxAmountOut;\n        for (uint8 i; i < traders.length(); ++i) {\n            IDexTrader trader = IDexTrader(traders.at(i));\n            uint256 amountOut;\n            uint256 amountOutMin;\n\n            if (trader.isPoolExist(_tokenIn, _tokenOut)) {\n                amountOut = trader.getAmountOut(_tokenIn, _tokenOut, _amountIn);\n                amountOutMin = trader.getAmountOutMinimum(_tokenIn, _tokenOut, _amountIn);\n            }\n\n            if (amountOut > maxAmountOut) {\n                bestTrader_ = traders.at(i);\n                minAmountOut_ = amountOutMin;\n                maxAmountOut = amountOut;\n            }\n        }\n    }\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _recipient The address of the token out recipient\n    /// @param _amountIn The exact amount of the input to swap\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return tradeSuccess_ Indicates whether the swap succeeded\n    /// @dev tries to swap tokens using internal wallet instead of external dexes\n    function swapUsingInternalWallet(\n        address _tokenIn,\n        address _tokenOut,\n        address _recipient,\n        uint256 _amountIn,\n        uint256 _amountOutMin\n    ) internal returns (bool tradeSuccess_) {\n        if (internalWallet == address(0)) {\n            return false;\n        }\n\n        IERC20MetadataUpgradeable tokenIn = IERC20MetadataUpgradeable(_tokenIn);\n        IERC20MetadataUpgradeable tokenOut = IERC20MetadataUpgradeable(_tokenOut);\n\n        uint256 walletTokenOutBalance = tokenOut.balanceOf(internalWallet);\n        uint256 walletAllowanceToThis = tokenOut.allowance(internalWallet, address(this));\n\n        if (walletTokenOutBalance >= _amountOutMin && walletAllowanceToThis >= _amountOutMin && _amountOutMin > 0) {\n            tokenOut.safeTransferFrom(internalWallet, address(this), _amountOutMin);\n            tokenOut.safeTransfer(_recipient, _amountOutMin);\n            tokenIn.safeTransfer(internalWallet, _amountIn);\n            tradeSuccess_ = true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/core/UniswapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUniswapFactory.sol\";\nimport \"../interfaces/IUniswapPositionManager.sol\";\nimport \"../interfaces/IUniswapSwapRouter.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/IDexTrader.sol\";\nimport \"../interfaces/IUniswapPool.sol\";\nimport \"../libraries/FullMath.sol\";\n\n/// @notice Integrates 0x Nodes to Uniswap v3\n/// @notice tokenA/tokenB naming implies tokens are unsorted\n/// @notice token0/token1 naming implies tokens are sorted\ncontract UniswapTrader is Initializable, ModuleMapConsumer, Controlled, IUniswapTrader, IDexTrader {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    struct Pool {\n        uint24 feeNumerator;\n        uint24 slippageNumerator;\n    }\n\n    struct TokenPair {\n        address token0;\n        address token1;\n    }\n\n    uint24 private constant FEE_DENOMINATOR = 1_000_000;\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    address private factoryAddress;\n    address private swapRouterAddress;\n\n    mapping(address => mapping(address => Pool[])) private pools;\n    mapping(address => mapping(address => Path)) private paths;\n    mapping(address => mapping(address => bool)) private isMultihopPair;\n\n    TokenPair[] private tokenPairs;\n\n    event UniswapPoolAdded(address indexed token0, address indexed token1, uint24 fee, uint24 slippageNumerator);\n    event UniswapPoolSlippageNumeratorUpdated(\n        address indexed token0,\n        address indexed token1,\n        uint256 poolIndex,\n        uint24 slippageNumerator\n    );\n    event UniswapPairPrimaryPoolUpdated(address indexed token0, address indexed token1, uint256 primaryPoolIndex);\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Module Map address\n    /// @param factoryAddress_ The address of the Uniswap factory contract\n    /// @param swapRouterAddress_ The address of the Uniswap swap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_\n    ) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @param feeNumerator The Uniswap pool fee numerator\n    /// @param slippageNumerator The value divided by the slippage denominator\n    /// to calculate the allowable slippage\n    /// positions is enabled for this pool\n    function addPool(\n        address tokenA,\n        address tokenB,\n        uint24 feeNumerator,\n        uint24 slippageNumerator\n    ) external override onlyManager {\n        require(tokenA != address(0), \"bad address\");\n        require(tokenB != address(0), \"bad address\");\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getIsTokenAdded(tokenA),\n            \"UniswapTrader::addPool: TokenA has not been added in the Integration Map\"\n        );\n        require(\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getIsTokenAdded(tokenB),\n            \"UniswapTrader::addPool: TokenB has not been added in the Integration Map\"\n        );\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"UniswapTrader::addPool: Slippage numerator cannot be greater than slippapge denominator\"\n        );\n        require(\n            IUniswapFactory(factoryAddress).getPool(tokenA, tokenB, feeNumerator) != address(0),\n            \"UniswapTrader::addPool: Pool does not exist\"\n        );\n\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n\n        bool poolAdded;\n        for (uint256 poolIndex; poolIndex < pools[token0][token1].length; poolIndex++) {\n            if (pools[token0][token1][poolIndex].feeNumerator == feeNumerator) {\n                poolAdded = true;\n            }\n        }\n\n        require(!poolAdded, \"UniswapTrader::addPool: Pool has already been added\");\n\n        Pool memory newPool;\n        newPool.feeNumerator = feeNumerator;\n        newPool.slippageNumerator = slippageNumerator;\n        pools[token0][token1].push(newPool);\n\n        bool tokenPairAdded;\n        for (uint256 pairIndex; pairIndex < tokenPairs.length; pairIndex++) {\n            if (tokenPairs[pairIndex].token0 == token0 && tokenPairs[pairIndex].token1 == token1) {\n                tokenPairAdded = true;\n            }\n        }\n\n        if (!tokenPairAdded) {\n            TokenPair memory newTokenPair;\n            newTokenPair.token0 = token0;\n            newTokenPair.token1 = token1;\n            tokenPairs.push(newTokenPair);\n\n            if (\n                IERC20MetadataUpgradeable(token0).allowance(\n                    address(this),\n                    moduleMap.getModuleAddress(Modules.YieldManager)\n                ) == 0\n            ) {\n                IERC20MetadataUpgradeable(token0).safeApprove(\n                    moduleMap.getModuleAddress(Modules.YieldManager),\n                    type(uint256).max\n                );\n            }\n\n            if (\n                IERC20MetadataUpgradeable(token1).allowance(\n                    address(this),\n                    moduleMap.getModuleAddress(Modules.YieldManager)\n                ) == 0\n            ) {\n                IERC20MetadataUpgradeable(token1).safeApprove(\n                    moduleMap.getModuleAddress(Modules.YieldManager),\n                    type(uint256).max\n                );\n            }\n\n            if (IERC20MetadataUpgradeable(token0).allowance(address(this), swapRouterAddress) == 0) {\n                IERC20MetadataUpgradeable(token0).safeApprove(swapRouterAddress, type(uint256).max);\n            }\n\n            if (IERC20MetadataUpgradeable(token1).allowance(address(this), swapRouterAddress) == 0) {\n                IERC20MetadataUpgradeable(token1).safeApprove(swapRouterAddress, type(uint256).max);\n            }\n        }\n\n        emit UniswapPoolAdded(token0, token1, feeNumerator, slippageNumerator);\n    }\n\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param poolIndex The index of the pool for the specified token pair\n    /// @param slippageNumerator The new slippage numerator to update the pool\n    function updatePoolSlippageNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolIndex,\n        uint24 slippageNumerator\n    ) external override onlyManager {\n        require(tokenA != address(0), \"bad address\");\n        require(tokenB != address(0), \"bad address\");\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"UniswapTrader:updatePoolSlippageNumerator: Slippage numerator must not be greater than slippage denominator\"\n        );\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        require(\n            pools[token0][token1][poolIndex].slippageNumerator != slippageNumerator,\n            \"UniswapTrader:updatePoolSlippageNumerator: Slippage numerator must be updated to a new number\"\n        );\n        require(\n            pools[token0][token1].length > poolIndex,\n            \"UniswapTrader:updatePoolSlippageNumerator: Pool does not exist\"\n        );\n\n        pools[token0][token1][poolIndex].slippageNumerator = slippageNumerator;\n\n        emit UniswapPoolSlippageNumeratorUpdated(token0, token1, poolIndex, slippageNumerator);\n    }\n\n    /// @notice Updates which Uniswap pool to use as the default pool\n    /// @notice when swapping between token0 and token1\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\n    function updatePairPrimaryPool(\n        address tokenA,\n        address tokenB,\n        uint256 primaryPoolIndex\n    ) external override onlyManager {\n        require(tokenA != address(0), \"bad address\");\n        require(tokenB != address(0), \"bad address\");\n        require(\n            primaryPoolIndex != 0,\n            \"UniswapTrader::updatePairPrimaryPool: Specified index is already the primary pool\"\n        );\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        require(\n            primaryPoolIndex < pools[token0][token1].length,\n            \"UniswapTrader::updatePairPrimaryPool: Specified pool index does not exist\"\n        );\n\n        uint24 newPrimaryPoolFeeNumerator = pools[token0][token1][primaryPoolIndex].feeNumerator;\n        uint24 newPrimaryPoolSlippageNumerator = pools[token0][token1][primaryPoolIndex].slippageNumerator;\n\n        pools[token0][token1][primaryPoolIndex].feeNumerator = pools[token0][token1][0].feeNumerator;\n        pools[token0][token1][primaryPoolIndex].slippageNumerator = pools[token0][token1][0].slippageNumerator;\n\n        pools[token0][token1][0].feeNumerator = newPrimaryPoolFeeNumerator;\n        pools[token0][token1][0].slippageNumerator = newPrimaryPoolSlippageNumerator;\n\n        emit UniswapPairPrimaryPoolUpdated(token0, token1, primaryPoolIndex);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountIn The exact amount of the input to swap\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) external override onlyController returns (bool tradeSuccess) {\n        require(tokenIn != address(0), \"bad address\");\n        require(tokenOut != address(0), \"bad address\");\n        require(recipient != address(0), \"bad address\");\n\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, 0);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return tradeSuccess Indicates whether the swap succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external override onlyController returns (bool tradeSuccess) {\n        require(tokenIn != address(0), \"bad address\");\n        require(tokenOut != address(0), \"bad address\");\n        require(recipient != address(0), \"bad address\");\n\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountIn The exact amount of the input to swap\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 minAmountOut\n    ) internal returns (bool tradeSuccess) {\n        IERC20MetadataUpgradeable tokenInErc20 = IERC20MetadataUpgradeable(tokenIn);\n\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            IUniswapSwapRouter.ExactInputParams memory params = IUniswapSwapRouter.ExactInputParams({\n                path: abi.encodePacked(\n                    path.tokenIn,\n                    path.firstPoolFee,\n                    path.tokenInTokenOut,\n                    path.secondPoolFee,\n                    path.tokenOut\n                ),\n                recipient: recipient,\n                deadline: block.timestamp,\n                amountIn: amountIn,\n                amountOutMinimum: minAmountOut\n            });\n\n            // Executes the swap.\n            try IUniswapSwapRouter(swapRouterAddress).exactInput(params) {\n                tradeSuccess = true;\n            } catch {\n                tradeSuccess = false;\n                tokenInErc20.safeTransfer(recipient, tokenInErc20.balanceOf(address(this)));\n            }\n\n            return tradeSuccess;\n        }\n\n        (address token0, address token1) = getTokensSorted(tokenIn, tokenOut);\n\n        require(pools[token0][token1].length > 0, \"UniswapTrader::swapExactInput: Pool has not been added\");\n        require(\n            tokenInErc20.balanceOf(address(this)) >= amountIn,\n            \"UniswapTrader::swapExactInput: Balance is less than trade amount\"\n        );\n\n        uint256 amountOutMinimum = getAmountOutMinimum(tokenIn, tokenOut, amountIn);\n\n        IUniswapSwapRouter.ExactInputSingleParams memory exactInputSingleParams;\n        exactInputSingleParams.tokenIn = tokenIn;\n        exactInputSingleParams.tokenOut = tokenOut;\n        exactInputSingleParams.fee = pools[token0][token1][0].feeNumerator;\n        exactInputSingleParams.recipient = recipient;\n        exactInputSingleParams.deadline = block.timestamp;\n        exactInputSingleParams.amountIn = amountIn;\n        exactInputSingleParams.amountOutMinimum = amountOutMinimum;\n        exactInputSingleParams.sqrtPriceLimitX96 = 0;\n\n        try IUniswapSwapRouter(swapRouterAddress).exactInputSingle(exactInputSingleParams) {\n            tradeSuccess = true;\n        } catch {\n            tradeSuccess = false;\n            tokenInErc20.safeTransfer(recipient, tokenInErc20.balanceOf(address(this)));\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountOut The exact amount of the output token to receive\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactOutput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountOut\n    ) external override onlyController returns (bool tradeSuccess) {\n        require(tokenIn != address(0), \"bad address\");\n        require(tokenOut != address(0), \"bad address\");\n        require(recipient != address(0), \"bad address\");\n\n        IERC20MetadataUpgradeable tokenInErc20 = IERC20MetadataUpgradeable(tokenIn);\n\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            IUniswapSwapRouter.ExactOutputParams memory params = IUniswapSwapRouter.ExactOutputParams({\n                path: abi.encodePacked(\n                    path.tokenIn,\n                    path.firstPoolFee,\n                    path.tokenInTokenOut,\n                    path.secondPoolFee,\n                    path.tokenOut\n                ),\n                recipient: recipient,\n                deadline: block.timestamp,\n                amountOut: amountOut,\n                amountInMaximum: 0\n            });\n\n            // Executes the swap.\n            try IUniswapSwapRouter(swapRouterAddress).exactOutput(params) {\n                tradeSuccess = true;\n            } catch {\n                tradeSuccess = false;\n                tokenInErc20.safeTransfer(recipient, tokenInErc20.balanceOf(address(this)));\n            }\n\n            return tradeSuccess;\n        }\n        (address token0, address token1) = getTokensSorted(tokenIn, tokenOut);\n        require(pools[token0][token1][0].feeNumerator > 0, \"UniswapTrader::swapExactOutput: Pool has not been added\");\n        uint256 amountInMaximum = getAmountInMaximum(tokenIn, tokenOut, amountOut);\n        require(\n            tokenInErc20.balanceOf(address(this)) >= amountInMaximum,\n            \"UniswapTrader::swapExactOutput: Balance is less than trade amount\"\n        );\n\n        IUniswapSwapRouter.ExactOutputSingleParams memory exactOutputSingleParams;\n        exactOutputSingleParams.tokenIn = tokenIn;\n        exactOutputSingleParams.tokenOut = tokenOut;\n        exactOutputSingleParams.fee = pools[token0][token1][0].feeNumerator;\n        exactOutputSingleParams.recipient = recipient;\n        exactOutputSingleParams.deadline = block.timestamp;\n        exactOutputSingleParams.amountOut = amountOut;\n        exactOutputSingleParams.amountInMaximum = amountInMaximum;\n        exactOutputSingleParams.sqrtPriceLimitX96 = 0;\n\n        try IUniswapSwapRouter(swapRouterAddress).exactOutputSingle(exactOutputSingleParams) {\n            tradeSuccess = true;\n        } catch {\n            tradeSuccess = false;\n            tokenInErc20.safeTransfer(recipient, tokenInErc20.balanceOf(address(this)));\n        }\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @return pool The pool address\n    function getPoolAddress(address tokenA, address tokenB) public view override returns (address pool) {\n        uint24 feeNumerator = getPoolFeeNumerator(tokenA, tokenB, 0);\n        pool = IUniswapFactory(factoryAddress).getPool(tokenA, tokenB, feeNumerator);\n    }\n\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    function getSqrtPriceX96(address tokenA, address tokenB) public view returns (uint256) {\n        (uint160 sqrtPriceX96, , , , , , ) = IUniswapPool(getPoolAddress(tokenA, tokenB)).slot0();\n        return uint256(sqrtPriceX96);\n    }\n\n    function getPathFor(address tokenIn, address tokenOut) public view override returns (Path memory) {\n        require(isMultihopPair[tokenIn][tokenOut], \"There is an existing Pool for this pair\");\n\n        return paths[tokenIn][tokenOut];\n    }\n\n    function setPathFor(\n        address tokenIn,\n        address tokenOut,\n        uint256 firstPoolFee,\n        address tokenInTokenOut,\n        uint256 secondPoolFee\n    ) external override onlyManager {\n        require(tokenIn != address(0), \"bad address\");\n        require(tokenOut != address(0), \"bad address\");\n        require(tokenInTokenOut != address(0), \"bad address\");\n\n        paths[tokenIn][tokenOut] = Path(tokenIn, firstPoolFee, tokenInTokenOut, secondPoolFee, tokenOut);\n        isMultihopPair[tokenIn][tokenOut] = true;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOutMinimum) {\n        uint256 estimatedAmountOut = getEstimatedTokenOut(tokenIn, tokenOut, amountIn);\n        uint24 poolSlippageNumerator = getPoolSlippageNumerator(tokenIn, tokenOut, 0);\n        amountOutMinimum = (estimatedAmountOut * (SLIPPAGE_DENOMINATOR - poolSlippageNumerator)) / SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountOut The exact amount of token being swapped for\n    /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\n    function getAmountInMaximum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut\n    ) public view override returns (uint256 amountInMaximum) {\n        uint256 estimatedAmountIn = getEstimatedTokenIn(tokenIn, tokenOut, amountOut);\n        uint24 poolSlippageNumerator = getPoolSlippageNumerator(tokenIn, tokenOut, 0);\n        amountInMaximum = (estimatedAmountIn * (SLIPPAGE_DENOMINATOR + poolSlippageNumerator)) / SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param _tokenIn The address of the input token\n    /// @param _tokenOut The address of the output token\n    /// @param _amountIn The exact amount of the input to swap\n    /// @return uint256 The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) external view override returns (uint256) {\n        return getEstimatedTokenOut(_tokenIn, _tokenOut, _amountIn);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getEstimatedTokenOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            uint256 amountOutTemp = getEstimatedTokenOut(path.tokenIn, path.tokenInTokenOut, amountIn);\n            return getEstimatedTokenOut(path.tokenInTokenOut, path.tokenOut, amountOutTemp);\n        }\n\n        uint24 feeNumerator = getPoolFeeNumerator(tokenIn, tokenOut, 0);\n        uint256 sqrtPriceX96 = getSqrtPriceX96(tokenIn, tokenOut);\n\n        // FullMath is used to allow intermediate calculation values of up to 2^512\n        if (tokenIn < tokenOut) {\n            amountOut =\n                (FullMath.mulDiv(FullMath.mulDiv(amountIn, sqrtPriceX96, 2**96), sqrtPriceX96, 2**96) *\n                    (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        } else {\n            amountOut =\n                (FullMath.mulDiv(FullMath.mulDiv(amountIn, 2**96, sqrtPriceX96), 2**96, sqrtPriceX96) *\n                    (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountOut The exact amount of the output token to swap for\n    /// @return amountIn The estimated amount of tokenIn to spend\n    function getEstimatedTokenIn(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        if (isMultihopPair[tokenIn][tokenOut]) {\n            Path memory path = getPathFor(tokenIn, tokenOut);\n            uint256 amountInTemp = getEstimatedTokenIn(path.tokenInTokenOut, path.tokenOut, amountOut);\n            return getEstimatedTokenIn(path.tokenIn, path.tokenInTokenOut, amountInTemp);\n        }\n\n        uint24 feeNumerator = getPoolFeeNumerator(tokenIn, tokenOut, 0);\n        uint256 sqrtPriceX96 = getSqrtPriceX96(tokenIn, tokenOut);\n\n        // FullMath is used to allow intermediate calculation values of up to 2^512\n        if (tokenIn < tokenOut) {\n            amountIn =\n                (FullMath.mulDiv(FullMath.mulDiv(amountOut, 2**96, sqrtPriceX96), 2**96, sqrtPriceX96) *\n                    (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        } else {\n            amountIn =\n                (FullMath.mulDiv(FullMath.mulDiv(amountOut, sqrtPriceX96, 2**96), sqrtPriceX96, 2**96) *\n                    (FEE_DENOMINATOR - feeNumerator)) /\n                FEE_DENOMINATOR;\n        }\n    }\n\n    /// @param _tokenA The address of the first  token from the token pair\n    /// @param _tokenB The address of the second token from the token pair\n    /// return true if pool exist else overwise\n    function isPoolExist(address _tokenA, address _tokenB) external view override returns (bool) {\n        (address token0, address token1) = getTokensSorted(_tokenA, _tokenB);\n        return pools[token0][token1].length > 0;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param poolId The index of the pool in the pools mapping\n    /// @return feeNumerator The numerator that gets divided by the fee denominator\n    function getPoolFeeNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolId\n    ) public view override returns (uint24 feeNumerator) {\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        require(poolId < pools[token0][token1].length, \"UniswapTrader::getPoolFeeNumerator: Pool ID does not exist\");\n        feeNumerator = pools[token0][token1][poolId].feeNumerator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param poolId The index of the pool in the pools mapping\n    /// @return slippageNumerator The numerator that gets divided by the slippage denominator\n    function getPoolSlippageNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolId\n    ) public view returns (uint24 slippageNumerator) {\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        return pools[token0][token1][poolId].slippageNumerator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of the sorted token0\n    /// @return token1 The address of the sorted token1\n    function getTokensSorted(address tokenA, address tokenB)\n        public\n        pure\n        override\n        returns (address token0, address token1)\n    {\n        if (tokenA < tokenB) {\n            token0 = tokenA;\n            token1 = tokenB;\n        } else {\n            token0 = tokenB;\n            token1 = tokenA;\n        }\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param amountA The amount of tokenA\n    /// @param amountB The amount of tokenB\n    /// @return token0 The address of sorted token0\n    /// @return token1 The address of sorted token1\n    /// @return amount0 The amount of sorted token0\n    /// @return amount1 The amount of sorted token1\n    function getTokensAndAmountsSorted(\n        address tokenA,\n        address tokenB,\n        uint256 amountA,\n        uint256 amountB\n    )\n        external\n        pure\n        returns (\n            address token0,\n            address token1,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        if (tokenA < tokenB) {\n            token0 = tokenA;\n            token1 = tokenB;\n            amount0 = amountA;\n            amount1 = amountB;\n        } else {\n            token0 = tokenB;\n            token1 = tokenA;\n            amount0 = amountB;\n            amount1 = amountA;\n        }\n    }\n\n    /// @return The denominator used to calculate the pool fee percentage\n    function getFeeDenominator() external pure returns (uint24) {\n        return FEE_DENOMINATOR;\n    }\n\n    /// @return The denominator used to calculate the allowable slippage percentage\n    function getSlippageDenominator() external pure returns (uint24) {\n        return SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @return The number of token pairs configured\n    function getTokenPairsLength() external view override returns (uint256) {\n        return tokenPairs.length;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return The quantity of pools configured for the specified token pair\n    function getTokenPairPoolsLength(address tokenA, address tokenB) external view override returns (uint256) {\n        (address token0, address token1) = getTokensSorted(tokenA, tokenB);\n        return pools[token0][token1].length;\n    }\n\n    /// @param tokenPairIndex The index of the token pair\n    /// @return The address of token0\n    /// @return The address of token1\n    function getTokenPair(uint256 tokenPairIndex) external view returns (address, address) {\n        require(tokenPairIndex < tokenPairs.length, \"UniswapTrader::getTokenPair: Token pair does not exist\");\n        return (tokenPairs[tokenPairIndex].token0, tokenPairs[tokenPairIndex].token1);\n    }\n\n    /// @param token0 The address of token0 of the pool\n    /// @param token1 The address of token1 of the pool\n    /// @param poolIndex The index of the pool\n    /// @return The pool fee numerator\n    /// @return The pool slippage numerator\n    function getPool(\n        address token0,\n        address token1,\n        uint256 poolIndex\n    ) external view returns (uint24, uint24) {\n        require(poolIndex < pools[token0][token1].length, \"UniswapTrader:getPool: Pool does not exist\");\n        return (pools[token0][token1][poolIndex].feeNumerator, pools[token0][token1][poolIndex].slippageNumerator);\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapFactory {\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n}\n"
    },
    "contracts/interfaces/IUniswapPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapPositionManager {\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n}\n"
    },
    "contracts/interfaces/IUniswapSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapSwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    function exactInput(ExactInputParams calldata params) external returns (uint256 amountOut);\n\n    function exactOutput(ExactOutputParams calldata params) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/interfaces/IUniswapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapTrader {\n    struct Path {\n        address tokenOut;\n        uint256 firstPoolFee;\n        address tokenInTokenOut;\n        uint256 secondPoolFee;\n        address tokenIn;\n    }\n\n    /// @param tokenA The address of tokenA ERC20 contract\n    /// @param tokenB The address of tokenB ERC20 contract\n    /// @param fee The Uniswap pool fee\n    /// @param slippageNumerator The value divided by the slippage denominator\n    /// to calculate the allowable slippage\n    function addPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee,\n        uint24 slippageNumerator\n    ) external;\n\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param poolIndex The index of the pool for the specified token pair\n    /// @param slippageNumerator The new slippage numerator to update the pool\n    function updatePoolSlippageNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolIndex,\n        uint24 slippageNumerator\n    ) external;\n\n    /// @notice Changes which Uniswap pool to use as the default pool\n    /// @notice when swapping between token0 and token1\n    /// @param tokenA The address of tokenA of the pool\n    /// @param tokenB The address of tokenB of the pool\n    /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\n    function updatePairPrimaryPool(\n        address tokenA,\n        address tokenB,\n        uint256 primaryPoolIndex\n    ) external;\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountIn The exact amount of the input to swap\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn\n    ) external returns (bool tradeSuccess);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address to receive the tokens\n    /// @param amountOut The exact amount of the output token to receive\n    /// @return tradeSuccess Indicates whether the trade succeeded\n    function swapExactOutput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountOut\n    ) external returns (bool tradeSuccess);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountOut The exact amount of token being swapped for\n    /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\n    function getAmountInMaximum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut\n    ) external view returns (uint256 amountInMaximum);\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getEstimatedTokenOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external view returns (uint256 amountOut);\n\n    function getPathFor(address tokenOut, address tokenIn) external view returns (Path memory);\n\n    function setPathFor(\n        address tokenOut,\n        address tokenIn,\n        uint256 firstPoolFee,\n        address tokenInTokenOut,\n        uint256 secondPoolFee\n    ) external;\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of the sorted token0\n    /// @return token1 The address of the sorted token1\n    function getTokensSorted(address tokenA, address tokenB) external pure returns (address token0, address token1);\n\n    /// @return The number of token pairs configured\n    function getTokenPairsLength() external view returns (uint256);\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return The quantity of pools configured for the specified token pair\n    function getTokenPairPoolsLength(address tokenA, address tokenB) external view returns (uint256);\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @param poolId The index of the pool in the pools mapping\n    /// @return feeNumerator The numerator that gets divided by the fee denominator\n    function getPoolFeeNumerator(\n        address tokenA,\n        address tokenB,\n        uint256 poolId\n    ) external view returns (uint24 feeNumerator);\n\n    function getPoolAddress(address tokenA, address tokenB) external view returns (address pool);\n}\n"
    },
    "contracts/interfaces/IUniswapPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapPool {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity >=0.7.6;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/core/Kernel.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../interfaces/IBiosRewards.sol\";\nimport \"../interfaces/IKernel.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/IInterconnects.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IUniswapTrader.sol\";\nimport \"../interfaces/ISushiSwapTrader.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"../interfaces/IUnwrapper.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\n/// @title Kernel\n/// @notice Allows users to deposit/withdraw erc20 tokens\n/// @notice Allows a system admin to control which tokens are depositable\ncontract Kernel is\n    Initializable,\n    AccessControlEnumerableUpgradeable,\n    ModuleMapConsumer,\n    IKernel,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    // constants\n    bytes32 public constant OWNER_ROLE = 0x72fed0a30cb639f27f755e6f7c6edf975db0859d96eb67b27d2695c6486b1be0; //keccak256(\"owner_role\");\n    bytes32 public constant MANAGER_ROLE = 0x45a03fb503c1bf173e1a78fdc6b62e74bfc9c0cac4b0db3c4a667287a0fb7b9d; //keccak256(\"manager_role\");\n    uint256 private constant FTM_CHAIN_ID = 250;\n    uint256 private constant BSC_CHAIN_ID = 56;\n\n    uint256 private lastDeployTimestamp;\n\n    uint256 private lastHarvestYieldTimestamp; // deprecated\n\n    uint256 private lastDistributeEthTimestamp;\n    uint256 private lastLastDistributeEthTimestamp;\n    uint256 private lastBiosBuyBackTimestamp;\n    uint256 private initializationTimestamp;\n\n    bool private lpWhitelistEnabled;\n\n    bytes32 public constant LIQUIDITY_PROVIDER_ROLE =\n        0x6d53deaa1363a9a09a38da6f41ec59fc13a00b08c43141d19c181ddb970e9d2a; //keccak256(\"liquidity_provider_role\");\n\n    modifier onlyGasAccount() {\n        require(\n            msg.sender == IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).getGasAccount(),\n            \"Caller is not gas account\"\n        );\n        _;\n    }\n\n    modifier onlyLpWhitelist() {\n        require(\n            !lpWhitelistEnabled || hasRole(LIQUIDITY_PROVIDER_ROLE, msg.sender),\n            \"Caller is not whitelisted as a liquidity provider\"\n        );\n        _;\n    }\n\n    receive() external payable {}\n\n    /// @notice Initializes contract - used as a replacement for a constructor\n    /// @param admin_ default administrator, a cold storage address\n    /// @param owner_ single owner account, used to manage the managers\n    /// @param moduleMap_ Module Map address\n    function initialize(\n        address admin_,\n        address owner_,\n        address manager_,\n        address liquidityProvider_,\n        address moduleMap_\n    ) external initializer {\n        require(admin_ != address(0), \"bad address\");\n        require(owner_ != address(0), \"bad address\");\n        require(manager_ != address(0), \"bad address\");\n        require(moduleMap_ != address(0), \"bad address\");\n        require(liquidityProvider_ != address(0), \"bad address\");\n\n        __ModuleMapConsumer_init(moduleMap_);\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        // make the \"admin_\" address the default admin role\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\n        // make the \"owner_\" address the owner of the system\n        _setupRole(OWNER_ROLE, owner_);\n\n        // give the \"owner_\" address the manager role, too\n        _setupRole(MANAGER_ROLE, manager_);\n\n        // give the \"owner_\" address the liquidity provider role, too\n        _setupRole(LIQUIDITY_PROVIDER_ROLE, liquidityProvider_);\n\n        // owners are admins of managers\n        _setRoleAdmin(MANAGER_ROLE, OWNER_ROLE);\n\n        // managers are admins of liquidity providers\n        _setRoleAdmin(LIQUIDITY_PROVIDER_ROLE, MANAGER_ROLE);\n\n        initializationTimestamp = block.timestamp;\n        lpWhitelistEnabled = true;\n    }\n\n    /// @param biosRewardsDuration The duration in seconds for a BIOS rewards period to last\n    function setBiosRewardsDuration(uint32 biosRewardsDuration) external onlyRole(MANAGER_ROLE) {\n        IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards)).setBiosRewardsDuration(biosRewardsDuration);\n\n        emit SetBiosRewardsDuration(biosRewardsDuration);\n    }\n\n    /// @param biosAmount The amount of BIOS to add to the rewards\n    function seedBiosRewards(uint256 biosAmount) external onlyRole(MANAGER_ROLE) {\n        IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards)).seedBiosRewards(msg.sender, biosAmount);\n\n        emit SeedBiosRewards(biosAmount);\n    }\n\n    /// @notice This function is used after tokens have been added, and a weight array should be included\n    /// @param contractAddress The address of the integration contract\n    /// @param name The name of the protocol being integrated to\n    function addIntegration(address contractAddress, string memory name) external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).addIntegration(contractAddress, name);\n\n        emit IntegrationAdded(contractAddress, name);\n    }\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        bool acceptingLping,\n        bool acceptingBridging,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator,\n        uint256 targetLiquidityRatioNumerator,\n        uint256 transferFeeKValueNumerator,\n        uint256 transferFeePlatformRatioNumerator\n    ) external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).addToken(\n            tokenAddress,\n            acceptingDeposits,\n            acceptingWithdrawals,\n            acceptingLping,\n            acceptingBridging,\n            biosRewardWeight,\n            reserveRatioNumerator,\n            targetLiquidityRatioNumerator,\n            transferFeeKValueNumerator,\n            transferFeePlatformRatioNumerator\n        );\n\n        if (\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                moduleMap.getModuleAddress(Modules.YieldManager)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                type(uint256).max\n            );\n        }\n\n        if (\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                moduleMap.getModuleAddress(Modules.UserPositions)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\n                moduleMap.getModuleAddress(Modules.UserPositions),\n                type(uint256).max\n            );\n        }\n\n        if (\n            IERC20MetadataUpgradeable(tokenAddress).allowance(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                moduleMap.getModuleAddress(Modules.SwapManager)\n            ) == 0\n        ) {\n            IERC20MetadataUpgradeable(tokenAddress).safeApprove(\n                moduleMap.getModuleAddress(Modules.SwapManager),\n                type(uint256).max\n            );\n        }\n\n        emit TokenAdded(\n            tokenAddress,\n            acceptingDeposits,\n            acceptingWithdrawals,\n            acceptingLping,\n            acceptingBridging,\n            biosRewardWeight,\n            reserveRatioNumerator,\n            targetLiquidityRatioNumerator,\n            transferFeeKValueNumerator,\n            transferFeePlatformRatioNumerator\n        );\n    }\n\n    /// @param biosBuyBackEthWeight The relative weight of ETH to send to BIOS buy back\n    /// @param treasuryEthWeight The relative weight of ETH to send to the treasury\n    /// @param protocolFeeEthWeight The relative weight of ETH to send to protocol fee accrual\n    /// @param rewardsEthWeight The relative weight of ETH to send to user rewards\n    function updateEthDistributionWeights(\n        uint32 biosBuyBackEthWeight,\n        uint32 treasuryEthWeight,\n        uint32 protocolFeeEthWeight,\n        uint32 rewardsEthWeight\n    ) external onlyRole(MANAGER_ROLE) {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateEthDistributionWeights(\n            biosBuyBackEthWeight,\n            treasuryEthWeight,\n            protocolFeeEthWeight,\n            rewardsEthWeight\n        );\n\n        emit EthDistributionWeightsUpdated(\n            biosBuyBackEthWeight,\n            treasuryEthWeight,\n            protocolFeeEthWeight,\n            rewardsEthWeight\n        );\n    }\n\n    /// @notice Gives the UserPositions contract approval to transfer BIOS from Kernel\n    function tokenApprovals() external onlyRole(MANAGER_ROLE) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(integrationMap.getBiosTokenAddress());\n        IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(integrationMap.getWethTokenAddress());\n\n        if (bios.allowance(address(this), moduleMap.getModuleAddress(Modules.BiosRewards)) == 0) {\n            bios.safeApprove(moduleMap.getModuleAddress(Modules.BiosRewards), type(uint256).max);\n        }\n        if (bios.allowance(address(this), moduleMap.getModuleAddress(Modules.YieldManager)) == 0) {\n            bios.safeApprove(moduleMap.getModuleAddress(Modules.YieldManager), type(uint256).max);\n        }\n\n        if (weth.allowance(address(this), moduleMap.getModuleAddress(Modules.UserPositions)) == 0) {\n            weth.safeApprove(moduleMap.getModuleAddress(Modules.UserPositions), type(uint256).max);\n        }\n\n        if (weth.allowance(address(this), moduleMap.getModuleAddress(Modules.YieldManager)) == 0) {\n            weth.safeApprove(moduleMap.getModuleAddress(Modules.YieldManager), type(uint256).max);\n        }\n    }\n\n    function enableLpWhitelist() external onlyRole(MANAGER_ROLE) {\n        lpWhitelistEnabled = true;\n    }\n\n    function disableLpWhitelist() external onlyRole(MANAGER_ROLE) {\n        lpWhitelistEnabled = false;\n    }\n\n    /// @param gasAccount The address of the account to send ETH to gas for executing bulk system functions\n    function updateGasAccount(address payable gasAccount) external onlyRole(MANAGER_ROLE) {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateGasAccount(gasAccount);\n\n        emit GasAccountUpdated(gasAccount);\n    }\n\n    /// @param treasuryAccount The address of the system treasury account\n    function updateTreasuryAccount(address payable treasuryAccount) external onlyRole(MANAGER_ROLE) {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateTreasuryAccount(treasuryAccount);\n\n        emit TreasuryAccountUpdated(treasuryAccount);\n    }\n\n    /// @param gasAccountTargetEthBalance The target ETH balance of the gas account\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance) external onlyRole(MANAGER_ROLE) {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).updateGasAccountTargetEthBalance(\n            gasAccountTargetEthBalance\n        );\n\n        emit GasAccountTargetEthBalanceUpdated(gasAccountTargetEthBalance);\n    }\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    function deposit(address[] memory tokens, uint256[] memory amounts) external payable nonReentrant {\n        if (msg.value > 0) {\n            // Convert ETH to WETH\n            address wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\n                .getWethTokenAddress();\n            IWeth9(wethAddress).deposit{value: msg.value}();\n        }\n\n        IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).deposit(\n            msg.sender,\n            tokens,\n            amounts,\n            msg.value,\n            false\n        );\n    }\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function withdraw(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) external nonReentrant {\n        uint256 ethWithdrawn = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).withdraw(\n            msg.sender,\n            tokens,\n            amounts,\n            withdrawWethAsEth\n        );\n\n        if (ethWithdrawn > 0) {\n            // unwrap the wnative\n            _unwrapWnative(\n                ethWithdrawn,\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\n            );\n\n            // send to user\n            _transferAmount(ethWithdrawn, msg.sender);\n        }\n\n        emit Withdraw(msg.sender, tokens, amounts, ethWithdrawn);\n    }\n\n    /// @notice Allows a user to withdraw entire undeployed balances of the specified tokens and claim rewards\n    /// @param tokens Array of token address that user is exiting positions from\n    /// @param strategies Array of strategyIDs that user is claiming rewards from\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    /// @return tokenAmounts The amounts of each token being withdrawn\n    /// @return ethWithdrawn The amount of WETH balance being withdrawn as ETH\n    /// @return ethClaimed The amount of ETH being claimed from rewards\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\n    function withdrawAllAndClaim(\n        address[] calldata tokens,\n        uint256[] calldata strategies,\n        bool withdrawWethAsEth\n    )\n        external\n        returns (\n            uint256[] memory tokenAmounts,\n            uint256 ethWithdrawn,\n            uint256 ethClaimed,\n            uint256 biosClaimed\n        )\n    {\n        (tokenAmounts, ethWithdrawn, ethClaimed, biosClaimed) = IUserPositions(\n            moduleMap.getModuleAddress(Modules.UserPositions)\n        ).withdrawAllAndClaim(msg.sender, tokens, strategies, withdrawWethAsEth);\n\n        if (ethWithdrawn > 0) {\n            _unwrapWnative(\n                ethWithdrawn,\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\n            );\n        }\n\n        if (ethWithdrawn + ethClaimed > 0) {\n            _transferAmount(ethWithdrawn + ethClaimed, msg.sender);\n        }\n\n        emit WithdrawAllAndClaim(\n            msg.sender,\n            tokens,\n            strategies,\n            withdrawWethAsEth,\n            tokenAmounts,\n            ethWithdrawn,\n            ethClaimed,\n            biosClaimed\n        );\n    }\n\n    /// @notice User is allowed to LP whitelisted tokens\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    function provideLiquidity(address[] memory tokens, uint256[] memory amounts) external onlyLpWhitelist nonReentrant {\n        IInterconnects(moduleMap.getModuleAddress(Modules.Interconnects)).provideLiquidity(msg.sender, tokens, amounts);\n    }\n\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    function takeLiquidity(address[] memory tokens, uint256[] memory amounts) external onlyLpWhitelist nonReentrant {\n        IInterconnects(moduleMap.getModuleAddress(Modules.Interconnects)).takeLiquidity(msg.sender, tokens, amounts);\n    }\n\n    /// @param tokens Array of token the token addresses\n    function claimLpFees(address[] memory tokens) external onlyLpWhitelist nonReentrant {\n        IInterconnects(moduleMap.getModuleAddress(Modules.Interconnects)).claimLpFeeRewards(msg.sender, tokens);\n    }\n\n    /// @notice Allows user to claim their ETH rewards\n    /// @param strategies Array of strategy IDs to claim rewards from. 0 for BIOS PFA!\n    /// @return ethClaimed The amount of ETH claimed by the user\n    function claimEthRewards(uint256[] calldata strategies) public nonReentrant returns (uint256 ethClaimed) {\n        return _claimEthRewards(strategies);\n    }\n\n    function _claimEthRewards(uint256[] calldata strategies) private returns (uint256 ethClaimed) {\n        ethClaimed = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).claimEthRewards(\n            msg.sender,\n            strategies\n        );\n\n        _transferAmount(ethClaimed, msg.sender);\n\n        emit ClaimEthRewards(msg.sender, strategies, ethClaimed);\n    }\n\n    /// @notice Allows user to claim their BIOS rewards\n    /// @return biosClaimed The amount of BIOS claimed by the user\n    function claimBiosRewards() external nonReentrant returns (uint256 biosClaimed) {\n        return _claimBiosRewards();\n    }\n\n    function _claimBiosRewards() private returns (uint256 biosClaimed) {\n        biosClaimed = IBiosRewards(moduleMap.getModuleAddress(Modules.BiosRewards)).claimBiosRewards(msg.sender);\n\n        emit ClaimBiosRewards(msg.sender, biosClaimed);\n    }\n\n    /// @notice Allows user to claim their ETH and BIOS rewards\n    /// @param strategies Array of strategy IDs to claim eth rewards from\n    /// @return ethClaimed The amount of ETH claimed by the user\n    /// @return biosClaimed The amount of BIOS claimed by the user\n    function claimAllRewards(uint256[] calldata strategies)\n        external\n        nonReentrant\n        returns (uint256 ethClaimed, uint256 biosClaimed)\n    {\n        ethClaimed = _claimEthRewards(strategies);\n        biosClaimed = _claimBiosRewards();\n    }\n\n    /// @notice Deploys all tokens to all integrations according to configured weights\n    function deploy(IYieldManager.DeployRequest[] calldata deployments) external onlyGasAccount {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).deploy(deployments);\n        lastDeployTimestamp = block.timestamp;\n        emit Deploy();\n    }\n\n    /// @notice Distributes WETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\n    function distributeEth(\n        uint256[] calldata strategies,\n        uint256[] calldata positions,\n        uint256 biosAmount\n    ) external onlyGasAccount {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).distributeEth(\n            strategies,\n            positions,\n            biosAmount\n        );\n        lastLastDistributeEthTimestamp = lastDistributeEthTimestamp;\n        lastDistributeEthTimestamp = block.timestamp;\n        emit DistributeEth();\n    }\n\n    /// @notice Uses any WETH held in the SushiSwap integration to buy back BIOS which is sent to the Kernel\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\n    function biosBuyBack(uint256 ratioX1000) external onlyGasAccount {\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).biosBuyBack(ratioX1000);\n        lastBiosBuyBackTimestamp = block.timestamp;\n        emit BiosBuyBack();\n    }\n\n    /// @param account The address of the account to check if they are a manager\n    /// @return Bool indicating whether the account is a manger\n    function isManager(address account) public view override returns (bool) {\n        return hasRole(MANAGER_ROLE, account);\n    }\n\n    /// @param account The address of the account to check if they are an owner\n    /// @return Bool indicating whether the account is an owner\n    function isOwner(address account) public view override returns (bool) {\n        return hasRole(OWNER_ROLE, account);\n    }\n\n    /// @param account The address of the account to check if they are a liquidity provider\n    /// @return Bool indicating whether the account is a liquidity provider\n    function isLiquidityProvider(address account) public view override returns (bool) {\n        return hasRole(LIQUIDITY_PROVIDER_ROLE, account);\n    }\n\n    /// @return The timestamp the deploy function was last called\n    function getLastDeployTimestamp() external view returns (uint256) {\n        return lastDeployTimestamp;\n    }\n\n    /// @return The timestamp the distributeEth function was last called\n    function getLastDistributeEthTimestamp() external view returns (uint256) {\n        return lastDistributeEthTimestamp;\n    }\n\n    /// @return The timestamp the biosBuyBack function was last called\n    function getLastBiosBuyBackTimestamp() external view returns (uint256) {\n        return lastBiosBuyBackTimestamp;\n    }\n\n    /// @return ethRewardsTimePeriod The number of seconds between the last two ETH payouts\n    function getEthRewardsTimePeriod() external view returns (uint256 ethRewardsTimePeriod) {\n        if (lastDistributeEthTimestamp > 0) {\n            if (lastLastDistributeEthTimestamp > 0) {\n                ethRewardsTimePeriod = lastDistributeEthTimestamp - lastLastDistributeEthTimestamp;\n            } else {\n                ethRewardsTimePeriod = lastDistributeEthTimestamp - initializationTimestamp;\n            }\n        } else {\n            ethRewardsTimePeriod = 0;\n        }\n    }\n\n    function getLpWhitelistEnabled() external view returns (bool) {\n        return lpWhitelistEnabled;\n    }\n\n    function _transferAmount(uint256 amount, address to) internal {\n        (bool sent, ) = payable(to).call{value: amount}(\"\");\n        require(sent, \"Failed to transfer value\");\n    }\n\n    function _unwrapWnative(uint256 amount, address wnativeAddress) internal {\n        // just add some ORs on here to check for more chains...\n        if (block.chainid == FTM_CHAIN_ID || block.chainid == BSC_CHAIN_ID) {\n            // we are on a chain with wnative unwrapping issues\n\n            // get unwrapper address\n            address unwrapper = moduleMap.getModuleAddress(Modules.Unwrapper);\n\n            // send wnative to unwrapper and unwrap\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(unwrapper, amount);\n            IUnwrapper(unwrapper).unwrap(amount);\n        } else {\n            // we are on a chain with working wnative unwrapping, so just do it\n            IWeth9(wnativeAddress).withdraw(amount);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/core/Unwrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"../interfaces/IUnwrapper.sol\";\nimport \"../interfaces/IWeth9.sol\";\n\n// Some native tokens can't be unwrapped by upgradeable contracts...\n// https://forum.openzeppelin.com/t/msg-sender-transfer-runs-out-of-gas-on-a-payable-upgradeable-proxy-contract/3766\n\n// To use this, you simply transfer the wrapped token to the contract then call unwrap for the amount\n// ONLY use this from another contract where you can do those in the same step, otherwise anyone can unwrap your tokens!\n\ncontract Unwrapper is IUnwrapper {\n    IWeth9 public token;\n\n    // make sure token contract can send native token back\n    receive() external payable {}\n\n    constructor(address wrappedTokenAddress) {\n        require(wrappedTokenAddress != address(0), \"bad address\");\n        token = IWeth9(wrappedTokenAddress);\n    }\n\n    /// @dev transfer token and then unwrap\n    // Allows you to unwrap the token in cases where Istanbul causes gas issues\n    function unwrap(uint256 amount) external override {\n        token.withdraw(amount);\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\n        require(sent, \"Failed to send unwrapped token\");\n    }\n}\n"
    },
    "contracts/core/UserPositions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IBiosRewards.sol\";\nimport \"../interfaces/IEtherRewards.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\n/// @title User Positions\n/// @notice Allows users to deposit/withdraw erc20 tokens\ncontract UserPositions is Initializable, ModuleMapConsumer, Controlled, IUserPositions {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    /// @dev This is deprecated - now live in BiosRewards.sol\n    uint32 private _biosRewardsDuration;\n\n    // Token address => total supply held by the contract\n    mapping(address => uint256) private _totalSupply;\n\n    // Token address => User address => Balance of tokens a user has deposited\n    mapping(address => mapping(address => uint256)) private _balances;\n\n    // User => Token => deployed balance\n    mapping(address => mapping(address => uint256)) private _deployedBalances;\n\n    // User => strategy => token => balance\n    mapping(address => mapping(uint256 => mapping(address => uint256))) private _userStrategyBalances;\n\n    // Token address => User address => Balance of tokens a user has from interconnecting from other chains\n    mapping(address => mapping(address => uint256)) private _interconnectBalances;\n\n    bool public paused;\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ Address of the Module Map\n    function initialize(address[] memory controllers_, address moduleMap_) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    function pause() external onlyOwner {\n        paused = true;\n        emit Pause(true);\n    }\n\n    function unpause() external onlyOwner {\n        paused = false;\n        emit Pause(false);\n    }\n\n    modifier whenNotPaused() {\n        require(!paused, \"contracts are paused\");\n        _;\n    }\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param depositor Address of the account depositing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param ethAmount The amount of ETH sent with the deposit\n    function deposit(\n        address depositor,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256 ethAmount,\n        bool migration\n    ) external override onlyController whenNotPaused {\n        require(depositor != address(0), \"bad address\");\n        _deposit(depositor, tokens, amounts, ethAmount, migration);\n    }\n\n    /// @notice User is allowed to deposit whitelisted tokens\n    /// @param depositor Address of the account depositing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param ethAmount The amount of ETH sent with the deposit\n    function _deposit(\n        address depositor,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256 ethAmount,\n        bool migration\n    ) internal {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        address biosAddress = integrationMap.getBiosTokenAddress();\n        address biosRewardsAddress = biosAddress != address(0)\n            ? moduleMap.getModuleAddress(Modules.BiosRewards)\n            : address(0);\n\n        uint256[] memory actualAmounts = new uint256[](tokens.length);\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            // Token must be accepting deposits\n            require(\n                integrationMap.getTokenAcceptingDeposits(tokens[tokenId]),\n                \"UserPositions::deposit: This token is not accepting deposits\"\n            );\n\n            require(amounts[tokenId] > 0, \"UserPositions::deposit: Deposit amount must be greater than zero\");\n            uint256 actualAmount;\n            if (migration) {\n                actualAmount = amounts[tokenId];\n            } else {\n                actualAmount = _transferIn(depositor, tokens[tokenId], amounts[tokenId]);\n\n                // Increase rewards\n                if (biosRewardsAddress != address(0)) {\n                    IBiosRewards(biosRewardsAddress).increaseRewards(tokens[tokenId], depositor, actualAmount);\n                }\n\n                // BIOS gets eth rewards increased on deposit, not strategy\n                if (tokens[tokenId] == biosAddress) {\n                    IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).increaseUserRewards(\n                        0,\n                        actualAmount,\n                        depositor\n                    );\n                }\n            }\n            actualAmounts[tokenId] = actualAmount;\n\n            // Update balances\n            _totalSupply[tokens[tokenId]] += actualAmount;\n            _balances[tokens[tokenId]][depositor] += actualAmount;\n        }\n\n        if (ethAmount > 0) {\n            address wethAddress = integrationMap.getWethTokenAddress();\n\n            // Increase rewards\n            if (biosRewardsAddress != address(0)) {\n                IBiosRewards(biosRewardsAddress).increaseRewards(wethAddress, depositor, ethAmount);\n            }\n\n            // Update WETH balances\n            _totalSupply[wethAddress] += ethAmount;\n            _balances[wethAddress][depositor] += ethAmount;\n        }\n\n        emit Deposit(depositor, tokens, actualAmounts, ethAmount);\n    }\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param recipient The address of the user withdrawing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function withdraw(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) external override whenNotPaused onlyController returns (uint256 ethWithdrawn) {\n        require(recipient != address(0), \"bad address\");\n        ethWithdrawn = _withdraw(recipient, tokens, amounts, withdrawWethAsEth);\n    }\n\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\n    /// @param recipient The address of the user withdrawing tokens\n    /// @param tokens Array of token address that user is exiting positions from\n    /// @param strategies Array of strategy IDs that user is claiming rewards from\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    /// @return tokenAmounts The amounts of each token being withdrawn\n    /// @return ethWithdrawn The amount of ETH being withdrawn\n    /// @return ethClaimed The amount of ETH being claimed from rewards\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\n    function withdrawAllAndClaim(\n        address recipient,\n        address[] calldata tokens,\n        uint256[] calldata strategies,\n        bool withdrawWethAsEth\n    )\n        external\n        override\n        whenNotPaused\n        onlyController\n        returns (\n            uint256[] memory tokenAmounts,\n            uint256 ethWithdrawn,\n            uint256 ethClaimed,\n            uint256 biosClaimed\n        )\n    {\n        require(recipient != address(0), \"bad address\");\n\n        tokenAmounts = new uint256[](tokens.length);\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            tokenAmounts[tokenId] = userTokenBalance(tokens[tokenId], recipient);\n        }\n\n        ethWithdrawn = _withdraw(recipient, tokens, tokenAmounts, withdrawWethAsEth);\n\n        if (IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).getUserEthRewards(recipient) > 0) {\n            ethClaimed = _claimEthRewards(recipient, strategies);\n        }\n\n        // trigger bios rewards only if bios is set and module exists\n        if (IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getBiosTokenAddress() != address(0)) {\n            address biosRewardsAddress = moduleMap.getModuleAddress(Modules.BiosRewards);\n            if (biosRewardsAddress != address(0)) {\n                biosClaimed = IBiosRewards(biosRewardsAddress).claimBiosRewards(recipient);\n            }\n        }\n    }\n\n    /// @notice User is allowed to withdraw tokens\n    /// @param recipient The address of the user withdrawing\n    /// @param tokens Array of token the token addresses\n    /// @param amounts Array of token amounts\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\n    function _withdraw(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bool withdrawWethAsEth\n    ) private returns (uint256 ethWithdrawn) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        address wethAddress = integrationMap.getWethTokenAddress();\n        address biosAddress = integrationMap.getBiosTokenAddress();\n        ethWithdrawn = 0;\n        require(\n            tokens.length == amounts.length,\n            \"UserPositions::_withdraw: Tokens array length does not match amounts array length\"\n        );\n\n        for (uint256 tokenId; tokenId < tokens.length; tokenId++) {\n            if (amounts[tokenId] == 0) continue;\n            require(\n                integrationMap.getTokenAcceptingWithdrawals(tokens[tokenId]),\n                \"UserPositions::_withdraw: This token is not accepting withdrawals\"\n            );\n            require(\n                amounts[tokenId] <= userTokenBalance(tokens[tokenId], recipient),\n                \"UserPositions::_withdraw: Withdraw amount exceeds user balance\"\n            );\n\n            // Process user withdrawal amount management, and close out positions as needed to fund the withdrawal\n            uint256 reserveBalance = IERC20MetadataUpgradeable(tokens[tokenId]).balanceOf(\n                moduleMap.getModuleAddress(Modules.Kernel)\n            );\n\n            if (reserveBalance < amounts[tokenId]) {\n                IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).closePositionsForWithdrawal(\n                    tokens[tokenId],\n                    amounts[tokenId]\n                );\n            }\n\n            uint256 actualTransferAmount;\n            if (tokens[tokenId] == wethAddress && withdrawWethAsEth) {\n                ethWithdrawn = amounts[tokenId];\n                actualTransferAmount = amounts[tokenId];\n            } else {\n                uint256 currentReserves = IERC20MetadataUpgradeable(tokens[tokenId]).balanceOf(\n                    moduleMap.getModuleAddress(Modules.Kernel)\n                );\n                if (currentReserves < amounts[tokenId]) {\n                    actualTransferAmount = currentReserves;\n                } else {\n                    actualTransferAmount = amounts[tokenId];\n                }\n                // Amounts recovered from the integrations for the user was lower than requested, likely due to fees (see yearn).\n                IERC20MetadataUpgradeable(tokens[tokenId]).safeTransferFrom(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    recipient,\n                    actualTransferAmount\n                );\n            }\n\n            // Decrease rewards if the module exists\n            address biosRewardsAddress = moduleMap.getModuleAddress(Modules.BiosRewards);\n            if (biosRewardsAddress != address(0)) {\n                IBiosRewards(biosRewardsAddress).decreaseRewards(tokens[tokenId], recipient, actualTransferAmount);\n            }\n\n            // BIOS gets eth rewards decreased on withdraw, not strategy\n            if (tokens[tokenId] == biosAddress) {\n                IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).decreaseUserRewards(\n                    0,\n                    actualTransferAmount,\n                    recipient\n                );\n            }\n\n            // Update balances\n            if (actualTransferAmount > _totalSupply[tokens[tokenId]]) {\n                _totalSupply[tokens[tokenId]] = 0;\n            } else {\n                _totalSupply[tokens[tokenId]] -= actualTransferAmount;\n            }\n            _balances[tokens[tokenId]][recipient] -= actualTransferAmount;\n        }\n    }\n\n    function abs(int256 val) internal pure returns (uint256) {\n        return uint256(val >= 0 ? val : -val);\n    }\n\n    /// @param recipient The address of the user claiming ETH rewards\n    /// @param strategies An array of strategyIDs to claim rewards for\n    function claimEthRewards(address recipient, uint256[] calldata strategies)\n        external\n        override\n        onlyController\n        whenNotPaused\n        returns (uint256 ethClaimed)\n    {\n        require(recipient != address(0), \"bad address\");\n\n        ethClaimed = _claimEthRewards(recipient, strategies);\n    }\n\n    /// @param recipient The address of the user claiming BIOS rewards\n    function _claimEthRewards(address recipient, uint256[] calldata strategies) private returns (uint256 ethClaimed) {\n        ethClaimed = IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).claimEthRewards(\n            recipient,\n            strategies\n        );\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @return The total balance of the asset deposited in the system\n    function totalTokenBalance(address asset) public view override returns (uint256) {\n        return _totalSupply[asset];\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userTokenBalance(address asset, address account) public view override returns (uint256) {\n        if (_deployedBalances[account][asset] >= _balances[asset][account]) {\n            return 0;\n        }\n        return _balances[asset][account] - _deployedBalances[account][asset];\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userInterconnectBalance(address asset, address account) public view override returns (uint256) {\n        return _interconnectBalances[asset][account];\n    }\n\n    /// @param asset Address of the ERC20 token contract\n    /// @param account Address of the user account\n    function userDeployableBalance(address asset, address account) public view override returns (uint256) {\n        uint256 localAndForeignBalance = _balances[asset][account] + _interconnectBalances[asset][account];\n        if (_deployedBalances[account][asset] >= localAndForeignBalance) {\n            return 0;\n        }\n        return localAndForeignBalance - _deployedBalances[account][asset];\n    }\n\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens) external override whenNotPaused {\n        _enterStrategy(strategyID, msg.sender, tokens, false);\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).increaseStrategy(strategyID, tokens);\n    }\n\n    function _remoteStrategyExecution(\n        uint256 strategyID,\n        address user,\n        TokenMovement[] calldata tokens,\n        bool enterStrat\n    ) external override onlyController {\n        if (enterStrat) {\n            _enterStrategy(strategyID, user, tokens, false);\n            IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).increaseStrategy(strategyID, tokens);\n        } else {\n            _exitStrategy(strategyID, user, tokens);\n        }\n    }\n\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens) external override whenNotPaused {\n        _exitStrategy(strategyID, msg.sender, tokens);\n    }\n\n    function _exitStrategy(\n        uint256 strategyID,\n        address user,\n        TokenMovement[] calldata tokens\n    ) internal {\n        require(tokens.length > 0, \"tokens required\");\n        for (uint256 i; i < tokens.length; ++i) {\n            require(tokens[i].token != address(0), \"invalid token\");\n            require(tokens[i].amount > 0, \"invalid amount\");\n            require(_userStrategyBalances[user][strategyID][tokens[i].token] >= tokens[i].amount, \"insufficient funds\");\n            _deployedBalances[user][tokens[i].token] -= tokens[i].amount;\n            _userStrategyBalances[user][strategyID][tokens[i].token] -= tokens[i].amount;\n        }\n        // update eth rewards\n        IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).decreaseUserRewards(\n            strategyID,\n            tokens[0].amount,\n            msg.sender\n        );\n\n        emit ExitStrategy(strategyID, user, tokens);\n\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).decreaseStrategy(strategyID, tokens);\n    }\n\n    function updateUserTokenBalances(\n        address[] calldata assets,\n        address account,\n        uint256[] calldata amounts,\n        bool[] memory add\n    ) external override onlyController {\n        require(account != address(0), \"bad address\");\n\n        require(assets.length == amounts.length, \"UserPositions::updateUserTokenBalances: arrays must be equal length\");\n        for (uint256 i; i < assets.length; ++i) {\n            uint256 currBal = _balances[assets[i]][account];\n            require(\n                0 != amounts[i],\n                \"UserPositions::updateUserTokenBalances: Must have a positive or negative number to change the balance\"\n            );\n            uint256 newAvailableAmount;\n            if (add[i]) {\n                newAvailableAmount = currBal + amounts[i];\n            } else {\n                require(\n                    amounts[i] <= currBal,\n                    \"UserPositions::updateUserTokenBalances: Amount to reduce balance must be no more than current balance\"\n                );\n                newAvailableAmount = currBal - amounts[i];\n            }\n            _balances[assets[i]][account] = newAvailableAmount;\n        }\n    }\n\n    function updateUserInterconnectBalances(\n        address[] memory assets,\n        address account,\n        uint256[] memory amounts,\n        bool[] memory add\n    ) external override onlyController {\n        require(account != address(0), \"bad address\");\n\n        require(\n            assets.length == amounts.length,\n            \"UserPositions::updateUserInterconnectBalances: arrays must be equal length\"\n        );\n        for (uint256 i; i < assets.length; ++i) {\n            uint256 currBal = _interconnectBalances[assets[i]][account];\n            require(\n                0 != amounts[i],\n                \"UserPositions::updateUserInterconnectBalances: Must have a positive or negative number to change the balance\"\n            );\n            uint256 newAvailableAmount;\n            if (add[i]) {\n                newAvailableAmount = currBal + amounts[i];\n            } else {\n                require(\n                    amounts[i] <= currBal,\n                    \"UserPositions::updateUserInterconnectBalances: Amount to reduce balance must be no more than current balance\"\n                );\n                newAvailableAmount = currBal - amounts[i];\n            }\n            _interconnectBalances[assets[i]][account] = newAvailableAmount;\n        }\n    }\n\n    function getUserStrategyBalanceByToken(\n        uint256 id,\n        address token,\n        address user\n    ) external view override returns (uint256 amount) {\n        return _userStrategyBalances[user][id][token];\n    }\n\n    function getUserInvestedAmountByToken(address token, address user) external view override returns (uint256 amount) {\n        return _deployedBalances[user][token];\n    }\n\n    function getUserBalances(\n        address user,\n        uint256[] calldata _strategies,\n        address[] calldata _tokens\n    )\n        external\n        view\n        override\n        returns (\n            IStrategyMap.StrategyBalance[] memory strategyBalance,\n            IStrategyMap.GeneralBalance[] memory userBalance\n        )\n    {\n        strategyBalance = new IStrategyMap.StrategyBalance[](_strategies.length);\n        userBalance = new IStrategyMap.GeneralBalance[](_tokens.length);\n\n        for (uint256 i; i < _tokens.length; ++i) {\n            userBalance[i].token = _tokens[i];\n            userBalance[i].balance = _balances[_tokens[i]][user];\n        }\n        address strategyMapAddress = moduleMap.getModuleAddress(Modules.StrategyMap);\n        for (uint256 i; i < _strategies.length; ++i) {\n            IStrategyMap.Token[] memory strategyTokens = IStrategyMap(strategyMapAddress)\n                .getStrategy(_strategies[i])\n                .tokens;\n\n            strategyBalance[i].tokens = new IStrategyMap.GeneralBalance[](strategyTokens.length);\n            strategyBalance[i].strategyID = _strategies[i];\n            for (uint256 j; j < strategyTokens.length; j++) {\n                strategyBalance[i].tokens[j].token = strategyTokens[j].token;\n                strategyBalance[i].tokens[j].balance = _userStrategyBalances[user][_strategies[i]][\n                    strategyTokens[j].token\n                ];\n            }\n        }\n    }\n\n    function _enterStrategy(\n        uint256 strategyId,\n        address user,\n        TokenMovement[] calldata tokens,\n        bool migration\n    ) internal {\n        require(tokens.length > 0, \"tokens required\");\n\n        for (uint256 i; i < tokens.length; ++i) {\n            require(tokens[i].token != address(0), \"invalid token\");\n            require(tokens[i].amount > 0, \"invalid amount\");\n            if (!migration) {\n                require(userDeployableBalance(tokens[i].token, user) >= tokens[i].amount, \"insufficient funds\");\n            } else {\n                _balances[tokens[i].token][user] += tokens[i].amount;\n            }\n\n            _userStrategyBalances[user][strategyId][tokens[i].token] += tokens[i].amount;\n            _deployedBalances[user][tokens[i].token] += tokens[i].amount;\n        }\n\n        // update eth rewards, eth rewards only supports single token strats!\n        IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).increaseUserRewards(\n            strategyId,\n            tokens[0].amount,\n            msg.sender\n        );\n\n        emit EnterStrategy(strategyId, user, tokens);\n    }\n\n    function _transferIn(\n        address from,\n        address token,\n        uint256 amount\n    ) private returns (uint256 actualAmount) {\n        address kernel = moduleMap.getModuleAddress(Modules.Kernel);\n\n        IERC20MetadataUpgradeable erc20 = IERC20MetadataUpgradeable(token);\n        // Get the balance before the transfer\n        uint256 beforeBalance = erc20.balanceOf(kernel);\n\n        // Transfer the tokens from the source to the Kernel\n        erc20.safeTransferFrom(from, kernel, amount);\n\n        // Get the balance after the transfer\n        actualAmount = erc20.balanceOf(kernel) - beforeBalance;\n    }\n}\n"
    },
    "contracts/core/EtherRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"../interfaces/IEtherRewards.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\n\n// https://solmaz.io/2019/02/24/scalable-reward-changing/\n// https://github.com/sushiswap/sushiswap/blob/canary/contracts/MasterChefV2.sol\ncontract EtherRewards is Initializable, ModuleMapConsumer, Controlled, IEtherRewards {\n    uint256 private totalEthRewards;\n    uint256 private totalClaimedEthRewards;\n    mapping(address => uint256) private totalUserClaimedEthRewards;\n\n    // user => strategyId => UserInfo\n    mapping(address => mapping(uint256 => UserInfo)) private users;\n\n    // strategyId => StrategyInfo\n    mapping(uint256 => StrategyInfo) private strategies;\n\n    // Used for accounting precision\n    uint256 private constant ACC_PRECISION = 1e12;\n\n    /// @param controllers_ The array of controllers for this contract\n    /// @param moduleMap_ The address of the ModuleMap contract\n    function initialize(address[] memory controllers_, address moduleMap_) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    /// @param strategyId Strategy the user entered into\n    /// @param amount Amount of token entered into strategy\n    /// @param user The address of the user\n    function increaseUserRewards(\n        uint256 strategyId,\n        uint256 amount,\n        address user\n    ) external override onlyController {\n        // Increase reward debt so users don't get back credited\n        users[user][strategyId].rewardDebt += int256((amount * strategies[strategyId].rewardPerShare) / ACC_PRECISION);\n    }\n\n    /// @param strategyId Strategy the user entered into\n    /// @param amount Amount of token entered into strategy\n    /// @param user The address of the user\n    function decreaseUserRewards(\n        uint256 strategyId,\n        uint256 amount,\n        address user\n    ) external override onlyController {\n        // Decrease reward debt so users don't lose rewards already earned\n        users[user][strategyId].rewardDebt -= int256((amount * strategies[strategyId].rewardPerShare) / ACC_PRECISION);\n    }\n\n    /// @dev strategyId = 0 for BIOS PFA!\n    /// @param strategyId The strategyId of the strategy to increase rewards for\n    /// @param ethRewardsAmount The amount of Ether rewards to add\n    function increaseEthRewards(uint256 strategyId, uint256 ethRewardsAmount) external override onlyController {\n        StrategyInfo storage strategy = strategies[strategyId];\n\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n\n        // BIOS is special and just uses deposits, not strategy balance\n        uint256 tokenTotalAmount = strategyId == 0\n            ? IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalTokenBalance(\n                integrationMap.getBiosTokenAddress()\n            )\n            : IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).getStrategyTokenBalance(\n                strategyId,\n                integrationMap.getWethTokenAddress()\n            );\n        require(tokenTotalAmount > 0, \"EtherRewards::tokenNotDeposited\");\n\n        // Update strategy rate and total\n        strategy.rewardPerShare += (ethRewardsAmount * ACC_PRECISION) / tokenTotalAmount;\n        strategy.totalRewards += ethRewardsAmount;\n\n        // Update global rewards\n        totalEthRewards += ethRewardsAmount;\n    }\n\n    /// @param user The address of the user\n    /// @param ids An array of strategyIds to claim rewards for\n    /// @return ethRewards The amount of Ether claimed\n    function claimEthRewards(address user, uint256[] calldata ids)\n        external\n        override\n        onlyController\n        returns (uint256 ethRewards)\n    {\n        for (uint256 i; i < ids.length; ++i) {\n            ethRewards += _claimStrategyRewards(ids[i], user);\n        }\n    }\n\n    /// @param strategyId The strategy to claim rewards from\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function _claimStrategyRewards(uint256 strategyId, address user) private returns (uint256) {\n        (uint256 ethRewards, uint256 userAmount) = _getUserStrategyRewards(strategyId, user);\n\n        if (ethRewards > 0) {\n            // User accounting\n            users[user][strategyId].rewardDebt = int256(\n                (strategies[strategyId].rewardPerShare * userAmount) / ACC_PRECISION\n            );\n\n            // Global accounting\n            totalClaimedEthRewards += ethRewards;\n            totalUserClaimedEthRewards[user] += ethRewards;\n        }\n\n        return ethRewards;\n    }\n\n    /// @param strategyId The ID of the strategy\n    /// @param user The address of the user\n    /// @return ethRewards The amount of claimable Ether\n    function getUserStrategyRewards(uint256 strategyId, address user)\n        external\n        view\n        override\n        returns (uint256 ethRewards)\n    {\n        (ethRewards, ) = _getUserStrategyRewards(strategyId, user);\n    }\n\n    function _getUserStrategyRewards(uint256 strategyId, address user)\n        private\n        view\n        returns (uint256 ethRewards, uint256 userAmount)\n    {\n        UserInfo memory userInfo = users[user][strategyId];\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        IUserPositions userPositions = IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions));\n\n        // Fetch balances. BIOS is special and has no strategy\n        userAmount = strategyId == 0\n            ? userPositions.userTokenBalance(integrationMap.getBiosTokenAddress(), user)\n            : userPositions.getUserStrategyBalanceByToken(strategyId, integrationMap.getWethTokenAddress(), user);\n\n        ethRewards = _subtractDebt(\n            ((strategies[strategyId].rewardPerShare * userAmount) / ACC_PRECISION),\n            userInfo.rewardDebt\n        );\n    }\n\n    /// @param user The address of the user\n    /// @return ethRewards The amount of Ether claimed\n    function getUserEthRewards(address user) external view override returns (uint256) {\n        IStrategyMap strategyMap = IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap));\n\n        uint256 totalRewards;\n\n        // We purposefully check 0 for BIOS (PFA)\n        for (uint256 i; i <= strategyMap.idCounter(); ++i) {\n            (uint256 rewards, ) = _getUserStrategyRewards(i, user);\n            totalRewards += rewards;\n        }\n\n        return totalRewards;\n    }\n\n    /// @return The total value of ETH claimed by users\n    function getTotalClaimedEthRewards() external view override returns (uint256) {\n        return totalClaimedEthRewards;\n    }\n\n    /// @return The total value of ETH claimed by a user\n    function getTotalUserClaimedEthRewards(address account) external view override returns (uint256) {\n        return totalUserClaimedEthRewards[account];\n    }\n\n    function getTotalUserClaimedEthByStrategy(address user, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory claimed = new uint256[](ids.length);\n        for (uint256 i; i < ids.length; ++i) {\n            claimed[i] = users[user][ids[i]].claimedRewards;\n        }\n        return claimed;\n    }\n\n    /// @return The total amount of Ether rewards\n    function getEthRewards() external view override returns (uint256) {\n        return totalEthRewards;\n    }\n\n    function getStrategyInfo(uint256 strategyId) external view returns (StrategyInfo memory) {\n        return strategies[strategyId];\n    }\n\n    function getUserInfo(uint256 strategyId, address user) external view returns (UserInfo memory) {\n        return users[user][strategyId];\n    }\n\n    /// @notice Helper function for math between uint and int\n    function _subtractDebt(uint256 rewards, int256 debt) private pure returns (uint256) {\n        if (debt < 0) {\n            return rewards + uint256(debt * -1);\n        } else {\n            return rewards - uint256(debt);\n        }\n    }\n}\n"
    },
    "contracts/yield-integrations/FantomSpookySwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISpookySwapMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to SushiSwap\ncontract FantomSpookySwapIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address boo;\n    address wftmAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // Token price ceilings to add some protection against front-runners\n    // pairAddress => ratio * 1000\n    // DEPRECATED but this var has already been deployed and cannot be removed\n    mapping(address => uint256) public priceCeilings;\n\n    // yield amounts\n    mapping(uint32 => uint256) public yieldBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address boo_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(boo_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        boo = boo_;\n        wftmAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    // third param positionID is unused for boo\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n\n        ISpookySwapMasterChef.PoolInfo memory poolInfo = ISpookySwapMasterChef(masterChef).poolInfo(masterChefPoolId);\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n\n        stakings[poolId] = masterChefPoolId;\n\n        // let master chef pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) < type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            ISpookySwapMasterChef(masterChef).deposit(stakings[poolId], balance);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint32 i; i < poolCount; ++i) {\n            yieldAmount += yieldBalances[poolIds[i]];\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wftmAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 booRatioX1000, // price ratio for BOO!\n        bool convertToWeth\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        ISpookySwapMasterChef(masterChef).deposit(stakings[poolId], 0);\n\n        if (convertToWeth) {\n            // check and convert any boo\n            uint256 booBalance = IERC20MetadataUpgradeable(boo).balanceOf(address(this));\n\n            if (booBalance > 0) {\n                checkPriceCeiling(boo, wftmAddress, booRatioX1000);\n                uint256[] memory amounts = swapExactInput(\n                    boo,\n                    wftmAddress,\n                    address(this),\n                    booBalance,\n                    getAmountOutMinimum(boo, wftmAddress, booBalance)\n                );\n                yieldBalances[poolId] += amounts[1];\n            }\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) public override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000);\n        }\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            ISpookySwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISpookySwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        ISpookySwapMasterChef(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                amountTokenA + amountsOfTokenReceived[1]\n            );\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                moduleMap.getModuleAddress(Modules.Kernel),\n                amountTokenB + amountsOfTokenReceived[1]\n            );\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the BOO pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in BOO rewards\n    /// @param token  The pool address to check for pending BOO rewards\n    /// @param poolId  the masterchef pool to retrieve yield for\n    /// @return Amount of yield available for harvest\n    function getPendingYield(address token, uint256 poolId) external view returns (uint256) {\n        if (token == address(0)) return 0;\n\n        return ISpookySwapMasterChef(masterChef).pendingBOO(poolId, address(this));\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\n\n        // swap tokens\n        swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= excessAmountToSwap;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, excessAmountToSwap, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"SushiSwapIntegration: no balance\");\n        // fetch reserve values from boo\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n}\n"
    },
    "contracts/interfaces/ISpookySwapMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface ISpookySwapMasterChef {\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    }\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    function poolInfo(uint256 input) external returns (PoolInfo memory);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function pendingBOO(uint256 _pid, address _user) external view returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\n}\n"
    },
    "contracts/yield-integrations/FantomSpiritSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISpiritSwapMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to SpiritSwap\ncontract FantomSpiritSwapIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address rewardToken;\n    address wnativeAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n    // yield amounts in weth. Harvested by integration, not yet by YieldManager\n    mapping(uint32 => uint256) public yieldBalances;\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n    // reward allocated per pool\n    mapping(uint32 => uint256) private rewardBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address rewardToken_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(masterChef_ != address(0), \"bad address\");\n        require(rewardToken_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        rewardToken = rewardToken_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    // these can be removed\n    function migrateLPTokens(uint32 poolId, address destination) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        uint256 stakedAmount = ISpiritSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        // MCV1 sends reward when unstaking\n        uint256 rewardBefore = _selfBalance(rewardToken);\n        ISpiritSwapMasterChef(masterChef).withdraw(stakings[poolId], stakedAmount);\n        _receivedReward(poolId, rewardBefore);\n        _zeroAndSend(poolId, pool.tokenA, destination);\n        _zeroAndSend(poolId, pool.tokenB, destination);\n\n        IERC20MetadataUpgradeable pair = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB));\n        pair.safeTransfer(destination, pair.balanceOf(address(this)));\n    }\n\n    function _zeroAndSend(\n        uint32 poolId,\n        address token,\n        address destination\n    ) internal {\n        uint256 amount = balances[poolId][token];\n        if (amount > 0) {\n            balances[poolId][token] = 0;\n            IERC20MetadataUpgradeable(token).safeTransfer(destination, amount);\n        }\n    }\n\n    // these can be removed\n    function migrateRewards(\n        uint32 sourcePool,\n        address destination,\n        uint256 amount_\n    ) external onlyManager {\n        uint256 amount;\n\n        if (amount_ > 0) {\n            require(rewardBalances[sourcePool] >= amount, \"not enough rewards balance\");\n            amount = amount_;\n        } else {\n            amount = rewardBalances[sourcePool];\n        }\n\n        if (amount > 0) {\n            rewardBalances[sourcePool] -= amount;\n\n            IERC20MetadataUpgradeable(rewardToken).safeTransfer(destination, amount);\n        }\n    }\n\n    // these can be removed\n    function receiveMigration(uint32 poolId) external onlyManager {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"must add pool\");\n\n        _countExtraReward(poolId, 0);\n        uint256 amount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n\n        emit LPTokensAcquired(amount);\n        emit DepositToPool(poolId, amount);\n    }\n\n    // third param positionID is unused for spirit\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    // function fixAllowance(uint32 poolId) external {\n    //     Pool memory pool = getPool(poolId);\n    //     require(pool.tokenA != address(0), \"bad pool\");\n\n    //     if (IERC20MetadataUpgradeable(pool.tokenA).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n    //         IERC20MetadataUpgradeable(pool.tokenA).safeApprove(swapRouterAddress, 0);\n    //         IERC20MetadataUpgradeable(pool.tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n    //     }\n\n    //     if (IERC20MetadataUpgradeable(pool.tokenB).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n    //         IERC20MetadataUpgradeable(pool.tokenB).safeApprove(swapRouterAddress, 0);\n    //         IERC20MetadataUpgradeable(pool.tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n    //     }\n    // }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n\n        ISpiritSwapMasterChef.PoolInfo memory poolInfo = ISpiritSwapMasterChef(masterChef).poolInfo(masterChefPoolId);\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n\n        stakings[poolId] = masterChefPoolId;\n\n        // let master chef pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) <= type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n        uint256 balance = _selfBalance(pairFor(pool.tokenA, pool.tokenB));\n        if (balance > 0) {\n            // MCV1 sends reward when staking\n            uint256 rewardBefore = _selfBalance(rewardToken);\n\n            ISpiritSwapMasterChef(masterChef).deposit(stakings[poolId], balance);\n\n            _receivedReward(poolId, rewardBefore);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint32 poolId = poolIds[i];\n            uint256 poolYield = yieldBalances[poolId];\n            if (poolYield > 0) {\n                yieldAmount += yieldBalances[poolId];\n                harvestedYield[poolId] += poolYield;\n                yieldBalances[poolId] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 rewardRatioX1000, // price ratio for spirit!\n        uint256, // unused rewards ratio\n        bool // unused conversion flag\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        uint256 rewardBefore = _selfBalance(rewardToken);\n        ISpiritSwapMasterChef(masterChef).deposit(stakings[poolId], 0);\n        _receivedReward(poolId, rewardBefore);\n\n        // check and convert any spirit\n        uint256 rewardBalance = rewardBalances[poolId];\n\n        if (rewardBalance > 0) {\n            checkPriceCeiling(rewardToken, wnativeAddress, rewardRatioX1000);\n            uint256[] memory amounts = _swapExactInput(\n                rewardToken,\n                wnativeAddress,\n                address(this),\n                rewardBalance,\n                getAmountOutMinimum(rewardToken, wnativeAddress, rewardBalance)\n            );\n\n            rewardBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) public override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0, true);\n        }\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) public onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            ISpiritSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISpiritSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n        // MCV1 sends reward when unstaking\n        uint256 rewardBefore = _selfBalance(rewardToken);\n\n        ISpiritSwapMasterChef(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        // account for reward\n        _receivedReward(poolId, rewardBefore);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    // external for swap manager\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external onlyController returns (uint256[] memory) {\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @return pair The address of the BOO pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SPIRIT rewards\n    /// @param poolId  the integration pool to retrieve yield for\n    /// @return tokens Token addresses of pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[1] memory tokens, uint256[1] memory amounts)\n    {\n        // pending yield is pending in Master Chef plus in rewardBalances\n        tokens[0] = rewardToken;\n        amounts[0] = ISpiritSwapMasterChef(masterChef).pendingSpirit(poolId, address(this)) + rewardBalances[poolId];\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = _selfBalance(targetToken);\n\n        // swap tokens\n        _swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = _selfBalance(targetToken) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"SpiritSwapIntegration: no balance\");\n        // fetch reserve values from spirit\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory rewardAmounts) {\n        rewardAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            rewardAmounts[i] = rewardBalances[pids[i]];\n        }\n    }\n\n    function _receivedReward(uint32 poolId, uint256 rewardBefore) internal returns (uint256 rewardAdded) {\n        rewardAdded = _selfBalance(rewardToken) - rewardBefore;\n        if (rewardAdded > 0) {\n            rewardBalances[poolId] += rewardAdded;\n        }\n    }\n\n    function countExtraReward(uint32 poolId, uint256 max)\n        external\n        onlyManager\n        returns (\n            uint256 addedReward,\n            uint256 accountedReward,\n            uint256 extraReward\n        )\n    {\n        return _countExtraReward(poolId, max);\n    }\n\n    function _countExtraReward(uint32 poolId, uint256 max)\n        internal\n        returns (\n            uint256 addedReward,\n            uint256 accountedReward,\n            uint256 extraReward\n        )\n    {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra reward when no pools exist\");\n\n        // Find total amount of reward that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedReward += rewardBalances[i + 1];\n        }\n\n        extraReward = _selfBalance(rewardToken) - accountedReward;\n        if (extraReward > 0) {\n            addedReward = (max > 0 && max < extraReward) ? max : extraReward;\n            rewardBalances[poolId] += addedReward;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/ISpiritSwapMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface ISpiritSwapMasterChef {\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    }\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    function poolInfo(uint256 input) external view returns (PoolInfo memory);\n\n    function poolLength() external view returns (uint256 length);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function pendingSpirit(uint256 _pid, address _user) external view returns (uint256);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\n}\n"
    },
    "contracts/yield-integrations/FantomSpiritSwapBoostedIntegration.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISpiritGauge.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to SpiritSwap\ncontract FantomSpiritSwapBoostedIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address rewardToken;\n    address wnativeAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => Boosted Farm address\n    mapping(uint32 => address) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n    // yield amounts in weth. Harvested by integration, not yet by YieldManager\n    mapping(uint32 => uint256) public yieldBalances;\n    // harvest yield (weth) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n    // reward allocated per pool\n    mapping(uint32 => uint256) private rewardBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address rewardToken_,\n        uint24 slippageNumerator_\n    ) public initializer {\n        require(factoryAddress_ != address(0), \"bad address\");\n        require(swapRouterAddress_ != address(0), \"bad address\");\n        require(rewardToken_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        slippageNumerator = slippageNumerator_;\n        rewardToken = rewardToken_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    // these can be removed\n    function migrateLPTokens(\n        uint32 poolId,\n        address destination,\n        uint256 amount\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        ISpiritGauge(stakings[poolId]).withdraw(amount);\n        _zeroAndSend(poolId, pool.tokenA, destination);\n        _zeroAndSend(poolId, pool.tokenB, destination);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeTransfer(destination, amount);\n    }\n\n    function _zeroAndSend(\n        uint32 poolId,\n        address token,\n        address destination\n    ) internal {\n        uint256 amount = balances[poolId][token];\n        if (amount > 0) {\n            balances[poolId][token] = 0;\n            IERC20MetadataUpgradeable(token).safeTransfer(destination, amount);\n        }\n    }\n\n    // these can be removed\n    function migrateRewards(\n        uint32 sourcePool,\n        address destination,\n        uint256 amount\n    ) external onlyManager {\n        require(rewardBalances[sourcePool] >= amount, \"not enough rewards balance\");\n        rewardBalances[sourcePool] -= amount;\n\n        IERC20MetadataUpgradeable(rewardToken).safeTransfer(destination, amount);\n    }\n\n    // these can be removed\n    function receiveMigration(uint32 poolId) external onlyManager {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"must add pool\");\n\n        _countExtraReward(poolId, 0);\n        uint256 amount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n\n        emit LPTokensAcquired(amount);\n        emit DepositToPool(poolId, amount);\n    }\n\n    // third param positionID is unused for spirit\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    // function fixAllowance(uint32 poolId) external {\n    //     Pool memory pool = getPool(poolId);\n    //     require(pool.tokenA != address(0), \"bad pool\");\n\n    //     if (IERC20MetadataUpgradeable(pool.tokenA).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n    //         IERC20MetadataUpgradeable(pool.tokenA).safeApprove(swapRouterAddress, 0);\n    //         IERC20MetadataUpgradeable(pool.tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n    //     }\n\n    //     if (IERC20MetadataUpgradeable(pool.tokenB).allowance(address(this), swapRouterAddress) <= type(uint256).max) {\n    //         IERC20MetadataUpgradeable(pool.tokenB).safeApprove(swapRouterAddress, 0);\n    //         IERC20MetadataUpgradeable(pool.tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n    //     }\n    // }\n\n    function configureStaking(uint32 poolId, address gaugeAddress) external onlyManager {\n        _configureStaking(poolId, gaugeAddress, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, address gaugeAddress) external onlyManager {\n        _configureStaking(poolId, gaugeAddress, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        address gaugeAddress,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == address(0), \"Staking already configured\");\n        }\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(ISpiritGauge(gaugeAddress).TOKEN() == pairAddress, \"Incorrect gauge address\");\n\n        stakings[poolId] = gaugeAddress;\n\n        // let gauge pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), gaugeAddress) <= type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(gaugeAddress, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(gaugeAddress, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n        uint256 balance = _selfBalance(pairFor(pool.tokenA, pool.tokenB));\n        if (balance > 0) {\n            ISpiritGauge(stakings[poolId]).deposit(balance);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint32 poolId = poolIds[i];\n            uint256 poolYield = yieldBalances[poolId];\n            if (poolYield > 0) {\n                yieldAmount += yieldBalances[poolId];\n                harvestedYield[poolId] += poolYield;\n                yieldBalances[poolId] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 rewardRatioX1000, // price ratio for spirit!\n        uint256, // unused rewards ratio\n        bool // unused conversion flag\n    ) external onlyManager {\n        uint256 rewardBefore = _selfBalance(rewardToken);\n        ISpiritGauge(stakings[poolId]).getReward();\n        _receivedReward(poolId, rewardBefore);\n\n        // check and convert any spirit\n        uint256 rewardBalance = rewardBalances[poolId];\n\n        if (rewardBalance > 0) {\n            checkPriceCeiling(rewardToken, wnativeAddress, rewardRatioX1000);\n            uint256[] memory amounts = _swapExactInput(\n                rewardToken,\n                wnativeAddress,\n                address(this),\n                rewardBalance,\n                getAmountOutMinimum(rewardToken, wnativeAddress, rewardBalance)\n            );\n\n            rewardBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) public override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0, true);\n        }\n    }\n\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) public onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n        IERC20 pair = IERC20(pairAddress);\n        uint256 lpAmount = pair.balanceOf(address(this)) + ISpiritGauge(stakings[poolId]).balanceOf(address(this));\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            pair.totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairAddress),\n            IERC20(pool.tokenB).balanceOf(pairAddress)\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISpiritGauge(stakings[poolId]).balanceOf(address(this)),\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // unstake\n        ISpiritGauge(stakings[poolId]).withdraw(liquidityToWithdraw);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = _swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function _swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    // external for swap manager\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external onlyController returns (uint256[] memory) {\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin);\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @return pair The address of the BOO pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @dev Returns total amount of pending yield in SPIRIT rewards\n    /// @param poolId  the integration pool to retrieve yield for\n    /// @return tokens Token addresses of pending yield\n    /// @return amounts Amounts of pending yield\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[1] memory tokens, uint256[1] memory amounts)\n    {\n        // pending yield is pending in Master Chef plus in rewardBalances\n        tokens[0] = rewardToken;\n        // not 100% sure earned is the correct method to call?\n        amounts[0] = ISpiritGauge(stakings[poolId]).earned(address(this)) + rewardBalances[poolId];\n    }\n\n    function getStakingAddress(uint32 poolId) external view returns (address) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = _selfBalance(targetToken);\n\n        // swap tokens\n        _swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = _selfBalance(targetToken) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= swapAmount;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"SpiritSwapIntegration: no balance\");\n        // fetch reserve values from spirit\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory rewardAmounts) {\n        rewardAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            rewardAmounts[i] = rewardBalances[pids[i]];\n        }\n    }\n\n    function _receivedReward(uint32 poolId, uint256 rewardBefore) internal returns (uint256 rewardAdded) {\n        rewardAdded = _selfBalance(rewardToken) - rewardBefore;\n        if (rewardAdded > 0) {\n            rewardBalances[poolId] += rewardAdded;\n        }\n    }\n\n    function countExtraReward(uint32 poolId, uint256 max)\n        external\n        onlyManager\n        returns (\n            uint256 addedReward,\n            uint256 accountedReward,\n            uint256 extraReward\n        )\n    {\n        return _countExtraReward(poolId, max);\n    }\n\n    function _countExtraReward(uint32 poolId, uint256 max)\n        internal\n        returns (\n            uint256 addedReward,\n            uint256 accountedReward,\n            uint256 extraReward\n        )\n    {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra reward when no pools exist\");\n\n        // Find total amount of reward that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedReward += rewardBalances[i + 1];\n        }\n\n        extraReward = _selfBalance(rewardToken) - accountedReward;\n        if (extraReward > 0) {\n            addedReward = (max > 0 && max < extraReward) ? max : extraReward;\n            rewardBalances[poolId] += addedReward;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/ISpiritGauge.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface ISpiritGauge {\n    function TOKEN() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function deposit(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n}\n"
    },
    "contracts/yield-integrations/BSCPancakeSwapIntegration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/ISushiSwapMasterChef.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IWeth9.sol\";\nimport \"../libraries/AMMLibrary.sol\";\n\n/// @notice Integrates 0x Nodes to PancakeSwap\ncontract BSCPancakeSwapIntegration is Controlled, IAMMIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 slippageNumerator;\n\n    address factoryAddress;\n    address swapRouterAddress;\n    address masterChef;\n    address rewardToken;\n    address wnativeAddress;\n\n    mapping(uint256 => Pool) private pools;\n    uint32 public poolCount;\n    uint32[] private poolIds;\n    // poolId => MasterChef's poolId\n    mapping(uint32 => uint256) private stakings;\n    // PoolId => Token => Amount\n    mapping(uint256 => mapping(address => uint256)) private balances;\n\n    // yield amounts\n    mapping(uint32 => uint256) public yieldBalances;\n\n    // harvest yield (wnative) per pool (harvested by YieldManager)\n    mapping(uint32 => uint256) private harvestedYield;\n\n    // sushi allocated per pool\n    mapping(uint32 => uint256) private rewardBalances;\n\n    event TokensReceived(uint256 amount);\n    event LPTokensAcquired(uint256 amount);\n    event DepositToPool(uint256 poolId, uint256 amount);\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\n    event YieldReceived(uint256 amount);\n    event PoolRebalanced(\n        uint256 poolId,\n        address tokenSold,\n        uint256 amountSold,\n        address tokenBought,\n        uint256 amountBought\n    );\n\n    receive() external payable {}\n\n    /// @param controllers_ The address of the controlling contract\n    /// @param factoryAddress_ The address of the PancakeSwap factory contract\n    /// @param swapRouterAddress_ The address of the PancakeSwap router contract\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        address masterChef_,\n        address rewardToken_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        masterChef = masterChef_;\n        slippageNumerator = slippageNumerator_;\n        rewardToken = rewardToken_;\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint256\n    ) external onlyManager {\n        poolCount++;\n        pools[poolCount].tokenA = tokenA;\n        pools[poolCount].tokenB = tokenB;\n        poolIds.push(poolCount);\n\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) < type(uint256).max) {\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n    }\n\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, false);\n    }\n\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\n        _configureStaking(poolId, masterChefPoolId, true);\n    }\n\n    function _configureStaking(\n        uint32 poolId,\n        uint256 masterChefPoolId,\n        bool overwrite\n    ) internal {\n        Pool memory pool = getPool(poolId);\n        require(pool.tokenA != address(0), \"Pool doesn't exist\");\n\n        if (overwrite != true) {\n            require(stakings[poolId] == 0, \"Staking already configured\");\n        }\n\n        ISushiSwapMasterChef.PoolInfo memory poolInfo = ISushiSwapMasterChef(masterChef).poolInfo(masterChefPoolId);\n\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\n\n        require(address(poolInfo.lpToken) == pairAddress, \"Incorrect MasterChef's poolId was provided\");\n\n        stakings[poolId] = masterChefPoolId;\n\n        // let master chef pull tokens\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) < type(uint256).max) {\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\n        }\n    }\n\n    /// @param tokenAddress The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) external override onlyController {\n        balances[poolId][tokenAddress] += amount;\n    }\n\n    /// @param token The address of the deposited token\n    /// @param amount The amount of the token being deposited\n    function incrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] += amount;\n    }\n\n    function decrementBalance(\n        uint32 poolId,\n        address token,\n        uint256 amount\n    ) external onlyManager {\n        balances[poolId][token] -= amount;\n    }\n\n    function getPool(uint32 pid) public view returns (Pool memory) {\n        return pools[pid];\n    }\n\n    /// @return tokenAddress The address of the token to get the balance of\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\n        return balances[poolId][tokenAddress];\n    }\n\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\n    }\n\n    function deploy(uint32 poolId) external override onlyController {\n        _deploy(poolId);\n    }\n\n    function manualDeploy(uint32 poolId) external onlyManager {\n        _deploy(poolId);\n    }\n\n    function _deploy(uint32 poolId) internal {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\n\n        if (balanceA == 0 || balanceB == 0) {\n            return;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\n\n            (, , uint256 liquidityAcquired) = ISushiSwapRouter(swapRouterAddress).addLiquidity(\n                pool.tokenA,\n                pool.tokenB,\n                amountA,\n                amountB,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            balances[poolId][pool.tokenA] -= amountA;\n            balances[poolId][pool.tokenB] -= amountB;\n\n            emit LPTokensAcquired(liquidityAcquired);\n            emit DepositToPool(poolId, liquidityAcquired);\n        }\n    }\n\n    function stakeLPTokens(uint32 poolId) external onlyManager {\n        Pool memory pool = pools[poolId];\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\n        if (balance > 0) {\n            uint256 rewardBefore = _selfBalance(rewardToken);\n\n            ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], balance);\n\n            _receivedReward(poolId, rewardBefore);\n        }\n    }\n\n    function harvestYield() external override onlyController {\n        uint256 yieldAmount;\n        for (uint256 i; i < poolCount; ++i) {\n            uint32 poolId = poolIds[i];\n            uint256 poolYield = yieldBalances[poolId];\n            if (poolYield > 0) {\n                yieldAmount += poolYield;\n                harvestedYield[poolId] += poolYield;\n                yieldBalances[poolId] = 0;\n            }\n        }\n        if (yieldAmount > 0) {\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\n                moduleMap.getModuleAddress(Modules.YieldManager),\n                yieldAmount\n            );\n            emit YieldReceived(yieldAmount);\n        }\n    }\n\n    /// @notice Harvest available yield for desired pool\n    function harvestYieldByPool(\n        uint32 poolId,\n        uint256 rewardRatioX1000, // price ratio for Cake!\n        uint256, // unused\n        bool // unused conversion flag\n    ) external onlyManager {\n        // MasterChefV1 does not have an explicit harvest method\n        // deposit 0 accomplishes the rewards harvesting\n        uint256 rewardBefore = _selfBalance(rewardToken);\n        ISushiSwapMasterChef(masterChef).deposit(stakings[poolId], 0);\n        _receivedReward(poolId, rewardBefore);\n\n        // check and convert any cake\n        uint256 rewardBalance = rewardBalances[poolId];\n\n        if (rewardBalance > 0) {\n            checkPriceCeiling(rewardToken, wnativeAddress, rewardRatioX1000);\n            uint256[] memory amounts = swapExactInput(\n                rewardToken,\n                wnativeAddress,\n                address(this),\n                rewardBalance,\n                getAmountOutMinimum(rewardToken, wnativeAddress, rewardBalance)\n            );\n            rewardBalances[poolId] = 0;\n            yieldBalances[poolId] += amounts[1];\n        }\n    }\n\n    /// @notice Withdraws token from the integration\n    /// @param tokenAddress The address of the underlying token to withdraw\n    /// @param amount The amoutn of the token to withdraw\n    function withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId\n    ) public override onlyController {\n        if (amount <= getBalance(poolId, tokenAddress)) {\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\n            balances[poolId][tokenAddress] -= amount;\n        } else {\n            _withdraw(tokenAddress, amount, poolId, 0, true);\n        }\n    }\n\n    function manualWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000\n    ) external onlyManager {\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\n    }\n\n    function getTokensPoolValue(uint32 poolId)\n        internal\n        view\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\n    {\n        Pool memory pool = getPool(poolId);\n\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\n            ISushiSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount;\n\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\n            lpAmount,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\n        );\n    }\n\n    function _withdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint32 poolId,\n        uint256 ratioX1000,\n        bool sendToKernel\n    ) internal {\n        Pool memory pool = getPool(poolId);\n\n        if (ratioX1000 > 0) {\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n        }\n\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            ISushiSwapMasterChef(masterChef).userInfo(stakings[poolId], address(this)).amount,\n            reserve0,\n            reserve1,\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\n            pool\n        );\n\n        // MCV1 sends rewards when unstaking\n        uint256 rewardBefore = _selfBalance(rewardToken);\n\n        ISushiSwapMasterChef(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\n\n        // account for rewards\n        _receivedReward(poolId, rewardBefore);\n\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\n            swapRouterAddress,\n            liquidityToWithdraw\n        );\n\n        (uint256 amountTokenA, uint256 amountTokenB) = ISushiSwapRouter(swapRouterAddress).removeLiquidity(\n            pool.tokenA,\n            pool.tokenB,\n            liquidityToWithdraw,\n            0,\n            0,\n            address(this),\n            block.timestamp + 360\n        );\n\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\n    }\n\n    function withdrawSwapAndEmit(\n        Pool memory pool,\n        uint32 poolId,\n        address tokenAddress,\n        uint256 amountTokenA,\n        uint256 amountTokenB,\n        bool sendToKernel\n    ) internal {\n        uint256[] memory amountsOfTokenReceived;\n\n        if (tokenAddress == pool.tokenA) {\n            amountsOfTokenReceived = swapExactInput(\n                pool.tokenB,\n                tokenAddress,\n                address(this),\n                amountTokenB,\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenA + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\n        } else if (tokenAddress == pool.tokenB) {\n            amountsOfTokenReceived = swapExactInput(\n                pool.tokenA,\n                tokenAddress,\n                address(this),\n                amountTokenA,\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\n            );\n\n            if (sendToKernel) {\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\n                    moduleMap.getModuleAddress(Modules.Kernel),\n                    amountTokenB + amountsOfTokenReceived[1]\n                );\n            } else {\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\n            }\n\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\n        }\n\n        return\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        require(amountIn > 0, \"amountIn must be greater than zero\");\n\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(pairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the Pancake pool contract\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of the ordered token0\n    /// @return token1 The address of the ordered token1\n    function getTokensOrdered(address tokenA, address tokenB) public pure returns (address token0, address token1) {\n        if (tokenA < tokenB) {\n            token0 = tokenA;\n            token1 = tokenB;\n        } else {\n            token0 = tokenB;\n            token1 = tokenA;\n        }\n    }\n\n    /// @dev Returns total amount of pending yield in CAKE rewards\n    /// @param poolId The pool id to check for pending rewards\n    /// @return tokens Array of yield tokens\n    /// @return amounts Array of yield amounts\n    function getPendingYield(uint32 poolId)\n        external\n        view\n        returns (address[1] memory tokens, uint256[1] memory amounts)\n    {\n        // pending yield is pending in staking contract plus in rewardBalances\n        tokens[0] = rewardToken;\n        amounts[0] = ISushiSwapMasterChef(masterChef).pendingSushi(poolId, address(this)) + rewardBalances[poolId];\n    }\n\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\n        return stakings[poolId];\n    }\n\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\n        amounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            amounts[i] = _getYieldBalance(pids[i]);\n        }\n        return amounts;\n    }\n\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\n        return yieldBalances[poolId];\n    }\n\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\n        return harvestedYield[poolId];\n    }\n\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\n        for (uint32 i; i < poolCount; ++i) {\n            amount += getHarvestedYield(i + 1);\n        }\n    }\n\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\n    /// @param poolId The ID of the pool to rebalance\n    /// @param ratioX1000 reserves ratio to control the price slippage\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\n    function rebalancePool(\n        uint32 poolId,\n        uint256 ratioX1000,\n        uint256 maxSellTokenA,\n        uint256 maxSellTokenB\n    ) external onlyManager {\n        Pool memory pool = getPool(poolId);\n\n        require(pools[poolId].tokenA != address(0), \"Pool doesn't exist\");\n\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\n\n        // determine which token and how much to swap\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\n            pool,\n            getBalance(poolId, pool.tokenA),\n            getBalance(poolId, pool.tokenB)\n        );\n\n        // handle tokenA vs tokenB, cap at max sell param\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\n            swapToken,\n            pool,\n            excessAmountToSwap,\n            maxSellTokenA,\n            maxSellTokenB\n        );\n\n        // track balance change of targetToken\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\n\n        // swap tokens\n        swapExactInput(\n            swapToken,\n            targetToken,\n            address(this),\n            swapAmount,\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\n        );\n\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\n\n        // update pool token balances\n        if (amountReceived > 0) {\n            balances[poolId][swapToken] -= excessAmountToSwap;\n            balances[poolId][targetToken] += amountReceived;\n\n            emit PoolRebalanced(poolId, swapToken, excessAmountToSwap, targetToken, amountReceived);\n        }\n    }\n\n    function calculateExcessTokensToSwap(\n        Pool memory pool,\n        uint256 balanceA,\n        uint256 balanceB\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\n        require(balanceA + balanceB > 0, \"PancakeSwapIntegration: no balance\");\n        // fetch reserve values from cake\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\n\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\n            pool,\n            balanceA,\n            balanceB,\n            reserveA,\n            reserveB\n        );\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(pairFor(tokenA, tokenB));\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\n    }\n\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory sushiAmounts) {\n        sushiAmounts = new uint256[](pids.length);\n        for (uint256 i; i < pids.length; ++i) {\n            sushiAmounts[i] = rewardBalances[pids[i]];\n        }\n    }\n\n    function _receivedReward(uint32 poolId, uint256 rewardBefore) internal returns (uint256 rewardAdded) {\n        rewardAdded = _selfBalance(rewardToken) - rewardBefore;\n        if (rewardAdded > 0) {\n            rewardBalances[poolId] += rewardAdded;\n        }\n    }\n\n    function countExtraRewards() external onlyManager returns (uint256 extraReward, uint256 accountedReward) {\n        uint256 count = poolCount;\n        require(count > 0, \"Cannot count extra sushi when no pools exist\");\n\n        // Find total amount of sushi that has been accounted for\n        for (uint32 i; i < count; ++i) {\n            accountedReward += rewardBalances[i + 1];\n        }\n\n        extraReward = _selfBalance(rewardToken) - accountedReward;\n        if (extraReward > 0) {\n            rewardBalances[1] += extraReward;\n        }\n    }\n\n    function _selfBalance(address token) internal view returns (uint256) {\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/mock/TestIntegration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../core/Controlled.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../core/ModuleMapConsumer.sol\";\n\n/// @notice Test Integration for yield harvest fix\ncontract TestIntegration is ModuleMapConsumer, Controlled, IIntegration {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n    address wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    function deposit(address, uint256) external override {\n        require(true, \"Not relevant to testing\");\n    }\n\n    function withdraw(address, uint256) public override {\n        require(true, \"Not relevant to testing\");\n    }\n\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\n    function deploy() external override {\n        require(true, \"Not relevant to testing\");\n    }\n\n    /// @dev Harvests token yield from the integration\n    function harvestYield() external override {\n        // transfer weth and eth balance to yield manager contract\n        IERC20MetadataUpgradeable(wethAddress).safeTransfer(\n            0xa558Ba0b4D55e0c6ce81ea309c16528Ed2C803C9,\n            IERC20MetadataUpgradeable(wethAddress).balanceOf(address(this))\n        );\n    }\n\n    /// @dev This returns the total amount of the underlying token that\n    /// @dev has been deposited to the integration contract\n    /// @return The amount of the underlying token that can be withdrawn\n    function getBalance(address) external view override returns (uint256) {\n        require(true, \"Not relevant to testing\");\n        return 69420;\n    }\n\n    /// @dev Returns the total amount of yield awaiting to be harvested\n    /// @dev using the relevant integration's own function\n    function getPendingYield(address) external view override returns (uint256 amount) {\n        require(true, \"Not relevant to testing\");\n        return 42069;\n    }\n}\n"
    },
    "contracts/core/ModuleMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IModuleMap.sol\";\n\ncontract ModuleMap is IModuleMap, Initializable, OwnableUpgradeable {\n    mapping(Modules => address) private _moduleMap;\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    function getModuleAddress(Modules key) public view override returns (address) {\n        return _moduleMap[key];\n    }\n\n    function setModuleAddress(Modules key, address value) external onlyOwner {\n        _moduleMap[key] = value;\n    }\n}\n"
    },
    "contracts/core/SushiSwapTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./Controlled.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"../interfaces/IDexTrader.sol\";\nimport \"../interfaces/ISushiSwapTrader.sol\";\nimport \"../interfaces/ISushiSwapFactory.sol\";\nimport \"../interfaces/ISushiSwapRouter.sol\";\nimport \"../interfaces/ISushiSwapPair.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\n\n/// @notice Integrates 0x Nodes to SushiSwap\ncontract SushiSwapTrader is Initializable, ModuleMapConsumer, Controlled, ISushiSwapTrader, IDexTrader {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\n    uint24 private slippageNumerator;\n    address private factoryAddress;\n    address private swapRouterAddress;\n\n    event ExecutedSwapExactInput(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 amountOut\n    );\n\n    event FailedSwapExactInput(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMin);\n\n    event SushiSwapSlippageNumeratorUpdated(uint24 slippageNumerator);\n\n    /// @param controllers_ The addresses of the controlling contracts\n    /// @param moduleMap_ The address of the module map contract\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\n    /// @param swapRouterAddress_ The address of the SushiSwap swap router contract\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address factoryAddress_,\n        address swapRouterAddress_,\n        uint24 slippageNumerator_\n    ) external initializer {\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"SushiSwapTrader::initialize: Slippage Numerator must be less than or equal to slippage denominator\"\n        );\n        __Controlled_init(controllers_, moduleMap_);\n        factoryAddress = factoryAddress_;\n        swapRouterAddress = swapRouterAddress_;\n        slippageNumerator = slippageNumerator_;\n    }\n\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\n    function updateSlippageNumerator(uint24 slippageNumerator_) external override onlyManager {\n        require(\n            slippageNumerator_ != slippageNumerator,\n            \"SushiSwapTrader::setSlippageNumerator: Slippage numerator must be set to a new value\"\n        );\n        require(\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\n            \"SushiSwapTrader::setSlippageNumerator: Slippage Numerator must be less than or equal to slippage denominator\"\n        );\n\n        slippageNumerator = slippageNumerator_;\n\n        emit SushiSwapSlippageNumeratorUpdated(slippageNumerator_);\n    }\n\n    /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\n    /// @return Bool indicating whether the trade succeeded\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\n    function biosBuyBack(uint256 ratioX1000) external override onlyController returns (bool) {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        address wethAddress = integrationMap.getWethTokenAddress();\n        address biosAddress = integrationMap.getBiosTokenAddress();\n\n        // Front runner protection\n        checkPriceCeiling(wethAddress, biosAddress, ratioX1000);\n\n        uint256 wethAmountIn = IERC20MetadataUpgradeable(wethAddress).balanceOf(address(this));\n\n        uint256 biosAmountOutMin = getAmountOutMinimum(wethAddress, biosAddress, wethAmountIn);\n\n        return\n            swapExactInput(\n                wethAddress,\n                integrationMap.getBiosTokenAddress(),\n                moduleMap.getModuleAddress(Modules.Kernel),\n                wethAmountIn,\n                biosAmountOutMin\n            );\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param recipient The address of the token out recipient\n    /// @param amountIn The exact amount of the input to swap\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\n    /// @return bool Indicates whether the swap succeeded\n    function swapExactInput(\n        address tokenIn,\n        address tokenOut,\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) public override(ISushiSwapTrader, IDexTrader) onlyController returns (bool) {\n        require(\n            IERC20MetadataUpgradeable(tokenIn).balanceOf(address(this)) >= amountIn,\n            \"SushiSwapTrader::swapExactInput: Balance is less than trade amount\"\n        );\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        uint256 deadline = block.timestamp;\n\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) == 0) {\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, type(uint256).max);\n        }\n\n        uint256 tokenOutBalanceBefore = IERC20MetadataUpgradeable(tokenOut).balanceOf(recipient);\n\n        try\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                recipient,\n                deadline\n            )\n        {\n            emit ExecutedSwapExactInput(\n                tokenIn,\n                tokenOut,\n                amountIn,\n                amountOutMin,\n                IERC20MetadataUpgradeable(tokenOut).balanceOf(recipient) - tokenOutBalanceBefore\n            );\n            return true;\n        } catch {\n            emit FailedSwapExactInput(tokenIn, tokenOut, amountIn, amountOutMin);\n            return false;\n        }\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\n    function getAmountOutMinimum(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOutMinimum) {\n        amountOutMinimum =\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\n            SLIPPAGE_DENOMINATOR;\n    }\n\n    /// @param tokenIn The address of the input token\n    /// @param tokenOut The address of the output token\n    /// @param amountIn The exact amount of the input to swap\n    /// @return amountOut The estimated amount of tokenOut to receive\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        require(amountIn > 0, \"SushiSwapTrader::getAmountOut: amountIn must be greater than zero\");\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\n        require(reserveIn > 0 && reserveOut > 0, \"SushiSwapTrader::getAmountOut: No liquidity in pool reserves\");\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * (reserveOut);\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return reserveA The reserve balance of tokenA in the pool\n    /// @return reserveB The reserve balance of tokenB in the pool\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = getTokensSorted(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(getPairFor(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return token0 The address of sorted token0\n    /// @return token1 The address of sorted token1\n    function getTokensSorted(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"SushiSwapTrader::sortToken: Identical token addresses\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\n        require(token0 != address(0), \"SushiSwapTrader::sortToken: Zero address\");\n    }\n\n    function checkPriceCeiling(\n        address tokenA,\n        address tokenB,\n        uint256 ratioX1000\n    ) internal view {\n        address pairAddress = address(getPairFor(tokenA, tokenB));\n        require(pairAddress != address(0), \"SushiSwapIntegration:BadPair\");\n\n        uint256 currentRatio;\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\n        if (reserveA < reserveB) {\n            currentRatio = (reserveB * 1000) / reserveA;\n        } else if (reserveB < reserveA) {\n            currentRatio = (reserveA * 1000) / reserveB;\n        } else {\n            currentRatio = 1000;\n        }\n\n        // limit to 1% off\n        if (currentRatio > ratioX1000) {\n            require(((currentRatio - ratioX1000) * 100) / ratioX1000 < 1, \"CeilingLimitReached\");\n        } else if (ratioX1000 > currentRatio) {\n            require(((ratioX1000 - currentRatio) * 100) / ratioX1000 < 1, \"CeilingLimitReached\");\n        }\n    }\n\n    /// @param _tokenA The address of the first  token from the token pair\n    /// @param _tokenB The address of the second token from the token pair\n    /// return true if pool exist else overwise\n    function isPoolExist(address _tokenA, address _tokenB) external view override returns (bool) {\n        (address token0, address token1) = getTokensSorted(_tokenA, _tokenB);\n        return getPairFor(token0, token1) != address(0);\n    }\n\n    /// @param tokenA The address of tokenA\n    /// @param tokenB The address of tokenB\n    /// @return pair The address of the SushiSwap pool contract\n    function getPairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\n    }\n\n    /// @return SushiSwap Factory address\n    function getFactoryAddress() external view returns (address) {\n        return factoryAddress;\n    }\n\n    /// @return The slippage numerator\n    function getSlippageNumerator() external view returns (uint24) {\n        return slippageNumerator;\n    }\n\n    /// @return The slippage denominator\n    function getSlippageDenominator() external pure returns (uint24) {\n        return SLIPPAGE_DENOMINATOR;\n    }\n}\n"
    },
    "contracts/core/StrategyMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"./Controlled.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IIntegration.sol\";\nimport \"../interfaces/IAMMIntegration.sol\";\nimport \"../interfaces/IUserPositions.sol\";\nimport \"../interfaces/IYieldManager.sol\";\nimport \"../interfaces/IERC20.sol\";\n\ncontract StrategyMap is Initializable, ModuleMapConsumer, Controlled, IStrategyMap {\n    // #### Constants\n    uint32 public constant TOKEN_WEIGHT = 100000;\n\n    // #### Global State\n\n    // Strategy id => Strategy\n    mapping(uint256 => Strategy) internal strategies;\n\n    // Token => total amount in all strategies\n    mapping(address => uint256) internal tokenBalances;\n\n    // Strategy => token => balance\n    mapping(uint256 => mapping(address => uint256)) internal strategyTokenBalances;\n\n    // Integration => pool id => token => amount to deploy\n    mapping(address => mapping(uint32 => mapping(address => int256))) internal deployAmount;\n\n    // Token => {integration, pool, amount}[]\n    mapping(address => ClosablePosition[]) private _closablePositions;\n\n    uint256 public override idCounter;\n\n    // Used for strategy verification. Contents are always deleted at the end of a tx to reduce gas hit.\n    mapping(address => uint256) internal tokenWeights;\n\n    // #### Functions\n\n    function initialize(address[] memory controllers_, address moduleMap_) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    function addStrategy(\n        string calldata name,\n        Integration[] calldata integrations,\n        Token[] calldata tokens,\n        uint256[] calldata maxCap\n    ) external override onlyController {\n        require(integrations.length > 0, \"integrations missing\");\n        require(tokens.length > 0, \"tokens missing\");\n        require(bytes(name).length > 0, \"must have a name\");\n        require(tokens.length == maxCap.length, \"caps are missing\");\n\n        idCounter++;\n        uint256 strategyID = idCounter;\n        _verifyAndSetStrategy(strategyID, name, integrations, tokens, maxCap);\n\n        // Emit event\n        emit NewStrategy(strategyID, integrations, tokens, name);\n    }\n\n    function _verifyAndSetStrategy(\n        uint256 strategyID,\n        string memory name,\n        Integration[] memory integrations,\n        Token[] memory tokens,\n        uint256[] memory maxCap\n    ) internal {\n        for (uint256 i; i < integrations.length; ++i) {\n            require(integrations[i].integration != address(0), \"bad integration\");\n        }\n\n        address[] memory uniqueTokens = new address[](tokens.length);\n        uint256 idx = 0;\n        for (uint256 i; i < tokens.length; ++i) {\n            require(tokens[i].integrationPairIdx < integrations.length, \"integration idx out of bounds\");\n            require(tokens[i].token != address(0), \"bad token\");\n\n            if (tokenWeights[tokens[i].token] == 0) {\n                uniqueTokens[idx] = tokens[i].token;\n                idx++;\n            }\n            tokenWeights[tokens[i].token] += tokens[i].weight;\n            strategies[strategyID].maximumCap[tokens[i].token] = maxCap[i];\n        }\n\n        // Verify weights\n        for (uint256 i; i < idx; ++i) {\n            require(tokenWeights[uniqueTokens[i]] == TOKEN_WEIGHT, \"invalid token weight\");\n            strategies[strategyID].availableTokens[uniqueTokens[i]] = true;\n            delete tokenWeights[uniqueTokens[i]];\n        }\n\n        strategies[strategyID].name = name;\n\n        // Can't copy a memory array directly to storage yet, so we build it manually.\n        for (uint256 i; i < integrations.length; ++i) {\n            strategies[strategyID].integrations.push(integrations[i]);\n        }\n        for (uint256 i; i < tokens.length; ++i) {\n            strategies[strategyID].tokens.push(tokens[i]);\n        }\n    }\n\n    function updateName(uint256 id, string calldata name) external override onlyController {\n        require(bytes(strategies[id].name).length > 0, \"strategy must exist\");\n        require(bytes(name).length > 0, \"invalid name\");\n        strategies[id].name = name;\n        emit UpdateName(id, name);\n    }\n\n    function setMaximumCap(\n        uint256 id,\n        address token,\n        uint256 maxCap\n    ) external override onlyManager {\n        require(token != address(0), \"bad token\");\n        require(id <= idCounter, \"invalid strategy\");\n        strategies[id].maximumCap[token] = maxCap;\n    }\n\n    function addPairToStrategy(\n        uint256 strategyId,\n        Integration calldata integration,\n        address token\n    ) public override onlyManager {\n        StrategySummary memory current = getStrategy(strategyId);\n        int256 integrationIndex = -1;\n        for (uint256 i; i < current.integrations.length; ++i) {\n            if (current.integrations[i].integration == address(0)) {\n                integrationIndex = int256(i);\n                break;\n            }\n        }\n        if (integrationIndex > -1) {\n            strategies[strategyId].integrations[uint256(integrationIndex)] = integration;\n        } else {\n            strategies[strategyId].integrations.push(integration);\n            integrationIndex = int256(current.integrations.length);\n        }\n        int256 tokenIndex = -1;\n        for (uint256 i; i < current.tokens.length; ++i) {\n            if (current.tokens[i].token == address(0)) {\n                tokenIndex = int256(i);\n                break;\n            }\n        }\n        if (tokenIndex > -1) {\n            strategies[strategyId].tokens[uint256(tokenIndex)] = Token({\n                token: token,\n                integrationPairIdx: uint256(integrationIndex),\n                weight: 0\n            });\n        } else {\n            strategies[strategyId].tokens.push(\n                Token({token: token, integrationPairIdx: uint256(integrationIndex), weight: 0})\n            );\n        }\n        emit AddIntegration(strategyId, integration, token);\n    }\n\n    function movePairWeight(\n        uint256 strategyId,\n        uint256 sourceIndex,\n        uint256 destinationIndex,\n        int256 vectorAmount,\n        uint32 amount,\n        bool rebalance\n    ) external override onlyManager {\n        require(strategies[strategyId].tokens[sourceIndex].weight >= amount, \"invalid amount\");\n        strategies[strategyId].tokens[sourceIndex].weight -= amount;\n        strategies[strategyId].tokens[destinationIndex].weight += amount;\n\n        if (rebalance) {\n            StrategySummary memory current = getStrategy(strategyId);\n\n            // Decrease source deploy amount\n            deployAmount[current.integrations[current.tokens[sourceIndex].integrationPairIdx].integration][\n                current.integrations[current.tokens[sourceIndex].integrationPairIdx].ammPoolID\n            ][current.tokens[sourceIndex].token] -= vectorAmount;\n\n            // Increase dest deploy amount\n            deployAmount[current.integrations[current.tokens[destinationIndex].integrationPairIdx].integration][\n                current.integrations[current.tokens[destinationIndex].integrationPairIdx].ammPoolID\n            ][current.tokens[destinationIndex].token] += vectorAmount;\n        }\n        emit IntegrationWeightAdjustment(strategyId, sourceIndex, destinationIndex, amount, rebalance);\n    }\n\n    function removePairFromStrategy(\n        uint256 strategyId,\n        uint256 integrationIndex,\n        address token\n    ) public override onlyManager {\n        require(strategyId <= idCounter, \"Bad strategy\");\n\n        StrategySummary memory current = getStrategy(strategyId);\n        require(integrationIndex <= current.integrations.length, \"bad integration\");\n\n        bool shouldRemoveIntegration = true;\n        for (uint256 i; i < current.tokens.length; ++i) {\n            if (current.tokens[i].integrationPairIdx == integrationIndex) {\n                if (current.tokens[i].token == token) {\n                    require(current.tokens[i].weight == 0, \"weight > 0\");\n                    strategies[strategyId].tokens[i] = Token({token: address(0), integrationPairIdx: 0, weight: 0});\n                } else {\n                    shouldRemoveIntegration = false;\n                }\n            }\n        }\n        if (shouldRemoveIntegration) {\n            strategies[strategyId].integrations[integrationIndex] = Integration({\n                ammPoolID: 0,\n                integration: address(0)\n            });\n        }\n        emit RemoveIntegration(strategyId, integrationIndex, token);\n    }\n\n    function setAvailableTokens(\n        uint256 strategyId,\n        address token,\n        bool available\n    ) external onlyManager {\n        strategies[strategyId].availableTokens[token] = available;\n    }\n\n    function deleteStrategy(uint256 id) external override onlyController {\n        StrategySummary memory strategy = getStrategy(id);\n        for (uint256 i; i < strategy.tokens.length; ++i) {\n            require(strategyTokenBalances[id][strategy.tokens[i].token] == 0, \"strategy in use\");\n            delete strategies[id].availableTokens[strategy.tokens[i].token];\n        }\n        delete strategies[id];\n        emit DeleteStrategy(id);\n    }\n\n    function getMaximumCap(uint256 id, address token) external view override returns (uint256 cap) {\n        cap = strategies[id].maximumCap[token];\n    }\n\n    function increaseStrategy(uint256 id, IUserPositions.TokenMovement[] calldata tokens)\n        external\n        override\n        onlyController\n    {\n        StrategySummary memory strategy = getStrategy(id);\n        for (uint256 i; i < tokens.length; ++i) {\n            require(strategies[id].availableTokens[tokens[i].token], \"invalid token\");\n            uint256 maxCap = strategies[id].maximumCap[tokens[i].token];\n            if (maxCap > 0) {\n                require(maxCap > (strategyTokenBalances[id][tokens[i].token] + tokens[i].amount), \"at capacity\");\n            }\n\n            strategyTokenBalances[id][tokens[i].token] += tokens[i].amount;\n            tokenBalances[tokens[i].token] += tokens[i].amount;\n\n            for (uint256 j; j < strategy.tokens.length; j++) {\n                if (tokens[i].token == strategy.tokens[j].token) {\n                    Integration memory integration = strategy.integrations[strategy.tokens[j].integrationPairIdx];\n                    deployAmount[integration.integration][integration.ammPoolID][tokens[i].token] += int256(\n                        _getTokenAmount(tokens[i].amount, strategy.tokens[j].weight, TOKEN_WEIGHT)\n                    );\n                }\n            }\n        }\n    }\n\n    function _getTokenAmount(\n        uint256 tokenAmount,\n        uint256 numerator,\n        uint256 denominator\n    ) internal pure returns (uint256) {\n        return (tokenAmount * numerator) / denominator;\n    }\n\n    function decreaseStrategy(uint256 id, IUserPositions.TokenMovement[] calldata tokens)\n        external\n        override\n        onlyController\n    {\n        StrategySummary memory strategy = getStrategy(id);\n        require(strategy.tokens.length > 0, \"invalid strategy\");\n        for (uint256 i; i < tokens.length; ++i) {\n            require(strategyTokenBalances[id][tokens[i].token] >= tokens[i].amount, \"insufficient funds\");\n            require(tokenBalances[tokens[i].token] >= tokens[i].amount, \"insufficient funds\");\n            strategyTokenBalances[id][tokens[i].token] -= tokens[i].amount;\n            tokenBalances[tokens[i].token] -= tokens[i].amount;\n\n            for (uint256 j; j < strategy.tokens.length; j++) {\n                if (tokens[i].token == strategy.tokens[j].token) {\n                    Integration memory integration = strategy.integrations[strategy.tokens[j].integrationPairIdx];\n                    uint256 amount = _getTokenAmount(tokens[i].amount, strategy.tokens[j].weight, TOKEN_WEIGHT);\n                    deployAmount[integration.integration][integration.ammPoolID][tokens[i].token] -= int256(amount);\n\n                    _closablePositions[tokens[i].token].push(\n                        ClosablePosition(integration.integration, integration.ammPoolID, amount)\n                    );\n                }\n            }\n        }\n    }\n\n    function clearClosablePositions(address[] calldata tokens) external override onlyController {\n        for (uint256 i; i < tokens.length; ++i) {\n            delete _closablePositions[tokens[i]];\n        }\n    }\n\n    function closePositionsForWithdrawal(address token, uint256 amount) external override onlyController {\n        ClosablePosition[] memory positions = _closablePositions[token];\n        uint256 amountGathered = 0;\n        address kernel = moduleMap.getModuleAddress(Modules.Kernel);\n        if (positions.length > 0) {\n            for (uint256 i = positions.length - 1; i >= 0; i--) {\n                uint256 balanceBefore = IERC20(token).balanceOf(kernel);\n                if (positions[i].ammPoolID == 0) {\n                    IIntegration(positions[i].integration).withdraw(token, positions[i].amount);\n                } else {\n                    IAMMIntegration(positions[i].integration).withdraw(\n                        token,\n                        positions[i].amount,\n                        positions[i].ammPoolID\n                    );\n                }\n                uint256 recovered = IERC20(token).balanceOf(kernel) - balanceBefore;\n\n                _closablePositions[token].pop();\n\n                decreaseDeployAmountChange(\n                    positions[i].integration,\n                    positions[i].ammPoolID,\n                    token,\n                    positions[i].amount // Still decreasing by the notional amount, since we are erasing the closable position entirely from the vector\n                );\n\n                amountGathered += recovered;\n\n                if (amountGathered >= amount) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function decreaseDeployAmountChange(\n        address integration,\n        uint32 poolID,\n        address token,\n        uint256 amount\n    ) public override {\n        int256 currentAmount = deployAmount[integration][poolID][token];\n\n        if (currentAmount >= 0) {\n            deployAmount[integration][poolID][token] -= int256(amount);\n        } else {\n            deployAmount[integration][poolID][token] += int256(amount);\n        }\n    }\n\n    function getStrategy(uint256 id) public view override returns (StrategySummary memory) {\n        StrategySummary memory result;\n        result.name = strategies[id].name;\n        result.integrations = strategies[id].integrations;\n        result.tokens = strategies[id].tokens;\n        return result;\n    }\n\n    function getMultipleStrategies(uint256[] calldata ids) external view override returns (StrategySummary[] memory) {\n        StrategySummary[] memory severalStrategies = new StrategySummary[](ids.length);\n        for (uint256 i; i < ids.length; ++i) {\n            severalStrategies[i] = getStrategy(ids[i]);\n        }\n        return severalStrategies;\n    }\n\n    function getStrategyTokenBalance(uint256 id, address token) public view override returns (uint256 amount) {\n        amount = strategyTokenBalances[id][token];\n    }\n\n    function getTokenTotalBalance(address token) public view override returns (uint256 amount) {\n        amount = tokenBalances[token];\n    }\n\n    function getDeployAmount(\n        address integration,\n        uint32 poolID,\n        address token\n    ) external view override returns (int256) {\n        return deployAmount[integration][poolID][token];\n    }\n\n    function getStrategyBalances(uint256[] calldata _strategies, address[] calldata _tokens)\n        external\n        view\n        override\n        returns (StrategyBalance[] memory strategyBalances, GeneralBalance[] memory generalBalances)\n    {\n        strategyBalances = new StrategyBalance[](_strategies.length);\n        generalBalances = new GeneralBalance[](_tokens.length);\n\n        for (uint256 i; i < _tokens.length; ++i) {\n            generalBalances[i].token = _tokens[i];\n            generalBalances[i].balance = tokenBalances[_tokens[i]];\n        }\n\n        for (uint256 i; i < _strategies.length; ++i) {\n            Token[] memory strategyTokens = strategies[_strategies[i]].tokens;\n            strategyBalances[i].tokens = new GeneralBalance[](strategyTokens.length);\n            strategyBalances[i].strategyID = _strategies[i];\n            for (uint256 j; j < strategyTokens.length; j++) {\n                strategyBalances[i].tokens[j].token = strategyTokens[j].token;\n                strategyBalances[i].tokens[j].balance = strategyTokenBalances[_strategies[i]][strategyTokens[j].token];\n            }\n        }\n    }\n\n    function getStrategyTokenLength(uint256 strategy) external view override returns (uint256) {\n        return strategies[strategy].tokens.length;\n    }\n\n    function getClosablePositions(address token, uint256 index) external view returns (ClosablePosition memory) {\n        return _closablePositions[token][index];\n    }\n}\n"
    },
    "contracts/core/StrategyManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"./Controlled.sol\";\nimport \"../interfaces/IStrategyManager.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\nimport \"../interfaces/IStrategyMap.sol\";\nimport \"../interfaces/IYieldManager.sol\";\n\ncontract StrategyManager is Initializable, ModuleMapConsumer, Controlled, IStrategyManager {\n    // #### Functions\n    function initialize(address[] memory controllers_, address moduleMap_) external initializer {\n        __Controlled_init(controllers_, moduleMap_);\n    }\n\n    /**\n      @notice Adds a new strategy to the strategy map.\n      @dev This is a passthrough to StrategyMap.addStrategy\n       */\n    function addStrategy(\n        string calldata name,\n        IStrategyMap.Integration[] calldata integrations,\n        IStrategyMap.Token[] calldata tokens,\n        uint256[] calldata maxCap\n    ) external override onlyManager {\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\n        for (uint256 i; i < integrations.length; ++i) {\n            require(integrationMap.getIsIntegrationAdded(integrations[i].integration));\n        }\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).addStrategy(name, integrations, tokens, maxCap);\n    }\n\n    /**\n        @notice Updates a strategy's name\n        @dev This is a pass through function to StrategyMap.updateName\n     */\n    function updateStrategyName(uint256 id, string calldata name) external override onlyManager {\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).updateName(id, name);\n    }\n\n    /**\n        @notice Deletes a strategy\n        @dev This is a pass through to StrategyMap.deleteStrategy\n        */\n    function deleteStrategy(uint256 id) external override onlyManager {\n        IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).deleteStrategy(id);\n    }\n}\n"
    },
    "contracts/interfaces/IStrategyManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\nimport \"../interfaces/IStrategyMap.sol\";\n\ninterface IStrategyManager {\n    // #### Functions\n    /**\n      @notice Adds a new strategy to the strategy map.\n      @dev This is a passthrough to StrategyMap.addStrategy\n       */\n    function addStrategy(\n        string calldata name,\n        IStrategyMap.Integration[] calldata integrations,\n        IStrategyMap.Token[] calldata tokens,\n        uint256[] memory maxCap\n    ) external;\n\n    /**\n        @notice Updates a strategy's name\n        @dev This is a pass through function to StrategyMap.updateName\n     */\n    function updateStrategyName(uint256 id, string calldata name) external;\n\n    /**\n        @notice Deletes a strategy\n        @dev This is a pass through to StrategyMap.deleteStrategy\n        */\n    function deleteStrategy(uint256 id) external;\n}\n"
    },
    "contracts/core/IntegrationMap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ModuleMapConsumer.sol\";\nimport \"./Controlled.sol\";\nimport \"../interfaces/IIntegrationMap.sol\";\n\ncontract IntegrationMap is Initializable, ModuleMapConsumer, Controlled, IIntegrationMap {\n    uint32 private constant RESERVE_RATIO_DENOMINATOR = 1_000_000;\n    address private wethTokenAddress;\n    address private biosTokenAddress;\n    address[] private tokenAddresses;\n    address[] private integrationAddresses;\n\n    // Integration address => Integration details\n    mapping(address => Integration) private integrations;\n    // Token address => Token details\n    mapping(address => Token) private tokens;\n\n    uint32 private constant TARGET_LIQUIDITY_RATIO_DENOMINATOR = 1_000_000;\n    uint32 private constant TRANSFER_FEE_K_VALUE_DENOMINATOR = 1_000_000;\n    uint32 private constant TRANSFER_FEE_PLATFORM_RATIO_DENOMINATOR = 1_000_000;\n\n    function initialize(\n        address[] memory controllers_,\n        address moduleMap_,\n        address wethTokenAddress_,\n        address biosTokenAddress_\n    ) external initializer {\n        require(wethTokenAddress_ != address(0), \"bad address\");\n        // actually we allow 0 address for chains with no BIOS. BIOS can be enabled later\n        // require(biosTokenAddress_ != address(0), \"bad address\");\n        __Controlled_init(controllers_, moduleMap_);\n        wethTokenAddress = wethTokenAddress_;\n        biosTokenAddress = biosTokenAddress_;\n\n        _addToken(wethTokenAddress_, true, true, false, false, 0, 50_000, 100_000, 40_000, 50_000);\n\n        if (biosTokenAddress_ != address(0)) {\n            _addToken(biosTokenAddress_, true, true, false, false, 0, 0, 100_000, 40_000, 50_00);\n        }\n    }\n\n    /// @param contractAddress The address of the integration contract\n    /// @param name The name of the protocol being integrated to\n    function addIntegration(address contractAddress, string memory name) external override onlyController {\n        require(!integrations[contractAddress].added, \"IntegrationMap::addIntegration: Integration already added\");\n        integrations[contractAddress].added = true;\n        integrations[contractAddress].name = name;\n        integrationAddresses.push(contractAddress);\n    }\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function _addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        bool acceptingLping,\n        bool acceptingBridging,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator,\n        uint256 targetLiquidityRatioNumerator,\n        uint256 transferFeeKValueNumerator,\n        uint256 transferFeePlatformRatioNumerator\n    ) internal {\n        // We skip instead of error when you re-add a token due to great migration of 2021\n        if (tokens[tokenAddress].added) {\n            return;\n        }\n\n        require(\n            reserveRatioNumerator <= RESERVE_RATIO_DENOMINATOR,\n            \"IntegrationMap::addToken: reserveRatioNumerator must be less than or equal to reserve ratio denominator\"\n        );\n        require(\n            targetLiquidityRatioNumerator <= TARGET_LIQUIDITY_RATIO_DENOMINATOR,\n            \"IntegrationMap::addToken: targetLiquidityRatioNumerator must be less than or equal to target liquidity ratio denominator\"\n        );\n        require(\n            transferFeeKValueNumerator <= TRANSFER_FEE_K_VALUE_DENOMINATOR,\n            \"IntegrationMap::addToken: transferFeeKValueNumerator must be less than or equal to transfer fee K-value denominator\"\n        );\n        require(\n            transferFeePlatformRatioNumerator <= TRANSFER_FEE_PLATFORM_RATIO_DENOMINATOR,\n            \"IntegrationMap::addToken: transferFeePlatformRatioNumerator must be less than or equal to transfer fee platform ratio denominator\"\n        );\n\n        tokens[tokenAddress].id = tokenAddresses.length;\n        tokens[tokenAddress].added = true;\n        tokens[tokenAddress].acceptingDeposits = acceptingDeposits;\n        tokens[tokenAddress].acceptingWithdrawals = acceptingWithdrawals;\n        tokens[tokenAddress].acceptingLping = acceptingLping;\n        tokens[tokenAddress].acceptingBridging = acceptingBridging;\n        tokens[tokenAddress].biosRewardWeight = biosRewardWeight;\n        tokens[tokenAddress].reserveRatioNumerator = reserveRatioNumerator;\n        tokens[tokenAddress].targetLiquidityRatioNumerator = targetLiquidityRatioNumerator;\n        tokens[tokenAddress].transferFeeKValueNumerator = transferFeeKValueNumerator;\n        tokens[tokenAddress].transferFeePlatformRatioNumerator = transferFeePlatformRatioNumerator;\n        tokenAddresses.push(tokenAddress);\n    }\n\n    /// @param tokenAddress The address of the ERC20 token contract\n    /// @param acceptingDeposits Whether token deposits are enabled\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\n    /// @param biosRewardWeight Token weight for BIOS rewards\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n\n    function addToken(\n        address tokenAddress,\n        bool acceptingDeposits,\n        bool acceptingWithdrawals,\n        bool acceptingLping,\n        bool acceptingBridging,\n        uint256 biosRewardWeight,\n        uint256 reserveRatioNumerator,\n        uint256 targetLiquidityRatioNumerator,\n        uint256 transferFeeKValueNumerator,\n        uint256 transferFeePlatformRatioNumerator\n    ) external override onlyController {\n        _addToken(\n            tokenAddress,\n            acceptingDeposits,\n            acceptingWithdrawals,\n            acceptingLping,\n            acceptingBridging,\n            biosRewardWeight,\n            reserveRatioNumerator,\n            targetLiquidityRatioNumerator,\n            transferFeeKValueNumerator,\n            transferFeePlatformRatioNumerator\n        );\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenDeposits(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::enableTokenDeposits: Token does not exist\");\n        require(\n            !tokens[tokenAddress].acceptingDeposits,\n            \"IntegrationMap::enableTokenDeposits: Token already accepting deposits\"\n        );\n\n        tokens[tokenAddress].acceptingDeposits = true;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.deposit, true);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenDeposits(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::disableTokenDeposits: Token does not exist\");\n        require(\n            tokens[tokenAddress].acceptingDeposits,\n            \"IntegrationMap::disableTokenDeposits: Token deposits already disabled\"\n        );\n\n        tokens[tokenAddress].acceptingDeposits = false;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.deposit, false);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenWithdrawals(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::enableTokenWithdrawals: Token does not exist\");\n        require(\n            !tokens[tokenAddress].acceptingWithdrawals,\n            \"IntegrationMap::enableTokenWithdrawals: Token already accepting withdrawals\"\n        );\n\n        tokens[tokenAddress].acceptingWithdrawals = true;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.withdraw, true);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenWithdrawals(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::disableTokenWithdrawals: Token does not exist\");\n        require(\n            tokens[tokenAddress].acceptingWithdrawals,\n            \"IntegrationMap::disableTokenWithdrawals: Token withdrawals already disabled\"\n        );\n\n        tokens[tokenAddress].acceptingWithdrawals = false;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.withdraw, false);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenLping(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::enableTokenLping: Token does not exist\");\n        require(\n            !tokens[tokenAddress].acceptingLping,\n            \"IntegrationMap::enableTokenLping: Token already accepting LPing\"\n        );\n\n        tokens[tokenAddress].acceptingLping = true;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.lp, true);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenLping(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::disableTokenLping: Token does not exist\");\n        require(tokens[tokenAddress].acceptingLping, \"IntegrationMap::disableTokenLping: Token LPing already disabled\");\n\n        tokens[tokenAddress].acceptingLping = false;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.lp, false);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function enableTokenBridging(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::enableTokenBridging: Token does not exist\");\n        require(\n            !tokens[tokenAddress].acceptingBridging,\n            \"IntegrationMap::enableTokenBridging: Token already accepting bridging\"\n        );\n\n        tokens[tokenAddress].acceptingBridging = true;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.bridge, true);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    function disableTokenBridging(address tokenAddress) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::disableTokenBridging: Token does not exist\");\n        require(\n            tokens[tokenAddress].acceptingBridging,\n            \"IntegrationMap::disableTokenBridging: Token bridging already disabled\"\n        );\n\n        tokens[tokenAddress].acceptingBridging = false;\n        emit TokenSettingToggled(tokenAddress, TokenConfigs.TokenSettingName.bridge, false);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @param rewardWeight The updated token BIOS reward weight\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external override onlyManager {\n        require(tokens[tokenAddress].added, \"IntegrationMap::updateTokenRewardWeight: Token does not exist\");\n\n        tokens[tokenAddress].biosRewardWeight = rewardWeight;\n\n        emit TokenSettingUpdated(tokenAddress, TokenConfigs.TokenSettingName.rewardWeight, rewardWeight);\n    }\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator)\n        external\n        override\n        onlyManager\n    {\n        require(tokens[tokenAddress].added, \"IntegrationMap::updateTokenReserveRatioNumerator: Token does not exist\");\n        require(\n            reserveRatioNumerator <= RESERVE_RATIO_DENOMINATOR,\n            \"IntegrationMap::updateTokenReserveRatioNumerator: reserveRatioNumerator must be less than or equal to reserve ratio denominator\"\n        );\n\n        tokens[tokenAddress].reserveRatioNumerator = reserveRatioNumerator;\n\n        emit TokenSettingUpdated(\n            tokenAddress,\n            TokenConfigs.TokenSettingName.reserveRatioNumerator,\n            reserveRatioNumerator\n        );\n    }\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\n        external\n        override\n        onlyManager\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::updateTokenTargetLiquidityRatioNumerator: Token does not exist\"\n        );\n        require(\n            targetLiquidityRatioNumerator <= TARGET_LIQUIDITY_RATIO_DENOMINATOR,\n            \"IntegrationMap::updateTokenTargetLiquidityRatioNumerator: targetLiquidityRatioNumerator must be less than or equal to target liquidity ratio denominator\"\n        );\n\n        tokens[tokenAddress].targetLiquidityRatioNumerator = targetLiquidityRatioNumerator;\n\n        emit TokenSettingUpdated(\n            tokenAddress,\n            TokenConfigs.TokenSettingName.targetLiquidityRatioNumerator,\n            targetLiquidityRatioNumerator\n        );\n    }\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator)\n        external\n        override\n        onlyManager\n    {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::updateTokenTransferFeeKValueNumerator: Token does not exist\"\n        );\n        require(\n            transferFeeKValueNumerator <= TRANSFER_FEE_K_VALUE_DENOMINATOR,\n            \"IntegrationMap::updateTokenTransferFeeKValueNumerator: transferFeeKValueNumerator must be less than or equal to transfer fee K-value denominator\"\n        );\n\n        tokens[tokenAddress].transferFeeKValueNumerator = transferFeeKValueNumerator;\n\n        emit TokenSettingUpdated(\n            tokenAddress,\n            TokenConfigs.TokenSettingName.transferFeeKValueNumerator,\n            transferFeeKValueNumerator\n        );\n    }\n\n    /// @param tokenAddress the address of the token ERC20 contract\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\n    function updateTokenTransferFeePlatformRatioNumerator(\n        address tokenAddress,\n        uint256 transferFeePlatformRatioNumerator\n    ) external override onlyManager {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::updateTokenTransferFeePlatformRatioNumerator: Token does not exist\"\n        );\n        require(\n            transferFeePlatformRatioNumerator <= TRANSFER_FEE_PLATFORM_RATIO_DENOMINATOR,\n            \"IntegrationMap::updateTokenTransferFeePlatformRatioNumerator: transferFeePlatformRatioNumerator must be less than or equal to transfer fee platform ratio denominator\"\n        );\n\n        tokens[tokenAddress].transferFeePlatformRatioNumerator = transferFeePlatformRatioNumerator;\n\n        emit TokenSettingUpdated(\n            tokenAddress,\n            TokenConfigs.TokenSettingName.transferFeePlatformRatioNumerator,\n            transferFeePlatformRatioNumerator\n        );\n    }\n\n    // updates the bios token. You probably have to call other functions to clean up after the old token!\n    function updateBiosTokenAddress(address biosAddress) external onlyManager {\n        address previousAddress = biosTokenAddress;\n\n        biosTokenAddress = biosAddress;\n        if (biosAddress != address(0)) {\n            _addToken(biosAddress, true, true, false, false, 0, 0, 100_000, 40_000, 50_000);\n        }\n\n        emit BiosAddressUpdated(biosAddress, previousAddress);\n    }\n\n    /// @param integrationId The ID of the integration\n    /// @return The address of the integration contract\n    function getIntegrationAddress(uint256 integrationId) external view override returns (address) {\n        require(\n            integrationId < integrationAddresses.length,\n            \"IntegrationMap::getIntegrationAddress: Integration does not exist\"\n        );\n\n        return integrationAddresses[integrationId];\n    }\n\n    /// @param integrationAddress The address of the integration contract\n    /// @return The name of the of the protocol being integrated to\n    function getIntegrationName(address integrationAddress) external view override returns (string memory) {\n        require(\n            integrations[integrationAddress].added,\n            \"IntegrationMap::getIntegrationName: Integration does not exist\"\n        );\n\n        return integrations[integrationAddress].name;\n    }\n\n    /// @return The address of the WETH token\n    function getWethTokenAddress() external view override returns (address) {\n        return wethTokenAddress;\n    }\n\n    /// @return The address of the BIOS token\n    function getBiosTokenAddress() external view override returns (address) {\n        return biosTokenAddress;\n    }\n\n    /// @param tokenId The ID of the token\n    /// @return The address of the token ERC20 contract\n    function getTokenAddress(uint256 tokenId) external view override returns (address) {\n        require(tokenId < tokenAddresses.length, \"IntegrationMap::getTokenAddress: Token does not exist\");\n        return (tokenAddresses[tokenId]);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The index of the token in the tokens array\n    function getTokenId(address tokenAddress) external view override returns (uint256) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenId: Token does not exist\");\n        return (tokens[tokenAddress].id);\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The token BIOS reward weight\n    function getTokenBiosRewardWeight(address tokenAddress) external view override returns (uint256) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenBiosRewardWeight: Token does not exist\");\n        return (tokens[tokenAddress].biosRewardWeight);\n    }\n\n    /// @return rewardWeightSum reward weight of depositable tokens\n    function getBiosRewardWeightSum() external view override returns (uint256 rewardWeightSum) {\n        for (uint256 tokenId; tokenId < tokenAddresses.length; tokenId++) {\n            rewardWeightSum += tokens[tokenAddresses[tokenId]].biosRewardWeight;\n        }\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether depositing this token is currently enabled\n    function getTokenAcceptingDeposits(address tokenAddress) external view override returns (bool) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenAcceptingDeposits: Token does not exist\");\n        return tokens[tokenAddress].acceptingDeposits;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether withdrawing this token is currently enabled\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view override returns (bool) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenAcceptingWithdrawals: Token does not exist\");\n        return tokens[tokenAddress].acceptingWithdrawals;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether Lping this token is currently enabled\n    function getTokenAcceptingLping(address tokenAddress) external view override returns (bool) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenAcceptingLping: Token does not exist\");\n        return tokens[tokenAddress].acceptingLping;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return bool indicating whether Lping this token is currently enabled\n    function getTokenAcceptingBridging(address tokenAddress) external view override returns (bool) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenAcceptingBridging: Token does not exist\");\n        return tokens[tokenAddress].acceptingBridging;\n    }\n\n    // @param tokenAddress The address of the token ERC20 contract\n    // @return bool indicating whether the token has been added\n    function getIsTokenAdded(address tokenAddress) external view override returns (bool) {\n        return tokens[tokenAddress].added;\n    }\n\n    // @param integrationAddress The address of the integration contract\n    // @return bool indicating whether the integration has been added\n    function getIsIntegrationAdded(address integrationAddress) external view override returns (bool) {\n        return integrations[integrationAddress].added;\n    }\n\n    /// @notice Gets the length of supported tokens\n    /// @return The quantity of tokens added\n    function getTokenAddressesLength() external view override returns (uint256) {\n        return tokenAddresses.length;\n    }\n\n    /// @notice Gets the length of supported integrations\n    /// @return The quantity of Integrations added\n    function getIntegrationAddressesLength() external view override returns (uint256) {\n        return integrationAddresses.length;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The token reserve ratio numerator\n    function getTokenReserveRatioNumerator(address tokenAddress) external view override returns (uint256) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenReserveRatioNumerator: Token does not exist\");\n        return tokens[tokenAddress].reserveRatioNumerator;\n    }\n\n    /// @return The token reserve ratio denominator\n    function getReserveRatioDenominator() external pure override returns (uint32) {\n        return RESERVE_RATIO_DENOMINATOR;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by target liquidity ratio denominator\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view override returns (uint256) {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenTargetLiquidityRatioNumerator: Token does not exist\"\n        );\n        return tokens[tokenAddress].targetLiquidityRatioNumerator;\n    }\n\n    /// @return The target liquidity ratio denominator\n    function getTargetLiquidityRatioDenominator() external pure override returns (uint32) {\n        return TARGET_LIQUIDITY_RATIO_DENOMINATOR;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by transfer fee K-value denominator\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view override returns (uint256) {\n        require(tokens[tokenAddress].added, \"IntegrationMap::getTokenTransferFeeKValueNumerator: Token does not exist\");\n        return tokens[tokenAddress].transferFeeKValueNumerator;\n    }\n\n    /// @return The transfer fee K-value denominator\n    function getTransferFeeKValueDenominator() external pure override returns (uint32) {\n        return TRANSFER_FEE_K_VALUE_DENOMINATOR;\n    }\n\n    /// @param tokenAddress The address of the token ERC20 contract\n    /// @return The number that gets divided by transfer fee platform ratio denominator\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view override returns (uint256) {\n        require(\n            tokens[tokenAddress].added,\n            \"IntegrationMap::getTokenTransferFeePlatformRatioNumerator: Token does not exist\"\n        );\n        return tokens[tokenAddress].transferFeePlatformRatioNumerator;\n    }\n\n    /// @return The transfer fee platform ratio denominator\n    function getTransferFeePlatformRatioDenominator() external pure override returns (uint32) {\n        return TRANSFER_FEE_PLATFORM_RATIO_DENOMINATOR;\n    }\n}\n"
    },
    "contracts/mock/AMMLibrary.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\nimport \"../libraries/AMMLibrary.sol\";\n\ncontract TestAMMLibrary {\n    function getLiquidityToWithdraw(\n        address tokenAddress,\n        uint256 amount,\n        uint256 availableLiquidity,\n        uint256 reserve0,\n        uint256 reserve1,\n        uint256 totalSupply,\n        IAMMIntegration.Pool memory pool\n    ) external pure returns (uint256 liquidity) {\n        liquidity = AMMLibrary.getLiquidityToWithdraw(\n            tokenAddress,\n            amount,\n            availableLiquidity,\n            reserve0,\n            reserve1,\n            totalSupply,\n            pool\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}