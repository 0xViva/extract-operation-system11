{
  "address": "0xDe22283EA96244a96f1753768C911C795dDB6A9C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "integration",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HarvestYield",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "biosBuyBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "a",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "b",
          "type": "string"
        }
      ],
      "name": "compareStrings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "internalType": "struct IYieldManager.DeployRequest[]",
          "name": "deployments",
          "type": "tuple[]"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strategyId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "positions",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "biosAmount",
          "type": "uint256"
        }
      ],
      "name": "distributeEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kernel",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_syntheticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_ammPoolID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amountSynthetic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountUnderlying",
          "type": "uint256"
        }
      ],
      "name": "donateToSyntheticPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFeeEthRewardsAmount",
          "type": "uint256"
        }
      ],
      "name": "ethToProtocolFeeAccrual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getAllPendingYield",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IYieldManager.IntegrationYield[]",
          "name": "pendingYieldData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthDistributionWeights",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthWeightSum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "ethWeightSum",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasAccountTargetEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastEthRewardsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "integrationAddress",
          "type": "address"
        }
      ],
      "name": "getLastHarvestYieldTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getReserveTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "getStrategyInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "processedWeth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributedWeth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastHarvest",
              "type": "uint256"
            }
          ],
          "internalType": "struct IYieldManager.StrategyInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "integrations",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "setAccounting",
          "type": "bool"
        }
      ],
      "name": "harvestYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasAccountTargetEthBalance_",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "biosBuyBackEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "treasuryEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "protocolFeeEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "rewardsEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "address payable",
          "name": "gasAccount_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "treasuryAccount_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferClosedPositionsValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "biosBuyBackEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "treasuryEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "protocolFeeEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "rewardsEthWeight_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "syntheticPoolSupplement_",
          "type": "uint32"
        }
      ],
      "name": "updateEthDistributionWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "gasAccount_",
          "type": "address"
        }
      ],
      "name": "updateGasAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasAccountTargetEthBalance_",
          "type": "uint256"
        }
      ],
      "name": "updateGasAccountTargetEthBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "treasuryAccount_",
          "type": "address"
        }
      ],
      "name": "updateTreasuryAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe584e3ac2d888a95cacd8bbe79cd24d6c865ae3721b65fe0d4d78dace6d58466",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0xDe22283EA96244a96f1753768C911C795dDB6A9C",
    "transactionIndex": 0,
    "gasUsed": "5032668",
    "logsBloom": "0x
    "blockHash": "0xb04f5268faa3160d2a86fb87a66fac97685574c419f1e0cca626300c76fc124a",
    "transactionHash": "0xe584e3ac2d888a95cacd8bbe79cd24d6c865ae3721b65fe0d4d78dace6d58466",
    "logs": [],
    "blockNumber": 2698302,
    "cumulativeGasUsed": "5032668",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "45afef2d0098b5b4751ca820c0864600",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"integration\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestYield\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"biosBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IYieldManager.DeployRequest[]\",\"name\":\"deployments\",\"type\":\"tuple[]\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strategyId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"positions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"biosAmount\",\"type\":\"uint256\"}],\"name\":\"distributeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kernel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_syntheticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ammPoolID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amountSynthetic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"donateToSyntheticPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeeEthRewardsAmount\",\"type\":\"uint256\"}],\"name\":\"ethToProtocolFeeAccrual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAllPendingYield\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IYieldManager.IntegrationYield[]\",\"name\":\"pendingYieldData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthDistributionWeights\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthWeightSum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"ethWeightSum\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccountTargetEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEthRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integrationAddress\",\"type\":\"address\"}],\"name\":\"getLastHarvestYieldTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getReserveTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"getStrategyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"processedWeth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedWeth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"}],\"internalType\":\"struct IYieldManager.StrategyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"integrations\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setAccounting\",\"type\":\"bool\"}],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"gasAccount_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAccount_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferClosedPositionsValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syntheticPoolSupplement_\",\"type\":\"uint32\"}],\"name\":\"updateEthDistributionWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"gasAccount_\",\"type\":\"address\"}],\"name\":\"updateGasAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance_\",\"type\":\"uint256\"}],\"name\":\"updateGasAccountTargetEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasuryAccount_\",\"type\":\"address\"}],\"name\":\"updateTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"biosBuyBack(uint256)\":{\"params\":{\"ratioX1000\":\"BIOS/WETH ratio for front runner protection\"}},\"distributeEth(uint256[],uint256[],uint256)\":{\"params\":{\"biosAmount\":\"Amount of bios deposited to prevent flashing\",\"positions\":\"An array of the total position value for the strategy to prevent flashing\",\"strategyId\":\"An aray of strategy strategyId to distribute eth for\"}},\"ethToProtocolFeeAccrual(uint256)\":{\"params\":{\"protocolFeeEthRewardsAmount\":\"Amount of ETH to distribute to protocol fee accrual\"}},\"getEthDistributionWeights()\":{\"returns\":{\"_0\":\"The BIOS buyback ETH weight\",\"_1\":\"The Treasury ETH weight\",\"_2\":\"The Protocol fee ETH weight\",\"_3\":\"The rewards ETH weight\",\"_4\":\"The synthetic pool ETH supplement weight\"}},\"getEthWeightSum()\":{\"returns\":{\"ethWeightSum\":\"The sum of ETH distribution weights\"}},\"getGasAccount()\":{\"returns\":{\"_0\":\"The address of the gas account\"}},\"getGasAccountTargetEthBalance()\":{\"returns\":{\"_0\":\"The target ETH balance of the gas account\"}},\"getLastEthRewardsAmount()\":{\"returns\":{\"_0\":\"The last amount of ETH distributed to rewards\"}},\"getLastHarvestYieldTimestamp(address)\":{\"returns\":{\"_0\":\"The timestamp the harvestYield function was last called\"}},\"getReserveTokenBalance(address)\":{\"params\":{\"tokenAddress\":\"The address of the token ERC20 contract\"},\"returns\":{\"_0\":\"The amount of the token held in the Kernel as reserves\"}},\"getTreasuryAccount()\":{\"returns\":{\"_0\":\"The address of the treasury account\"}},\"harvestYield(uint256,address[],uint256,bool)\":{\"params\":{\"integrations\":\"The integrations to harvest yield from\",\"strategyId\":\"Strategy to credit the yield to\"}},\"initialize(address[],address,uint256,uint32,uint32,uint32,uint32,address,address)\":{\"params\":{\"biosBuyBackEthWeight_\":\"The relative weight of ETH to send to BIOS buy back\",\"controllers_\":\"The addresses of the controlling contracts\",\"gasAccountTargetEthBalance_\":\"The target ETH balance of the gas account\",\"gasAccount_\":\"The address of the account to send ETH to gas for executing bulk system functions\",\"moduleMap_\":\"Address of the Module Map\",\"protocolFeeEthWeight_\":\"The relative weight of ETH to send to protocol fee accrual\",\"rewardsEthWeight_\":\"The relative weight of ETH to send to user rewards\",\"treasuryAccount_\":\"The address of the system treasury account\",\"treasuryEthWeight_\":\"The relative weight of ETH to send to the treasury\"}},\"updateEthDistributionWeights(uint32,uint32,uint32,uint32,uint32)\":{\"params\":{\"biosBuyBackEthWeight_\":\"The relative weight of ETH to send to BIOS buy back\",\"protocolFeeEthWeight_\":\"The relative weight of ETH to send to protocol fee accrual\",\"rewardsEthWeight_\":\"The relative weight of ETH to send to user rewards\",\"syntheticPoolSupplement_\":\"The relative weight of ETH to send to synthetic pool on curve\",\"treasuryEthWeight_\":\"The relative weight of ETH to send to the treasury\"}},\"updateGasAccount(address)\":{\"params\":{\"gasAccount_\":\"The address of the account to send ETH to gas for executing bulk system functions\"}},\"updateGasAccountTargetEthBalance(uint256)\":{\"params\":{\"gasAccountTargetEthBalance_\":\"The target ETH balance of the gas account\"}},\"updateTreasuryAccount(address)\":{\"params\":{\"treasuryAccount_\":\"The address of the system treasury account\"}}},\"title\":\"Yield Manager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"biosBuyBack(uint256)\":{\"notice\":\"Uses any WETH held in the SushiSwap trader to buy back BIOS which is sent to the Kernel\"},\"deploy((address,address[],uint32)[])\":{\"notice\":\"Deploys all tokens to all integrations according to configured weights and also sends hedge amount to specified pool\"},\"distributeEth(uint256[],uint256[],uint256)\":{\"notice\":\"Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\"},\"ethToProtocolFeeAccrual(uint256)\":{\"notice\":\"Distributes ETH to protocol fee accrual (BIOS staker rewards)\"},\"harvestYield(uint256,address[],uint256,bool)\":{\"notice\":\"Harvests available yield from provided and integration, credited to strategy\"},\"transferClosedPositionsValue(address,address,uint256)\":{\"notice\":\"Help methods*\"}},\"notice\":\"Manages yield deployments, harvesting, processing, and distribution\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/YieldManager.sol\":\"YieldManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal onlyInitializing {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xed017271d8ba30d80b8449946ed9ed3c6192d59980f343d26580070da40ede47\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal onlyInitializing {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0x562431546443640c950a15ccce0cffedeced3e414c41cc2758bf489f4525d1df\",\"license\":\"GPL-2.0\"},\"contracts/core/YieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n//import \\\"../interfaces/IBiosRewards.sol\\\";\\nimport \\\"../interfaces/IBiosEmitter.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IEtherRewards.sol\\\";\\nimport \\\"../interfaces/IYieldManager.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"../interfaces/ISyntheticERC20.sol\\\";\\nimport \\\"../interfaces/ISyntheticMap.sol\\\";\\nimport \\\"../interfaces/IStrategy1155.sol\\\";\\nimport \\\"../interfaces/IUnwrapper.sol\\\";\\nimport \\\"../interfaces/ISwapManager.sol\\\";\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\n/// @title Yield Manager\\n/// @notice Manages yield deployments, harvesting, processing, and distribution\\ncontract YieldManager is Initializable, ModuleMapConsumer, Controlled, IYieldManager {\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    // constants\\n    uint256 private constant FTM_CHAIN_ID = 250;\\n    uint256 private constant BSC_CHAIN_ID = 56;\\n    uint256 private constant METIS_CHAIN_ID = 1088;\\n\\n    uint256 private gasAccountTargetEthBalance;\\n    uint32 private biosBuyBackEthWeight;\\n    uint32 private treasuryEthWeight;\\n    uint32 private protocolFeeEthWeight;\\n    uint32 private rewardsEthWeight;\\n    uint32 private syntheticPoolSupplementEthWeight;\\n    uint256 private lastEthRewardsAmount;\\n\\n    address payable private gasAccount;\\n    address payable private treasuryAccount;\\n\\n    mapping(address => uint256) private processedWethByToken;\\n    mapping(address => uint256) private lastHarvestTimestampByIntegration;\\n\\n    // strategyId => StrategyInfo\\n    mapping(uint256 => StrategyInfo) private strategies;\\n\\n    uint256 driftingSynthetic;\\n\\n    // temporary mapping used in deploy function, content will be cleaned in the end of the function\\n    mapping(address => DeployRAM) hedged;\\n\\n    struct DeployRAM {\\n        uint248 hedgeAmount;\\n        uint8 tokenFlag;\\n    }\\n\\n    event HarvestYield(uint256 strategyId, address[] integration, uint256 amount);\\n\\n    receive() external payable {}\\n\\n    /// @param controllers_ The addresses of the controlling contracts\\n    /// @param moduleMap_ Address of the Module Map\\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n    /// @param treasuryAccount_ The address of the system treasury account\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        uint256 gasAccountTargetEthBalance_,\\n        uint32 biosBuyBackEthWeight_,\\n        uint32 treasuryEthWeight_,\\n        uint32 protocolFeeEthWeight_,\\n        uint32 rewardsEthWeight_,\\n        address payable gasAccount_,\\n        address payable treasuryAccount_\\n    ) external initializer {\\n        require(gasAccount_ != address(0), \\\"bad address\\\");\\n        require(treasuryAccount_ != address(0), \\\"bad address\\\");\\n\\n        __Controlled_init(controllers_, moduleMap_);\\n        gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\\n        biosBuyBackEthWeight = biosBuyBackEthWeight_;\\n        treasuryEthWeight = treasuryEthWeight_;\\n        protocolFeeEthWeight = protocolFeeEthWeight_;\\n        rewardsEthWeight = rewardsEthWeight_;\\n        gasAccount = gasAccount_;\\n        treasuryAccount = treasuryAccount_;\\n    }\\n\\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_) external override onlyController {\\n        gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\\n    }\\n\\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n    /// @param syntheticPoolSupplement_ The relative weight of ETH to send to synthetic pool on curve\\n    function updateEthDistributionWeights(\\n        uint32 biosBuyBackEthWeight_,\\n        uint32 treasuryEthWeight_,\\n        uint32 protocolFeeEthWeight_,\\n        uint32 rewardsEthWeight_,\\n        uint32 syntheticPoolSupplement_\\n    ) external override onlyController {\\n        biosBuyBackEthWeight = biosBuyBackEthWeight_;\\n        treasuryEthWeight = treasuryEthWeight_;\\n        protocolFeeEthWeight = protocolFeeEthWeight_;\\n        rewardsEthWeight = rewardsEthWeight_;\\n        syntheticPoolSupplementEthWeight = syntheticPoolSupplement_;\\n    }\\n\\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n    function updateGasAccount(address payable gasAccount_) external override onlyController {\\n        require(gasAccount_ != address(0), \\\"bad address\\\");\\n        gasAccount = gasAccount_;\\n    }\\n\\n    /// @param treasuryAccount_ The address of the system treasury account\\n    function updateTreasuryAccount(address payable treasuryAccount_) external override onlyController {\\n        require(treasuryAccount_ != address(0), \\\"bad address\\\");\\n        treasuryAccount = treasuryAccount_;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Deploy\\n     *\\n     *\\n     **/\\n\\n    /// @notice Deploys all tokens to all integrations according to configured weights and also sends hedge amount to specified pool\\n    function deploy(DeployRequest[] calldata deployments) external override onlyController {\\n        IStrategyMap strategyMap = IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap));\\n        address kernel = moduleMap.getModuleAddress(Modules.Kernel);\\n\\n        uint256 totalWithdrawn;\\n        uint256 totalDeposited;\\n\\n        for (uint256 dpmt; dpmt < deployments.length; dpmt++) {\\n            require(_checkNumberOfTokens(deployments[dpmt]), \\\"too many tokens\\\");\\n\\n            (uint256 sWithdrawn, uint256 sDeposited, address underlying, uint256 sHedged) = _performSingleDeploy(\\n                strategyMap,\\n                deployments[dpmt],\\n                kernel\\n            );\\n\\n            totalWithdrawn += sWithdrawn;\\n            totalDeposited += sDeposited;\\n            hedged[underlying].hedgeAmount += uint248(sHedged);\\n            if (hedged[underlying].tokenFlag == 0) hedged[underlying].tokenFlag = 1;\\n        }\\n\\n        for (uint256 dpmt; dpmt < deployments.length; dpmt++) {\\n            address underlying = deployments[dpmt].tokens[0];\\n\\n            if (hedged[underlying].tokenFlag == 1) {\\n                address syntheticERC20 = ISyntheticMap(moduleMap.getModuleAddress(Modules.SyntheticMap))\\n                    .underlyingToSynthetic(underlying);\\n\\n                (address hedgeIntegration, uint32 ammPoolID, address syntheticToken) = ISyntheticERC20(syntheticERC20)\\n                    .getHedgeDeployArgs();\\n\\n                uint256 positiveDeploy = totalDeposited + uint256(hedged[underlying].hedgeAmount);\\n                if (positiveDeploy > 0) {\\n                    // We mint synthetic tokens equal to the total positive deploy amount to the kernel\\n                    // because we will futher use this synthetic assets to execute user withdraw:\\n                    // 1) Withdraw from synETH/ETH pool until specified ratio\\n                    // 2) Close positions in integrations and burn synthetic token\\n                    _mintSyntheticToKernel(syntheticToken, kernel, positiveDeploy);\\n                }\\n\\n                _redeemSynthetic(\\n                    totalWithdrawn,\\n                    ISyntheticERC20(syntheticToken),\\n                    underlying,\\n                    kernel,\\n                    hedgeIntegration,\\n                    ammPoolID\\n                );\\n\\n                // Send funds to synETH/ETH pool if hedge percent > 0\\n                if (hedged[underlying].hedgeAmount > 0) {\\n                    _depositToSyntheticPool(\\n                        kernel,\\n                        syntheticToken,\\n                        underlying,\\n                        hedgeIntegration,\\n                        ammPoolID,\\n                        uint256(hedged[underlying].hedgeAmount)\\n                    );\\n\\n                    delete hedged[underlying];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Deploy parts\\n     *\\n     *\\n     **/\\n\\n    function _checkNumberOfTokens(DeployRequest memory deployment) private view returns (bool isCorrect_) {\\n        if (deployment.ammPoolID > 0 && deployment.tokens.length > 2) {\\n            IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n            string memory integrationName = integrationMap.getIntegrationName(deployment.integration);\\n\\n            if (deployment.tokens.length > 4 || !compareStrings(integrationName, \\\"Curve Finance\\\")) {\\n                return false;\\n            }\\n\\n            return true;\\n        }\\n        return true;\\n    }\\n\\n    function _performSingleDeploy(\\n        IStrategyMap _strategyMap,\\n        DeployRequest memory _deployment,\\n        address _kernel\\n    )\\n        private\\n        returns (\\n            uint256 withdrawn_,\\n            uint256 deposited_,\\n            address underlying_,\\n            uint256 hedged_\\n        )\\n    {\\n        for (uint256 tkn; tkn < _deployment.tokens.length; tkn++) {\\n            (int256 deployAmount, uint256 hedgeAmount) = _strategyMap.getDeployAmount(\\n                _deployment.integration,\\n                _deployment.ammPoolID,\\n                _deployment.tokens[tkn]\\n            );\\n\\n            if (deployAmount > 0) {\\n                hedged_ += hedgeAmount;\\n                deposited_ += abs(deployAmount);\\n\\n                IERC20MetadataUpgradeable(_deployment.tokens[tkn]).safeTransferFrom(\\n                    _kernel,\\n                    _deployment.integration,\\n                    abs(deployAmount)\\n                );\\n                _depositToIntegration(\\n                    _deployment.integration,\\n                    _deployment.tokens[tkn],\\n                    _deployment.ammPoolID,\\n                    abs(deployAmount)\\n                );\\n            } else if (deployAmount < 0) {\\n                withdrawn_ += _withdrawFromIntegration(\\n                    _deployment.integration,\\n                    _deployment.tokens[tkn],\\n                    _deployment.ammPoolID,\\n                    abs(deployAmount),\\n                    _kernel\\n                );\\n            }\\n\\n            if (deployAmount != 0) {\\n                _strategyMap.decreaseDeployAmountChange(\\n                    _deployment.integration,\\n                    _deployment.ammPoolID,\\n                    _deployment.tokens[tkn],\\n                    abs(deployAmount),\\n                    hedgeAmount\\n                );\\n            }\\n        }\\n\\n        underlying_ = _deployment.tokens[0];\\n    }\\n\\n    function _depositToIntegration(\\n        address _integration,\\n        address _token,\\n        uint32 _ammPoolId,\\n        uint256 _amount\\n    ) private {\\n        if (_ammPoolId > 0) {\\n            IAMMIntegration integration = IAMMIntegration(_integration);\\n            integration.deposit(_token, _amount, _ammPoolId);\\n            integration.deploy(_ammPoolId);\\n        } else {\\n            IIntegration integration = IIntegration(_integration);\\n            integration.deposit(_token, _amount);\\n            integration.deploy();\\n        }\\n    }\\n\\n    function _withdrawFromIntegration(\\n        address _integration,\\n        address _token,\\n        uint32 _ammPoolId,\\n        uint256 _deployAmount,\\n        address _kernel\\n    ) private returns (uint256 withdrawn_) {\\n        uint256 balanceBefore = IERC20MetadataUpgradeable(_token).balanceOf(_kernel);\\n        if (_ammPoolId > 0) {\\n            IAMMIntegration(_integration).withdraw(_token, _deployAmount, _ammPoolId);\\n        } else {\\n            IIntegration(_integration).withdraw(_token, _deployAmount);\\n        }\\n        withdrawn_ = IERC20MetadataUpgradeable(_token).balanceOf(_kernel) - balanceBefore;\\n    }\\n\\n    function _mintSyntheticToKernel(\\n        address _syntheticToken,\\n        address _kernel,\\n        uint256 _amount\\n    ) private {\\n        if (driftingSynthetic > 0) {\\n            if (driftingSynthetic >= _amount) {\\n                driftingSynthetic -= _amount;\\n            } else {\\n                uint256 missing = _amount - driftingSynthetic;\\n                delete driftingSynthetic;\\n                ISyntheticERC20(_syntheticToken).mint(_kernel, missing);\\n            }\\n        } else {\\n            ISyntheticERC20(_syntheticToken).mint(_kernel, _amount);\\n        }\\n    }\\n\\n    function _redeemSynthetic(\\n        uint256 _withdrawn,\\n        ISyntheticERC20 _syntheticToken,\\n        address _underlyingToken,\\n        address _kernel,\\n        address _hedgeIntegration,\\n        uint32 _ammPoolID\\n    ) private {\\n        uint256 balanceBefore = _syntheticToken.balanceOf(_kernel);\\n\\n        (, uint256 toRedemptionOfSynthetic) = _syntheticToken.distributeAccordingToStrategiesDebt(_withdrawn);\\n\\n        toRedemptionOfSynthetic += _syntheticToken.getAndDeleteDelayedRedemptionOfSynthetic();\\n\\n        if (toRedemptionOfSynthetic > 0) {\\n            ISwapManager(moduleMap.getModuleAddress(Modules.SwapManager)).gentleSwapExactIn(\\n                _underlyingToken,\\n                address(_syntheticToken),\\n                2,\\n                1,\\n                _kernel,\\n                toRedemptionOfSynthetic,\\n                0\\n            );\\n        }\\n\\n        uint256 withdrawSynthetic = _syntheticToken.getAndDeleteStrategiesPoolDebt();\\n\\n        if (withdrawSynthetic > 0) {\\n            _withdrawFromSyntheticPool(\\n                address(_syntheticToken),\\n                _underlyingToken,\\n                _hedgeIntegration,\\n                _ammPoolID,\\n                withdrawSynthetic,\\n                0\\n            );\\n        }\\n\\n        driftingSynthetic += _syntheticToken.balanceOf(_kernel) - balanceBefore;\\n    }\\n\\n    function donateToSyntheticPool(\\n        address _kernel,\\n        address _syntheticToken,\\n        address _underlyingToken,\\n        address _integration,\\n        uint32 _ammPoolID,\\n        uint256 _amountSynthetic,\\n        uint256 _amountUnderlying\\n    ) external onlyOwner {\\n        require(_amountSynthetic + _amountUnderlying > 0, \\\"donate amount must be > 0\\\");\\n\\n        IERC20MetadataUpgradeable(_syntheticToken).safeTransferFrom(_kernel, _integration, _amountSynthetic);\\n        IERC20MetadataUpgradeable(_underlyingToken).safeTransferFrom(_kernel, _integration, _amountUnderlying);\\n\\n        IAMMIntegration(_integration).deposit(_syntheticToken, _amountSynthetic, _ammPoolID);\\n        IAMMIntegration(_integration).deposit(_underlyingToken, _amountUnderlying, _ammPoolID);\\n\\n        IAMMIntegration(_integration).deploy(_ammPoolID);\\n    }\\n\\n    function _depositToSyntheticPool(\\n        address _kernel,\\n        address _syntheticToken,\\n        address _underlyingToken,\\n        address _integration,\\n        uint32 _ammPoolID,\\n        uint256 _amount\\n    ) private {\\n        (uint256 underlyingLiquidity, uint256 syntheticLiquidity) = ISyntheticERC20(_syntheticToken)\\n            .adjustLiquidityAccordingToUnderlyingDebt(_amount);\\n\\n        if (underlyingLiquidity > syntheticLiquidity) {\\n            // (underlyingLiquidity - syntheticLiquidity) - our underlying debt, kernel will hold it for the next withdrawals\\n            driftingSynthetic += underlyingLiquidity - syntheticLiquidity;\\n        }\\n\\n        IERC20MetadataUpgradeable(_underlyingToken).safeTransferFrom(_kernel, _integration, underlyingLiquidity);\\n        IERC20MetadataUpgradeable(_syntheticToken).safeTransferFrom(_kernel, _integration, syntheticLiquidity);\\n\\n        IAMMIntegration(_integration).deposit(_underlyingToken, underlyingLiquidity, _ammPoolID);\\n        IAMMIntegration(_integration).deposit(_syntheticToken, syntheticLiquidity, _ammPoolID);\\n\\n        if (underlyingLiquidity + syntheticLiquidity > 0) IAMMIntegration(_integration).deploy(_ammPoolID);\\n    }\\n\\n    function _withdrawFromSyntheticPool(\\n        address _syntheticToken,\\n        address _underlyingToken,\\n        address _integration,\\n        uint32 _ammPoolID,\\n        uint256 _syntheticAmount,\\n        uint256 _underlyingAmount\\n    ) private {\\n        if (_syntheticAmount > 0) IAMMIntegration(_integration).withdraw(_syntheticToken, _syntheticAmount, _ammPoolID);\\n        if (_underlyingAmount > 0)\\n            IAMMIntegration(_integration).withdraw(_underlyingToken, _underlyingAmount, _ammPoolID);\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Harvest\\n     *\\n     *\\n     **/\\n\\n    /// @notice Harvests available yield from provided and integration, credited to strategy\\n    /// @param strategyId Strategy to credit the yield to\\n    /// @param integrations The integrations to harvest yield from\\n    function harvestYield(\\n        uint256 strategyId,\\n        address[] calldata integrations,\\n        uint256 amount,\\n        bool setAccounting\\n    ) external override onlyManager {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        address wethAddress = integrationMap.getWethTokenAddress();\\n        IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(wethAddress);\\n\\n        // Harvest yield and account the weth\\n        uint256 balanceBefore = weth.balanceOf(address(this));\\n        for (uint256 i; i < integrations.length; ++i) {\\n            IIntegration(integrations[i]).harvestYield();\\n        }\\n\\n        uint256 receivedWeth = weth.balanceOf(address(this)) - balanceBefore;\\n\\n        // update accounting\\n        if (setAccounting) {\\n            StrategyInfo storage strategy = strategies[strategyId];\\n\\n            uint256 updateAmount = amount > 0 ? amount : receivedWeth;\\n\\n            strategy.lastHarvest = block.timestamp;\\n            strategy.processedWeth += updateAmount;\\n        }\\n\\n        emit HarvestYield(strategyId, integrations, receivedWeth);\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Distribute\\n     *\\n     *\\n     **/\\n\\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n    /// @param strategyId An aray of strategy strategyId to distribute eth for\\n    /// @param positions An array of the total position value for the strategy to prevent flashing\\n    /// @param biosAmount Amount of bios deposited to prevent flashing\\n    function distributeEth(\\n        uint256[] calldata strategyId,\\n        uint256[] calldata positions,\\n        uint256 biosAmount\\n    ) external override onlyController {\\n        address wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n\\n        if (biosAmount > 0) {\\n            // Check against BIOS flashing\\n            require(\\n                IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalStrategyBalance(0) <= biosAmount,\\n                \\\"YieldManager::expected BIOS exceeded\\\"\\n            );\\n        }\\n\\n        // First fill up gas wallet with ETH\\n        // We just skip this for now :)\\n        // If you are going to enable, don't forget to account for where\\n        // the eth will come from!!\\n        // uint256 gasAmount = _ethToGasAccount();\\n\\n        uint256 totalRewards;\\n\\n        for (uint256 i; i < strategyId.length; ++i) {\\n            uint256 id = strategyId[i];\\n            require(id > 0, \\\"YieldManager::invalid strategy\\\");\\n\\n            // check positions to prevent flasher\\n            require(\\n                IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).getStrategyTokenBalance(\\n                    id,\\n                    wethAddress\\n                ) <= positions[i],\\n                \\\"YieldManager::position exceeded\\\"\\n            );\\n\\n            uint256 wethToDistribute = strategies[id].processedWeth - strategies[id].distributedWeth;\\n\\n            if (wethToDistribute > 0) {\\n                (\\n                    uint256 biosBuyBackWethAmount,\\n                    uint256 treasuryWethAmount,\\n                    uint256 protocolFeeWethAmount,\\n                    uint256 syntheticPoolSupplementAmount,\\n                    uint256 rewardsWethAmount\\n                ) = _calculateRewardAmounts(wethToDistribute);\\n\\n                // Send WETH to SushiSwap trader for BIOS buy back\\n                if (biosBuyBackWethAmount > 0) {\\n                    IERC20MetadataUpgradeable(wethAddress).safeTransfer(\\n                        moduleMap.getModuleAddress(Modules.SwapManager),\\n                        biosBuyBackWethAmount\\n                    );\\n                }\\n\\n                // Swap WETH for ETH and transfer to the treasury account\\n                _unwrapWnative(treasuryWethAmount, wethAddress);\\n                _transferAmount(treasuryWethAmount, treasuryAccount);\\n\\n                if (protocolFeeWethAmount > 0) {\\n                    // Send ETH to protocol fee accrual rewards (BIOS stakers)\\n                    _ethToProtocolFeeAccrual(protocolFeeWethAmount);\\n                }\\n\\n                if (syntheticPoolSupplementAmount > 0) {\\n                    address underlying = IStrategy1155(moduleMap.getModuleAddress(Modules.Strategy1155)).idToUnderlying(\\n                        id\\n                    );\\n                    address syntheticERC20 = ISyntheticMap(moduleMap.getModuleAddress(Modules.SyntheticMap))\\n                        .underlyingToSynthetic(underlying);\\n\\n                    _ethToSyntheticPool(syntheticPoolSupplementAmount, syntheticERC20, underlying);\\n                }\\n\\n                // Send ETH to strategy rewards\\n                _ethToRewards(id, rewardsWethAmount);\\n                totalRewards += rewardsWethAmount;\\n\\n                // Update accounting\\n                strategies[id].distributedWeth += wethToDistribute;\\n            }\\n        }\\n\\n        // Update stats metric\\n        lastEthRewardsAmount = totalRewards;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Distribute parts\\n     *\\n     *\\n     **/\\n\\n    /// @notice Distributes WETH to gas wallet\\n    function _ethToGasAccount() private returns (uint256 ethAmountToGasAccount) {\\n        address wethAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n        uint256 wethBalance = IERC20MetadataUpgradeable(wethAddress).balanceOf(address(this));\\n\\n        if (wethBalance > 0) {\\n            uint256 gasAccountActualEthBalance = gasAccount.balance;\\n            if (gasAccountActualEthBalance < gasAccountTargetEthBalance) {\\n                // Need to send ETH to gas account\\n                if (wethBalance < gasAccountTargetEthBalance - gasAccountActualEthBalance) {\\n                    // Send all of WETH to gas wallet\\n                    ethAmountToGasAccount = wethBalance;\\n                } else {\\n                    // Send portion of WETH to gas wallet\\n                    ethAmountToGasAccount = gasAccountTargetEthBalance - gasAccountActualEthBalance;\\n                }\\n                _unwrapWnative(ethAmountToGasAccount, wethAddress);\\n                _transferAmount(ethAmountToGasAccount, gasAccount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Uses any WETH held in the SushiSwap trader to buy back BIOS which is sent to the Kernel\\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\\n    function biosBuyBack(uint256 ratioX1000) external override onlyController {\\n        ISwapManager swapManager = ISwapManager(moduleMap.getModuleAddress(Modules.SwapManager));\\n        if (\\n            IERC20MetadataUpgradeable(\\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\\n            ).balanceOf(address(swapManager)) > 0\\n        ) {\\n            // Use all ETH sent to the SwapManager trader to buy BIOS\\n            swapManager.biosBuyBack(ratioX1000);\\n\\n            address bios_address = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n                .getBiosTokenAddress();\\n            /// Use all BIOS transferred to the Kernel to update bios rewards\\n            IBiosEmitter(moduleMap.getModuleAddress(Modules.BiosEmitter)).updatePool(bios_address);\\n        }\\n    }\\n\\n    /// @notice Distributes ETH to Rewards per token\\n    /// @param strategyId The strategy id to distribute the rewards to\\n    /// @param ethRewardsAmount The amount of ETH rewards to distribute\\n    function _ethToRewards(uint256 strategyId, uint256 ethRewardsAmount) private {\\n        if (ethRewardsAmount > 0) {\\n            // Distribute eth rewards\\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).increaseEthRewards(\\n                strategyId,\\n                ethRewardsAmount\\n            );\\n\\n            // Convert to eth and send\\n            _unwrapWnative(\\n                ethRewardsAmount,\\n                IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\\n            );\\n            _transferAmount(ethRewardsAmount, moduleMap.getModuleAddress(Modules.Kernel));\\n        }\\n    }\\n\\n    /// @notice Distributes ETH to protocol fee accrual (BIOS staker rewards)\\n    /// @param protocolFeeEthRewardsAmount Amount of ETH to distribute to protocol fee accrual\\n    function ethToProtocolFeeAccrual(uint256 protocolFeeEthRewardsAmount) external onlyController {\\n        _ethToProtocolFeeAccrual(protocolFeeEthRewardsAmount);\\n    }\\n\\n    function _ethToProtocolFeeAccrual(uint256 protocolFeeEthRewardsAmount) private {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n\\n        if (IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).totalStrategyBalance(0) > 0) {\\n            // BIOS has been deposited, increase Ether rewards for BIOS depositors\\n            IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards)).increaseEthRewards(\\n                0,\\n                protocolFeeEthRewardsAmount\\n            );\\n\\n            _unwrapWnative(protocolFeeEthRewardsAmount, integrationMap.getWethTokenAddress());\\n\\n            _transferAmount(protocolFeeEthRewardsAmount, moduleMap.getModuleAddress(Modules.Kernel));\\n        } else {\\n            // No BIOS has been deposited, send WETH back to Kernel as reserves\\n            IERC20MetadataUpgradeable(integrationMap.getWethTokenAddress()).transfer(\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                protocolFeeEthRewardsAmount\\n            );\\n        }\\n    }\\n\\n    function _ethToSyntheticPool(\\n        uint256 syntheticPoolEthAmount,\\n        address _synthetic,\\n        address _underlying\\n    ) private {\\n        (address hedgeIntegration, uint32 ammPoolID, ) = ISyntheticERC20(_synthetic).getHedgeDeployArgs();\\n\\n        IERC20MetadataUpgradeable(_underlying).transfer(hedgeIntegration, syntheticPoolEthAmount);\\n        IAMMIntegration(hedgeIntegration).deposit(_underlying, syntheticPoolEthAmount, ammPoolID);\\n        // We will deploy funds in the next deploy call\\n    }\\n\\n    function _calculateRewardAmounts(uint256 amount)\\n        internal\\n        view\\n        returns (\\n            uint256 biosBuyBackAmount,\\n            uint256 treasuryAmount,\\n            uint256 protocolFeeAmount,\\n            uint256 syntheticPoolSupplementAmount,\\n            uint256 rewardsAmount\\n        )\\n    {\\n        uint256 weightSum = getEthWeightSum();\\n        biosBuyBackAmount = (amount * biosBuyBackEthWeight) / weightSum;\\n        treasuryAmount = (amount * treasuryEthWeight) / weightSum;\\n        protocolFeeAmount = (amount * protocolFeeEthWeight) / weightSum;\\n        syntheticPoolSupplementAmount = (amount * syntheticPoolSupplementEthWeight) / weightSum;\\n        rewardsAmount = amount - biosBuyBackAmount - treasuryAmount - protocolFeeAmount - syntheticPoolSupplementAmount;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Getters\\n     *\\n     *\\n     **/\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of the token held in the Kernel as reserves\\n    function getReserveTokenBalance(address tokenAddress) public view override returns (uint256) {\\n        require(\\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getIsTokenAdded(tokenAddress),\\n            \\\"YieldManager::getReserveTokenBalance: Token not added\\\"\\n        );\\n        return IERC20MetadataUpgradeable(tokenAddress).balanceOf(moduleMap.getModuleAddress(Modules.Kernel));\\n    }\\n\\n    /// @return ethWeightSum The sum of ETH distribution weights\\n    function getEthWeightSum() public view override returns (uint32 ethWeightSum) {\\n        ethWeightSum =\\n            biosBuyBackEthWeight +\\n            treasuryEthWeight +\\n            protocolFeeEthWeight +\\n            rewardsEthWeight +\\n            syntheticPoolSupplementEthWeight;\\n    }\\n\\n    /// @return The address of the gas account\\n    function getGasAccount() public view override returns (address) {\\n        return gasAccount;\\n    }\\n\\n    /// @return The address of the treasury account\\n    function getTreasuryAccount() public view override returns (address) {\\n        return treasuryAccount;\\n    }\\n\\n    /// @return The last amount of ETH distributed to rewards\\n    function getLastEthRewardsAmount() public view override returns (uint256) {\\n        return lastEthRewardsAmount;\\n    }\\n\\n    /// @return The target ETH balance of the gas account\\n    function getGasAccountTargetEthBalance() public view override returns (uint256) {\\n        return gasAccountTargetEthBalance;\\n    }\\n\\n    /// @return The BIOS buyback ETH weight\\n    /// @return The Treasury ETH weight\\n    /// @return The Protocol fee ETH weight\\n    /// @return The rewards ETH weight\\n    /// @return The synthetic pool ETH supplement weight\\n    function getEthDistributionWeights()\\n        public\\n        view\\n        override\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        )\\n    {\\n        return (\\n            biosBuyBackEthWeight,\\n            treasuryEthWeight,\\n            protocolFeeEthWeight,\\n            rewardsEthWeight,\\n            syntheticPoolSupplementEthWeight\\n        );\\n    }\\n\\n    /// @return The timestamp the harvestYield function was last called\\n    function getLastHarvestYieldTimestamp(address integrationAddress) external view returns (uint256) {\\n        return lastHarvestTimestampByIntegration[integrationAddress];\\n    }\\n\\n    function getStrategyInfo(uint256 strategyId) external view returns (StrategyInfo memory) {\\n        return strategies[strategyId];\\n    }\\n\\n    function getAllPendingYield(address token) external view returns (IntegrationYield[] memory pendingYieldData) {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\\n\\n        pendingYieldData = new IntegrationYield[](integrationCount);\\n\\n        for (uint256 integrationId; integrationId < integrationCount; integrationId++) {\\n            address integrationAddress = integrationMap.getIntegrationAddress(integrationId);\\n            uint256 pendingYield = IIntegration(integrationAddress).getPendingYield(token);\\n\\n            pendingYieldData[integrationId] = IntegrationYield(integrationAddress, token, pendingYield);\\n        }\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Help methods\\n     *\\n     *\\n     **/\\n\\n    function transferClosedPositionsValue(\\n        address destination,\\n        address token,\\n        uint256 amount\\n    ) external override onlyController {\\n        require(destination != address(0), \\\"bad address\\\");\\n        IERC20MetadataUpgradeable(token).safeTransfer(destination, amount);\\n    }\\n\\n    function _transferAmount(uint256 amount, address to) internal virtual {\\n        (bool sent, ) = payable(to).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to transfer value\\\");\\n    }\\n\\n    function _unwrapWnative(uint256 amount, address wnativeAddress) internal virtual returns (bool unwrapped) {\\n        // just add some ORs on here to check for more chains...\\n        if (block.chainid == FTM_CHAIN_ID || block.chainid == BSC_CHAIN_ID) {\\n            // we are on a chain with wnative unwrapping issues\\n\\n            // get unwrapper address\\n            address unwrapper = moduleMap.getModuleAddress(Modules.Unwrapper);\\n\\n            // send wnative to unwrapper and unwrap\\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(unwrapper, amount);\\n            IUnwrapper(unwrapper).unwrap(amount);\\n            return true;\\n        } else if (block.chainid == METIS_CHAIN_ID) {\\n            // metis is not wrapped and can already be sent as native token\\n            return false;\\n        } else {\\n            // we are on a chain with working wnative unwrapping, so just do it\\n            IWeth9(wnativeAddress).withdraw(amount);\\n            return true;\\n        }\\n    }\\n\\n    function abs(int256 val) internal pure returns (uint256) {\\n        return uint256(val >= 0 ? val : -val);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0xc5397cf9b12e35b86b672b9ea64043af145ae2d4fe5425315093d050b4ed8cf3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// Events\\n    event CreatePool(address indexed tokenA, address indexed tokenB, uint32 poolID);\\n    event YieldHarvested(uint32 poolID);\\n    event Deposit(address token, uint256 amount, uint32 poolID);\\n    event DepositToPool(uint256 poolId, uint256 amount);\\n    event HarvestYieldError(uint32 indexed poolID);\\n\\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n}\\n\",\"keccak256\":\"0x6cd7b293476a41f7168265fcd8d87edb5ded8baaea0178ac60f84f68789cd9df\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IBiosEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBiosEmitter {\\n    // struct UserInfo {\\n    //     uint256 amount;\\n    //     int256 rewardDebt;\\n    //     bool initialized;\\n    // }\\n\\n    struct PoolInfo {\\n        uint128 accBiosPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        bool initialized;\\n    }\\n\\n    function updatePool(address _token) external returns (IBiosEmitter.PoolInfo memory);\\n\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _depositor\\n    ) external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawer\\n    ) external;\\n\\n    function harvest(address _token, address _harvester) external returns (uint256);\\n\\n    function harvestAll(address _harvester) external returns (uint256);\\n\\n    // function withdrawAndHarvest(\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     address _harvester\\n    // ) external returns (uint256);\\n\\n    function getEligibleToken(address _token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a175ea8cd91367e695abd2bb277d75ded1e69552cd02bdfc6f72c8f9d597ff\",\"license\":\"MIT\"},\"contracts/interfaces/IEtherRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IEtherRewards {\\n    // structs\\n    struct UserInfo {\\n        // rewardDebt uses MCV2 technology, it can be negative!\\n        int256 rewardDebt;\\n        uint256 claimedRewards;\\n    }\\n\\n    struct StrategyInfo {\\n        uint256 rewardPerShare; // rewardPerShare * 1e12\\n        uint256 totalRewards;\\n    }\\n\\n    /// @param strategyId The strategy the user entered\\n    /// @param amount The amount of token entered by the user\\n    /// @param user The address of the user\\n    function increaseUserRewards(\\n        uint256 strategyId,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    /// @param strategyId The strategy the user exited\\n    /// @param amount The amount of token exited by the user\\n    /// @param user The address of the user\\n    function decreaseUserRewards(\\n        uint256 strategyId,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    /// @param strategyId The strategy to the rewards are for\\n    /// @param ethRewardsAmount The amount of Ether rewards to add\\n    function increaseEthRewards(uint256 strategyId, uint256 ethRewardsAmount) external;\\n\\n    /// @param user The address of the user\\n    /// @param ids An array of strategyIds to claim rewards for\\n    /// @return ethRewards The amount of Ether claimed\\n    function claimEthRewards(address user, uint256[] calldata ids) external returns (uint256 ethRewards);\\n\\n    /// @param strategyId The ID of the strategy\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserStrategyRewards(uint256 strategyId, address user) external view returns (uint256 ethRewards);\\n\\n    /// @param user The address of the user\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserEthRewards(address user) external view returns (uint256 ethRewards);\\n\\n    /// @param user The address of the user\\n    /// @param ids An array of strategyIds to claim rewards for\\n    /// @return ethRewards The amount of Ether claimed\\n    function getUserEthRewards(address user, uint256[] calldata ids) external view returns (uint256 ethRewards);\\n\\n    /// @return The total value of ETH claimed by users\\n    function getTotalClaimedEthRewards() external view returns (uint256);\\n\\n    /// @return The total value of ETH claimed by a user\\n    function getTotalUserClaimedEthRewards(address user) external view returns (uint256);\\n\\n    /// @return The total amount of Ether rewards\\n    function getEthRewards() external view returns (uint256);\\n\\n    /// @notice Sets the nominal period between eth distributions\\n    function setEmissionPeriod(uint256 period) external;\\n}\\n\",\"keccak256\":\"0xe0ad65e3bf6a9fe30e407f268338c14516649ce7777850960bacc2821de61c50\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    event Deploy(address token, uint256 amount);\\n    event HarvestYield(address token, uint256 amount);\\n    event Deposit(address token, uint256 amount);\\n    event Withdraw(address token, uint256 amount);\\n\\n    /**\\n     * Used by YieldManager to deposit funds.\\n     * @param tokenAddress The address of the deposited token\\n     * @param amount The amount being deposited\\n     */\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to withdraw funds.\\n     * @param tokenAddress The address of the withdrawal token\\n     * @param amount The amount being withdrawn\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * Used by YieldManager to deploy funds.\\n     * @dev Deploys all tokens held in the integration contract to the integrated protocol\\n     */\\n    function deploy() external;\\n\\n    /**\\n     * Used by YieldManager to harvest funds.\\n     * @dev Harvests token yield from the integration\\n     */\\n    function harvestYield() external;\\n\\n    /**\\n     * Get the integration's balance of a token.\\n     * @dev has been deposited to the integration contract\\n     * @dev This returns the total amount of the underlying token that\\n     * @param tokenAddress The address of the deployed token\\n     * @return The amount of the underlying token that can be withdrawn\\n     */\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /**\\n     * Returns the total amount of yield awaing to be harvested\\n     * using the relevant integration's own function\\n     * @param tokenAddress The token to get the pending yield for\\n     * @return amount The amount of available yield for the specified token\\n     */\\n    function getPendingYield(address tokenAddress) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5f1c0946f3def553313e240f568096ccf9090659b52c51deed14f56d7559f8b8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6f4529412860cc773b26bca59c78fd12bc066323470b07501c0d1e9e2de0f54a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    Strategy1155, // 6\\n    SyntheticMap, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c79bb5822bea9209419b3c6eaefc40a8fd950184ff4445eb5745f70460f5310\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategy1155.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IStrategy1155 {\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    function balanceOf(address _account, uint256 _id) external view returns (uint256);\\n\\n    function balanceOfBatch(address _account, uint256[] calldata _ids) external view returns (uint256 totalBalance_);\\n\\n    function totalSupply(uint256 _id) external view returns (uint256);\\n\\n    function totalSupplyBatch(uint256[] calldata _ids) external view returns (uint256);\\n\\n    /// @param _strategyName The name of the strategy for which the token is being created\\n    /// @param _strategyId The ID of the strategy for which the token is being created\\n    /// @param _underlying A underlying token used in the strategy\\n    /// @dev Delegates token creation to ProxyCloneFactory\\n    function deployStrategyToken(\\n        string memory _strategyName,\\n        uint256 _strategyId,\\n        address _underlying\\n    ) external;\\n\\n    function idToUnderlying(uint256 strategyId) external view returns (address underlying);\\n}\\n\",\"keccak256\":\"0x22b019df87368995e74d5402e67c1fe702a8214ee74b8ed171a5d3577cfcb6cb\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    /**\\n     *\\n     * structs\\n     *\\n     **/\\n\\n    struct DeployAmount {\\n        int128 deploy;\\n        uint128 hedge;\\n    }\\n\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n        mapping(address => uint256) maximumCap;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct TokenFunds {\\n        uint256 totalBalance;\\n        // strategy token => strategy balance\\n        mapping(address => uint256) strategyBalance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    struct ReplaceIntegrationParams {\\n        Integration newIntegration;\\n        address token;\\n        uint256 oldIntegrationIndex;\\n        uint32[] weightAmounts;\\n        uint256[] weightTokenIndexes;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * events\\n     *\\n     *\\n     **/\\n\\n    event NewStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens, string name);\\n\\n    event UpdateName(uint256 indexed strategyId, string name);\\n\\n    event UpdateStrategy(uint256 indexed strategyId, Integration[] integrations, Token[] tokens);\\n\\n    event DeleteStrategy(uint256 indexed strategyId);\\n\\n    event IntegrationWeightAdjustment(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        uint32 amount,\\n        bool rebalance\\n    );\\n\\n    event RemoveIntegration(uint256 strategyId, uint256 integrationIndex, address token);\\n\\n    event AddIntegration(uint256 strategyId, Integration integration, address token);\\n\\n    /**\\n     *\\n     *\\n     * manager's functions\\n     *\\n     *\\n     **/\\n\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     @param maxCap  The maximum amount investable in a strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens,\\n        uint256[] memory maxCap\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 strategyId, string calldata name) external;\\n\\n    function addPairToStrategy(\\n        uint256 strategyId,\\n        Integration calldata integration,\\n        address token\\n    ) external;\\n\\n    /**\\n    @dev Changes weights of integrations,optionally rebalancing the integrations\\n        so that current fund allocation reflects new weights\\n     */\\n    function movePairWeight(\\n        uint256 strategyId,\\n        uint256 sourceIndex,\\n        uint256 destinationIndex,\\n        int256 vectorAmount,\\n        uint32 amount,\\n        bool rebalance\\n    ) external;\\n\\n    function removePairFromStrategy(\\n        uint256 strategyId,\\n        uint256 integrationIndex,\\n        address token\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it,\\n        first update the strategy so that the existing tokens are no longer available in the strategy,\\n        then delete the strategy. This will unwind the users positions,\\n        and they will be able to withdraw their funds.\\n    @param strategyId  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 strategyId) external;\\n\\n    /**\\n    @notice Sets availability status for the token\\n    @param strategyId The strategy strategyId\\n    @param token The token address\\n    @param available An availability status. Velue \\\"true\\\" will enable token and vice versa\\n    */\\n    function setAvailableTokens(\\n        uint256 strategyId,\\n        address token,\\n        bool available\\n    ) external;\\n\\n    /**\\n    @notice Sets the maximum investment cap for a strategy and token pair\\n    @param strategyId The strategy strategyId\\n    @param token the token address\\n    @param maxCap The maximum amount of funds that can be invested\\n    */\\n    function setMaximumCap(\\n        uint256 strategyId,\\n        address token,\\n        uint256 maxCap\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * strategy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param strategyId  the strategy to deposit into\\n    @param token Token address\\n    @param amount Amount of the token\\n    @return strategyDebtClosed_ How much negative deploy amount was increased (-x [deploy] + y [amount] = y - x [deploy])\\n     */\\n    function increaseStrategy(\\n        uint256 strategyId,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 strategyDebtClosed_);\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param strategyId  the strategy to withdraw assets from\\n    @param amount  amount of lp token that user have burned\\n     */\\n    function decreaseStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     *\\n     *\\n     * deploy flow\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param deployAmount Amount that went to the corresponding pool\\n    @param hedgeAmount Amount that went to the synthetic pool\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 deployAmount,\\n        uint256 hedgeAmount\\n    ) external;\\n\\n    /**\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param strategyId  the strategy to return\\n     */\\n    function getStrategy(uint256 strategyId) external view returns (StrategySummary memory);\\n\\n    /**\\n    @notice Returns 1 or more strategies in a single call.\\n    @param strategyIds to return.\\n    */\\n    function getMultipleStrategies(uint256[] calldata strategyIds) external view returns (StrategySummary[] memory);\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param strategyId  the strategy strategyId to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 strategyId, address token) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @param strategies An array of strategies in which total balance will be calculated\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token, uint256[] calldata strategies) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return deployAmount An amount that should be deployed to the corresponding integration\\n    @return hedgeAmount An amount that should be deployed to the synthetic pool \\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256 deployAmount, uint256 hedgeAmount);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy) external view returns (uint256);\\n\\n    /// @notice Retrieves the maximum cap for a strategy/token pair\\n    /// @param strategyId  the strategy strategyId\\n    /// @param token  the token address\\n    /// @return cap  the maximum cap for the strategy/token pair\\n    function getMaximumCap(uint256 strategyId, address token) external view returns (uint256 cap);\\n}\\n\",\"keccak256\":\"0x4c029270bde792eec1344723c6303ceb27e969751b3de246c9bdc30d3bd83283\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISwapManager {\\n    /**\\n     * @dev Executes swap only for amountIn which will not significantly imbalance the pool and returns this amountIn\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _ratioIn The left part of the ratio tokenA : tokenB which we will stick to\\n     * @param _ratioOut The right part of the ratio tokenA : tokenB which we will stick to\\n     * @param _recipient The address of the token out recipient\\n     * @param _desiredAmountIn Requested amountIn\\n     * @param _desiredMinAmountOut Like usual minAmountOut, but will decrease proportionally with decreasing _desiredAmountIn\\n     * @return spendedAmountIn_ <= _desiredAmountOut spended for the swap\\n     **/\\n    function gentleSwapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint32 _ratioIn,\\n        uint32 _ratioOut,\\n        address _recipient,\\n        uint256 _desiredAmountIn,\\n        uint256 _desiredMinAmountOut\\n    ) external returns (uint256 spendedAmountIn_);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _recipient The address of the token out recipient\\n     * @param _amountIn The exact amount of the input to swap\\n     * @param _minAmountOut The minimum amount of _tokenOut to receive\\n     * @return tradeSuccess_ Indicates whether the swap succeeded\\n     **/\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (bool tradeSuccess_);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _recipient The address of the token out recipient\\n     * @param _amountIn The exact amount of the input to swap\\n     * @return tradeSuccess_ Indicates whether the swap succeeded\\n     **/\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external returns (bool tradeSuccess_);\\n\\n    /**\\n     * @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n     * @param ratioX1000 BIOS/WETH ratio for front runner protection\\n     * @return Bool indicating whether the trade succeeded\\n     **/\\n    function biosBuyBack(uint256 ratioX1000) external returns (bool);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _amountIn The exact amount of the input to swap\\n     * @return isPoolExist_ Can we swap these tokens via added traders?\\n     * @return bestPrice_ Best amount out from all traders\\n     **/\\n    function getBestAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view returns (bool isPoolExist_, uint256 bestPrice_);\\n}\\n\",\"keccak256\":\"0x26bc0edfa24ff4491cb9f679ea1810af47b3aa21200a72c1341d0c2b946baa4a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISyntheticERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISyntheticERC20 {\\n    struct PoolRatioLimit {\\n        uint32 underlying;\\n        uint32 synthetic;\\n    }\\n\\n    struct Float {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    struct StrategiesDebt {\\n        uint128 swapBackSynthetic;\\n        uint128 withdrawSynthetic;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Default ERC20\\n     *\\n     *\\n     **/\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /**\\n     *\\n     *\\n     * Synthetic pool debt management\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param syntheticSpended How much synthetic was spended to the swap\\n     * @param underlyingReceived How much underlying was received from the swap\\n     **/\\n    function changePoolDebt(uint256 syntheticSpended, uint256 underlyingReceived) external;\\n\\n    function increaseRedemptionOfSynthetic(uint256 _amount) external;\\n\\n    function getAndDeleteDelayedRedemptionOfSynthetic() external returns (uint256 _amount);\\n\\n    /**\\n     * @dev\\n     * When we execute UserPositions._findMoney -> SwapManager.gentleSwapExactIn for x synETH:\\n     * 1) If received x ETH: do not change debt\\n     * 2) Else if we received x + y ETH: debt -= y\\n     * 3) Else if we received x - y ETH: debt += y\\n     *\\n     * In order to pay this debt before deploy to hedge integration we should adjust deposit amount\\n     * For example we want to provide z liquidity to hedge pool and we have y underlying debt (z > y):\\n     * 1) If y == 0:\\n     *          underlyingDeposit = z\\n     *          syntheticDeposit = z\\n     * 2) Else if y > 0:\\n     *          underlyingDeposit = z - y\\n     *          syntheticDeposit = z\\n     * 3) Else if y < 0:\\n     *          underlyingDeposit = z\\n     *          syntheticDeposit = z - y\\n     **/\\n    function adjustLiquidityAccordingToUnderlyingDebt(uint256 _desiredLiquidity)\\n        external\\n        returns (uint256 _underlyingLiquidity, uint256 _syntheticLiquidity);\\n\\n    /**\\n     * @dev\\n     * When we use synthetic pool for withdraw, we eanr a debt that will be paid on the next deploy call.\\n     * This method will calculate how much underlying have to be deposited to synthetic pool and reduce debt\\n     **/\\n    function distributeAccordingToStrategiesDebt(uint256 _gotFromWithdrawal)\\n        external\\n        returns (uint256 hold_, uint256 depositToPool_);\\n\\n    function getAndDeleteStrategiesPoolDebt() external returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     * Getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @return integration_ Integration in which hedge funds will go\\n     * @return ammPoolID_ Integration AMM pool ID\\n     * @return syntheticToken_ Address of the SyntheticERC20 contract on the chain\\n     **/\\n    function getHedgeDeployArgs()\\n        external\\n        view\\n        returns (\\n            address integration_,\\n            uint32 ammPoolID_,\\n            address syntheticToken_\\n        );\\n\\n    function getHedgePercent() external view returns (uint128 numerator_, uint128 denominator_);\\n\\n    /**\\n     * @dev Kernel will be able to withdraw underlying from crv pool\\n     * until pool reach (underlying_ : synthetic_) ratio\\n     **/\\n    function getPoolLimit() external view returns (uint32 underlying_, uint32 synthetic_);\\n}\\n\",\"keccak256\":\"0xcdc0f515fe09a7a9ea133209b29936893cf062d39f988fe7b2724d97ba36baef\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISyntheticMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISyntheticMap {\\n    function underlyingToSynthetic(address _underlying) external view returns (address);\\n\\n    function syntheticToUnderlying(address _synghetic) external view returns (address);\\n\\n    /// @dev Deploys synthetic for an underlying if there is no synthetic for this underlying\\n    function deploySyntheticTokenIfNotExist(address _underlying) external returns (address deployedSynthetic_);\\n}\\n\",\"keccak256\":\"0x2a8e13fb332a9145db2e3285c8139232822e57dc3233d2b61c267f730e9526b5\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUnwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IWeth9.sol\\\";\\n\\n// Some native tokens can't be unwrapped by upgradeable contracts...\\n// https://forum.openzeppelin.com/t/msg-sender-transfer-runs-out-of-gas-on-a-payable-upgradeable-proxy-contract/3766\\n\\ninterface IUnwrapper {\\n    /// @dev transfer token and then unwrap\\n    // Allows you to unwrap the token in cases where Istanbul causes gas issues\\n    function unwrap(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4fd00a1b6e345a119768eb9d944311413cddc6c726a46142298b87b65e7cc7c0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n\\n    // ##### Events\\n    event EnterStrategy(uint256 indexed strategyId, address indexed user, uint256 amount);\\n    event ExitStrategy(uint256 indexed strategyId, address indexed user, uint256 tokenBurned);\\n    event Deposit(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event Pause(bool isPaused);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * user cycle\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @notice User is allowed to deposit whitelisted tokens\\n     * @param depositor Address of the account depositing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param ethAmount The amount of ETH sent with the deposit\\n     * @param migration flag if this is a migration from the old system\\n     **/\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /**\\n     * @notice Adds a user's funds to a strategy to be deployed\\n     * @param strategyId  The strategy to enter\\n     * @param amount Amount of native coin\\n     **/\\n    function enterStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @param user The address of the user claiming ETH rewards\\n     * @param strategies An array of ids to claim rewards for\\n     **/\\n    function claimEthRewards(address user, uint256[] calldata strategies) external returns (uint256 ethClaimed);\\n\\n    /**\\n     * @notice Marks a user's funds as withdrawable\\n     * @param strategyId  The strategy to withdrawfrom\\n     * @param amount strategyId amount to burn\\n     **/\\n    function exitStrategy(uint256 strategyId, uint256 amount) external;\\n\\n    /**\\n     * @notice User is allowed to withdraw tokens\\n     * @param recipient The address of the user withdrawing\\n     * @param tokens Array of token the token addresses\\n     * @param amounts Array of token amounts\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     **/\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /**\\n     * @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n     * @param recipient The address of the user withdrawing tokens\\n     * @param tokens Array of token address that user is exiting positions from\\n     * @param strategies Array of strategy IDs that user is claiming rewards from\\n     * @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n     * @return _withdrawAllAndClaimResponse\\n     * /// WithdrawAllAndClaimResponse.tokenAmounts The amounts of each token being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethWithdrawn The amount of ETH being withdrawn\\n     * /// WithdrawAllAndClaimResponse.ethClaimed The amount of ETH being claimed from rewards\\n     * /// WithdrawAllAndClaimResponse.biosClaimed The amount of BIOS being claimed from rewards\\n     **/\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] calldata strategies,\\n        bool withdrawWethAsEth\\n    ) external returns (WithdrawAllAndClaimResponse memory _withdrawAllAndClaimResponse);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param asset Address of the ERC20 token contract\\n     * @return The total balance of the asset that is not in the strategy\\n     **/\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     * @return The amount that a user has deposited locally, but that isn't in the strategy\\n     **/\\n    function userTokenBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.totalSupply(strategyId);\\n     **/\\n    function totalStrategyBalance(uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @param account An address of the user\\n     * @param strategyId An id of the strategy\\n     * @dev A passthrough to Strategy1155.balanceOf(account, strategyId)\\n     **/\\n    function userStrategyBalance(address account, uint256 strategyId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userDeployableBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that a user has interconnected\\n     * @param asset Address of the ERC20 token contract\\n     * @param account Address of the user account\\n     **/\\n    function userInterconnectBalance(address asset, address account) external view returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     *\\n     * interconnections\\n     *\\n     *\\n     *\\n     **/\\n\\n    function _remoteStrategyExecution(\\n        uint256 strategyID,\\n        address user,\\n        address token,\\n        uint256 amount,\\n        bool enterStrat // true to enter, false to exit\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserTokenBalances(\\n        address[] calldata assets,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n     * @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n     * @param assets list of tokens to update\\n     * @param account user\\n     * @param amounts list of amounts to update\\n     **/\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb4fd1f1d39f045138f9e727a31da165f99d212b4ef7a8cd0e28f3c7a83c8081\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IWeth9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IWeth9 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    /// @param wad The amount of wETH to withdraw into ETH\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x122212ebb8fe6d0190bf812f36fc33de4c1d0539a6d9ef33e34ad05724fa2056\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IYieldManager {\\n    // #### Structs\\n\\n    struct DeployRequest {\\n        address integration;\\n        address[] tokens; // If ammPoolID > 0, this should contain exactly two addresses\\n        uint32 ammPoolID; // The pool to deposit into. This is 0 for non-AMM integrations\\n    }\\n\\n    struct IntegrationYield {\\n        address integration;\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyInfo {\\n        uint256 processedWeth;\\n        uint256 distributedWeth;\\n        uint256 lastHarvest;\\n    }\\n\\n    // #### Functions\\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n    function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_) external;\\n\\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n    /// @param syntheticPoolSupplement_ The relative weight of ETH to send to synthetic pool on curve\\n    function updateEthDistributionWeights(\\n        uint32 biosBuyBackEthWeight_,\\n        uint32 treasuryEthWeight_,\\n        uint32 protocolFeeEthWeight_,\\n        uint32 rewardsEthWeight_,\\n        uint32 syntheticPoolSupplement_\\n    ) external;\\n\\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n    function updateGasAccount(address payable gasAccount_) external;\\n\\n    /// @param treasuryAccount_ The address of the system treasury account\\n    function updateTreasuryAccount(address payable treasuryAccount_) external;\\n\\n    /// @notice Deploys all tokens to all integrations according to configured weights\\n    function deploy(DeployRequest[] calldata deployments) external;\\n\\n    /// @notice Harvests available yield from provided and integration, credited to strategy\\n    /// @param strategyId Strategy to credit the yield to\\n    /// @param integrations The integrations to harvest yield from\\n    /// @param amount The\\n    function harvestYield(\\n        uint256 strategyId,\\n        address[] calldata integrations,\\n        uint256 amount,\\n        bool setAccounting\\n    ) external;\\n\\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n    /// @param strategyIds An array of strategies ids to distribute eth for\\n    function distributeEth(\\n        uint256[] calldata strategyIds,\\n        uint256[] calldata positions,\\n        uint256 biosAmount\\n    ) external;\\n\\n    /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\\n    /// @param ratioX1000 BIOS/WETH ratio for front runner protection\\n    function biosBuyBack(uint256 ratioX1000) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of the token held in the Kernel as reserves\\n    function getReserveTokenBalance(address tokenAddress) external view returns (uint256);\\n\\n    /// @return ethWeightSum The sum of ETH distribution weights\\n    function getEthWeightSum() external view returns (uint32 ethWeightSum);\\n\\n    /// @return The address of the gas account\\n    function getGasAccount() external view returns (address);\\n\\n    /// @return The address of the treasury account\\n    function getTreasuryAccount() external view returns (address);\\n\\n    /// @return The last amount of ETH distributed to rewards\\n    function getLastEthRewardsAmount() external view returns (uint256);\\n\\n    /// @return The target ETH balance of the gas account\\n    function getGasAccountTargetEthBalance() external view returns (uint256);\\n\\n    /// @return The BIOS buyback ETH weight\\n    /// @return The Treasury ETH weight\\n    /// @return The Protocol fee ETH weight\\n    /// @return The rewards ETH weight\\n    /// @return The synthetic pool ETH supplement weight\\n    function getEthDistributionWeights()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        );\\n\\n    function transferClosedPositionsValue(\\n        address destination,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    // function getAllPendingYield(address token)\\n    //     external\\n    //     view\\n    //     returns (IntegrationYield[] memory);\\n}\\n\",\"keccak256\":\"0x3eddcbc8ff31cecfb557576689011016c0605d29ea3c68cd2d597f409b28753d\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "biosBuyBack(uint256)": {
        "params": {
          "ratioX1000": "BIOS/WETH ratio for front runner protection"
        }
      },
      "distributeEth(uint256[],uint256[],uint256)": {
        "params": {
          "biosAmount": "Amount of bios deposited to prevent flashing",
          "positions": "An array of the total position value for the strategy to prevent flashing",
          "strategyId": "An aray of strategy strategyId to distribute eth for"
        }
      },
      "ethToProtocolFeeAccrual(uint256)": {
        "params": {
          "protocolFeeEthRewardsAmount": "Amount of ETH to distribute to protocol fee accrual"
        }
      },
      "getEthDistributionWeights()": {
        "returns": {
          "_0": "The BIOS buyback ETH weight",
          "_1": "The Treasury ETH weight",
          "_2": "The Protocol fee ETH weight",
          "_3": "The rewards ETH weight",
          "_4": "The synthetic pool ETH supplement weight"
        }
      },
      "getEthWeightSum()": {
        "returns": {
          "ethWeightSum": "The sum of ETH distribution weights"
        }
      },
      "getGasAccount()": {
        "returns": {
          "_0": "The address of the gas account"
        }
      },
      "getGasAccountTargetEthBalance()": {
        "returns": {
          "_0": "The target ETH balance of the gas account"
        }
      },
      "getLastEthRewardsAmount()": {
        "returns": {
          "_0": "The last amount of ETH distributed to rewards"
        }
      },
      "getLastHarvestYieldTimestamp(address)": {
        "returns": {
          "_0": "The timestamp the harvestYield function was last called"
        }
      },
      "getReserveTokenBalance(address)": {
        "params": {
          "tokenAddress": "The address of the token ERC20 contract"
        },
        "returns": {
          "_0": "The amount of the token held in the Kernel as reserves"
        }
      },
      "getTreasuryAccount()": {
        "returns": {
          "_0": "The address of the treasury account"
        }
      },
      "harvestYield(uint256,address[],uint256,bool)": {
        "params": {
          "integrations": "The integrations to harvest yield from",
          "strategyId": "Strategy to credit the yield to"
        }
      },
      "initialize(address[],address,uint256,uint32,uint32,uint32,uint32,address,address)": {
        "params": {
          "biosBuyBackEthWeight_": "The relative weight of ETH to send to BIOS buy back",
          "controllers_": "The addresses of the controlling contracts",
          "gasAccountTargetEthBalance_": "The target ETH balance of the gas account",
          "gasAccount_": "The address of the account to send ETH to gas for executing bulk system functions",
          "moduleMap_": "Address of the Module Map",
          "protocolFeeEthWeight_": "The relative weight of ETH to send to protocol fee accrual",
          "rewardsEthWeight_": "The relative weight of ETH to send to user rewards",
          "treasuryAccount_": "The address of the system treasury account",
          "treasuryEthWeight_": "The relative weight of ETH to send to the treasury"
        }
      },
      "updateEthDistributionWeights(uint32,uint32,uint32,uint32,uint32)": {
        "params": {
          "biosBuyBackEthWeight_": "The relative weight of ETH to send to BIOS buy back",
          "protocolFeeEthWeight_": "The relative weight of ETH to send to protocol fee accrual",
          "rewardsEthWeight_": "The relative weight of ETH to send to user rewards",
          "syntheticPoolSupplement_": "The relative weight of ETH to send to synthetic pool on curve",
          "treasuryEthWeight_": "The relative weight of ETH to send to the treasury"
        }
      },
      "updateGasAccount(address)": {
        "params": {
          "gasAccount_": "The address of the account to send ETH to gas for executing bulk system functions"
        }
      },
      "updateGasAccountTargetEthBalance(uint256)": {
        "params": {
          "gasAccountTargetEthBalance_": "The target ETH balance of the gas account"
        }
      },
      "updateTreasuryAccount(address)": {
        "params": {
          "treasuryAccount_": "The address of the system treasury account"
        }
      }
    },
    "title": "Yield Manager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "biosBuyBack(uint256)": {
        "notice": "Uses any WETH held in the SushiSwap trader to buy back BIOS which is sent to the Kernel"
      },
      "deploy((address,address[],uint32)[])": {
        "notice": "Deploys all tokens to all integrations according to configured weights and also sends hedge amount to specified pool"
      },
      "distributeEth(uint256[],uint256[],uint256)": {
        "notice": "Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards"
      },
      "ethToProtocolFeeAccrual(uint256)": {
        "notice": "Distributes ETH to protocol fee accrual (BIOS staker rewards)"
      },
      "harvestYield(uint256,address[],uint256,bool)": {
        "notice": "Harvests available yield from provided and integration, credited to strategy"
      },
      "transferClosedPositionsValue(address,address,uint256)": {
        "notice": "Help methods*"
      }
    },
    "notice": "Manages yield deployments, harvesting, processing, and distribution",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15684,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)29669"
      },
      {
        "astId": 9016,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9019,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25150,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "gasAccountTargetEthBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 25152,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "biosBuyBackEthWeight",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 25154,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "treasuryEthWeight",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 25156,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "protocolFeeEthWeight",
        "offset": 8,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 25158,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "rewardsEthWeight",
        "offset": 12,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 25160,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "syntheticPoolSupplementEthWeight",
        "offset": 16,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 25162,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "lastEthRewardsAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 25164,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "gasAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 25166,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "treasuryAccount",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      },
      {
        "astId": 25170,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "processedWethByToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25174,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "lastHarvestTimestampByIntegration",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25179,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "strategies",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(StrategyInfo)33806_storage)"
      },
      {
        "astId": 25181,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "driftingSynthetic",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 25186,
        "contract": "contracts/core/YieldManager.sol:YieldManager",
        "label": "hedged",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(DeployRAM)25191_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)29669": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(DeployRAM)25191_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YieldManager.DeployRAM)",
        "numberOfBytes": "32",
        "value": "t_struct(DeployRAM)25191_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(StrategyInfo)33806_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IYieldManager.StrategyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyInfo)33806_storage"
      },
      "t_struct(DeployRAM)25191_storage": {
        "encoding": "inplace",
        "label": "struct YieldManager.DeployRAM",
        "members": [
          {
            "astId": 25188,
            "contract": "contracts/core/YieldManager.sol:YieldManager",
            "label": "hedgeAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 25190,
            "contract": "contracts/core/YieldManager.sol:YieldManager",
            "label": "tokenFlag",
            "offset": 31,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StrategyInfo)33806_storage": {
        "encoding": "inplace",
        "label": "struct IYieldManager.StrategyInfo",
        "members": [
          {
            "astId": 33801,
            "contract": "contracts/core/YieldManager.sol:YieldManager",
            "label": "processedWeth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33803,
            "contract": "contracts/core/YieldManager.sol:YieldManager",
            "label": "distributedWeth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 33805,
            "contract": "contracts/core/YieldManager.sol:YieldManager",
            "label": "lastHarvest",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}