{
  "address": "0xbc3A830287B16203cF554898847158beC0d7f126",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "CreatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "HarvestYieldError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LPTokensAcquired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenSold",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenBought",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBought",
          "type": "uint256"
        }
      ],
      "name": "PoolRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnFromPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "YieldHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configureAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "gaugeAddress",
          "type": "address"
        }
      ],
      "name": "configureStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "gaugeAddress",
          "type": "address"
        }
      ],
      "name": "configureStakingOverwrite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decrementBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionID",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAMMIntegration.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pids",
          "type": "uint32[]"
        }
      ],
      "name": "getYieldBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "harvestYieldByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "poolIds",
          "type": "uint32[]"
        }
      ],
      "name": "harvestYieldByPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "harvestedYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "incrementBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddress_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "manualDeploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "manualWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellTokenB",
          "type": "uint256"
        }
      ],
      "name": "rebalancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "setSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "stablePools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "stakeLPTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "yieldBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb53421b1318958a8838f91d9497961a4cd0ac06ce9d0ff5e120c307978691690",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0xbc3A830287B16203cF554898847158beC0d7f126",
    "transactionIndex": 0,
    "gasUsed": "5128588",
    "logsBloom": "0x
    "blockHash": "0x94b0acc4669dbc20fcbb7855227df068ce3f8f7832112788bc3938f184e4c8e4",
    "transactionHash": "0xb53421b1318958a8838f91d9497961a4cd0ac06ce9d0ff5e120c307978691690",
    "logs": [],
    "blockNumber": 2612456,
    "cumulativeGasUsed": "5128588",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bae0d42316781cd9ddd577ae93223874",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"HarvestYieldError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPTokensAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBought\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"PoolRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"YieldHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configureAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"gaugeAddress\",\"type\":\"address\"}],\"name\":\"configureStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"gaugeAddress\",\"type\":\"address\"}],\"name\":\"configureStakingOverwrite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decrementBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"internalType\":\"struct IAMMIntegration.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pids\",\"type\":\"uint32[]\"}],\"name\":\"getYieldBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"harvestYieldByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"poolIds\",\"type\":\"uint32[]\"}],\"name\":\"harvestYieldByPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"harvestedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"manualDeploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"manualWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTokenB\",\"type\":\"uint256\"}],\"name\":\"rebalancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"stablePools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"stakeLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"yieldBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(uint32)\":{\"details\":\"Deploys all the tokens for the specified pools\"},\"harvestYield()\":{\"details\":\"Harvests token yield from the integration\"},\"incrementBalance(uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount of the token being deposited\",\"token\":\"The address of the deposited token\"}},\"rebalancePool(uint32,uint256,uint256,uint256)\":{\"params\":{\"maxSellTokenA\":\"max amount of tokenA to sell (to limit rebalancing)\",\"maxSellTokenB\":\"max amount of tokenB to sell (to limit rebalancing)\",\"poolId\":\"The ID of the pool to rebalance\",\"ratioX1000\":\"reserves ratio to control the price slippage\"}},\"withdraw(address,uint256,uint32)\":{\"params\":{\"amount\":\"The amount of token in the pool to withdraw\",\"poolId\":\"the pool to withdraw from\",\"token\":\"the token to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CreatePool(address,address,uint32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"rebalancePool(uint32,uint256,uint256,uint256)\":{\"notice\":\"Rebalances by attempting to swap up to max to get into position ratio\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yield-integrations/MaiaDaoHermesIntegration.sol\":\"MaiaDaoHermesIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal onlyInitializing {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xed017271d8ba30d80b8449946ed9ed3c6192d59980f343d26580070da40ede47\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal onlyInitializing {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0x562431546443640c950a15ccce0cffedeced3e414c41cc2758bf489f4525d1df\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// Events\\n    event CreatePool(address indexed tokenA, address indexed tokenB, uint32 poolID);\\n    event YieldHarvested(uint32 poolID);\\n    event Deposit(address token, uint256 amount, uint32 poolID);\\n    event DepositToPool(uint256 poolId, uint256 amount);\\n    event HarvestYieldError(uint32 indexed poolID);\\n\\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n}\\n\",\"keccak256\":\"0x6cd7b293476a41f7168265fcd8d87edb5ded8baaea0178ac60f84f68789cd9df\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    //tmp here\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6394dcb85782f1f9f9c037041b0dc80742dec2887922eec58b751680cbe9a62c\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6f4529412860cc773b26bca59c78fd12bc066323470b07501c0d1e9e2de0f54a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    Strategy1155, // 6\\n    SyntheticMap, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c79bb5822bea9209419b3c6eaefc40a8fd950184ff4445eb5745f70460f5310\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISolidlyFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ISolidlyFactoryV1 {\\n    function allPairsLength() external view returns (uint256);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0xbbfcc146706b79a506b5ba997ee23882c5f5f308ec14b0421d87ea816db2e7aa\",\"license\":\"MIT\"},\"contracts/interfaces/ISolidlyGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface ISolidlyGauge {\\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function earned(address token, address account) external view returns (uint256);\\n\\n    function depositAll(uint256 tokenId) external;\\n\\n    function deposit(uint256 amount, uint256 tokenId) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawToken(uint256 amount, uint256 tokenId) external;\\n\\n    function left(address token) external view returns (uint256);\\n\\n    function stake() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xad79d12a7655777574e924bb7f3c864367001a1fa1be890cc57d1a193c820022\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISolidlyPairV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ISolidlyPairV1 {\\n    function current(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\n\\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint256, address) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x34d5350c1d74f2e09bd661b7bf8a3fec924e533711253b1b2ac4beec16a9d82c\",\"license\":\"MIT\"},\"contracts/interfaces/ISolidlyRouterV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ISolidlyRouterV1 {\\n    struct route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external view returns (address pair);\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountOut(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256 amount, bool stable);\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(uint256 amountIn, route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity\\n    ) external view returns (uint256 amountA, uint256 amountB);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityFTM(\\n        address token,\\n        bool stable,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountFTMMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountFTM,\\n            uint256 liquidity\\n        );\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityFTM(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountFTMMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountFTM);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityFTMWithPermit(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountFTMMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountFTM);\\n\\n    function swapExactTokensForTokensSimple(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactFTMForTokens(\\n        uint256 amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForFTM(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xcebf57b3c7956914f492c308346dbd33ebda589815b6273c33c3a3de1341ef94\",\"license\":\"MIT\"},\"contracts/interfaces/ISushiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5247211ccdd16df9589b28eae4b7d5541dd221962b951b26d1a25f9f76166ff1\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapPair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x209ee1730040efd952bd174bd95302465ff305fe0fe528760d5775b4985ba1cd\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISwapManager {\\n    /**\\n     * @dev Executes swap only for amountIn which will not significantly imbalance the pool and returns this amountIn\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _ratioIn The left part of the ratio tokenA : tokenB which we will stick to\\n     * @param _ratioOut The right part of the ratio tokenA : tokenB which we will stick to\\n     * @param _recipient The address of the token out recipient\\n     * @param _desiredAmountIn Requested amountIn\\n     * @param _desiredMinAmountOut Like usual minAmountOut, but will decrease proportionally with decreasing _desiredAmountIn\\n     * @return spendedAmountIn_ <= _desiredAmountOut spended for the swap\\n     **/\\n    function gentleSwapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint32 _ratioIn,\\n        uint32 _ratioOut,\\n        address _recipient,\\n        uint256 _desiredAmountIn,\\n        uint256 _desiredMinAmountOut\\n    ) external returns (uint256 spendedAmountIn_);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _recipient The address of the token out recipient\\n     * @param _amountIn The exact amount of the input to swap\\n     * @param _minAmountOut The minimum amount of _tokenOut to receive\\n     * @return tradeSuccess_ Indicates whether the swap succeeded\\n     **/\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (bool tradeSuccess_);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _recipient The address of the token out recipient\\n     * @param _amountIn The exact amount of the input to swap\\n     * @return tradeSuccess_ Indicates whether the swap succeeded\\n     **/\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external returns (bool tradeSuccess_);\\n\\n    /**\\n     * @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n     * @param ratioX1000 BIOS/WETH ratio for front runner protection\\n     * @return Bool indicating whether the trade succeeded\\n     **/\\n    function biosBuyBack(uint256 ratioX1000) external returns (bool);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _amountIn The exact amount of the input to swap\\n     * @return isPoolExist_ Can we swap these tokens via added traders?\\n     * @return bestPrice_ Best amount out from all traders\\n     **/\\n    function getBestAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view returns (bool isPoolExist_, uint256 bestPrice_);\\n}\\n\",\"keccak256\":\"0x26bc0edfa24ff4491cb9f679ea1810af47b3aa21200a72c1341d0c2b946baa4a\",\"license\":\"GPL-2.0\"},\"contracts/libraries/AMMLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/ISushiSwapFactory.sol\\\";\\nimport \\\"../interfaces/ISushiSwapPair.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary AMMLibrary {\\n    function getDeployAmounts(\\n        uint256 balanceA,\\n        uint256 balanceB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\\n        if (reserveA > reserveB) {\\n            uint256 k = (reserveA * 1000) / reserveB;\\n            uint256 balanceBA = (balanceB * k) / 1000;\\n\\n            if (balanceA < balanceBA) {\\n                amountA = balanceA;\\n                amountB = (balanceA * 1000) / k;\\n            } else if (balanceBA < balanceA) {\\n                amountA = (balanceB * k) / 1000;\\n                amountB = balanceB;\\n            } else {\\n                amountA = balanceA;\\n                amountB = balanceB;\\n            }\\n        } else if (reserveA < reserveB) {\\n            uint256 k = (reserveB * 1000) / reserveA;\\n            uint256 balanceAB = (balanceA * k) / 1000;\\n\\n            if (balanceB < balanceAB) {\\n                amountA = (balanceB * 1000) / k;\\n                amountB = balanceB;\\n            } else if (balanceAB < balanceB) {\\n                amountA = balanceA;\\n                amountB = (balanceA * k) / 1000;\\n            } else {\\n                amountA = balanceA;\\n                amountB = balanceB;\\n            }\\n        }\\n    }\\n\\n    function getExcessTokenAmounts(\\n        IAMMIntegration.Pool memory pool,\\n        uint256 balanceA,\\n        uint256 balanceB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (address swapToken, uint256 excessAmountToSwap) {\\n        if (reserveA > reserveB) {\\n            uint256 k = (reserveA * 1000) / reserveB;\\n            uint256 balanceBA = (balanceB * k) / 1000;\\n\\n            if (balanceA < balanceBA) {\\n                // excess tokenB\\n                excessAmountToSwap = (balanceB - ((balanceA * 1000) / k)) / 2;\\n                swapToken = pool.tokenB;\\n            } else if (balanceBA < balanceA) {\\n                // excess tokenA\\n                excessAmountToSwap = (balanceA - balanceBA) / 2;\\n                swapToken = pool.tokenA;\\n            }\\n        } else if (reserveA < reserveB) {\\n            uint256 k = (reserveB * 1000) / reserveA;\\n            uint256 balanceAB = (balanceA * k) / 1000;\\n\\n            if (balanceAB < balanceB) {\\n                // excess tokenB\\n                excessAmountToSwap = (balanceB - balanceAB) / 2;\\n                swapToken = pool.tokenB;\\n            } else if (balanceB < balanceAB) {\\n                // excess tokenA\\n                excessAmountToSwap = (balanceA - ((balanceB * 1000) / k)) / 2;\\n                swapToken = pool.tokenA;\\n            }\\n        }\\n    }\\n\\n    function getAmountOfTokensInPool(\\n        uint256 lpAmount,\\n        uint256 totalSupply,\\n        uint256 balanceA,\\n        uint256 balanceB\\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\\n        uint256 sharePercent = (lpAmount * 10000000000) / totalSupply;\\n        amountA = (balanceA * sharePercent) / 10000000000;\\n        amountB = (balanceB * sharePercent) / 10000000000;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Identical token addresses\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address\\\");\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"amountIn must be greater than zero\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"No liquidity in pool reserves\\\");\\n        uint256 amountInWithFee = amountIn * (997);\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function getRebalanceAmounts(\\n        address swapToken,\\n        IAMMIntegration.Pool memory pool,\\n        uint256 excessAmountToSwap,\\n        uint256 maxSellTokenA,\\n        uint256 maxSellTokenB\\n    ) internal pure returns (uint256 swapAmount, address targetToken) {\\n        if (swapToken == pool.tokenA) {\\n            targetToken = pool.tokenB;\\n            swapAmount = excessAmountToSwap < maxSellTokenA ? excessAmountToSwap : maxSellTokenA;\\n        } else {\\n            targetToken = pool.tokenA;\\n            swapAmount = excessAmountToSwap < maxSellTokenB ? excessAmountToSwap : maxSellTokenB;\\n        }\\n    }\\n\\n    function checkPriceCeiling(\\n        address pairAddress,\\n        uint256 reserveA,\\n        uint256 reserveB,\\n        uint256 ratioX1000\\n    ) internal pure {\\n        require(pairAddress != address(0), \\\"TraderJoeIntegration:BadPair\\\");\\n\\n        uint256 currentRatio;\\n\\n        if (reserveA < reserveB) {\\n            currentRatio = (reserveB * 1000) / reserveA;\\n        } else if (reserveB < reserveA) {\\n            currentRatio = (reserveA * 1000) / reserveB;\\n        } else {\\n            currentRatio = 1000;\\n        }\\n\\n        // limit to 1% off\\n        if (currentRatio > ratioX1000) {\\n            require(((currentRatio - ratioX1000) * 100) / ratioX1000 < 1, \\\"CeilingLimitReached\\\");\\n        } else if (ratioX1000 > currentRatio) {\\n            require(((ratioX1000 - currentRatio) * 100) / ratioX1000 < 1, \\\"CeilingLimitReached\\\");\\n        }\\n    }\\n\\n    function getLiquidityToWithdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 availableLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalSupply,\\n        IAMMIntegration.Pool memory pool\\n    ) internal pure returns (uint256 liquidityToWithdraw) {\\n        uint256 tokensPerLP;\\n\\n        if (tokenAddress == pool.tokenA) {\\n            tokensPerLP = totalSupply == 0 ? 0 : (reserve0 * 1e18) / totalSupply;\\n        } else {\\n            tokensPerLP = totalSupply == 0 ? 0 : (reserve1 * 1e18) / totalSupply;\\n        }\\n\\n        if (tokensPerLP == 0) {\\n            return 0;\\n        }\\n\\n        liquidityToWithdraw = ((amount / 2) * 1e18) / tokensPerLP;\\n\\n        if (liquidityToWithdraw > availableLiquidity) {\\n            liquidityToWithdraw = availableLiquidity;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd0907f15f554877f130b6bc73c97422a0f84ad67557702ad7915cd88915208ec\",\"license\":\"MIT\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/yield-integrations/MaiaDaoHermesIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../core/Controlled.sol\\\";\\nimport \\\"../core/ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/ISwapManager.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/AMMLibrary.sol\\\";\\nimport \\\"../interfaces/ISolidlyGauge.sol\\\";\\nimport \\\"../interfaces/ISolidlyPairV1.sol\\\";\\nimport \\\"../interfaces/ISolidlyRouterV1.sol\\\";\\nimport \\\"../interfaces/ISolidlyFactoryV1.sol\\\";\\n\\ncontract MaiaDaoHermesIntegration is Controlled, IAMMIntegration {\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    address public constant rewardToken = 0xb27BbeaACA2C00d6258C3118BAB6b5B6975161c8;\\n\\n    address factoryAddress;\\n    address swapRouterAddress;\\n    address wnativeAddress;\\n    uint32 public poolCount;\\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n    uint24 public slippageNumerator;\\n\\n    // poolId => Token => Amount currently available to deploy\\n    mapping(uint32 => mapping(address => uint256)) public balances;\\n    // Pool ID => Pool data\\n    mapping(uint32 => Pool) public pools;\\n    // Pool ID => whether it's a solidly stable pair\\n    mapping(uint32 => bool) public stablePools;\\n    // Pool id => yield available\\n    mapping(uint32 => uint256) public yieldBalances;\\n    // harvest yield (weth) per pool (harvested by YieldManager)\\n    mapping(uint32 => uint256) public harvestedYield;\\n    // poolId => Gauge\\n    mapping(uint32 => ISolidlyGauge) private stakings;\\n\\n    event TokensReceived(uint256 amount);\\n    event LPTokensAcquired(uint256 amount);\\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\\n    event YieldReceived(uint256 amount);\\n    event PoolRebalanced(\\n        uint256 poolId,\\n        address tokenSold,\\n        uint256 amountSold,\\n        address tokenBought,\\n        uint256 amountBought\\n    );\\n\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address factoryAddress_,\\n        address swapRouterAddress_,\\n        uint24 slippageNumerator_\\n    ) external initializer {\\n        require(factoryAddress_ != address(0), \\\"bad address\\\");\\n        require(swapRouterAddress_ != address(0), \\\"bad address\\\");\\n\\n        __Controlled_init(controllers_, moduleMap_);\\n        factoryAddress = factoryAddress_;\\n        swapRouterAddress = swapRouterAddress_;\\n        slippageNumerator = slippageNumerator_;\\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n    }\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolId\\n    ) external override onlyController {\\n        balances[poolId][token] += amount;\\n    }\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function incrementBalance(\\n        uint32 poolId,\\n        address token,\\n        uint256 amount\\n    ) external onlyManager {\\n        balances[poolId][token] += amount;\\n    }\\n\\n    function decrementBalance(\\n        uint32 poolId,\\n        address token,\\n        uint256 amount\\n    ) external onlyManager {\\n        balances[poolId][token] -= amount;\\n    }\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolId  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolId\\n    ) external override onlyController {\\n        require(balances[poolId][token] >= amount, \\\"insufficient integration balances\\\");\\n        balances[poolId][token] -= amount;\\n        IERC20MetadataUpgradeable(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000\\n    ) external onlyController {\\n        if (amount <= balances[poolId][token]) {\\n            balances[poolId][token] -= amount;\\n            IERC20MetadataUpgradeable(token).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\\n        } else {\\n            _withdraw(token, amount, poolId, ratioX1000, true);\\n        }\\n        require(balances[poolId][token] >= amount, \\\"insufficient integration balances\\\");\\n    }\\n\\n    function manualWithdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000\\n    ) external onlyManager returns (uint256 amountToWithdraw) {\\n        return _withdraw(token, amount, poolId, ratioX1000, false);\\n    }\\n\\n    function _withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000,\\n        bool sendToKernel\\n    ) internal returns (uint256 amountWithdrawn) {\\n        address biosAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getBiosTokenAddress();\\n        Pool memory pool = pools[poolId];\\n        bool stable = stablePools[poolId];\\n        if (ratioX1000 > 0) {\\n            checkPriceCeiling(pool.tokenA, pool.tokenB, stable, ratioX1000);\\n        }\\n\\n        // Hermes must always claim rewards before withdrawing\\n        _harvestYieldByPool(poolId, true, true);\\n\\n        // we don't sell the matched BIOS so we double the withdraw amount\\n        uint256 factor = pool.tokenA == biosAddress || pool.tokenB == biosAddress ? 2 : 1;\\n\\n        // calculate amount of LP tokens\\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB, stable);\\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\\n            token,\\n            amount * factor,\\n            stakings[poolId].balanceOf(address(this)),\\n            reserve0,\\n            reserve1,\\n            IERC20(pairFor(pool.tokenA, pool.tokenB, stable)).totalSupply(),\\n            pool\\n        );\\n\\n        // unstake LP tokens from gauge\\n        stakings[poolId].withdraw(liquidityToWithdraw);\\n\\n        // remove liquidity\\n        (uint256 amountTokenA, uint256 amountTokenB) = ISolidlyRouterV1(swapRouterAddress).removeLiquidity(\\n            pool.tokenA,\\n            pool.tokenB,\\n            stable,\\n            liquidityToWithdraw,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        if (pool.tokenA == token) {\\n            if (factor == 2) {\\n                // handle BIOS\\n                amountWithdrawn = amountTokenA;\\n                balances[poolId][pool.tokenB] += amountTokenB;\\n            } else {\\n                amountWithdrawn =\\n                    amountTokenA +\\n                    _swapToken(\\n                        pool.tokenB,\\n                        pool.tokenA,\\n                        address(this),\\n                        amountTokenB,\\n                        _calculateSlip(\\n                            ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenB, amountTokenB)\\n                        ),\\n                        stable\\n                    )[1];\\n            }\\n\\n            if (sendToKernel) {\\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\\n                    moduleMap.getModuleAddress(Modules.Kernel),\\n                    amountWithdrawn\\n                );\\n            } else {\\n                balances[poolId][pool.tokenA] += amountWithdrawn;\\n            }\\n        } else {\\n            if (factor == 2) {\\n                // handle BIOS\\n                amountWithdrawn = amountTokenB;\\n                balances[poolId][pool.tokenA] += amountTokenA;\\n            } else {\\n                amountWithdrawn =\\n                    amountTokenB +\\n                    _swapToken(\\n                        pool.tokenA,\\n                        pool.tokenB,\\n                        address(this),\\n                        amountTokenA,\\n                        _calculateSlip(\\n                            ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenA, amountTokenA)\\n                        ),\\n                        stable\\n                    )[1];\\n            }\\n\\n            if (sendToKernel) {\\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\\n                    moduleMap.getModuleAddress(Modules.Kernel),\\n                    amountWithdrawn\\n                );\\n            } else {\\n                balances[poolId][pool.tokenB] += amountWithdrawn;\\n            }\\n        }\\n\\n        emit WithdrawnFromPool(poolId, amountWithdrawn);\\n    }\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolId) external override onlyController {\\n        // we want to skip the LP deploy since we haven't rebalanced yet\\n        // otherwise we may get ILM error (https://github.com/MaiaDAO/hermes-protocol/blob/master/contracts/BaseV1-core.sol#L358)\\n        // _deploy(poolId);\\n    }\\n\\n    function manualDeploy(uint32 poolId) external onlyManager {\\n        _deploy(poolId);\\n    }\\n\\n    function _deploy(uint32 poolId) internal {\\n        Pool memory pool = pools[poolId];\\n        require(pool.tokenA != address(0), \\\"pool doesn't exist\\\");\\n\\n        uint256 balanceA = balances[poolId][pool.tokenA];\\n        uint256 balanceB = balances[poolId][pool.tokenB];\\n\\n        if (balanceA == 0 || balanceB == 0) {\\n            return;\\n        }\\n        bool stable = stablePools[poolId];\\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB, stable);\\n\\n        (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\\n\\n        // Hermes must always claim fees before deploying more funds\\n        _harvestPoolFees(poolId, pool);\\n        _harvestGaugeRewards(poolId);\\n\\n        (uint256 amountAActual, uint256 amountBActual, uint256 liquidityAcquired) = ISolidlyRouterV1(swapRouterAddress)\\n            .addLiquidity(pool.tokenA, pool.tokenB, stable, amountA, amountB, 0, 0, address(this), block.timestamp);\\n        balances[poolId][pool.tokenA] -= amountAActual;\\n        balances[poolId][pool.tokenB] -= amountBActual;\\n        emit LPTokensAcquired(liquidityAcquired);\\n        emit DepositToPool(poolId, liquidityAcquired);\\n    }\\n\\n    function stakeLPTokens(uint32 poolId) external onlyManager {\\n        stakings[poolId].depositAll(0); // 0 unless we put our NFT in here?\\n    }\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external override onlyController {\\n        uint256 yieldAmount;\\n        for (uint32 i; i <= poolCount; ++i) {\\n            uint256 poolYield = yieldBalances[i];\\n            if (poolYield > 0) {\\n                yieldAmount += poolYield;\\n                yieldBalances[i] = 0;\\n                harvestedYield[i] += yieldAmount;\\n            }\\n        }\\n        if (yieldAmount > 0) {\\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.YieldManager),\\n                yieldAmount\\n            );\\n            emit YieldReceived(yieldAmount);\\n        }\\n    }\\n\\n    function _harvestYieldByPool(\\n        uint32 poolId,\\n        bool claimFees,\\n        bool claimRewards\\n    ) internal {\\n        Pool memory pool = pools[poolId];\\n        if (pool.tokenA != address(0)) {\\n            if (claimFees) {\\n                _harvestPoolFees(poolId, pool);\\n            }\\n            if (claimRewards) {\\n                _harvestGaugeRewards(poolId);\\n            }\\n        }\\n    }\\n\\n    function _harvestPoolFees(uint32 poolId, Pool memory pool) internal {\\n        bool stable = stablePools[poolId];\\n        (uint256 token0Amount, uint256 token1Amount) = ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable))\\n            .claimFees();\\n        address biosAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getBiosTokenAddress();\\n        // Swap for ETH, account to yieldBalances\\n        uint256 yieldAmount;\\n        uint256 biosAmount;\\n        if (pool.tokenA == wnativeAddress) {\\n            if (pool.tokenB == biosAddress) {\\n                // handle BIOS\\n                biosAmount = token1Amount;\\n                yieldAmount = token0Amount;\\n            } else {\\n                yieldAmount =\\n                    token0Amount +\\n                    _swapToken(\\n                        pool.tokenB,\\n                        pool.tokenA,\\n                        address(this),\\n                        token1Amount,\\n                        _calculateSlip(\\n                            ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenB, token1Amount)\\n                        ),\\n                        stable\\n                    )[1];\\n            }\\n        } else if (pool.tokenB == wnativeAddress) {\\n            if (pool.tokenA == biosAddress) {\\n                // handle BIOS\\n                biosAmount = token0Amount;\\n                yieldAmount = token1Amount;\\n            } else {\\n                yieldAmount =\\n                    token1Amount +\\n                    _swapToken(\\n                        pool.tokenA,\\n                        pool.tokenB,\\n                        address(this),\\n                        token0Amount,\\n                        _calculateSlip(\\n                            ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, stable)).current(pool.tokenA, token0Amount)\\n                        ),\\n                        stable\\n                    )[1];\\n            }\\n        } else {\\n            if (pool.tokenA == biosAddress) {\\n                biosAmount += token0Amount;\\n            } else {\\n                yieldAmount += _swapToken(\\n                    pool.tokenA,\\n                    wnativeAddress,\\n                    address(this),\\n                    token0Amount,\\n                    _calculateSlip(\\n                        ISolidlyPairV1(pairFor(pool.tokenA, pool.tokenB, false)).current(pool.tokenA, token0Amount)\\n                    ),\\n                    false\\n                )[1];\\n            }\\n            if (pool.tokenB == biosAddress) {\\n                biosAmount += token1Amount;\\n            } else {\\n                yieldAmount += _swapToken(\\n                    pool.tokenB,\\n                    wnativeAddress,\\n                    address(this),\\n                    token1Amount,\\n                    _calculateSlip(\\n                        ISolidlyPairV1(pairFor(pool.tokenB, wnativeAddress, false)).current(pool.tokenB, token1Amount)\\n                    ),\\n                    false\\n                )[1];\\n            }\\n        }\\n\\n        // update balances\\n        if (yieldAmount > 0) {\\n            yieldBalances[poolId] += yieldAmount;\\n        }\\n        if (biosAmount > 0) {\\n            balances[poolId][biosAddress] += biosAmount;\\n        }\\n    }\\n\\n    function _harvestGaugeRewards(uint32 poolId) internal {\\n        // get the reward and count how much\\n        address[] memory rewards = new address[](1);\\n        rewards[0] = rewardToken;\\n        IERC20 erc20 = IERC20(rewardToken);\\n        uint256 amountBefore = erc20.balanceOf(address(this));\\n        stakings[poolId].getReward(address(this), rewards);\\n        uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this)) - amountBefore;\\n\\n        // liquidate the reward\\n        if (rewardAmount > 0) {\\n            yieldBalances[poolId] += _swapToken(\\n                rewardToken,\\n                wnativeAddress,\\n                address(this),\\n                rewardAmount,\\n                (ISolidlyPairV1(pairFor(rewardToken, wnativeAddress, false)).current(rewardToken, rewardAmount) * 99) /\\n                    100,\\n                false\\n            )[1];\\n        }\\n    }\\n\\n    function harvestYieldByPool(uint32 poolId) external onlyManager {\\n        _harvestYieldByPool(poolId, true, true);\\n    }\\n\\n    function harvestYieldByPools(uint32[] calldata poolIds) external onlyManager {\\n        uint256 length = poolIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            _harvestYieldByPool(poolIds[i], true, true);\\n        }\\n    }\\n\\n    function donate(uint32 poolId, uint256 amount) external {\\n        yieldBalances[poolId] += amount;\\n\\n        IERC20MetadataUpgradeable metis = IERC20MetadataUpgradeable(\\n            IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress()\\n        );\\n        uint256 before = metis.balanceOf(address(this));\\n        metis.transferFrom(msg.sender, address(this), amount);\\n        uint256 received = metis.balanceOf(address(this)) - before;\\n        require(received == amount, \\\"bad amount received\\\");\\n    }\\n\\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\\n    /// @param poolId The ID of the pool to rebalance\\n    /// @param ratioX1000 reserves ratio to control the price slippage\\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\\n    function rebalancePool(\\n        uint32 poolId,\\n        uint256 ratioX1000,\\n        uint256 maxSellTokenA,\\n        uint256 maxSellTokenB\\n    ) external onlyManager {\\n        Pool memory pool = pools[poolId];\\n        bool stable = stablePools[poolId];\\n\\n        require(pools[poolId].tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        checkPriceCeiling(pool.tokenA, pool.tokenB, stable, ratioX1000);\\n\\n        // determine which token and how much to swap\\n        (address swapToken, uint256 excessAmountToSwap) = _calculateExcessTokensToSwap(\\n            pool,\\n            balances[poolId][pool.tokenA],\\n            balances[poolId][pool.tokenB],\\n            stable\\n        );\\n\\n        // handle tokenA vs tokenB, cap at max sell param\\n\\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\\n            swapToken,\\n            pool,\\n            excessAmountToSwap,\\n            maxSellTokenA,\\n            maxSellTokenB\\n        );\\n\\n        // swap tokens\\n        uint256 amountReceived = _swapToken(\\n            swapToken,\\n            targetToken,\\n            address(this),\\n            swapAmount,\\n            _calculateSlip((ISolidlyPairV1(pairFor(swapToken, targetToken, stable)).current(swapToken, swapAmount))),\\n            stable\\n        )[1];\\n\\n        // update pool token balances\\n        if (amountReceived > 0) {\\n            balances[poolId][swapToken] -= swapAmount;\\n            balances[poolId][targetToken] += amountReceived;\\n\\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\\n        }\\n    }\\n\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external onlyManager {\\n        poolCount++;\\n        uint32 id = poolCount;\\n        (address token0, address token1) = AMMLibrary.sortTokens(tokenA, tokenB);\\n        stablePools[id] = stable;\\n        pools[id] = Pool({tokenA: token0, tokenB: token1, positionID: 0});\\n        _setMaxAllowance(token0, swapRouterAddress);\\n        _setMaxAllowance(token1, swapRouterAddress);\\n        _setMaxAllowance(pairFor(token0, token1, stable), swapRouterAddress);\\n    }\\n\\n    function configureAllowance() external onlyManager {\\n        _setMaxAllowance(rewardToken, swapRouterAddress);\\n        for (uint32 i = 1; i <= poolCount; ++i) {\\n            Pool memory pool = pools[i];\\n            _setMaxAllowance(pool.tokenA, swapRouterAddress);\\n            _setMaxAllowance(pool.tokenB, swapRouterAddress);\\n            _setMaxAllowance(pairFor(pool.tokenA, pool.tokenB, stablePools[i]), swapRouterAddress);\\n        }\\n    }\\n\\n    function _setMaxAllowance(address token, address spender) internal {\\n        IERC20MetadataUpgradeable ERC20 = IERC20MetadataUpgradeable(token);\\n        if (ERC20.allowance(address(this), spender) == 0) {\\n            ERC20.safeApprove(spender, type(uint256).max);\\n        }\\n    }\\n\\n    function setSlippage(uint24 slippageNumerator_) external onlyManager {\\n        slippageNumerator = slippageNumerator_;\\n    }\\n\\n    function configureStaking(uint32 poolId, address gaugeAddress) external onlyManager {\\n        _configureStaking(poolId, gaugeAddress, false);\\n    }\\n\\n    function configureStakingOverwrite(uint32 poolId, address gaugeAddress) external onlyManager {\\n        _configureStaking(poolId, gaugeAddress, true);\\n    }\\n\\n    function _configureStaking(\\n        uint32 poolId,\\n        address gaugeAddress,\\n        bool overwrite\\n    ) internal {\\n        Pool memory pool = pools[poolId];\\n        require(pool.tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        if (overwrite != true) {\\n            require(address(stakings[poolId]) == address(0), \\\"Staking already configured\\\");\\n        }\\n\\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB, stablePools[poolId]);\\n\\n        ISolidlyGauge gauge = ISolidlyGauge(gaugeAddress);\\n        require(gauge.stake() == pairAddress, \\\"Incorrect gauge address\\\");\\n\\n        stakings[poolId] = gauge;\\n\\n        // let gauge pull tokens\\n        IERC20MetadataUpgradeable pairToken = IERC20MetadataUpgradeable(pairAddress);\\n        if (pairToken.allowance(address(this), gaugeAddress) <= type(uint256).max) {\\n            pairToken.safeApprove(gaugeAddress, 0);\\n            pairToken.safeApprove(gaugeAddress, type(uint256).max);\\n        }\\n    }\\n\\n    function _calculateExcessTokensToSwap(\\n        Pool memory pool,\\n        uint256 balanceA,\\n        uint256 balanceB,\\n        bool stable\\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\\n        require(balanceA + balanceB > 0, \\\"hermes: no balance\\\");\\n        // fetch reserve values from hermes\\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB, stable);\\n\\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\\n            pool,\\n            balanceA,\\n            balanceB,\\n            reserveA,\\n            reserveB\\n        );\\n    }\\n\\n    function getReserves(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = ISolidlyPairV1(pairFor(tokenA, tokenB, stable)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return pair The address of the pool contract\\n    function pairFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) internal view returns (address pair) {\\n        pair = ISolidlyFactoryV1(factoryAddress).getPair(tokenA, tokenB, stable);\\n    }\\n\\n    function checkPriceCeiling(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 ratioX1000\\n    ) internal view {\\n        address pairAddress = address(pairFor(tokenA, tokenB, stable));\\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB, stable);\\n\\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\\n    }\\n\\n    function _swapToken(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bool stable\\n    ) internal returns (uint256[] memory amounts) {\\n        if (amountIn > 0) {\\n            return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin, stable);\\n            // address biosAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n            //     .getBiosTokenAddress();\\n            // if (\\n            //     biosAddress == tokenIn || biosAddress == tokenOut || rewardToken == tokenIn || rewardToken == tokenOut\\n            // ) {\\n            //     // don't swap BIOS or HERMES via external DEXes!\\n            //     return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin, stable);\\n            // } else {\\n            //     return _swapViaManager(tokenIn, tokenOut, recipient, amountIn, amountOutMin, stable);\\n            // }\\n        } else {\\n            amounts = new uint256[](2);\\n        }\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address of the token out recipient\\n    /// @param amountIn The exact amount of the input to swap\\n    function _swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bool stable\\n    ) internal returns (uint256[] memory amounts) {\\n        ISolidlyRouterV1.route[] memory path = new ISolidlyRouterV1.route[](1);\\n        path[0] = ISolidlyRouterV1.route({from: tokenIn, to: tokenOut, stable: stable});\\n        uint256 deadline = block.timestamp;\\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\\n        }\\n        return\\n            ISolidlyRouterV1(swapRouterAddress).swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                recipient,\\n                deadline\\n            );\\n    }\\n\\n    // / @param tokenIn The address of the input token\\n    // / @param tokenOut The address of the output token\\n    // / @param recipient The address of the token out recipient\\n    // / @param amountIn The exact amount of the input to swap\\n    // function _swapViaManager(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     address recipient,\\n    //     uint256 amountIn,\\n    //     uint256, // amountOutMin | fake params to match _swapExactInput sig\\n    //     bool // stable\\n    // ) internal returns (uint256[] memory amounts) {\\n    //     amounts = new uint256[](2);\\n    //     if (amountIn == 0) return amounts;\\n\\n    //     IERC20 token = IERC20(tokenOut);\\n    //     uint256 balanceBefore = token.balanceOf(address(this));\\n    //     address swapManagerAddress = moduleMap.getModuleAddress(Modules.SwapManager);\\n    //     IERC20MetadataUpgradeable(tokenIn).safeTransfer(swapManagerAddress, amountIn);\\n    //     bool success = ISwapManager(swapManagerAddress).swapExactIn(tokenIn, tokenOut, recipient, amountIn);\\n    //     require(success, \\\"hermes: swap failed\\\");\\n    //     amounts[0] = amountIn;\\n    //     amounts[1] = token.balanceOf(address(this)) - balanceBefore;\\n    //     return amounts;\\n    // }\\n\\n    // / @param tokenIn The address of the input token\\n    // / @param tokenOut The address of the output token\\n    // / @param amountIn The exact amount of the input to swap\\n    // / @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    // function getAmountOutMinimum(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     bool stable\\n    // ) public view returns (uint256 amountOutMinimum) {\\n    //     amountOutMinimum =\\n    //         (getAmountOut(tokenIn, tokenOut, amountIn, stable) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\\n    //         SLIPPAGE_DENOMINATOR;\\n    // }\\n\\n    function _calculateSlip(uint256 amount) internal view returns (uint256) {\\n        return (amount * (SLIPPAGE_DENOMINATOR - slippageNumerator)) / SLIPPAGE_DENOMINATOR;\\n    }\\n\\n    // / @param tokenIn The address of the input token\\n    // / @param tokenOut The address of the output token\\n    // / @param amountIn The exact amount of the input to swap\\n    // / @return amountOut The estimated amount of tokenOut to receive\\n    // function getAmountOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     bool stable\\n    // ) public view returns (uint256 amountOut) {\\n    //     (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut, stable);\\n    //     amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n    // }\\n\\n    function getPool(uint32 poolId) external view returns (Pool memory) {\\n        return pools[poolId];\\n    }\\n\\n    function getBalance(uint32 poolId, address token) external view returns (uint256) {\\n        return balances[poolId][token];\\n    }\\n\\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\\n        amounts = new uint256[](pids.length);\\n        for (uint256 i; i < pids.length; ++i) {\\n            amounts[i] = yieldBalances[pids[i]];\\n        }\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x08cf9bd3be987515d6e865e137179f072ca63e78a88cd4f94d8dede11c10370a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(uint32)": {
        "details": "Deploys all the tokens for the specified pools"
      },
      "harvestYield()": {
        "details": "Harvests token yield from the integration"
      },
      "incrementBalance(uint32,address,uint256)": {
        "params": {
          "amount": "The amount of the token being deposited",
          "token": "The address of the deposited token"
        }
      },
      "rebalancePool(uint32,uint256,uint256,uint256)": {
        "params": {
          "maxSellTokenA": "max amount of tokenA to sell (to limit rebalancing)",
          "maxSellTokenB": "max amount of tokenB to sell (to limit rebalancing)",
          "poolId": "The ID of the pool to rebalance",
          "ratioX1000": "reserves ratio to control the price slippage"
        }
      },
      "withdraw(address,uint256,uint32)": {
        "params": {
          "amount": "The amount of token in the pool to withdraw",
          "poolId": "the pool to withdraw from",
          "token": "the token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatePool(address,address,uint32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "rebalancePool(uint32,uint256,uint256,uint256)": {
        "notice": "Rebalances by attempting to swap up to max to get into position ratio"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15667,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)29584"
      },
      {
        "astId": 8991,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8994,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 56558,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "factoryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 56560,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 56562,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "wnativeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 56564,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "poolCount",
        "offset": 20,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 56569,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "slippageNumerator",
        "offset": 24,
        "slot": "5",
        "type": "t_uint24"
      },
      {
        "astId": 56575,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 56580,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "pools",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_struct(Pool)27308_storage)"
      },
      {
        "astId": 56584,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "stablePools",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 56588,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "yieldBalances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 56592,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "harvestedYield",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 56597,
        "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
        "label": "stakings",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_contract(ISolidlyGauge)30114)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)29584": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_contract(ISolidlyGauge)30114": {
        "encoding": "inplace",
        "label": "contract ISolidlyGauge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_contract(ISolidlyGauge)30114)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => contract ISolidlyGauge)",
        "numberOfBytes": "32",
        "value": "t_contract(ISolidlyGauge)30114"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint32,t_struct(Pool)27308_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IAMMIntegration.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)27308_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)27308_storage": {
        "encoding": "inplace",
        "label": "struct IAMMIntegration.Pool",
        "members": [
          {
            "astId": 27303,
            "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
            "label": "tokenA",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27305,
            "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
            "label": "tokenB",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 27307,
            "contract": "contracts/yield-integrations/MaiaDaoHermesIntegration.sol:MaiaDaoHermesIntegration",
            "label": "positionID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}