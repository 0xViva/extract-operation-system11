{
  "address": "0x290dDc3f9cF959B0583F646c5534B6E00131593f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traderAddress",
          "type": "address"
        }
      ],
      "name": "addTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "biosBuyBack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimalA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimalB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_ratioALimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_ratioBLimit",
          "type": "uint32"
        }
      ],
      "name": "constraintInputAmountToNotExhaustThePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "constraintedA_",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_ratioInLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_ratioOutLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_desiredAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_desiredMinAmountOut",
          "type": "uint256"
        }
      ],
      "name": "gentleSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountOut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPoolExist_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "bestPrice_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traderAddress",
          "type": "address"
        }
      ],
      "name": "hasTrader",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_controllers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_moduleMap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_internalWallet",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traderAddress",
          "type": "address"
        }
      ],
      "name": "removeTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "setInternalWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapExactIn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "tradeSuccess_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExactIn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "tradeSuccess_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62b73764838e129bd788de98b0f7eaa864d79018550e7e73c8d0a1a9ffd22954",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0x290dDc3f9cF959B0583F646c5534B6E00131593f",
    "transactionIndex": 0,
    "gasUsed": "2566381",
    "logsBloom": "0x
    "blockHash": "0xd7e71bc3349ba49d55b19d8a349e1038993c08b7107e53fa8b662b49378d468c",
    "transactionHash": "0x62b73764838e129bd788de98b0f7eaa864d79018550e7e73c8d0a1a9ffd22954",
    "logs": [],
    "blockNumber": 2698582,
    "cumulativeGasUsed": "2566381",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8691a89ebd8d69f8412923e433444233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"}],\"name\":\"addTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"biosBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimalA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimalB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ratioALimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_ratioBLimit\",\"type\":\"uint32\"}],\"name\":\"constraintInputAmountToNotExhaustThePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"constraintedA_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ratioInLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_ratioOutLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredMinAmountOut\",\"type\":\"uint256\"}],\"name\":\"gentleSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getBestAmountOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPoolExist_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bestPrice_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"}],\"name\":\"hasTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_controllers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_moduleMap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_internalWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"}],\"name\":\"removeTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"setInternalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tradeSuccess_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tradeSuccess_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTrader(address)\":{\"details\":\"Adds trader which will be used for futher swaps\"},\"biosBuyBack(uint256)\":{\"params\":{\"ratioX1000\":\"BIOS/WETH ratio for front runner protection\"},\"returns\":{\"_0\":\"Bool indicating whether the trade succeeded*\"}},\"gentleSwapExactIn(address,address,uint32,uint32,address,uint256,uint256)\":{\"details\":\"Executes swap only for amountIn which will not significantly imbalance the pool and returns this amountIn\"},\"getBestAmountOut(address,address,uint256)\":{\"returns\":{\"bestPrice_\":\"Best amount out from all traders\",\"isPoolExist_\":\"Can we swap these tokens via added traders?\"}},\"hasTrader(address)\":{\"details\":\"If we have sufficient amount of money we will use that money instead of swap via traders\",\"params\":{\"_traderAddress\":\"Address of the contract implementing IDexTrader interface\"}},\"removeTrader(address)\":{\"details\":\"Removes trader so we will be not able to use it for swaps\"},\"setInternalWallet(address)\":{\"params\":{\"_walletAddress\":\"The address of the contract (user) which will be used for internal swaps. Set to Zero address to disable internal\"}},\"swapExactIn(address,address,address,uint256)\":{\"params\":{\"_amountIn\":\"The exact amount of the input to swap\",\"_recipient\":\"The address of the token out recipient\",\"_tokenIn\":\"The address of the input token\",\"_tokenOut\":\"The address of the output token\"},\"returns\":{\"tradeSuccess_\":\"Indicates whether the swap succeeded*\"}},\"swapExactIn(address,address,address,uint256,uint256)\":{\"params\":{\"_amountIn\":\"The exact amount of the input to swap\",\"_minAmountOut\":\"The minimum amount of _tokenOut to receive\",\"_recipient\":\"The address of the token out recipient\",\"_tokenIn\":\"The address of the input token\",\"_tokenOut\":\"The address of the output token\"},\"returns\":{\"tradeSuccess_\":\"Indicates whether the swap succeeded*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"biosBuyBack(uint256)\":{\"notice\":\"Swaps all WETH held in this contract for BIOS and sends to the kernel\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SwapManager.sol\":\"SwapManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal onlyInitializing {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xed017271d8ba30d80b8449946ed9ed3c6192d59980f343d26580070da40ede47\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal onlyInitializing {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0x562431546443640c950a15ccce0cffedeced3e414c41cc2758bf489f4525d1df\",\"license\":\"GPL-2.0\"},\"contracts/core/SwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ISwapManager.sol\\\";\\nimport \\\"../interfaces/IDexTrader.sol\\\";\\nimport \\\"../interfaces/ISyntheticERC20.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\n\\nimport \\\"../libraries/SqrtMath.sol\\\";\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\ncontract SwapManager is Initializable, ModuleMapConsumer, Controlled, ISwapManager {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    // Addresses of dex traders.\\n    // For easy adding new dexes, this contract use traders addresses\\n    // instead of enum values in moduleMap.\\n    EnumerableSetUpgradeable.AddressSet traders;\\n    // Address of the contract or EOA which will be used for internal swaps\\n    address public internalWallet;\\n\\n    function initialize(\\n        address[] memory _controllers,\\n        address _moduleMap,\\n        address _internalWallet\\n    ) external initializer {\\n        __Controlled_init(_controllers, _moduleMap);\\n        internalWallet = _internalWallet;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * swaps\\n     *\\n     *\\n     **/\\n\\n    /// @dev Executes swap only for amountIn which will not significantly imbalance the pool and returns this amountIn\\n    function gentleSwapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint32 _ratioInLimit,\\n        uint32 _ratioOutLimit,\\n        address _recipient,\\n        uint256 _desiredAmountIn,\\n        uint256 _desiredMinAmountOut\\n    ) external override onlyController returns (uint256) {\\n        IDexTrader trader;\\n        {\\n            address traderAddress;\\n\\n            (traderAddress, ) = getBestTraderForTheSwap(_tokenIn, _tokenOut, _desiredAmountIn);\\n            if (traderAddress == address(0)) return zeroSwap(_tokenIn);\\n\\n            trader = IDexTrader(traderAddress);\\n        } // stack too deep\\n        (uint256 inReserve, uint256 outReserve) = trader.getReserves(_tokenIn, _tokenOut);\\n\\n        uint256 gentleAmountIn = constraintInputAmountToNotExhaustThePool(\\n            _desiredAmountIn,\\n            inReserve,\\n            outReserve,\\n            IERC20MetadataUpgradeable(_tokenIn).decimals(),\\n            IERC20MetadataUpgradeable(_tokenOut).decimals(),\\n            _ratioInLimit,\\n            _ratioOutLimit\\n        );\\n\\n        if (gentleAmountIn == 0) return zeroSwap(_tokenIn); // we have reached the limit to draw from the pool\\n\\n        if (gentleAmountIn < _desiredAmountIn) {\\n            _desiredMinAmountOut = (_desiredMinAmountOut * gentleAmountIn) / _desiredAmountIn;\\n        }\\n        uint256 minAmountOutFromRatio = getMinAmountOutFromRatio(_ratioInLimit, _ratioOutLimit, gentleAmountIn);\\n        if (minAmountOutFromRatio > _desiredMinAmountOut) _desiredMinAmountOut = minAmountOutFromRatio;\\n\\n        transferTokenToDex(_tokenIn, address(trader), gentleAmountIn);\\n\\n        require(\\n            trader.swapExactInput(_tokenIn, _tokenOut, _recipient, gentleAmountIn, _desiredMinAmountOut),\\n            \\\"swap failed\\\"\\n        );\\n        return gentleAmountIn;\\n    }\\n\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external override onlyController returns (bool tradeSuccess_) {\\n        return swapExactIn(_tokenIn, _tokenOut, _recipient, _amountIn, 0);\\n    }\\n\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) public override onlyController returns (bool tradeSuccess_) {\\n        (address bestTrader, uint256 minOut) = getBestTraderForTheSwap(_tokenIn, _tokenOut, _amountIn);\\n\\n        uint256 trueMinAmountOut = minOut >= _minAmountOut ? minOut : _minAmountOut;\\n\\n        if (trueMinAmountOut > 0) {\\n            tradeSuccess_ = swapUsingInternalWallet(_tokenIn, _tokenOut, _recipient, trueMinAmountOut);\\n            if (tradeSuccess_) {\\n                return tradeSuccess_;\\n            }\\n        }\\n\\n        IDexTrader trader = IDexTrader(bestTrader);\\n        transferTokenToDex(_tokenIn, bestTrader, _amountIn);\\n        tradeSuccess_ = trader.swapExactInput(_tokenIn, _tokenOut, _recipient, _amountIn, trueMinAmountOut);\\n\\n        require(tradeSuccess_, \\\"swap failed\\\");\\n    }\\n\\n    function biosBuyBack(uint256 ratioX1000) external override onlyController returns (bool) {\\n        IIntegrationMap integrationMap = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap));\\n        address wethAddress = integrationMap.getWethTokenAddress();\\n        address biosAddress = integrationMap.getBiosTokenAddress();\\n\\n        uint256 wethAmountIn = IERC20MetadataUpgradeable(wethAddress).balanceOf(address(this));\\n\\n        (address bestTrader, uint256 biosAmountOutMin) = getBestTraderForTheSwap(\\n            wethAddress,\\n            biosAddress,\\n            wethAmountIn\\n        );\\n\\n        // Front runner protection\\n        checkPriceCeiling(bestTrader, wethAddress, biosAddress, ratioX1000);\\n\\n        transferTokenToDex(wethAddress, bestTrader, wethAmountIn);\\n\\n        return\\n            IDexTrader(bestTrader).swapExactInput(\\n                wethAddress,\\n                biosAddress,\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                wethAmountIn,\\n                biosAmountOutMin\\n            );\\n    }\\n\\n    /**\\n     *\\n     *\\n     * manager\\n     *\\n     *\\n     **/\\n\\n    /// @dev Adds trader which will be used for futher swaps\\n    function addTrader(address _traderAddress) external onlyManager {\\n        require(!traders.contains(_traderAddress), \\\"SwapManager::addTrader: Trader already added\\\");\\n        traders.add(_traderAddress);\\n    }\\n\\n    /// @dev Removes trader so we will be not able to use it for swaps\\n    function removeTrader(address _traderAddress) external onlyManager {\\n        require(traders.contains(_traderAddress), \\\"SwapManager::removeTrader: Trader was not added\\\");\\n        traders.remove(_traderAddress);\\n    }\\n\\n    /// @dev If we have sufficient amount of money we will use that money instead of swap via traders\\n    /// @param _traderAddress Address of the contract implementing IDexTrader interface\\n    function hasTrader(address _traderAddress) external view onlyManager returns (bool) {\\n        return traders.contains(_traderAddress);\\n    }\\n\\n    /// @param _walletAddress The address of the contract (user) which will be used for internal swaps. Set to Zero address to disable internal\\n    function setInternalWallet(address _walletAddress) external onlyManager {\\n        internalWallet = _walletAddress;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * getters\\n     *\\n     *\\n     **/\\n\\n    /// @return isPoolExist_ Can we swap these tokens via added traders?\\n    /// @return bestPrice_ Best amount out from all traders\\n    function getBestAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view override returns (bool isPoolExist_, uint256 bestPrice_) {\\n        for (uint8 i = 0; i < traders.length(); i++) {\\n            IDexTrader trader = IDexTrader(traders.at(i));\\n            uint256 amountOut;\\n\\n            if (trader.isPoolExist(_tokenIn, _tokenOut)) {\\n                amountOut = trader.getAmountOut(_tokenIn, _tokenOut, _amountIn);\\n                if (!isPoolExist_) isPoolExist_ = true;\\n            }\\n\\n            if (amountOut > bestPrice_) {\\n                bestPrice_ = amountOut;\\n            }\\n        }\\n    }\\n\\n    /// @dev iterates over all added traders and finds best for swapping\\n    /// @dev uses getAmountOut() for comparing\\n    function getBestTraderForTheSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (address bestTrader_, uint256 minAmountOut_) {\\n        uint256 maxAmountOut;\\n        for (uint8 i; i < traders.length(); ++i) {\\n            IDexTrader trader = IDexTrader(traders.at(i));\\n            uint256 amountOut;\\n            uint256 amountOutMin;\\n\\n            if (trader.isPoolExist(_tokenIn, _tokenOut)) {\\n                amountOut = trader.getAmountOut(_tokenIn, _tokenOut, _amountIn);\\n                amountOutMin = trader.getAmountOutMinimum(_tokenIn, _tokenOut, _amountIn);\\n            }\\n\\n            if (amountOut > maxAmountOut) {\\n                bestTrader_ = traders.at(i);\\n                maxAmountOut = amountOut;\\n                minAmountOut_ = amountOutMin;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *\\n     *\\n     * help methods\\n     *\\n     *\\n     **/\\n\\n    /// @dev tries to swap tokens using internal wallet instead of external dexes\\n    function swapUsingInternalWallet(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _desiredAmount\\n    ) private returns (bool tradeSuccess_) {\\n        if (internalWallet == address(0)) {\\n            return false;\\n        }\\n\\n        IERC20MetadataUpgradeable tokenIn = IERC20MetadataUpgradeable(_tokenIn);\\n        IERC20MetadataUpgradeable tokenOut = IERC20MetadataUpgradeable(_tokenOut);\\n\\n        uint256 walletTokenOutBalance = tokenOut.balanceOf(internalWallet);\\n        uint256 walletAllowanceToThis = tokenOut.allowance(internalWallet, address(this));\\n\\n        if (walletTokenOutBalance >= _desiredAmount && walletAllowanceToThis >= _desiredAmount && _desiredAmount > 0) {\\n            if (internalWallet != _recipient) {\\n                tokenOut.safeTransferFrom(internalWallet, _recipient, _desiredAmount);\\n            }\\n\\n            uint256 tokenInBalance = tokenIn.balanceOf(address(this));\\n            if (tokenInBalance > 0) tokenIn.safeTransfer(internalWallet, tokenInBalance);\\n\\n            tradeSuccess_ = true;\\n        }\\n    }\\n\\n    /// @dev Prevent token locking on the SwapManager contract by sending remained token balance to internalWallet\\n    /// @dev Should be returned instead of plain 'return 0;' when something went wrong and transferTokenToDex wasn't called\\n    function zeroSwap(address _token) private returns (uint256) {\\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(_token);\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        if (balance > 0) token.safeTransfer(internalWallet, balance);\\n\\n        return 0;\\n    }\\n\\n    /// @dev Transfers _amount to dex and makes sure that token won't be not locked on this contract\\n    function transferTokenToDex(\\n        address _token,\\n        address _trader,\\n        uint256 _amount\\n    ) private {\\n        IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(_token);\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        if (balance == _amount) {\\n            token.safeTransfer(_trader, _amount);\\n        } else if (balance > _amount) {\\n            // protect from locking tokens on the contract\\n            token.safeTransfer(_trader, _amount);\\n            token.safeTransfer(internalWallet, balance - _amount);\\n        } else {\\n            uint256 missingAmount = _amount - balance;\\n\\n            if (balance > 0) {\\n                token.safeTransfer(_trader, balance);\\n            }\\n\\n            token.safeTransferFrom(internalWallet, _trader, missingAmount);\\n        }\\n    }\\n\\n    function getMinAmountOutFromRatio(\\n        uint256 ratioIn,\\n        uint256 ratioOut,\\n        uint256 amountIn\\n    ) internal pure returns (uint256) {\\n        return (ratioOut * amountIn) / ratioIn;\\n    }\\n\\n    function constraintInputAmountToNotExhaustThePool(\\n        uint256 _inputAmountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB,\\n        uint256 _decimalA,\\n        uint256 _decimalB,\\n        uint32 _ratioALimit,\\n        uint32 _ratioBLimit\\n    ) public pure returns (uint256 constraintedA_) {\\n        uint256 resultDenominator = 1;\\n        if (_decimalA > _decimalB) {\\n            _reserveB *= 10**(_decimalA - _decimalB);\\n        } else if (_decimalA < _decimalB) {\\n            resultDenominator = 10**(_decimalB - _decimalA);\\n            _reserveA *= resultDenominator;\\n            _inputAmountA *= resultDenominator;\\n        }\\n\\n        return\\n            _constraintInputAmountToNotExhaustThePool(_inputAmountA, _reserveA, _reserveB, _ratioALimit, _ratioBLimit) /\\n            resultDenominator;\\n    }\\n\\n    function _constraintInputAmountToNotExhaustThePool(\\n        uint256 _inputAmountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB,\\n        uint32 _ratioALimit,\\n        uint32 _ratioBLimit\\n    ) private pure returns (uint256 constraintedA_) {\\n        uint256 outputAmountB = (_inputAmountA * _reserveB) / (_reserveA + _inputAmountA);\\n\\n        // First, we check whether the _inputAmount exceeds the limit value in the pool\\n        if (\\n            // and if it not we can allow to use the _inputAmount as an input\\n            (_reserveA + _inputAmountA) * _ratioBLimit <= (_reserveB - outputAmountB) * _ratioALimit\\n        ) {\\n            constraintedA_ = _inputAmountA;\\n            // But if _inputAmount will cause exceeding the limit ratio in the pool we have to constraint it\\n        } else {\\n            // This part is quite expensive due to SqrtMath.sqrt(..) operation and because of that\\n            // we will use it only if we have and _inputAmountA is unacceptable\\n            uint256 maxAInPoolSqrt = (_ratioALimit * _reserveA * _reserveB) / _ratioBLimit;\\n            uint256 reserveLimitA = SqrtMath.sqrt(maxAInPoolSqrt);\\n\\n            constraintedA_ = reserveLimitA > _reserveA ? reserveLimitA - _reserveA : 0;\\n            constraintedA_ = _inputAmountA > constraintedA_ ? constraintedA_ : _inputAmountA;\\n        }\\n    }\\n\\n    function checkPriceCeiling(\\n        address trader,\\n        address tokenA,\\n        address tokenB,\\n        uint256 ratioX1000\\n    ) internal view {\\n        uint256 currentRatio;\\n        (uint256 reserveA, uint256 reserveB) = IDexTrader(trader).getReserves(tokenA, tokenB);\\n\\n        if (reserveA < reserveB) {\\n            currentRatio = (reserveB * 1000) / reserveA;\\n        } else if (reserveB < reserveA) {\\n            currentRatio = (reserveA * 1000) / reserveB;\\n        } else {\\n            currentRatio = 1000;\\n        }\\n\\n        // limit to 1% off\\n        if (currentRatio > ratioX1000) {\\n            require(((currentRatio - ratioX1000) * 100) / ratioX1000 < 1, \\\"CeilingLimitReached\\\");\\n        } else if (ratioX1000 > currentRatio) {\\n            require(((ratioX1000 - currentRatio) * 100) / ratioX1000 < 1, \\\"CeilingLimitReached\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x46cfe0e32f67805bc2fe9821d5358d7e676ef8be63dc15fd095182b9f0ab631a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDexTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IDexTrader {\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin\\n    ) external returns (bool);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256);\\n\\n    /// @param _tokenA The address of the first  token from the token pair\\n    /// @param _tokenB The address of the second token from the token pair\\n    /// return true if pool exist else overwise\\n    function isPoolExist(address _tokenA, address _tokenB) external view returns (bool);\\n\\n    function getReserves(address _tokenA, address _tokenB) external view returns (uint256 _amountA, uint256 _amountB);\\n}\\n\",\"keccak256\":\"0x9f027816998fa915308813c472b7c5b7bb5db5c81d54df8a75546e2527497803\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    struct WithdrawAllAndClaimResponse {\\n        uint256[] tokenAmounts;\\n        uint256 ethWithdrawn;\\n        uint256 ethClaimed;\\n        uint256 biosClaimed;\\n    }\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight,\\n        uint32 syntheticPoolSupplementWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6f4529412860cc773b26bca59c78fd12bc066323470b07501c0d1e9e2de0f54a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    Strategy1155, // 6\\n    SyntheticMap, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper, // 12\\n    BiosEmitter // 13\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c79bb5822bea9209419b3c6eaefc40a8fd950184ff4445eb5745f70460f5310\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISwapManager {\\n    /**\\n     * @dev Executes swap only for amountIn which will not significantly imbalance the pool and returns this amountIn\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _ratioIn The left part of the ratio tokenA : tokenB which we will stick to\\n     * @param _ratioOut The right part of the ratio tokenA : tokenB which we will stick to\\n     * @param _recipient The address of the token out recipient\\n     * @param _desiredAmountIn Requested amountIn\\n     * @param _desiredMinAmountOut Like usual minAmountOut, but will decrease proportionally with decreasing _desiredAmountIn\\n     * @return spendedAmountIn_ <= _desiredAmountOut spended for the swap\\n     **/\\n    function gentleSwapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint32 _ratioIn,\\n        uint32 _ratioOut,\\n        address _recipient,\\n        uint256 _desiredAmountIn,\\n        uint256 _desiredMinAmountOut\\n    ) external returns (uint256 spendedAmountIn_);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _recipient The address of the token out recipient\\n     * @param _amountIn The exact amount of the input to swap\\n     * @param _minAmountOut The minimum amount of _tokenOut to receive\\n     * @return tradeSuccess_ Indicates whether the swap succeeded\\n     **/\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (bool tradeSuccess_);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _recipient The address of the token out recipient\\n     * @param _amountIn The exact amount of the input to swap\\n     * @return tradeSuccess_ Indicates whether the swap succeeded\\n     **/\\n    function swapExactIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external returns (bool tradeSuccess_);\\n\\n    /**\\n     * @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n     * @param ratioX1000 BIOS/WETH ratio for front runner protection\\n     * @return Bool indicating whether the trade succeeded\\n     **/\\n    function biosBuyBack(uint256 ratioX1000) external returns (bool);\\n\\n    /**\\n     * @param _tokenIn The address of the input token\\n     * @param _tokenOut The address of the output token\\n     * @param _amountIn The exact amount of the input to swap\\n     * @return isPoolExist_ Can we swap these tokens via added traders?\\n     * @return bestPrice_ Best amount out from all traders\\n     **/\\n    function getBestAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view returns (bool isPoolExist_, uint256 bestPrice_);\\n}\\n\",\"keccak256\":\"0x26bc0edfa24ff4491cb9f679ea1810af47b3aa21200a72c1341d0c2b946baa4a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISyntheticERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISyntheticERC20 {\\n    struct PoolRatioLimit {\\n        uint32 underlying;\\n        uint32 synthetic;\\n    }\\n\\n    struct Float {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    struct StrategiesDebt {\\n        uint128 swapBackSynthetic;\\n        uint128 withdrawSynthetic;\\n    }\\n\\n    /**\\n     *\\n     *\\n     * Default ERC20\\n     *\\n     *\\n     **/\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /**\\n     *\\n     *\\n     * Synthetic pool debt management\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @param syntheticSpended How much synthetic was spended to the swap\\n     * @param underlyingReceived How much underlying was received from the swap\\n     **/\\n    function changePoolDebt(uint256 syntheticSpended, uint256 underlyingReceived) external;\\n\\n    function increaseRedemptionOfSynthetic(uint256 _amount) external;\\n\\n    function getAndDeleteDelayedRedemptionOfSynthetic() external returns (uint256 _amount);\\n\\n    /**\\n     * @dev\\n     * When we execute UserPositions._findMoney -> SwapManager.gentleSwapExactIn for x synETH:\\n     * 1) If received x ETH: do not change debt\\n     * 2) Else if we received x + y ETH: debt -= y\\n     * 3) Else if we received x - y ETH: debt += y\\n     *\\n     * In order to pay this debt before deploy to hedge integration we should adjust deposit amount\\n     * For example we want to provide z liquidity to hedge pool and we have y underlying debt (z > y):\\n     * 1) If y == 0:\\n     *          underlyingDeposit = z\\n     *          syntheticDeposit = z\\n     * 2) Else if y > 0:\\n     *          underlyingDeposit = z - y\\n     *          syntheticDeposit = z\\n     * 3) Else if y < 0:\\n     *          underlyingDeposit = z\\n     *          syntheticDeposit = z - y\\n     **/\\n    function adjustLiquidityAccordingToUnderlyingDebt(uint256 _desiredLiquidity)\\n        external\\n        returns (uint256 _underlyingLiquidity, uint256 _syntheticLiquidity);\\n\\n    /**\\n     * @dev\\n     * When we use synthetic pool for withdraw, we eanr a debt that will be paid on the next deploy call.\\n     * This method will calculate how much underlying have to be deposited to synthetic pool and reduce debt\\n     **/\\n    function distributeAccordingToStrategiesDebt(uint256 _gotFromWithdrawal)\\n        external\\n        returns (uint256 hold_, uint256 depositToPool_);\\n\\n    function getAndDeleteStrategiesPoolDebt() external returns (uint256);\\n\\n    /**\\n     *\\n     *\\n     * Getters\\n     *\\n     *\\n     **/\\n\\n    /**\\n     * @return integration_ Integration in which hedge funds will go\\n     * @return ammPoolID_ Integration AMM pool ID\\n     * @return syntheticToken_ Address of the SyntheticERC20 contract on the chain\\n     **/\\n    function getHedgeDeployArgs()\\n        external\\n        view\\n        returns (\\n            address integration_,\\n            uint32 ammPoolID_,\\n            address syntheticToken_\\n        );\\n\\n    function getHedgePercent() external view returns (uint128 numerator_, uint128 denominator_);\\n\\n    /**\\n     * @dev Kernel will be able to withdraw underlying from crv pool\\n     * until pool reach (underlying_ : synthetic_) ratio\\n     **/\\n    function getPoolLimit() external view returns (uint32 underlying_, uint32 synthetic_);\\n}\\n\",\"keccak256\":\"0xcdc0f515fe09a7a9ea133209b29936893cf062d39f988fe7b2724d97ba36baef\",\"license\":\"GPL-2.0\"},\"contracts/libraries/SqrtMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.0;\\n\\nlibrary SqrtMath {\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        // Babylonian Method of finding the square root:\\n        // https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\n        //\\n        // uint z = (x + 1) / 2;\\n        // y = x;\\n        // while (z < y) {\\n        //     y = z;\\n        //     z = (x / z + z) / 2;\\n        // }\\n        //\\n        // Finding sqrt for 1e60 costs ~8K gas\\n        assembly {\\n            y := x\\n            for {\\n                let z := div(add(x, 1), 2)\\n            } lt(z, y) {\\n\\n            } {\\n                y := z\\n                z := div(add(div(x, z), z), 2)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7808cafe9b08d1ecfdff2c6fb1d4cee8e539577c0b04bea319430b288016f178\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d78806100206000396000f3fe608060405234801561001057600080fd5b50600436106100db5760003560e01c80630a1f194f146100e05780630f0a1c6f146100f557806319145798146101245780631e38ef061461014e578063337993cb146101615780635d428e0814610176578063845fe1d0146101895780638badf3b8146101ac57806390482d72146101cd578063a64bc4b4146101e0578063a7fc7a07146101f3578063b429afeb14610206578063c0e7e87014610232578063c343129f14610245578063c4ef281914610258578063dfeeaa7d1461026b578063e94b0dd21461027e575b600080fd5b6100f36100ee366004612512565b610291565b005b60005461010e906201000090046001600160a01b031681565b60405161011b91906128ac565b60405180910390f35b6101376101323660046125f4565b610434565b60408051921515835260208301919091520161011b565b60055461010e906001600160a01b031681565b61016961059b565b60405161011b9190612932565b6100f3610184366004612512565b6105fd565b61019c6101973660046127ba565b610791565b604051901515815260200161011b565b6101bf6101ba366004612634565b610af3565b60405190815260200161011b565b6100f36101db3660046126b2565b610df4565b6101bf6101ee36600461280d565b610ed9565b6100f3610201366004612512565b610f68565b61019c610214366004612512565b6001600160a01b031660009081526001602052604090205460ff1690565b61019c61024036600461259a565b6111a4565b6100f3610253366004612512565b6112da565b61019c61026636600461254a565b611418565b61019c610279366004612512565b611460565b61010e61028c3660046127ba565b61158e565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916102c6919060040161297f565b60206040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610316919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161034191906128ac565b60206040518083038186803b15801561035957600080fd5b505afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610391919061279a565b6103b65760405162461bcd60e51b81526004016103ad90612a2c565b60405180910390fd5b6103c16003826115b8565b6104255760405162461bcd60e51b815260206004820152602f60248201527f537761704d616e616765723a3a72656d6f76655472616465723a20547261646560448201526e1c881dd85cc81b9bdd081859191959608a1b60648201526084016103ad565b6104306003826115d4565b5050565b60008060005b61044460036115e9565b8160ff16101561059257600061045e600360ff84166115f3565b90506000816001600160a01b031663841bdb9e89896040518363ffffffff1660e01b81526004016104909291906128c0565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e0919061279a565b1561057157604051632550332960e11b81526001600160a01b03831690634aa0665290610515908b908b908b9060040161290e565b60206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056591906127d2565b90508461057157600194505b8381111561057d578093505b5050808061058a90612cde565b91505061043a565b50935093915050565b606060028054806020026020016040519081016040528092919081815260200182805480156105f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105d5575b5050505050905090565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610632919060040161297f565b60206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610682919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016106ad91906128ac565b60206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061279a565b6107195760405162461bcd60e51b81526004016103ad90612a2c565b6107246003826115b8565b156107865760405162461bcd60e51b815260206004820152602c60248201527f537761704d616e616765723a3a6164645472616465723a20547261646572206160448201526b1b1c9958591e48185919195960a21b60648201526084016103ad565b6104306003826115ff565b3360009081526001602052604081205460ff166107c05760405162461bcd60e51b81526004016103ad90612a7a565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906107f79060039060040161297f565b60206040518083038186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610847919061252e565b90506000816001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b15801561088457600080fd5b505afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc919061252e565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610931919061252e565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161096191906128ac565b60206040518083038186803b15801561097957600080fd5b505afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906127d2565b90506000806109c1858585611614565b915091506109d18286868b61180a565b6109dc85838561196d565b600080546040516337c61fc560e11b81526001600160a01b03808616936349470541938a938a936201000090920490911691636f8c3f8a91610a21919060040161297f565b60206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a71919061252e565b87866040518663ffffffff1660e01b8152600401610a939594939291906128da565b602060405180830381600087803b158015610aad57600080fd5b505af1158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae5919061279a565b96505050505050505b919050565b3360009081526001602052604081205460ff16610b225760405162461bcd60e51b81526004016103ad90612a7a565b600080610b308a8a87611614565b5090506001600160a01b038116610b5357610b4a8a611aa4565b92505050610de9565b60405163354aedbd60e21b815290915060009081906001600160a01b0384169063d52bb6f490610b89908e908e906004016128c0565b604080518083038186803b158015610ba057600080fd5b505afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906127ea565b915091506000610cd38784848f6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c55919061286f565b60ff168f6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9157600080fd5b505afa158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc9919061286f565b60ff168f8f610ed9565b905080610cee57610ce38c611aa4565b945050505050610de9565b86811015610d0e5786610d018288612c61565b610d0b9190612b56565b95505b6000610d278b63ffffffff168b63ffffffff1684611b53565b905086811115610d35578096505b610d408d868461196d565b846001600160a01b031663494705418e8e8c868c6040518663ffffffff1660e01b8152600401610d749594939291906128da565b602060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc6919061279a565b610de25760405162461bcd60e51b81526004016103ad90612b19565b5093505050505b979650505050505050565b600054610100900460ff16610e0f5760005460ff1615610e17565b610e17611b6a565b610e7a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ad565b600054610100900460ff16158015610e9c576000805461ffff19166101011790555b610ea68484611b7b565b600580546001600160a01b0319166001600160a01b0384161790558015610ed3576000805461ff00191690555b50505050565b6000600184861115610f0b57610eef8587612c80565b610efa90600a612bb9565b610f049088612c61565b9650610f43565b84861015610f4357610f1d8686612c80565b610f2890600a612bb9565b9050610f348189612c61565b9750610f40818a612c61565b98505b80610f518a8a8a8888611cd0565b610f5b9190612b56565b9998505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610f9d919060040161297f565b60206040518083038186803b158015610fb557600080fd5b505afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed919061252e565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161101891906128ac565b60206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611068919061279a565b6110c75760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016103ad565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b60025481101561114d576002818154811061111957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561113d57600191505b61114681612cc3565b90506110ee565b508061043057600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b3360009081526001602052604081205460ff166111d35760405162461bcd60e51b81526004016103ad90612a7a565b6000806111e1888887611614565b915091506000848210156111f557846111f7565b815b9050801561121b5761120b89898984611dad565b9350831561121b575050506112d1565b826112278a828961196d565b604051634947054160e01b81526001600160a01b0382169063494705419061125b908d908d908d908d9089906004016128da565b602060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad919061279a565b9450846112cc5760405162461bcd60e51b81526004016103ad90612b19565b505050505b95945050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161130f919060040161297f565b60206040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161138a91906128ac565b60206040518083038186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113da919061279a565b6113f65760405162461bcd60e51b81526004016103ad90612a2c565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604081205460ff166114475760405162461bcd60e51b81526004016103ad90612a7a565b6114558585858560006111a4565b90505b949350505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061149690849060040161297f565b60206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e6919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161151191906128ac565b60206040518083038186803b15801561152957600080fd5b505afa15801561153d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611561919061279a565b61157d5760405162461bcd60e51b81526004016103ad90612a2c565b6115886003836115b8565b92915050565b6002818154811061159e57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006115cd836001600160a01b038416611fdf565b9392505050565b60006115cd836001600160a01b038416611ff7565b6000611588825490565b60006115cd8383612114565b60006115cd836001600160a01b03841661214c565b6000806000805b61162560036115e9565b8160ff16101561180057600061163f600360ff84166115f3565b9050600080826001600160a01b031663841bdb9e8b8b6040518363ffffffff1660e01b81526004016116729291906128c0565b60206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c2919061279a565b156117cd57604051632550332960e11b81526001600160a01b03841690634aa06652906116f7908d908d908d9060040161290e565b60206040518083038186803b15801561170f57600080fd5b505afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174791906127d2565b60405163332ff05b60e21b81529092506001600160a01b0384169063ccbfc16c9061177a908d908d908d9060040161290e565b60206040518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca91906127d2565b90505b848211156117ec576117e3600360ff86166115f3565b96508194508095505b505050806117f990612cde565b905061161b565b5050935093915050565b6000806000866001600160a01b031663d52bb6f487876040518363ffffffff1660e01b815260040161183d9291906128c0565b604080518083038186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c91906127ea565b91509150808210156118b657816118a5826103e8612c61565b6118af9190612b56565b92506118d1565b818110156118cb57806118a5836103e8612c61565b6103e892505b8383111561191d576001846118e68186612c80565b6118f1906064612c61565b6118fb9190612b56565b106119185760405162461bcd60e51b81526004016103ad906129da565b611964565b82841115611964576001846119328582612c80565b61193d906064612c61565b6119479190612b56565b106119645760405162461bcd60e51b81526004016103ad906129da565b50505050505050565b6040516370a0823160e01b815283906000906001600160a01b038316906370a082319061199e9030906004016128ac565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906127d2565b905082811415611a1157611a0c6001600160a01b0383168585612196565b611a9d565b82811115611a5857611a2d6001600160a01b0383168585612196565b600554611a0c906001600160a01b0316611a478584612c80565b6001600160a01b0385169190612196565b6000611a648285612c80565b90508115611a8057611a806001600160a01b0384168684612196565b600554611a9b906001600160a01b03858116911687846121fe565b505b5050505050565b6040516370a0823160e01b8152600090829082906001600160a01b038316906370a0823190611ad79030906004016128ac565b60206040518083038186803b158015611aef57600080fd5b505afa158015611b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2791906127d2565b90508015611b4957600554611b49906001600160a01b03848116911683612196565b5060009392505050565b600083611b608385612c61565b6114589190612b56565b6000611b753061221f565b15905090565b600054610100900460ff16611ba25760405162461bcd60e51b81526004016103ad90612ace565b6001600160a01b038116611bc85760405162461bcd60e51b81526004016103ad90612a07565b60005b8251811015611c3e5760006001600160a01b0316838281518110611bff57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611c2e5760405162461bcd60e51b81526004016103ad90612a07565b611c3781612cc3565b9050611bcb565b5060005b8251811015611cb2576001806000858481518110611c7057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055611cab81612cc3565b9050611c42565b508151611cc6906002906020850190612479565b506104308161222e565b600080611cdd8787612b3e565b611ce78689612c61565b611cf19190612b56565b905063ffffffff8416611d048287612c80565b611d0e9190612c61565b63ffffffff8416611d1f8989612b3e565b611d299190612c61565b11611d3657869150611da3565b60008363ffffffff1686888763ffffffff16611d529190612c61565b611d5c9190612c61565b611d669190612b56565b90506000611d738261227f565b9050878111611d83576000611d8d565b611d8d8882612c80565b9350838911611d9c5788611d9e565b835b935050505b5095945050505050565b6005546000906001600160a01b0316611dc857506000611458565b6005546040516370a0823160e01b8152869186916000916001600160a01b03808516926370a0823192611dff9216906004016128ac565b60206040518083038186803b158015611e1757600080fd5b505afa158015611e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4f91906127d2565b600554604051636eb1769f60e11b81529192506000916001600160a01b038581169263dd62ed3e92611e89929091169030906004016128c0565b60206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed991906127d2565b9050858210158015611eeb5750858110155b8015611ef75750600086115b15611fd3576005546001600160a01b03888116911614611f2c57600554611f2c906001600160a01b03858116911689896121fe565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611f5b9030906004016128ac565b60206040518083038186803b158015611f7357600080fd5b505afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab91906127d2565b90508015611fcd57600554611fcd906001600160a01b03878116911683612196565b60019550505b50505050949350505050565b60009081526001919091016020526040902054151590565b6000818152600183016020526040812054801561210a57600061201b600183612c80565b855490915060009061202f90600190612c80565b90508181146120b057600086600001828154811061205d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061208e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120cf57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611588565b6000915050611588565b600082600001828154811061213957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006121588383611fdf565b61218e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611588565b506000611588565b6040516001600160a01b0383166024820152604481018290526121f990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122a5565b505050565b610ed3846323b872dd60e01b8585856040516024016121c29392919061290e565b6001600160a01b03163b151590565b600054610100900460ff166122555760405162461bcd60e51b81526004016103ad90612ace565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b80600260018201045b8181101561229f5790506002818304820104612288565b50919050565b60006122fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123779092919063ffffffff16565b8051909150156121f95780806020019051810190612318919061279a565b6121f95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ad565b606061145884846000858561238b8561221f565b6123d75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ad565b600080866001600160a01b031685876040516123f39190612890565b60006040518083038185875af1925050503d8060008114612430576040519150601f19603f3d011682016040523d82523d6000602084013e612435565b606091505b5091509150610de98282866060831561244f5750816115cd565b82511561245f5782518084602001fd5b8160405162461bcd60e51b81526004016103ad91906129a7565b8280548282559060005260206000209081019282156124ce579160200282015b828111156124ce57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612499565b506124da9291506124de565b5090565b5b808211156124da57600081556001016124df565b8035610aee81612d2a565b803563ffffffff81168114610aee57600080fd5b600060208284031215612523578081fd5b81356115cd81612d2a565b60006020828403121561253f578081fd5b81516115cd81612d2a565b6000806000806080858703121561255f578283fd5b843561256a81612d2a565b9350602085013561257a81612d2a565b9250604085013561258a81612d2a565b9396929550929360600135925050565b600080600080600060a086880312156125b1578081fd5b85356125bc81612d2a565b945060208601356125cc81612d2a565b935060408601356125dc81612d2a565b94979396509394606081013594506080013592915050565b600080600060608486031215612608578283fd5b833561261381612d2a565b9250602084013561262381612d2a565b929592945050506040919091013590565b600080600080600080600060e0888a03121561264e578182fd5b873561265981612d2a565b9650602088013561266981612d2a565b9550612677604089016124fe565b9450612685606089016124fe565b9350608088013561269581612d2a565b9699959850939692959460a0840135945060c09093013592915050565b6000806000606084860312156126c6578283fd5b83356001600160401b03808211156126dc578485fd5b818601915086601f8301126126ef578485fd5b813560208282111561270357612703612d14565b8160051b604051601f19603f8301168101818110868211171561272857612728612d14565b604052838152828101945085830182870184018c101561274657898afd5b8996505b8487101561276f5761275b816124f3565b86526001969096019594830194830161274a565b50975061277f90508882016124f3565b955050505050612791604085016124f3565b90509250925092565b6000602082840312156127ab578081fd5b815180151581146115cd578182fd5b6000602082840312156127cb578081fd5b5035919050565b6000602082840312156127e3578081fd5b5051919050565b600080604083850312156127fc578182fd5b505080516020909101519092909150565b600080600080600080600060e0888a031215612827578081fd5b873596506020880135955060408801359450606088013593506080880135925061285360a089016124fe565b915061286160c089016124fe565b905092959891949750929550565b600060208284031215612880578081fd5b815160ff811681146115cd578182fd5b600082516128a2818460208701612c97565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156129735783516001600160a01b03168352928401929184019160010161294e565b50909695505050505050565b60208101600e83106129a157634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526129c6816040850160208701612c97565b601f01601f19169190910160400192915050565b60208082526013908201527210d95a5b1a5b99d31a5b5a5d14995858da1959606a1b604082015260600190565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a1cddd85c0819985a5b195960aa1b604082015260600190565b60008219821115612b5157612b51612cfe565b500190565b600082612b7157634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612bb1578160001904821115612b9757612b97612cfe565b80851615612ba457918102915b93841c9390800290612b7b565b509250929050565b60006115cd8383600082612bcf57506001611588565b81612bdc57506000611588565b8160018114612bf25760028114612bfc57612c18565b6001915050611588565b60ff841115612c0d57612c0d612cfe565b50506001821b611588565b5060208310610133831016604e8410600b8410161715612c3b575081810a611588565b612c458383612b76565b8060001904821115612c5957612c59612cfe565b029392505050565b6000816000190483118215151615612c7b57612c7b612cfe565b500290565b600082821015612c9257612c92612cfe565b500390565b60005b83811015612cb2578181015183820152602001612c9a565b83811115610ed35750506000910152565b6000600019821415612cd757612cd7612cfe565b5060010190565b600060ff821660ff811415612cf557612cf5612cfe565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612d3f57600080fd5b5056fea264697066735822122076fa13fa4353544c0a8fd77c961e04237b7f568b0828461841f9d304c870b21964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100db5760003560e01c80630a1f194f146100e05780630f0a1c6f146100f557806319145798146101245780631e38ef061461014e578063337993cb146101615780635d428e0814610176578063845fe1d0146101895780638badf3b8146101ac57806390482d72146101cd578063a64bc4b4146101e0578063a7fc7a07146101f3578063b429afeb14610206578063c0e7e87014610232578063c343129f14610245578063c4ef281914610258578063dfeeaa7d1461026b578063e94b0dd21461027e575b600080fd5b6100f36100ee366004612512565b610291565b005b60005461010e906201000090046001600160a01b031681565b60405161011b91906128ac565b60405180910390f35b6101376101323660046125f4565b610434565b60408051921515835260208301919091520161011b565b60055461010e906001600160a01b031681565b61016961059b565b60405161011b9190612932565b6100f3610184366004612512565b6105fd565b61019c6101973660046127ba565b610791565b604051901515815260200161011b565b6101bf6101ba366004612634565b610af3565b60405190815260200161011b565b6100f36101db3660046126b2565b610df4565b6101bf6101ee36600461280d565b610ed9565b6100f3610201366004612512565b610f68565b61019c610214366004612512565b6001600160a01b031660009081526001602052604090205460ff1690565b61019c61024036600461259a565b6111a4565b6100f3610253366004612512565b6112da565b61019c61026636600461254a565b611418565b61019c610279366004612512565b611460565b61010e61028c3660046127ba565b61158e565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916102c6919060040161297f565b60206040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610316919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161034191906128ac565b60206040518083038186803b15801561035957600080fd5b505afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610391919061279a565b6103b65760405162461bcd60e51b81526004016103ad90612a2c565b60405180910390fd5b6103c16003826115b8565b6104255760405162461bcd60e51b815260206004820152602f60248201527f537761704d616e616765723a3a72656d6f76655472616465723a20547261646560448201526e1c881dd85cc81b9bdd081859191959608a1b60648201526084016103ad565b6104306003826115d4565b5050565b60008060005b61044460036115e9565b8160ff16101561059257600061045e600360ff84166115f3565b90506000816001600160a01b031663841bdb9e89896040518363ffffffff1660e01b81526004016104909291906128c0565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e0919061279a565b1561057157604051632550332960e11b81526001600160a01b03831690634aa0665290610515908b908b908b9060040161290e565b60206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056591906127d2565b90508461057157600194505b8381111561057d578093505b5050808061058a90612cde565b91505061043a565b50935093915050565b606060028054806020026020016040519081016040528092919081815260200182805480156105f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105d5575b5050505050905090565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610632919060040161297f565b60206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610682919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016106ad91906128ac565b60206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061279a565b6107195760405162461bcd60e51b81526004016103ad90612a2c565b6107246003826115b8565b156107865760405162461bcd60e51b815260206004820152602c60248201527f537761704d616e616765723a3a6164645472616465723a20547261646572206160448201526b1b1c9958591e48185919195960a21b60648201526084016103ad565b6104306003826115ff565b3360009081526001602052604081205460ff166107c05760405162461bcd60e51b81526004016103ad90612a7a565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a906107f79060039060040161297f565b60206040518083038186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610847919061252e565b90506000816001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b15801561088457600080fd5b505afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc919061252e565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610931919061252e565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161096191906128ac565b60206040518083038186803b15801561097957600080fd5b505afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906127d2565b90506000806109c1858585611614565b915091506109d18286868b61180a565b6109dc85838561196d565b600080546040516337c61fc560e11b81526001600160a01b03808616936349470541938a938a936201000090920490911691636f8c3f8a91610a21919060040161297f565b60206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a71919061252e565b87866040518663ffffffff1660e01b8152600401610a939594939291906128da565b602060405180830381600087803b158015610aad57600080fd5b505af1158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae5919061279a565b96505050505050505b919050565b3360009081526001602052604081205460ff16610b225760405162461bcd60e51b81526004016103ad90612a7a565b600080610b308a8a87611614565b5090506001600160a01b038116610b5357610b4a8a611aa4565b92505050610de9565b60405163354aedbd60e21b815290915060009081906001600160a01b0384169063d52bb6f490610b89908e908e906004016128c0565b604080518083038186803b158015610ba057600080fd5b505afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906127ea565b915091506000610cd38784848f6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c55919061286f565b60ff168f6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9157600080fd5b505afa158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc9919061286f565b60ff168f8f610ed9565b905080610cee57610ce38c611aa4565b945050505050610de9565b86811015610d0e5786610d018288612c61565b610d0b9190612b56565b95505b6000610d278b63ffffffff168b63ffffffff1684611b53565b905086811115610d35578096505b610d408d868461196d565b846001600160a01b031663494705418e8e8c868c6040518663ffffffff1660e01b8152600401610d749594939291906128da565b602060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc6919061279a565b610de25760405162461bcd60e51b81526004016103ad90612b19565b5093505050505b979650505050505050565b600054610100900460ff16610e0f5760005460ff1615610e17565b610e17611b6a565b610e7a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ad565b600054610100900460ff16158015610e9c576000805461ffff19166101011790555b610ea68484611b7b565b600580546001600160a01b0319166001600160a01b0384161790558015610ed3576000805461ff00191690555b50505050565b6000600184861115610f0b57610eef8587612c80565b610efa90600a612bb9565b610f049088612c61565b9650610f43565b84861015610f4357610f1d8686612c80565b610f2890600a612bb9565b9050610f348189612c61565b9750610f40818a612c61565b98505b80610f518a8a8a8888611cd0565b610f5b9190612b56565b9998505050505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610f9d919060040161297f565b60206040518083038186803b158015610fb557600080fd5b505afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed919061252e565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161101891906128ac565b60206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611068919061279a565b6110c75760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b60648201526084016103ad565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b60025481101561114d576002818154811061111957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561113d57600191505b61114681612cc3565b90506110ee565b508061043057600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b03199091161790555050565b3360009081526001602052604081205460ff166111d35760405162461bcd60e51b81526004016103ad90612a7a565b6000806111e1888887611614565b915091506000848210156111f557846111f7565b815b9050801561121b5761120b89898984611dad565b9350831561121b575050506112d1565b826112278a828961196d565b604051634947054160e01b81526001600160a01b0382169063494705419061125b908d908d908d908d9089906004016128da565b602060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad919061279a565b9450846112cc5760405162461bcd60e51b81526004016103ad90612b19565b505050505b95945050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161130f919060040161297f565b60206040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161138a91906128ac565b60206040518083038186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113da919061279a565b6113f65760405162461bcd60e51b81526004016103ad90612a2c565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604081205460ff166114475760405162461bcd60e51b81526004016103ad90612a7a565b6114558585858560006111a4565b90505b949350505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a9061149690849060040161297f565b60206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e6919061252e565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b815260040161151191906128ac565b60206040518083038186803b15801561152957600080fd5b505afa15801561153d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611561919061279a565b61157d5760405162461bcd60e51b81526004016103ad90612a2c565b6115886003836115b8565b92915050565b6002818154811061159e57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006115cd836001600160a01b038416611fdf565b9392505050565b60006115cd836001600160a01b038416611ff7565b6000611588825490565b60006115cd8383612114565b60006115cd836001600160a01b03841661214c565b6000806000805b61162560036115e9565b8160ff16101561180057600061163f600360ff84166115f3565b9050600080826001600160a01b031663841bdb9e8b8b6040518363ffffffff1660e01b81526004016116729291906128c0565b60206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c2919061279a565b156117cd57604051632550332960e11b81526001600160a01b03841690634aa06652906116f7908d908d908d9060040161290e565b60206040518083038186803b15801561170f57600080fd5b505afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174791906127d2565b60405163332ff05b60e21b81529092506001600160a01b0384169063ccbfc16c9061177a908d908d908d9060040161290e565b60206040518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca91906127d2565b90505b848211156117ec576117e3600360ff86166115f3565b96508194508095505b505050806117f990612cde565b905061161b565b5050935093915050565b6000806000866001600160a01b031663d52bb6f487876040518363ffffffff1660e01b815260040161183d9291906128c0565b604080518083038186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c91906127ea565b91509150808210156118b657816118a5826103e8612c61565b6118af9190612b56565b92506118d1565b818110156118cb57806118a5836103e8612c61565b6103e892505b8383111561191d576001846118e68186612c80565b6118f1906064612c61565b6118fb9190612b56565b106119185760405162461bcd60e51b81526004016103ad906129da565b611964565b82841115611964576001846119328582612c80565b61193d906064612c61565b6119479190612b56565b106119645760405162461bcd60e51b81526004016103ad906129da565b50505050505050565b6040516370a0823160e01b815283906000906001600160a01b038316906370a082319061199e9030906004016128ac565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906127d2565b905082811415611a1157611a0c6001600160a01b0383168585612196565b611a9d565b82811115611a5857611a2d6001600160a01b0383168585612196565b600554611a0c906001600160a01b0316611a478584612c80565b6001600160a01b0385169190612196565b6000611a648285612c80565b90508115611a8057611a806001600160a01b0384168684612196565b600554611a9b906001600160a01b03858116911687846121fe565b505b5050505050565b6040516370a0823160e01b8152600090829082906001600160a01b038316906370a0823190611ad79030906004016128ac565b60206040518083038186803b158015611aef57600080fd5b505afa158015611b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2791906127d2565b90508015611b4957600554611b49906001600160a01b03848116911683612196565b5060009392505050565b600083611b608385612c61565b6114589190612b56565b6000611b753061221f565b15905090565b600054610100900460ff16611ba25760405162461bcd60e51b81526004016103ad90612ace565b6001600160a01b038116611bc85760405162461bcd60e51b81526004016103ad90612a07565b60005b8251811015611c3e5760006001600160a01b0316838281518110611bff57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611c2e5760405162461bcd60e51b81526004016103ad90612a07565b611c3781612cc3565b9050611bcb565b5060005b8251811015611cb2576001806000858481518110611c7057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055611cab81612cc3565b9050611c42565b508151611cc6906002906020850190612479565b506104308161222e565b600080611cdd8787612b3e565b611ce78689612c61565b611cf19190612b56565b905063ffffffff8416611d048287612c80565b611d0e9190612c61565b63ffffffff8416611d1f8989612b3e565b611d299190612c61565b11611d3657869150611da3565b60008363ffffffff1686888763ffffffff16611d529190612c61565b611d5c9190612c61565b611d669190612b56565b90506000611d738261227f565b9050878111611d83576000611d8d565b611d8d8882612c80565b9350838911611d9c5788611d9e565b835b935050505b5095945050505050565b6005546000906001600160a01b0316611dc857506000611458565b6005546040516370a0823160e01b8152869186916000916001600160a01b03808516926370a0823192611dff9216906004016128ac565b60206040518083038186803b158015611e1757600080fd5b505afa158015611e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4f91906127d2565b600554604051636eb1769f60e11b81529192506000916001600160a01b038581169263dd62ed3e92611e89929091169030906004016128c0565b60206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed991906127d2565b9050858210158015611eeb5750858110155b8015611ef75750600086115b15611fd3576005546001600160a01b03888116911614611f2c57600554611f2c906001600160a01b03858116911689896121fe565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611f5b9030906004016128ac565b60206040518083038186803b158015611f7357600080fd5b505afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab91906127d2565b90508015611fcd57600554611fcd906001600160a01b03878116911683612196565b60019550505b50505050949350505050565b60009081526001919091016020526040902054151590565b6000818152600183016020526040812054801561210a57600061201b600183612c80565b855490915060009061202f90600190612c80565b90508181146120b057600086600001828154811061205d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061208e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120cf57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611588565b6000915050611588565b600082600001828154811061213957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006121588383611fdf565b61218e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611588565b506000611588565b6040516001600160a01b0383166024820152604481018290526121f990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122a5565b505050565b610ed3846323b872dd60e01b8585856040516024016121c29392919061290e565b6001600160a01b03163b151590565b600054610100900460ff166122555760405162461bcd60e51b81526004016103ad90612ace565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b80600260018201045b8181101561229f5790506002818304820104612288565b50919050565b60006122fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123779092919063ffffffff16565b8051909150156121f95780806020019051810190612318919061279a565b6121f95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ad565b606061145884846000858561238b8561221f565b6123d75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ad565b600080866001600160a01b031685876040516123f39190612890565b60006040518083038185875af1925050503d8060008114612430576040519150601f19603f3d011682016040523d82523d6000602084013e612435565b606091505b5091509150610de98282866060831561244f5750816115cd565b82511561245f5782518084602001fd5b8160405162461bcd60e51b81526004016103ad91906129a7565b8280548282559060005260206000209081019282156124ce579160200282015b828111156124ce57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612499565b506124da9291506124de565b5090565b5b808211156124da57600081556001016124df565b8035610aee81612d2a565b803563ffffffff81168114610aee57600080fd5b600060208284031215612523578081fd5b81356115cd81612d2a565b60006020828403121561253f578081fd5b81516115cd81612d2a565b6000806000806080858703121561255f578283fd5b843561256a81612d2a565b9350602085013561257a81612d2a565b9250604085013561258a81612d2a565b9396929550929360600135925050565b600080600080600060a086880312156125b1578081fd5b85356125bc81612d2a565b945060208601356125cc81612d2a565b935060408601356125dc81612d2a565b94979396509394606081013594506080013592915050565b600080600060608486031215612608578283fd5b833561261381612d2a565b9250602084013561262381612d2a565b929592945050506040919091013590565b600080600080600080600060e0888a03121561264e578182fd5b873561265981612d2a565b9650602088013561266981612d2a565b9550612677604089016124fe565b9450612685606089016124fe565b9350608088013561269581612d2a565b9699959850939692959460a0840135945060c09093013592915050565b6000806000606084860312156126c6578283fd5b83356001600160401b03808211156126dc578485fd5b818601915086601f8301126126ef578485fd5b813560208282111561270357612703612d14565b8160051b604051601f19603f8301168101818110868211171561272857612728612d14565b604052838152828101945085830182870184018c101561274657898afd5b8996505b8487101561276f5761275b816124f3565b86526001969096019594830194830161274a565b50975061277f90508882016124f3565b955050505050612791604085016124f3565b90509250925092565b6000602082840312156127ab578081fd5b815180151581146115cd578182fd5b6000602082840312156127cb578081fd5b5035919050565b6000602082840312156127e3578081fd5b5051919050565b600080604083850312156127fc578182fd5b505080516020909101519092909150565b600080600080600080600060e0888a031215612827578081fd5b873596506020880135955060408801359450606088013593506080880135925061285360a089016124fe565b915061286160c089016124fe565b905092959891949750929550565b600060208284031215612880578081fd5b815160ff811681146115cd578182fd5b600082516128a2818460208701612c97565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156129735783516001600160a01b03168352928401929184019160010161294e565b50909695505050505050565b60208101600e83106129a157634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526129c6816040850160208701612c97565b601f01601f19169190910160400192915050565b60208082526013908201527210d95a5b1a5b99d31a5b5a5d14995858da1959606a1b604082015260600190565b6020808252600b908201526a626164206164647265737360a81b604082015260600190565b6020808252602e908201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a1cddd85c0819985a5b195960aa1b604082015260600190565b60008219821115612b5157612b51612cfe565b500190565b600082612b7157634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612bb1578160001904821115612b9757612b97612cfe565b80851615612ba457918102915b93841c9390800290612b7b565b509250929050565b60006115cd8383600082612bcf57506001611588565b81612bdc57506000611588565b8160018114612bf25760028114612bfc57612c18565b6001915050611588565b60ff841115612c0d57612c0d612cfe565b50506001821b611588565b5060208310610133831016604e8410600b8410161715612c3b575081810a611588565b612c458383612b76565b8060001904821115612c5957612c59612cfe565b029392505050565b6000816000190483118215151615612c7b57612c7b612cfe565b500290565b600082821015612c9257612c92612cfe565b500390565b60005b83811015612cb2578181015183820152602001612c9a565b83811115610ed35750506000910152565b6000600019821415612cd757612cd7612cfe565b5060010190565b600060ff821660ff811415612cf557612cf5612cfe565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612d3f57600080fd5b5056fea264697066735822122076fa13fa4353544c0a8fd77c961e04237b7f568b0828461841f9d304c870b21964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTrader(address)": {
        "details": "Adds trader which will be used for futher swaps"
      },
      "biosBuyBack(uint256)": {
        "params": {
          "ratioX1000": "BIOS/WETH ratio for front runner protection"
        },
        "returns": {
          "_0": "Bool indicating whether the trade succeeded*"
        }
      },
      "gentleSwapExactIn(address,address,uint32,uint32,address,uint256,uint256)": {
        "details": "Executes swap only for amountIn which will not significantly imbalance the pool and returns this amountIn"
      },
      "getBestAmountOut(address,address,uint256)": {
        "returns": {
          "bestPrice_": "Best amount out from all traders",
          "isPoolExist_": "Can we swap these tokens via added traders?"
        }
      },
      "hasTrader(address)": {
        "details": "If we have sufficient amount of money we will use that money instead of swap via traders",
        "params": {
          "_traderAddress": "Address of the contract implementing IDexTrader interface"
        }
      },
      "removeTrader(address)": {
        "details": "Removes trader so we will be not able to use it for swaps"
      },
      "setInternalWallet(address)": {
        "params": {
          "_walletAddress": "The address of the contract (user) which will be used for internal swaps. Set to Zero address to disable internal"
        }
      },
      "swapExactIn(address,address,address,uint256)": {
        "params": {
          "_amountIn": "The exact amount of the input to swap",
          "_recipient": "The address of the token out recipient",
          "_tokenIn": "The address of the input token",
          "_tokenOut": "The address of the output token"
        },
        "returns": {
          "tradeSuccess_": "Indicates whether the swap succeeded*"
        }
      },
      "swapExactIn(address,address,address,uint256,uint256)": {
        "params": {
          "_amountIn": "The exact amount of the input to swap",
          "_minAmountOut": "The minimum amount of _tokenOut to receive",
          "_recipient": "The address of the token out recipient",
          "_tokenIn": "The address of the input token",
          "_tokenOut": "The address of the output token"
        },
        "returns": {
          "tradeSuccess_": "Indicates whether the swap succeeded*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "biosBuyBack(uint256)": {
        "notice": "Swaps all WETH held in this contract for BIOS and sends to the kernel"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15684,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)29669"
      },
      {
        "astId": 9016,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9019,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19858,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "traders",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)2712_storage"
      },
      {
        "astId": 19860,
        "contract": "contracts/core/SwapManager.sol:SwapManager",
        "label": "internalWallet",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IModuleMap)29669": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2712_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2711,
            "contract": "contracts/core/SwapManager.sol:SwapManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2411_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2411_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2406,
            "contract": "contracts/core/SwapManager.sol:SwapManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2410,
            "contract": "contracts/core/SwapManager.sol:SwapManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}