{
  "address": "0xf1f5978d874E84De6B0F3b51a61feEDB41575208",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "CreatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "HarvestYieldError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LPTokensAcquired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenSold",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenBought",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBought",
          "type": "uint256"
        }
      ],
      "name": "PoolRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "source",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destination",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "TransferBetweenPools",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnFromPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        }
      ],
      "name": "YieldHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "masterChefPoolId",
          "type": "uint256"
        }
      ],
      "name": "configureStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "masterChefPoolId",
          "type": "uint256"
        }
      ],
      "name": "configureStakingOverwrite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "countExtraReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "addedReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accountedReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extraReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decrementBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllControllers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getHarvestedYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getPendingYield",
      "outputs": [
        {
          "internalType": "address[1]",
          "name": "tokens",
          "type": "address[1]"
        },
        {
          "internalType": "uint256[1]",
          "name": "amounts",
          "type": "uint256[1]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pid",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionID",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAMMIntegration.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getPoolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pids",
          "type": "uint32[]"
        }
      ],
      "name": "getRewardBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewardAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "getStakingPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalHarvestedYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pids",
          "type": "uint32[]"
        }
      ],
      "name": "getYieldBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "rewardRatioX1000",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "harvestYieldByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "incrementBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "masterChef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "isPoolExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "manualDeploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "manualWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellTokenB",
          "type": "uint256"
        }
      ],
      "name": "rebalancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "stakeLPTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ratioX1000",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "yieldBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xed4f5d3b343153d43fa3caf9c61709ca70a5332e0be2ff7711bc0a6be01d9d6c",
  "receipt": {
    "to": null,
    "from": "0xB22031425cbC6F09e3D9a87DC5294DCbe788C2A4",
    "contractAddress": "0xf1f5978d874E84De6B0F3b51a61feEDB41575208",
    "transactionIndex": 0,
    "gasUsed": "49321652",
    "logsBloom": "0x
    "blockHash": "0x9aaba1686f1677ab71de03642289b4a357b5bddca656df6871aa8f95cf40334f",
    "transactionHash": "0xed4f5d3b343153d43fa3caf9c61709ca70a5332e0be2ff7711bc0a6be01d9d6c",
    "logs": [],
    "blockNumber": 1421310,
    "cumulativeGasUsed": "49321652",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2524e61dad4bc868e4ac327f322032e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"HarvestYieldError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPTokensAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBought\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"PoolRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"source\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TransferBetweenPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"YieldHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPoolId\",\"type\":\"uint256\"}],\"name\":\"configureStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPoolId\",\"type\":\"uint256\"}],\"name\":\"configureStakingOverwrite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"countExtraReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"addedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decrementBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getHarvestedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPendingYield\",\"outputs\":[{\"internalType\":\"address[1]\",\"name\":\"tokens\",\"type\":\"address[1]\"},{\"internalType\":\"uint256[1]\",\"name\":\"amounts\",\"type\":\"uint256[1]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pid\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"internalType\":\"struct IAMMIntegration.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pids\",\"type\":\"uint32[]\"}],\"name\":\"getRewardBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getStakingPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHarvestedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pids\",\"type\":\"uint32[]\"}],\"name\":\"getYieldBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"rewardRatioX1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"harvestYieldByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterChef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"isPoolExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"manualDeploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"manualWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTokenB\",\"type\":\"uint256\"}],\"name\":\"rebalancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"stakeLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ratioX1000\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"yieldBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,uint32)\":{\"params\":{\"amount\":\"The amount of the token being deposited\",\"tokenAddress\":\"The address of the deposited token\"}},\"getAmountOut(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOut\":\"The estimated amount of tokenOut to receive\"}},\"getAmountOutMinimum(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOutMinimum\":\"The minimum amount of tokenOut to receive, factoring in allowable slippage\"}},\"getBalance(uint32,address)\":{\"returns\":{\"_0\":\"tokenAddress The address of the token to get the balance of\"}},\"getPendingYield(uint32)\":{\"details\":\"Returns total amount of pending yield in SPIRIT rewards\",\"params\":{\"poolId\":\"the integration pool to retrieve yield for\"},\"returns\":{\"amounts\":\"Amounts of pending yield\",\"tokens\":\"Token addresses of pending yield\"}},\"harvestYield()\":{\"details\":\"Harvests token yield from the integration\"},\"incrementBalance(uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount of the token being deposited\",\"token\":\"The address of the deposited token\"}},\"initialize(address[],address,address,address,address,address,uint24)\":{\"params\":{\"controllers_\":\"The address of the controlling contract\",\"factoryAddress_\":\"The address of the TraderJoe factory contract\",\"swapRouterAddress_\":\"The address of the TraderJoe  router contract\"}},\"isPoolExist(address,address)\":{\"params\":{\"_tokenA\":\"The address of the first  token from the token pair\",\"_tokenB\":\"The address of the second token from the token pair return true if pool exist else overwise\"}},\"rebalancePool(uint32,uint256,uint256,uint256)\":{\"params\":{\"maxSellTokenA\":\"max amount of tokenA to sell (to limit rebalancing)\",\"maxSellTokenB\":\"max amount of tokenB to sell (to limit rebalancing)\",\"poolId\":\"The ID of the pool to rebalance\",\"ratioX1000\":\"reserves ratio to control the price slippage\"}},\"withdraw(address,uint256,uint32)\":{\"params\":{\"amount\":\"The amoutn of the token to withdraw\",\"tokenAddress\":\"The address of the underlying token to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CreatePool(address,address,uint32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"harvestYieldByPool(uint32,uint256,uint256,bool)\":{\"notice\":\"Harvest available yield for desired pool\"},\"rebalancePool(uint32,uint256,uint256,uint256)\":{\"notice\":\"Rebalances by attempting to swap up to max to get into position ratio\"},\"withdraw(address,uint256,uint32)\":{\"notice\":\"Withdraws token from the integration\"}},\"notice\":\"Integrates 0x Nodes to TraderJoe in Avalanche\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yield-integrations/NetSwapIntegration.sol\":\"NetSwapIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(address[] memory controllers_, address moduleMap_) internal initializer {\\n        require(moduleMap_ != address(0), \\\"bad address\\\");\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            require(controllers_[i] != address(0), \\\"bad address\\\");\\n        }\\n        for (uint256 i; i < controllers_.length; ++i) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; ++i) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_controllers[msg.sender], \\\"Controlled::onlyController: Caller is not controller\\\");\\n        _;\\n    }\\n\\n    function isController(address controller) external view returns (bool status) {\\n        status = _controllers[controller];\\n    }\\n\\n    function getAllControllers() external view returns (address[] memory currentControllers) {\\n        return controllers;\\n    }\\n}\\n\",\"keccak256\":\"0xbe4c36b0a1e398f29a4f344b714870a95d5037cc38fce4e60cd66d5e6a6aef9b\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// Events\\n    event CreatePool(address indexed tokenA, address indexed tokenB, uint32 poolID);\\n    event YieldHarvested(uint32 poolID);\\n    event Deposit(address token, uint256 amount, uint32 poolID);\\n    event HarvestYieldError(uint32 indexed poolID);\\n\\n    event TransferBetweenPools(uint32 source, uint32 destination, uint256[] amounts, address[] tokens);\\n\\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n}\\n\",\"keccak256\":\"0x8d06bf6ffe0533f98ddea99623136cd05d8e78a712417a35d6dca8ff2a1070b3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDexTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IDexTrader {\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin\\n    ) external returns (bool);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256);\\n\\n    /// @param _tokenA The address of the first  token from the token pair\\n    /// @param _tokenB The address of the second token from the token pair\\n    /// return true if pool exist else overwise\\n    function isPoolExist(address _tokenA, address _tokenB) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x58a4ec90b5257114fce18c55340d296d076873dd9d01564871b5950f6478c371\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    //tmp here\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc29b7585764472c97f40eaf364b431eb31acc953339b5744b2ca55814e38779e\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenConfigs.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenConfigs.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event BiosAddressUpdated(address newAddress, address oldAddress);\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name) external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(address tokenAddress, uint256 reserveRatioNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(address tokenAddress, uint256 targetLiquidityRatioNumerator)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(address tokenAddress, uint256 transferFeeKValueNumerator) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId) external view returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress) external view returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress) external view returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum() external view returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress) external view returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress) external view returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress) external view returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress) external view returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x44303b43f04ccfdbbc2cdd156b4b6b8062f27c73c286f2092411edb90b57871b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IJoeFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x8355ad372edb646b81263d2361e82f7c08d6411964dccff7eb702e565427ce41\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IJoePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IJoePair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0xccfa49710ab558e7c378a224fd4d24e6d0ec2bb158bb412667b49f75e69bf8a3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IJoeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IJoeRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9a7d1dc6aa2b9969f9c53951bc0b1d8a4f5e1bc3d434118a38ad2e10cf6fe517\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IKernel {\\n    event Withdraw(address indexed user, address[] tokens, uint256[] tokenAmounts, uint256 ethAmount);\\n    event ClaimEthRewards(address indexed user, uint256[] strategies, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] strategies,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x08f4cba9a3d62a66872327c34489e63ed0d2b3bca96aef8328f7924067df577e\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager, // 11\\n    Unwrapper // 12\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x95f93424fb371bfb981e62eb3bb5300fb3406dc7048508363e109ca5700d6946\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/INetswapMasterchef.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface INETTFarm {\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of NETTs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accNETTPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accNETTPerShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. NETTs to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp that NETTs distribution occurs.\\n        uint256 accNETTPerShare; // Accumulated NETTs per share, times 1e12. See below.\\n        uint256 lpSupply;\\n        address rewarder;\\n    }\\n\\n    event Add(uint256 indexed pid, uint256 allocPoint, address indexed lpToken, address indexed rewarder);\\n    event Set(uint256 indexed pid, uint256 allocPoint, address indexed rewarder, bool overwrite);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accNETTPerShare);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetDevAddress(address indexed oldAddress, address indexed newAddress);\\n    event UpdateEmissionRate(address indexed user, uint256 _nettPerSec);\\n\\n    function poolInfo(uint256 pid) external returns (PoolInfo memory);\\n\\n    function userInfo(uint256 pid, address user) external view returns (UserInfo memory);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    // View function to see pending NETTs on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingNETT,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    // Get bonus token info from the rewarder contract for a given pool, if it is a 2xreward farm\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external;\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external;\\n\\n    // Deposit LP tokens to NETTFarm for NETT allocation\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from NETTFarm.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devAddr) external;\\n}\\n\",\"keccak256\":\"0x0509676d3b4d27f7fb0c8f815baf27ba344c428965e5e0e2cd1d55132e8c8ad5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISushiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x5247211ccdd16df9589b28eae4b7d5541dd221962b951b26d1a25f9f76166ff1\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapPair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x209ee1730040efd952bd174bd95302465ff305fe0fe528760d5775b4985ba1cd\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IWeth9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IWeth9 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    /// @param wad The amount of wETH to withdraw into ETH\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x122212ebb8fe6d0190bf812f36fc33de4c1d0539a6d9ef33e34ad05724fa2056\",\"license\":\"GPL-2.0\"},\"contracts/libraries/AMMLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/ISushiSwapFactory.sol\\\";\\nimport \\\"../interfaces/ISushiSwapPair.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary AMMLibrary {\\n    function getDeployAmounts(\\n        uint256 balanceA,\\n        uint256 balanceB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\\n        if (reserveA > reserveB) {\\n            uint256 k = (reserveA * 1000) / reserveB;\\n            uint256 balanceBA = (balanceB * k) / 1000;\\n\\n            if (balanceA < balanceBA) {\\n                amountA = balanceA;\\n                amountB = (balanceA * 1000) / k;\\n            } else if (balanceBA < balanceA) {\\n                amountA = (balanceB * k) / 1000;\\n                amountB = balanceB;\\n            } else {\\n                amountA = balanceA;\\n                amountB = balanceB;\\n            }\\n        } else if (reserveA < reserveB) {\\n            uint256 k = (reserveB * 1000) / reserveA;\\n            uint256 balanceAB = (balanceA * k) / 1000;\\n\\n            if (balanceB < balanceAB) {\\n                amountA = (balanceB * 1000) / k;\\n                amountB = balanceB;\\n            } else if (balanceAB < balanceB) {\\n                amountA = balanceA;\\n                amountB = (balanceA * k) / 1000;\\n            } else {\\n                amountA = balanceA;\\n                amountB = balanceB;\\n            }\\n        }\\n    }\\n\\n    function getExcessTokenAmounts(\\n        IAMMIntegration.Pool memory pool,\\n        uint256 balanceA,\\n        uint256 balanceB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (address swapToken, uint256 excessAmountToSwap) {\\n        if (reserveA > reserveB) {\\n            uint256 k = (reserveA * 1000) / reserveB;\\n            uint256 balanceBA = (balanceB * k) / 1000;\\n\\n            if (balanceA < balanceBA) {\\n                // excess tokenB\\n                excessAmountToSwap = (balanceB - ((balanceA * 1000) / k)) / 2;\\n                swapToken = pool.tokenB;\\n            } else if (balanceBA < balanceA) {\\n                // excess tokenA\\n                excessAmountToSwap = (balanceA - balanceBA) / 2;\\n                swapToken = pool.tokenA;\\n            }\\n        } else if (reserveA < reserveB) {\\n            uint256 k = (reserveB * 1000) / reserveA;\\n            uint256 balanceAB = (balanceA * k) / 1000;\\n\\n            if (balanceAB < balanceB) {\\n                // excess tokenB\\n                excessAmountToSwap = (balanceB - balanceAB) / 2;\\n                swapToken = pool.tokenB;\\n            } else if (balanceB < balanceAB) {\\n                // excess tokenA\\n                excessAmountToSwap = (balanceA - ((balanceB * 1000) / k)) / 2;\\n                swapToken = pool.tokenA;\\n            }\\n        }\\n    }\\n\\n    function getAmountOfTokensInPool(\\n        uint256 lpAmount,\\n        uint256 totalSupply,\\n        uint256 balanceA,\\n        uint256 balanceB\\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\\n        uint256 sharePercent = (lpAmount * 10000000000) / totalSupply;\\n        amountA = (balanceA * sharePercent) / 10000000000;\\n        amountB = (balanceB * sharePercent) / 10000000000;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Identical token addresses\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address\\\");\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"amountIn must be greater than zero\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"No liquidity in pool reserves\\\");\\n        uint256 amountInWithFee = amountIn * (997);\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function getRebalanceAmounts(\\n        address swapToken,\\n        IAMMIntegration.Pool memory pool,\\n        uint256 excessAmountToSwap,\\n        uint256 maxSellTokenA,\\n        uint256 maxSellTokenB\\n    ) internal pure returns (uint256 swapAmount, address targetToken) {\\n        if (swapToken == pool.tokenA) {\\n            targetToken = pool.tokenB;\\n            swapAmount = excessAmountToSwap < maxSellTokenA ? excessAmountToSwap : maxSellTokenA;\\n        } else {\\n            targetToken = pool.tokenA;\\n            swapAmount = excessAmountToSwap < maxSellTokenB ? excessAmountToSwap : maxSellTokenB;\\n        }\\n    }\\n\\n    function checkPriceCeiling(\\n        address pairAddress,\\n        uint256 reserveA,\\n        uint256 reserveB,\\n        uint256 ratioX1000\\n    ) internal pure {\\n        require(pairAddress != address(0), \\\"TraderJoeIntegration:BadPair\\\");\\n\\n        uint256 currentRatio;\\n\\n        if (reserveA < reserveB) {\\n            currentRatio = (reserveB * 1000) / reserveA;\\n        } else if (reserveB < reserveA) {\\n            currentRatio = (reserveA * 1000) / reserveB;\\n        } else {\\n            currentRatio = 1000;\\n        }\\n\\n        // limit to 1% off\\n        if (currentRatio > ratioX1000) {\\n            require(((currentRatio - ratioX1000) * 100) / ratioX1000 < 1, \\\"CeilingLimitReached\\\");\\n        } else if (ratioX1000 > currentRatio) {\\n            require(((ratioX1000 - currentRatio) * 100) / ratioX1000 < 1, \\\"CeilingLimitReached\\\");\\n        }\\n    }\\n\\n    function getLiquidityToWithdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 availableLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalSupply,\\n        IAMMIntegration.Pool memory pool\\n    ) internal pure returns (uint256 liquidityToWithdraw) {\\n        uint256 tokensPerLP;\\n\\n        if (tokenAddress == pool.tokenA) {\\n            tokensPerLP = totalSupply == 0 ? 0 : (reserve0 * 1e18) / totalSupply;\\n        } else {\\n            tokensPerLP = totalSupply == 0 ? 0 : (reserve1 * 1e18) / totalSupply;\\n        }\\n\\n        if (tokensPerLP == 0) {\\n            return 0;\\n        }\\n\\n        liquidityToWithdraw = ((amount / 2) * 1e18) / tokensPerLP;\\n\\n        if (liquidityToWithdraw > availableLiquidity) {\\n            liquidityToWithdraw = availableLiquidity;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd0907f15f554877f130b6bc73c97422a0f84ad67557702ad7915cd88915208ec\",\"license\":\"MIT\"},\"contracts/libraries/TokenConfigs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenConfigs contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenConfigs {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(address indexed token, TokenSettingName indexed settingName, uint256 indexed newValue);\\n\\n    event TokenSettingToggled(address indexed token, TokenSettingName indexed settingName, bool indexed newValue);\\n}\\n\",\"keccak256\":\"0x1e10d6652aa09a586757c89df6c6c380db109589bb9f9d6e625711a153b1461e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/yield-integrations/NetSwapIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../core/Controlled.sol\\\";\\nimport \\\"../core/ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IDexTrader.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\nimport \\\"../interfaces/IJoeRouter.sol\\\";\\nimport \\\"../interfaces/IJoePair.sol\\\";\\nimport \\\"../interfaces/INetswapMasterchef.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\nimport \\\"../libraries/AMMLibrary.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to TraderJoe in Avalanche\\ncontract NetSwapIntegration is Controlled, IAMMIntegration, IDexTrader {\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n    uint24 slippageNumerator;\\n\\n    address factoryAddress;\\n    address swapRouterAddress;\\n    address masterChef;\\n    address rewardToken;\\n    address wnativeAddress;\\n\\n    mapping(uint256 => Pool) private pools;\\n    uint32 public poolCount;\\n    uint32[] private poolIds;\\n    // poolId => MasterChef's poolId\\n    mapping(uint32 => uint256) private stakings;\\n    // PoolId => Token => Amount\\n    mapping(uint256 => mapping(address => uint256)) private balances;\\n\\n    // yield amounts\\n    mapping(uint32 => uint256) public yieldBalances;\\n\\n    // harvest yield (weth) per pool (harvested by YieldManager)\\n    mapping(uint32 => uint256) private harvestedYield;\\n\\n    // reward allocated per pool\\n    mapping(uint32 => uint256) private rewardBalances;\\n\\n    event TokensReceived(uint256 amount);\\n    event LPTokensAcquired(uint256 amount);\\n    event DepositToPool(uint256 poolId, uint256 amount);\\n    event WithdrawnFromPool(uint256 poolId, uint256 amount);\\n    event YieldReceived(uint256 amount);\\n    event PoolRebalanced(\\n        uint256 poolId,\\n        address tokenSold,\\n        uint256 amountSold,\\n        address tokenBought,\\n        uint256 amountBought\\n    );\\n\\n    receive() external payable {}\\n\\n    /// @param controllers_ The address of the controlling contract\\n    /// @param factoryAddress_ The address of the TraderJoe factory contract\\n    /// @param swapRouterAddress_ The address of the TraderJoe  router contract\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address factoryAddress_,\\n        address swapRouterAddress_,\\n        address masterChef_,\\n        address rewardToken_,\\n        uint24 slippageNumerator_\\n    ) external initializer {\\n        require(factoryAddress_ != address(0), \\\"bad address\\\");\\n        require(swapRouterAddress_ != address(0), \\\"bad address\\\");\\n        require(masterChef_ != address(0), \\\"bad address\\\");\\n        require(rewardToken_ != address(0), \\\"bad address\\\");\\n        __Controlled_init(controllers_, moduleMap_);\\n        factoryAddress = factoryAddress_;\\n        swapRouterAddress = swapRouterAddress_;\\n        masterChef = masterChef_;\\n        slippageNumerator = slippageNumerator_;\\n        rewardToken = rewardToken_;\\n        wnativeAddress = IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap)).getWethTokenAddress();\\n    }\\n\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 // unused\\n    ) external onlyManager {\\n        poolCount++;\\n        pools[poolCount].tokenA = tokenA;\\n        pools[poolCount].tokenB = tokenB;\\n        poolIds.push(poolCount);\\n\\n        if (IERC20MetadataUpgradeable(tokenA).allowance(address(this), swapRouterAddress) != type(uint256).max) {\\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, 0);\\n            IERC20MetadataUpgradeable(tokenA).safeApprove(swapRouterAddress, type(uint256).max);\\n        }\\n\\n        if (IERC20MetadataUpgradeable(tokenB).allowance(address(this), swapRouterAddress) != type(uint256).max) {\\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, 0);\\n            IERC20MetadataUpgradeable(tokenB).safeApprove(swapRouterAddress, type(uint256).max);\\n        }\\n    }\\n\\n    function configureStaking(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\\n        _configureStaking(poolId, masterChefPoolId, false);\\n    }\\n\\n    function configureStakingOverwrite(uint32 poolId, uint256 masterChefPoolId) external onlyManager {\\n        _configureStaking(poolId, masterChefPoolId, true);\\n    }\\n\\n    function _configureStaking(\\n        uint32 poolId,\\n        uint256 masterChefPoolId,\\n        bool overwrite\\n    ) internal {\\n        Pool memory pool = getPool(poolId);\\n        require(pool.tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        if (overwrite != true) {\\n            require(stakings[poolId] == 0, \\\"Staking already configured\\\");\\n        }\\n\\n        INETTFarm.PoolInfo memory poolInfo = INETTFarm(masterChef).poolInfo(masterChefPoolId);\\n\\n        address pairAddress = pairFor(pool.tokenA, pool.tokenB);\\n\\n        require(address(poolInfo.lpToken) == pairAddress, \\\"Incorrect MasterChef's poolId was provided\\\");\\n\\n        stakings[poolId] = masterChefPoolId;\\n\\n        // let master chef pull tokens\\n        if (IERC20MetadataUpgradeable(pairAddress).allowance(address(this), masterChef) != type(uint256).max) {\\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, 0);\\n            IERC20MetadataUpgradeable(pairAddress).safeApprove(masterChef, type(uint256).max);\\n        }\\n    }\\n\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId\\n    ) external override onlyController {\\n        balances[poolId][tokenAddress] += amount;\\n    }\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function incrementBalance(\\n        uint32 poolId,\\n        address token,\\n        uint256 amount\\n    ) external onlyManager {\\n        balances[poolId][token] += amount;\\n    }\\n\\n    function decrementBalance(\\n        uint32 poolId,\\n        address token,\\n        uint256 amount\\n    ) external onlyManager {\\n        balances[poolId][token] -= amount;\\n    }\\n\\n    function getPool(uint32 pid) public view returns (Pool memory) {\\n        return pools[pid];\\n    }\\n\\n    /// @return tokenAddress The address of the token to get the balance of\\n    function getBalance(uint32 poolId, address tokenAddress) public view returns (uint256) {\\n        return balances[poolId][tokenAddress];\\n    }\\n\\n    function getPoolBalance(uint32 poolId) external view returns (uint256 tokenA, uint256 tokenB) {\\n        (tokenA, tokenB) = getTokensPoolValue(poolId);\\n    }\\n\\n    function deploy(uint32 poolId) external override onlyController {\\n        _deploy(poolId);\\n    }\\n\\n    function manualDeploy(uint32 poolId) external onlyManager {\\n        _deploy(poolId);\\n    }\\n\\n    function _deploy(uint32 poolId) internal {\\n        Pool memory pool = getPool(poolId);\\n\\n        require(pools[poolId].tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        uint256 balanceA = getBalance(poolId, pool.tokenA);\\n        uint256 balanceB = getBalance(poolId, pool.tokenB);\\n\\n        if (balanceA == 0 || balanceB == 0) {\\n            return;\\n        } else {\\n            (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\\n            (uint256 amountA, uint256 amountB) = AMMLibrary.getDeployAmounts(balanceA, balanceB, reserveA, reserveB);\\n\\n            (, , uint256 liquidityAcquired) = IJoeRouter(swapRouterAddress).addLiquidity(\\n                pool.tokenA,\\n                pool.tokenB,\\n                amountA,\\n                amountB,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n            balances[poolId][pool.tokenA] -= amountA;\\n            balances[poolId][pool.tokenB] -= amountB;\\n\\n            emit LPTokensAcquired(liquidityAcquired);\\n            emit DepositToPool(poolId, liquidityAcquired);\\n        }\\n    }\\n\\n    function stakeLPTokens(uint32 poolId) external onlyManager {\\n        Pool memory pool = pools[poolId];\\n        uint256 balance = IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this));\\n        if (balance > 0) {\\n            // MCV1 sends reward when staking\\n            uint256 rewardBefore = _selfBalance(rewardToken);\\n\\n            INETTFarm(masterChef).deposit(stakings[poolId], balance);\\n\\n            _receivedReward(poolId, rewardBefore);\\n        }\\n    }\\n\\n    function harvestYield() external override onlyController {\\n        uint256 yieldAmount;\\n        for (uint256 i; i < poolCount; ++i) {\\n            uint32 poolId = poolIds[i];\\n            uint256 poolYield = yieldBalances[poolId];\\n            if (poolYield > 0) {\\n                yieldAmount += yieldBalances[poolId];\\n                harvestedYield[poolId] += poolYield;\\n                yieldBalances[poolId] = 0;\\n            }\\n        }\\n        if (yieldAmount > 0) {\\n            IERC20MetadataUpgradeable(wnativeAddress).safeTransfer(\\n                moduleMap.getModuleAddress(Modules.YieldManager),\\n                yieldAmount\\n            );\\n            emit YieldReceived(yieldAmount);\\n        }\\n    }\\n\\n    /// @notice Harvest available yield for desired pool\\n    function harvestYieldByPool(\\n        uint32 poolId,\\n        uint256 rewardRatioX1000, // price ratio for SUSHI!\\n        uint256, // unused dual rewards ratio\\n        bool\\n    ) external onlyManager {\\n        // MasterChefV1 does not have an explicit harvest method\\n        // deposit 0 accomplishes the rewards harvesting\\n        uint256 rewardBefore = _selfBalance(rewardToken);\\n        INETTFarm(masterChef).deposit(stakings[poolId], 0);\\n        _receivedReward(poolId, rewardBefore);\\n\\n        // check and convert any joe\\n        // make sure all the rewards were already accounted :)\\n        uint256 rewardBalance = rewardBalances[poolId];\\n\\n        if (rewardBalance > 0) {\\n            checkPriceCeiling(rewardToken, wnativeAddress, rewardRatioX1000);\\n            uint256[] memory amounts = _swapExactInput(\\n                rewardToken,\\n                wnativeAddress,\\n                address(this),\\n                rewardBalance,\\n                getAmountOutMinimum(rewardToken, wnativeAddress, rewardBalance)\\n            );\\n\\n            rewardBalances[poolId] = 0;\\n            yieldBalances[poolId] += amounts[1];\\n        }\\n    }\\n\\n    /// @notice Withdraws token from the integration\\n    /// @param tokenAddress The address of the underlying token to withdraw\\n    /// @param amount The amoutn of the token to withdraw\\n    function withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId\\n    ) external override onlyController {\\n        require(amount <= getBalance(poolId, tokenAddress), \\\"integration: balance exceeded\\\");\\n\\n        balances[poolId][tokenAddress] -= amount;\\n\\n        IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\\n    }\\n\\n    function withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000\\n    ) external onlyController {\\n        if (amount <= getBalance(poolId, tokenAddress)) {\\n            IERC20MetadataUpgradeable(tokenAddress).safeTransfer(moduleMap.getModuleAddress(Modules.Kernel), amount);\\n            balances[poolId][tokenAddress] -= amount;\\n        } else {\\n            _withdraw(tokenAddress, amount, poolId, ratioX1000, true);\\n        }\\n    }\\n\\n    function manualWithdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000\\n    ) external onlyManager {\\n        _withdraw(tokenAddress, amount, poolId, ratioX1000, false);\\n    }\\n\\n    function getTokensPoolValue(uint32 poolId)\\n        internal\\n        view\\n        returns (uint256 amountOfTokenAInPool, uint256 amountOfTokenBInPool)\\n    {\\n        Pool memory pool = getPool(poolId);\\n\\n        uint256 lpAmount = IERC20(pairFor(pool.tokenA, pool.tokenB)).balanceOf(address(this)) +\\n            INETTFarm(masterChef).userInfo(stakings[poolId], address(this)).amount;\\n\\n        (amountOfTokenAInPool, amountOfTokenBInPool) = AMMLibrary.getAmountOfTokensInPool(\\n            lpAmount,\\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\\n            IERC20(pool.tokenA).balanceOf(pairFor(pool.tokenA, pool.tokenB)),\\n            IERC20(pool.tokenB).balanceOf(pairFor(pool.tokenA, pool.tokenB))\\n        );\\n    }\\n\\n    function _withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint32 poolId,\\n        uint256 ratioX1000,\\n        bool sendToKernel\\n    ) internal {\\n        Pool memory pool = getPool(poolId);\\n\\n        if (ratioX1000 > 0) {\\n            checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1) = getReserves(pool.tokenA, pool.tokenB);\\n        uint256 liquidityToWithdraw = AMMLibrary.getLiquidityToWithdraw(\\n            tokenAddress,\\n            amount,\\n            INETTFarm(masterChef).userInfo(stakings[poolId], address(this)).amount,\\n            reserve0,\\n            reserve1,\\n            IERC20(pairFor(pool.tokenA, pool.tokenB)).totalSupply(),\\n            pool\\n        );\\n\\n        // MCV1 sends reward when unstaking\\n        uint256 rewardBefore = _selfBalance(rewardToken);\\n\\n        INETTFarm(masterChef).withdraw(stakings[poolId], liquidityToWithdraw);\\n\\n        // account for reward\\n        _receivedReward(poolId, rewardBefore);\\n\\n        IERC20MetadataUpgradeable(pairFor(pool.tokenA, pool.tokenB)).safeApprove(\\n            swapRouterAddress,\\n            liquidityToWithdraw\\n        );\\n\\n        (uint256 amountTokenA, uint256 amountTokenB) = IJoeRouter(swapRouterAddress).removeLiquidity(\\n            pool.tokenA,\\n            pool.tokenB,\\n            liquidityToWithdraw,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 360\\n        );\\n\\n        withdrawSwapAndEmit(pool, poolId, tokenAddress, amountTokenA, amountTokenB, sendToKernel);\\n    }\\n\\n    function withdrawSwapAndEmit(\\n        Pool memory pool,\\n        uint32 poolId,\\n        address tokenAddress,\\n        uint256 amountTokenA,\\n        uint256 amountTokenB,\\n        bool sendToKernel\\n    ) internal {\\n        uint256[] memory amountsOfTokenReceived;\\n\\n        if (tokenAddress == pool.tokenA) {\\n            amountsOfTokenReceived = _swapExactInput(\\n                pool.tokenB,\\n                tokenAddress,\\n                address(this),\\n                amountTokenB,\\n                getAmountOutMinimum(pool.tokenB, tokenAddress, amountTokenB)\\n            );\\n\\n            if (sendToKernel) {\\n                IERC20MetadataUpgradeable(pool.tokenA).safeTransfer(\\n                    moduleMap.getModuleAddress(Modules.Kernel),\\n                    amountTokenA + amountsOfTokenReceived[1]\\n                );\\n            } else {\\n                balances[poolId][pool.tokenA] += (amountTokenA + amountsOfTokenReceived[1]);\\n            }\\n\\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenA);\\n        } else if (tokenAddress == pool.tokenB) {\\n            amountsOfTokenReceived = _swapExactInput(\\n                pool.tokenA,\\n                tokenAddress,\\n                address(this),\\n                amountTokenA,\\n                getAmountOutMinimum(pool.tokenA, tokenAddress, amountTokenA)\\n            );\\n\\n            if (sendToKernel) {\\n                IERC20MetadataUpgradeable(pool.tokenB).safeTransfer(\\n                    moduleMap.getModuleAddress(Modules.Kernel),\\n                    amountTokenB + amountsOfTokenReceived[1]\\n                );\\n            } else {\\n                balances[poolId][pool.tokenB] += (amountTokenB + amountsOfTokenReceived[1]);\\n            }\\n\\n            emit WithdrawnFromPool(poolId, amountsOfTokenReceived[1] + amountTokenB);\\n        }\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address of the token out recipient\\n    /// @param amountIn The exact amount of the input to swap\\n    function _swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) internal returns (uint256[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenIn;\\n        path[1] = tokenOut;\\n        uint256 deadline = block.timestamp;\\n\\n        if (IERC20MetadataUpgradeable(tokenIn).allowance(address(this), swapRouterAddress) < amountIn) {\\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, 0);\\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(swapRouterAddress, amountIn);\\n        }\\n\\n        return\\n            IJoeRouter(swapRouterAddress).swapExactTokensForTokens(amountIn, amountOutMin, path, recipient, deadline);\\n    }\\n\\n    // external for swap manager\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external override onlyController returns (bool) {\\n        return _swapExactInput(tokenIn, tokenOut, recipient, amountIn, amountOutMin)[1] > 0;\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) public view override returns (uint256 amountOutMinimum) {\\n        amountOutMinimum =\\n            (getAmountOut(tokenIn, tokenOut, amountIn) * (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\\n            SLIPPAGE_DENOMINATOR;\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOut The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) public view override returns (uint256 amountOut) {\\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\\n        amountOut = AMMLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return reserveA The reserve balance of tokenA in the pool\\n    /// @return reserveB The reserve balance of tokenB in the pool\\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IJoePair(pairFor(tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return pair The address of the Joe pool contract\\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\n        pair = IJoeFactory(factoryAddress).getPair(tokenA, tokenB);\\n    }\\n\\n    /// @dev Returns total amount of pending yield in SPIRIT rewards\\n    /// @param poolId  the integration pool to retrieve yield for\\n    /// @return tokens Token addresses of pending yield\\n    /// @return amounts Amounts of pending yield\\n    function getPendingYield(uint32 poolId)\\n        external\\n        view\\n        returns (address[1] memory tokens, uint256[1] memory amounts)\\n    {\\n        // pending yield is pending in Master Chef plus in rewardBalances\\n        (uint256 pendingNETT, , , ) = INETTFarm(masterChef).pendingTokens(stakings[poolId], address(this));\\n        tokens[0] = rewardToken;\\n        amounts[0] = pendingNETT + rewardBalances[poolId];\\n    }\\n\\n    function getStakingPoolId(uint32 poolId) external view returns (uint256) {\\n        return stakings[poolId];\\n    }\\n\\n    function getYieldBalances(uint32[] calldata pids) external view returns (uint256[] memory amounts) {\\n        amounts = new uint256[](pids.length);\\n        for (uint256 i; i < pids.length; ++i) {\\n            amounts[i] = _getYieldBalance(pids[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    function _getYieldBalance(uint32 poolId) internal view returns (uint256) {\\n        return yieldBalances[poolId];\\n    }\\n\\n    function getHarvestedYield(uint32 poolId) public view returns (uint256) {\\n        return harvestedYield[poolId];\\n    }\\n\\n    function getTotalHarvestedYield() external view returns (uint256 amount) {\\n        for (uint32 i; i < poolCount; ++i) {\\n            amount += getHarvestedYield(i + 1);\\n        }\\n    }\\n\\n    /// @notice Rebalances by attempting to swap up to max to get into position ratio\\n    /// @param poolId The ID of the pool to rebalance\\n    /// @param ratioX1000 reserves ratio to control the price slippage\\n    /// @param maxSellTokenA max amount of tokenA to sell (to limit rebalancing)\\n    /// @param maxSellTokenB max amount of tokenB to sell (to limit rebalancing)\\n    function rebalancePool(\\n        uint32 poolId,\\n        uint256 ratioX1000,\\n        uint256 maxSellTokenA,\\n        uint256 maxSellTokenB\\n    ) external onlyManager {\\n        Pool memory pool = getPool(poolId);\\n\\n        require(pools[poolId].tokenA != address(0), \\\"Pool doesn't exist\\\");\\n\\n        checkPriceCeiling(pool.tokenA, pool.tokenB, ratioX1000);\\n\\n        // determine which token and how much to swap\\n        (address swapToken, uint256 excessAmountToSwap) = calculateExcessTokensToSwap(\\n            pool,\\n            getBalance(poolId, pool.tokenA),\\n            getBalance(poolId, pool.tokenB)\\n        );\\n\\n        // handle tokenA vs tokenB, cap at max sell param\\n        (uint256 swapAmount, address targetToken) = AMMLibrary.getRebalanceAmounts(\\n            swapToken,\\n            pool,\\n            excessAmountToSwap,\\n            maxSellTokenA,\\n            maxSellTokenB\\n        );\\n\\n        // track balance change of targetToken\\n        uint256 targetBalanceBefore = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this));\\n\\n        // swap tokens\\n        _swapExactInput(\\n            swapToken,\\n            targetToken,\\n            address(this),\\n            swapAmount,\\n            getAmountOutMinimum(swapToken, targetToken, swapAmount)\\n        );\\n\\n        uint256 amountReceived = IERC20MetadataUpgradeable(targetToken).balanceOf(address(this)) - targetBalanceBefore;\\n\\n        // update pool token balances\\n        if (amountReceived > 0) {\\n            balances[poolId][swapToken] -= swapAmount;\\n            balances[poolId][targetToken] += amountReceived;\\n\\n            emit PoolRebalanced(poolId, swapToken, swapAmount, targetToken, amountReceived);\\n        }\\n    }\\n\\n    function calculateExcessTokensToSwap(\\n        Pool memory pool,\\n        uint256 balanceA,\\n        uint256 balanceB\\n    ) internal view returns (address swapToken, uint256 excessAmountToSwap) {\\n        require(balanceA + balanceB > 0, \\\"TraderJoeIntegration: no balance\\\");\\n        // fetch reserve values from joe\\n        (uint256 reserveA, uint256 reserveB) = getReserves(pool.tokenA, pool.tokenB);\\n\\n        (swapToken, excessAmountToSwap) = AMMLibrary.getExcessTokenAmounts(\\n            pool,\\n            balanceA,\\n            balanceB,\\n            reserveA,\\n            reserveB\\n        );\\n    }\\n\\n    function checkPriceCeiling(\\n        address tokenA,\\n        address tokenB,\\n        uint256 ratioX1000\\n    ) internal view {\\n        address pairAddress = address(pairFor(tokenA, tokenB));\\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\\n\\n        AMMLibrary.checkPriceCeiling(pairAddress, reserveA, reserveB, ratioX1000);\\n    }\\n\\n    function getRewardBalances(uint32[] calldata pids) external view returns (uint256[] memory rewardAmounts) {\\n        rewardAmounts = new uint256[](pids.length);\\n        for (uint256 i; i < pids.length; ++i) {\\n            rewardAmounts[i] = rewardBalances[pids[i]];\\n        }\\n    }\\n\\n    function _receivedReward(uint32 poolId, uint256 rewardBefore) internal returns (uint256 rewardAdded) {\\n        rewardAdded = _selfBalance(rewardToken) - rewardBefore;\\n        if (rewardAdded > 0) {\\n            rewardBalances[poolId] += rewardAdded;\\n        }\\n    }\\n\\n    function countExtraReward(uint32 poolId, uint256 max)\\n        external\\n        onlyManager\\n        returns (\\n            uint256 addedReward,\\n            uint256 accountedReward,\\n            uint256 extraReward\\n        )\\n    {\\n        uint256 count = poolCount;\\n        require(count > 0, \\\"Cannot count extra reward when no pools exist\\\");\\n\\n        // Find total amount of reward that has been accounted for\\n        for (uint32 i; i < count; ++i) {\\n            accountedReward += rewardBalances[i + 1];\\n        }\\n\\n        extraReward = _selfBalance(rewardToken) - accountedReward;\\n        if (extraReward > 0) {\\n            addedReward = (max > 0 && max < extraReward) ? max : extraReward;\\n            rewardBalances[poolId] += addedReward;\\n        }\\n    }\\n\\n    function _selfBalance(address token) internal view returns (uint256) {\\n        return IERC20MetadataUpgradeable(token).balanceOf(address(this));\\n    }\\n\\n    function isPoolExist(address _tokenA, address _tokenB) external view override returns (bool) {\\n        (address token0, address token1) = AMMLibrary.sortTokens(_tokenA, _tokenB);\\n        return pairFor(token0, token1) != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x6a1ed7d7b0284e56f92a20c0a60bef98df6a8739dd444002779165eb1958e364\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,uint32)": {
        "params": {
          "amount": "The amount of the token being deposited",
          "tokenAddress": "The address of the deposited token"
        }
      },
      "getAmountOut(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOut": "The estimated amount of tokenOut to receive"
        }
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOutMinimum": "The minimum amount of tokenOut to receive, factoring in allowable slippage"
        }
      },
      "getBalance(uint32,address)": {
        "returns": {
          "_0": "tokenAddress The address of the token to get the balance of"
        }
      },
      "getPendingYield(uint32)": {
        "details": "Returns total amount of pending yield in SPIRIT rewards",
        "params": {
          "poolId": "the integration pool to retrieve yield for"
        },
        "returns": {
          "amounts": "Amounts of pending yield",
          "tokens": "Token addresses of pending yield"
        }
      },
      "harvestYield()": {
        "details": "Harvests token yield from the integration"
      },
      "incrementBalance(uint32,address,uint256)": {
        "params": {
          "amount": "The amount of the token being deposited",
          "token": "The address of the deposited token"
        }
      },
      "initialize(address[],address,address,address,address,address,uint24)": {
        "params": {
          "controllers_": "The address of the controlling contract",
          "factoryAddress_": "The address of the TraderJoe factory contract",
          "swapRouterAddress_": "The address of the TraderJoe  router contract"
        }
      },
      "isPoolExist(address,address)": {
        "params": {
          "_tokenA": "The address of the first  token from the token pair",
          "_tokenB": "The address of the second token from the token pair return true if pool exist else overwise"
        }
      },
      "rebalancePool(uint32,uint256,uint256,uint256)": {
        "params": {
          "maxSellTokenA": "max amount of tokenA to sell (to limit rebalancing)",
          "maxSellTokenB": "max amount of tokenB to sell (to limit rebalancing)",
          "poolId": "The ID of the pool to rebalance",
          "ratioX1000": "reserves ratio to control the price slippage"
        }
      },
      "withdraw(address,uint256,uint32)": {
        "params": {
          "amount": "The amoutn of the token to withdraw",
          "tokenAddress": "The address of the underlying token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatePool(address,address,uint32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "harvestYieldByPool(uint32,uint256,uint256,bool)": {
        "notice": "Harvest available yield for desired pool"
      },
      "rebalancePool(uint32,uint256,uint256,uint256)": {
        "notice": "Rebalances by attempting to swap up to max to get into position ratio"
      },
      "withdraw(address,uint256,uint32)": {
        "notice": "Withdraws token from the integration"
      }
    },
    "notice": "Integrates 0x Nodes to TraderJoe in Avalanche",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 723,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 726,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10147,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)21221"
      },
      {
        "astId": 4666,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4669,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 42706,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "slippageNumerator",
        "offset": 0,
        "slot": "3",
        "type": "t_uint24"
      },
      {
        "astId": 42708,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "factoryAddress",
        "offset": 3,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 42710,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 42712,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "masterChef",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 42714,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "rewardToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 42716,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "wnativeAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 42721,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "pools",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Pool)19450_storage)"
      },
      {
        "astId": 42723,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "poolCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 42726,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "poolIds",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 42730,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "stakings",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 42736,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 42740,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "yieldBalances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 42744,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "harvestedYield",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 42748,
        "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
        "label": "rewardBalances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)21221": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Pool)19450_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAMMIntegration.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)19450_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)19450_storage": {
        "encoding": "inplace",
        "label": "struct IAMMIntegration.Pool",
        "members": [
          {
            "astId": 19445,
            "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
            "label": "tokenA",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19447,
            "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
            "label": "tokenB",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19449,
            "contract": "contracts/yield-integrations/NetSwapIntegration.sol:NetSwapIntegration",
            "label": "positionID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}