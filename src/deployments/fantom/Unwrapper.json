{
  "address": "0x97Cf4De179b92925BD178F5b20481Fb4E4CAE9e1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrappedTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IWeth9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae5831b1737d8748683ce0d8bfe467b64cac03dfda5016295a0029583f87050b",
  "receipt": {
    "to": null,
    "from": "0x9cE013508102578854E1624EC7f179Ddf4841598",
    "contractAddress": "0x97Cf4De179b92925BD178F5b20481Fb4E4CAE9e1",
    "transactionIndex": 0,
    "gasUsed": "181835",
    "logsBloom": "0x
    "blockHash": "0x000119d0000007105b81d2e73e6700d6fe9c6a0d356a6c40802a1dc9adf6ad12",
    "transactionHash": "0xae5831b1737d8748683ce0d8bfe467b64cac03dfda5016295a0029583f87050b",
    "logs": [],
    "blockNumber": 28309506,
    "cumulativeGasUsed": "181835",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83"
  ],
  "solcInputHash": "2c097a1f182623a977f078f430001eb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IWeth9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"unwrap(uint256)\":{\"details\":\"transfer token and then unwrap\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Unwrapper.sol\":\"Unwrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/core/Unwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IUnwrapper.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\n\\n// Some native tokens can't be unwrapped by upgradeable contracts...\\n// https://forum.openzeppelin.com/t/msg-sender-transfer-runs-out-of-gas-on-a-payable-upgradeable-proxy-contract/3766\\n\\n// To use this, you simply transfer the wrapped token to the contract then call unwrap for the amount\\n// ONLY use this from another contract where you can do those in the same step, otherwise anyone can unwrap your tokens!\\n\\ncontract Unwrapper is IUnwrapper {\\n    IWeth9 public token;\\n\\n    // make sure token contract can send native token back\\n    receive() external payable override {}\\n\\n    constructor(address wrappedTokenAddress) {\\n        require(wrappedTokenAddress != address(0), \\\"bad address\\\");\\n        token = IWeth9(wrappedTokenAddress);\\n    }\\n\\n    /// @dev transfer token and then unwrap\\n    // Allows you to unwrap the token in cases where Istanbul causes gas issues\\n    function unwrap(uint256 amount) external override {\\n        token.withdraw(amount);\\n        (bool sent, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send unwrapped token\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x49b5adba05a8e2fd7c342d9f568b9b6350f820940876dafbd79457968fa2ffbe\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUnwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IWeth9.sol\\\";\\n\\n// Some native tokens can't be unwrapped by upgradeable contracts...\\n// https://forum.openzeppelin.com/t/msg-sender-transfer-runs-out-of-gas-on-a-payable-upgradeable-proxy-contract/3766\\n\\ninterface IUnwrapper {\\n    // make sure token contract can send native token back\\n    receive() external payable;\\n\\n    /// @dev transfer token and then unwrap\\n    // Allows you to unwrap the token in cases where Istanbul causes gas issues\\n    function unwrap(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x06daab430a7202ad470a3151c4ed4893dedc31465ecb61d32d10d7042abb3f8e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWeth9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IWeth9 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    /// @param wad The amount of wETH to withdraw into ETH\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x122212ebb8fe6d0190bf812f36fc33de4c1d0539a6d9ef33e34ad05724fa2056\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516102bc3803806102bc83398101604081905261002f9161009c565b6001600160a01b0381166100775760405162461bcd60e51b815260206004820152600b60248201526a626164206164647265737360a81b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100ca565b6000602082840312156100ad578081fd5b81516001600160a01b03811681146100c3578182fd5b9392505050565b6101e3806100d96000396000f3fe60806040526004361061002d5760003560e01c8063de0e9a3e14610039578063fc0c546a1461005b57600080fd5b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004610195565b610097565b005b34801561006757600080fd5b5060005461007b906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600054604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156100dd57600080fd5b505af11580156100f1573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114610137576040519150601f19603f3d011682016040523d82523d6000602084013e61013c565b606091505b50509050806101915760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f2073656e6420756e7772617070656420746f6b656e0000604482015260640160405180910390fd5b5050565b6000602082840312156101a6578081fd5b503591905056fea2646970667358221220087268b06cd64d5a49183e947c5704f74c4fa38ed4296e3a0f89c72ca7af5b8064736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c8063de0e9a3e14610039578063fc0c546a1461005b57600080fd5b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004610195565b610097565b005b34801561006757600080fd5b5060005461007b906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600054604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156100dd57600080fd5b505af11580156100f1573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114610137576040519150601f19603f3d011682016040523d82523d6000602084013e61013c565b606091505b50509050806101915760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f2073656e6420756e7772617070656420746f6b656e0000604482015260640160405180910390fd5b5050565b6000602082840312156101a6578081fd5b503591905056fea2646970667358221220087268b06cd64d5a49183e947c5704f74c4fa38ed4296e3a0f89c72ca7af5b8064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "unwrap(uint256)": {
        "details": "transfer token and then unwrap"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15227,
        "contract": "contracts/core/Unwrapper.sol:Unwrapper",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IWeth9)22613"
      }
    ],
    "types": {
      "t_contract(IWeth9)22613": {
        "encoding": "inplace",
        "label": "contract IWeth9",
        "numberOfBytes": "20"
      }
    }
  }
}