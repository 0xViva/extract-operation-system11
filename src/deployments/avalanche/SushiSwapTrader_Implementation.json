{
  "address": "0x09B24Bb7d7b49F7B32BDaa5E7e193e604B7A65fd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "ExecutedSwapExactInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "FailedSwapExactInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "slippageNumerator",
          "type": "uint24"
        }
      ],
      "name": "SushiSwapSlippageNumeratorUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biosBuyBack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageDenominator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddress_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "isPoolExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "slippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "updateSlippageNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51cca81d545e23a5da12ce0866206e09c1a049effd14611c51f2751621969a49",
  "receipt": {
    "to": null,
    "from": "0x58E63E0F585F130a3Bc12699aD1a6bDF30bD47a6",
    "contractAddress": "0x09B24Bb7d7b49F7B32BDaa5E7e193e604B7A65fd",
    "transactionIndex": 25,
    "gasUsed": "1913825",
    "logsBloom": "0x
    "blockHash": "0x815f5871f3058054d2707a345614809e48e207d11fd75238ce6a9a2403ed3cf0",
    "transactionHash": "0x51cca81d545e23a5da12ce0866206e09c1a049effd14611c51f2751621969a49",
    "logs": [],
    "blockNumber": 8926513,
    "cumulativeGasUsed": "5124649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3c329c0643231770f636e8187b4b428d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ExecutedSwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"FailedSwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"SushiSwapSlippageNumeratorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biosBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"isPoolExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"updateSlippageNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"biosBuyBack()\":{\"returns\":{\"_0\":\"Bool indicating whether the trade succeeded\"}},\"getAmountOut(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOut\":\"The estimated amount of tokenOut to receive\"}},\"getAmountOutMinimum(address,address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"amountOutMinimum\":\"The minimum amount of tokenOut to receive, factoring in allowable slippage\"}},\"getFactoryAddress()\":{\"returns\":{\"_0\":\"SushiSwap Factory address\"}},\"getSlippageDenominator()\":{\"returns\":{\"_0\":\"The slippage denominator\"}},\"getSlippageNumerator()\":{\"returns\":{\"_0\":\"The slippage numerator\"}},\"initialize(address[],address,address,address,uint24)\":{\"params\":{\"controllers_\":\"The addresses of the controlling contracts\",\"factoryAddress_\":\"The address of the SushiSwap factory contract\",\"moduleMap_\":\"The address of the module map contract\",\"slippageNumerator_\":\"The number divided by the slippage denominator to get the slippage percentage\",\"swapRouterAddress_\":\"The address of the SushiSwap swap router contract\"}},\"isPoolExist(address,address)\":{\"params\":{\"_tokenA\":\"The address of the first  token from the token pair\",\"_tokenB\":\"The address of the second token from the token pair return true if pool exist else overwise\"}},\"swapExactInput(address,address,address,uint256,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input to swap\",\"amountOutMin\":\"The minimum amount of tokenOut to receive from the swap\",\"recipient\":\"The address of the token out recipient\",\"tokenIn\":\"The address of the input token\",\"tokenOut\":\"The address of the output token\"},\"returns\":{\"_0\":\"bool Indicates whether the swap succeeded\"}},\"updateSlippageNumerator(uint24)\":{\"params\":{\"slippageNumerator_\":\"The number divided by the slippage denominator to get the slippage percentage\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"biosBuyBack()\":{\"notice\":\"Swaps all WETH held in this contract for BIOS and sends to the kernel\"}},\"notice\":\"Integrates 0x Nodes to SushiSwap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SushiSwapTrader.sol\":\"SushiSwapTrader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(\\n        address[] memory controllers_,\\n        address moduleMap_\\n    ) public initializer {\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender],\\n            \\\"Controlled::onlyController: Caller is not controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d695827316f9115bdeefad43183295fe65948c7ca5489ba6718fbbb01bfbcb8\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/core/SushiSwapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IDexTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapFactory.sol\\\";\\nimport \\\"../interfaces/ISushiSwapRouter.sol\\\";\\nimport \\\"../interfaces/ISushiSwapPair.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to SushiSwap\\ncontract SushiSwapTrader is\\n    Initializable,\\n    ModuleMapConsumer,\\n    Controlled,\\n    ISushiSwapTrader,\\n    IDexTrader\\n{\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n    uint24 private slippageNumerator;\\n    address private factoryAddress;\\n    address private swapRouterAddress;\\n\\n    event ExecutedSwapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 amountOut\\n    );\\n\\n    event FailedSwapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    );\\n\\n    event SushiSwapSlippageNumeratorUpdated(uint24 slippageNumerator);\\n\\n    /// @param controllers_ The addresses of the controlling contracts\\n    /// @param moduleMap_ The address of the module map contract\\n    /// @param factoryAddress_ The address of the SushiSwap factory contract\\n    /// @param swapRouterAddress_ The address of the SushiSwap swap router contract\\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n    function initialize(\\n        address[] memory controllers_,\\n        address moduleMap_,\\n        address factoryAddress_,\\n        address swapRouterAddress_,\\n        uint24 slippageNumerator_\\n    ) public initializer {\\n        require(\\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n            \\\"SushiSwapTrader::initialize: Slippage Numerator must be less than or equal to slippage denominator\\\"\\n        );\\n        __Controlled_init(controllers_, moduleMap_);\\n        factoryAddress = factoryAddress_;\\n        swapRouterAddress = swapRouterAddress_;\\n        slippageNumerator = slippageNumerator_;\\n    }\\n\\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n    function updateSlippageNumerator(uint24 slippageNumerator_)\\n        external\\n        override\\n        onlyManager\\n    {\\n        require(\\n            slippageNumerator_ != slippageNumerator,\\n            \\\"SushiSwapTrader::setSlippageNumerator: Slippage numerator must be set to a new value\\\"\\n        );\\n        require(\\n            slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n            \\\"SushiSwapTrader::setSlippageNumerator: Slippage Numerator must be less than or equal to slippage denominator\\\"\\n        );\\n\\n        slippageNumerator = slippageNumerator_;\\n\\n        emit SushiSwapSlippageNumeratorUpdated(slippageNumerator_);\\n    }\\n\\n    /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n    /// @return Bool indicating whether the trade succeeded\\n    function biosBuyBack() external override onlyController returns (bool) {\\n        IIntegrationMap integrationMap = IIntegrationMap(\\n            moduleMap.getModuleAddress(Modules.IntegrationMap)\\n        );\\n        address wethAddress = integrationMap.getWethTokenAddress();\\n        address biosAddress = integrationMap.getBiosTokenAddress();\\n        uint256 wethAmountIn = IERC20MetadataUpgradeable(wethAddress).balanceOf(\\n            address(this)\\n        );\\n\\n        uint256 biosAmountOutMin = getAmountOutMinimum(\\n            wethAddress,\\n            biosAddress,\\n            wethAmountIn\\n        );\\n\\n        return\\n            swapExactInput(\\n                wethAddress,\\n                integrationMap.getBiosTokenAddress(),\\n                moduleMap.getModuleAddress(Modules.Kernel),\\n                wethAmountIn,\\n                biosAmountOutMin\\n            );\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address of the token out recipient\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) public override(ISushiSwapTrader, IDexTrader) onlyController returns (bool) {\\n        require(\\n            IERC20MetadataUpgradeable(tokenIn).balanceOf(address(this)) >=\\n                amountIn,\\n            \\\"SushiSwapTrader::swapExactInput: Balance is less than trade amount\\\"\\n        );\\n\\n        address[] memory path = new address[](2);\\n        path[0] = tokenIn;\\n        path[1] = tokenOut;\\n        uint256 deadline = block.timestamp;\\n\\n        if (\\n            IERC20MetadataUpgradeable(tokenIn).allowance(\\n                address(this),\\n                swapRouterAddress\\n            ) == 0\\n        ) {\\n            IERC20MetadataUpgradeable(tokenIn).safeApprove(\\n                swapRouterAddress,\\n                type(uint256).max\\n            );\\n        }\\n\\n        uint256 tokenOutBalanceBefore = IERC20MetadataUpgradeable(tokenOut)\\n            .balanceOf(recipient);\\n\\n        try\\n            ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                recipient,\\n                deadline\\n            )\\n        {\\n            emit ExecutedSwapExactInput(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                amountOutMin,\\n                IERC20MetadataUpgradeable(tokenOut).balanceOf(recipient) -\\n                    tokenOutBalanceBefore\\n            );\\n            return true;\\n        } catch {\\n            emit FailedSwapExactInput(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                amountOutMin\\n            );\\n            return false;\\n        }\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) public view override returns (uint256 amountOutMinimum) {\\n        amountOutMinimum =\\n            (getAmountOut(tokenIn, tokenOut, amountIn) *\\n                (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\\n            SLIPPAGE_DENOMINATOR;\\n    }\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @return amountOut The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) public view override returns (uint256 amountOut) {\\n        require(\\n            amountIn > 0,\\n            \\\"SushiSwapTrader::getAmountOut: amountIn must be greater than zero\\\"\\n        );\\n        (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n            tokenIn,\\n            tokenOut\\n        );\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"SushiSwapTrader::getAmountOut: No liquidity in pool reserves\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return reserveA The reserve balance of tokenA in the pool\\n    /// @return reserveB The reserve balance of tokenB in the pool\\n    function getReserves(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (address token0, ) = getTokensSorted(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(\\n            getPairFor(tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return token0 The address of sorted token0\\n    /// @return token1 The address of sorted token1\\n    function getTokensSorted(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address token0, address token1)\\n    {\\n        require(\\n            tokenA != tokenB,\\n            \\\"SushiSwapTrader::sortToken: Identical token addresses\\\"\\n        );\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n\\n        require(\\n            token0 != address(0),\\n            \\\"SushiSwapTrader::sortToken: Zero address\\\"\\n        );\\n    }\\n\\n    /// @param _tokenA The address of the first  token from the token pair\\n    /// @param _tokenB The address of the second token from the token pair\\n    /// return true if pool exist else overwise\\n    function isPoolExist(address _tokenA, address _tokenB) external view override returns (bool) {\\n        (address token0, address token1) = getTokensSorted(_tokenA, _tokenB);\\n        return getPairFor(token0, token1) != address(0);\\n    }\\n\\n    /// @param tokenA The address of tokenA\\n    /// @param tokenB The address of tokenB\\n    /// @return pair The address of the SushiSwap pool contract\\n    function getPairFor(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\\n    }\\n\\n    /// @return SushiSwap Factory address\\n    function getFactoryAddress() external view returns (address) {\\n        return factoryAddress;\\n    }\\n\\n    /// @return The slippage numerator\\n    function getSlippageNumerator() external view returns (uint24) {\\n        return slippageNumerator;\\n    }\\n\\n    /// @return The slippage denominator\\n    function getSlippageDenominator() external pure returns (uint24) {\\n        return SLIPPAGE_DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x76b20292c67887c06f52843dcdf728432a98611fd82b025f4c72e2bcf4b299d5\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDexTrader.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface IDexTrader {\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _recipient The address of the token out recipient\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @param _amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin\\n    ) external returns (bool);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The estimated amount of tokenOut to receive\\n    function getAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256);\\n\\n    /// @param _tokenIn The address of the input token\\n    /// @param _tokenOut The address of the output token\\n    /// @param _amountIn The exact amount of the input to swap\\n    /// @return uint256 The minimum amount of tokenOut to receive, factoring in allowable slippage\\n    function getAmountOutMinimum(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256);\\n\\n    /// @param _tokenA The address of the first  token from the token pair\\n    /// @param _tokenB The address of the second token from the token pair\\n    /// return true if pool exist else overwise\\n    function isPoolExist(address _tokenA, address _tokenB) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x301fa1c4ff446ebdd8df904ef991ec13339fe282e5b1b0b3cfe0f4dea838c5ab\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name)\\n        external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(\\n        address tokenAddress,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(\\n        address tokenAddress,\\n        uint256 targetLiquidityRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(\\n        address tokenAddress,\\n        uint256 transferFeeKValueNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum()\\n        external\\n        view\\n        returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x4a57712bb45de506f0e58f5d04714af48bfd391d8ae251ab9f599b02a081f410\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IKernel {\\n    event Withdraw(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] tokenAmounts,\\n        uint256 ethAmount\\n    );\\n    event ClaimEthRewards(address indexed user, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x510aabf6a9a2a4f10896501ce5e850d4b92f52413f09dd1a7379368de07af7f0\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager // 11\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd39d052a3b0788f77f806435622f4cef19d8b3c0c734d44d8a3f3b85bd3b48a3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapFactory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0x4d05d9a629bde20a6cd70b8d1f43abe6409aedf7057eb40e31cab629af6b8bf1\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf635c095a6f32254bbba62fb6b1e40db3874008a345c304e99ab6145952c73c8\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n}\\n\",\"keccak256\":\"0x6a083b351fb57e04a1f00bd32d27f15a6987b7b9c8f341431c6de792d628ebf1\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/ISushiSwapTrader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface ISushiSwapTrader {\\n    /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n    function updateSlippageNumerator(uint24 slippageNumerator_) external;\\n\\n    /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n    /// @return Bool indicating whether the trade succeeded\\n    function biosBuyBack() external returns (bool);\\n\\n    /// @param tokenIn The address of the input token\\n    /// @param tokenOut The address of the output token\\n    /// @param recipient The address of the token out recipient\\n    /// @param amountIn The exact amount of the input to swap\\n    /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n    /// @return bool Indicates whether the swap succeeded\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb850a9987008bf01bc9072ea96368a6f537e47d1c56041a5c920ebc3fd791f46\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenSettings contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenSettings {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n}\\n\",\"keccak256\":\"0xa610706ba9d4134cf5afd5b23dc7db0aefff042c75c7d0aadd616e0bb50fc461\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c80630f0a1c6f146100bf578063257b3185146100ee5780632ef318c11461010357806349470541146101165780634aa0665214610139578063841bdb9e1461015a5780638f769ec91461016d57806398c671ce14610175578063a0cae8f614610188578063a7fc7a07146101a5578063a9c2e36c146101b8578063bbb37017146101d0578063ccbfc16c146101d9578063e94b0dd2146101ec575b600080fd5b6000546100d8906201000090046001600160a01b031681565b6040516100e59190611e44565b60405180910390f35b6101016100fc366004611c5b565b6101ff565b005b610101610111366004611dde565b610388565b610129610124366004611b7d565b61066d565b60405190151581526020016100e5565b61014c610147366004611bd7565b610b2e565b6040519081526020016100e5565b610129610168366004611b45565b610c91565b610129610cc5565b610101610183366004611c17565b611001565b60035462ffffff165b60405162ffffff90911681526020016100e5565b6101016101b3366004611b0d565b611108565b600354630100000090046001600160a01b03166100d8565b620f4240610191565b61014c6101e7366004611bd7565b611345565b6100d86101fa366004611df8565b61138b565b600054610100900460ff1661021a5760005460ff161561021e565b303b155b6102435760405162461bcd60e51b815260040161023a90611ecd565b60405180910390fd5b600054610100900460ff16158015610265576000805461ffff19166101011790555b600354620f424062ffffff90911611156103185760405162461bcd60e51b815260206004820152606260248201527f5375736869537761705472616465723a3a696e697469616c697a653a20536c6960448201527f7070616765204e756d657261746f72206d757374206265206c6573732074686160648201527f6e206f7220657175616c20746f20736c6970706167652064656e6f6d696e617460848201526137b960f11b60a482015260c40161023a565b6103228686611001565b60038054600480546001600160a01b0319166001600160a01b03878116919091179091556001600160b81b031990911663010000009187169190910262ffffff19161762ffffff84161790558015610380576000805461ff00191690555b505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916103bd9190600401611e72565b60206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190611b29565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016104389190611e44565b60206040518083038186803b15801561045057600080fd5b505afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190611d70565b6104eb5760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b606482015260840161023a565b60035462ffffff828116911614156105765760405162461bcd60e51b8152602060048201526054602482015260008051602061215483398151915260448201527f7261746f723a20536c697070616765206e756d657261746f72206d7573742062606482015273652073657420746f2061206e65772076616c756560601b608482015260a40161023a565b600354620f424062ffffff90911611156106215760405162461bcd60e51b815260206004820152606c602482015260008051602061215483398151915260448201527f7261746f723a20536c697070616765204e756d657261746f72206d757374206260648201527f65206c657373207468616e206f7220657175616c20746f20736c69707061676560848201526b103232b737b6b4b730ba37b960a11b60a482015260c40161023a565b6003805462ffffff191662ffffff83169081179091556040519081527f2946b3a1ef03d9a59c864dc0f1780b8ce4a27cdf227a341877e28742649efb909060200160405180910390a150565b3360009081526001602052604081205460ff1661069c5760405162461bcd60e51b815260040161023a90611f1b565b6040516370a0823160e01b815283906001600160a01b038816906370a08231906106ca903090600401611e44565b60206040518083038186803b1580156106e257600080fd5b505afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611e10565b10156107995760405162461bcd60e51b815260206004820152604260248201527f5375736869537761705472616465723a3a737761704578616374496e7075743a60448201527f2042616c616e6365206973206c657373207468616e20747261646520616d6f756064820152611b9d60f21b608482015260a40161023a565b60408051600280825260608201835260009260208301908036833701905050905086816000815181106107dc57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061081e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260048054604051636eb1769f60e11b815242938b81169363dd62ed3e93610862933093919091169101611e58565b60206040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190611e10565b6108d2576004546108d2906001600160a01b038a811691166000196113b5565b6040516370a0823160e01b81526000906001600160a01b038916906370a0823190610901908a90600401611e44565b60206040518083038186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190611e10565b600480546040516338ed173960e01b81529293506001600160a01b0316916338ed173991610989918a918a9189918e918a9101611f6f565b600060405180830381600087803b1580156109a357600080fd5b505af19250505080156109d857506040513d6000823e601f3d908101601f191682016040526109d59190810190611cde565b60015b610a3a57604080516001600160a01b03808c1682528a166020820152908101879052606081018690527fc6025cc9171961a5e71ebf48ad90ba0ec8fe882c4f0c422b084f1b82bbe767e29060800160405180910390a160009350505050610b25565b507fbaaf81d8ac8c3accbbfd1f5837a8785ccae1884dcd7f2d30ca408cc7b926af9989898888858d6001600160a01b03166370a082318e6040518263ffffffff1660e01b8152600401610a8d9190611e44565b60206040518083038186803b158015610aa557600080fd5b505afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add9190611e10565b610ae791906120ad565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00160405180910390a1600193505050505b95945050505050565b6000808211610baf5760405162461bcd60e51b815260206004820152604160248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a206160448201527f6d6f756e74496e206d7573742062652067726561746572207468616e207a65726064820152606f60f81b608482015260a40161023a565b600080610bbc86866114fa565b91509150600082118015610bd05750600081115b610c415760405162461bcd60e51b815260206004820152603c60248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a204e60448201527b6f206c697175696469747920696e20706f6f6c20726573657276657360201b606482015260840161023a565b6000610c4f856103e561206a565b90506000610c5d838361206a565b9050600082610c6e866103e861206a565b610c789190612032565b9050610c84818361204a565b9998505050505050505050565b6000806000610ca085856115d1565b90925090506000610cb183836116ea565b6001600160a01b0316141595945050505050565b3360009081526001602052604081205460ff16610cf45760405162461bcd60e51b815260040161023a90611f1b565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610d2b90600390600401611e72565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190611b29565b90506000816001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df09190611b29565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190611b29565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e959190611e44565b60206040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190611e10565b90506000610ef4848484611345565b9050610ff784866001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190611b29565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610fa09190600401611e72565b60206040518083038186803b158015610fb857600080fd5b505afa158015610fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff09190611b29565b858561066d565b9550505050505090565b600054610100900460ff1661101c5760005460ff1615611020565b303b155b61103c5760405162461bcd60e51b815260040161023a90611ecd565b600054610100900460ff1615801561105e576000805461ffff19166101011790555b60005b83518110156110d357600180600086848151811061108f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110cb816120f4565b915050611061565b5082516110e79060029060208601906119ec565b506110f18261177b565b8015611103576000805461ff00191690555b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161113d9190600401611e72565b60206040518083038186803b15801561115557600080fd5b505afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190611b29565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016111b89190611e44565b60206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190611d70565b6112675760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161023a565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b6002548110156112ef57600281815481106112b957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156112dd57600191505b806112e7816120f4565b91505061128e565b508061134157600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600354600090620f42409061135f9062ffffff1682612089565b62ffffff1661136f868686610b2e565b611379919061206a565b611383919061204a565b949350505050565b6002818154811061139b57600080fd5b6000918252602090912001546001600160a01b0316905081565b80158061143d5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906113eb9030908690600401611e58565b60206040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190611e10565b155b6114a85760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161023a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261110390849061180f565b600080600061150985856115d1565b50905060008061151987876116ea565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561155157600080fd5b505afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190611d90565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b0316146115c05780826115c3565b81815b909890975095505050505050565b600080826001600160a01b0316846001600160a01b031614156116545760405162461bcd60e51b815260206004820152603560248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a204964656e604482015274746963616c20746f6b656e2061646472657373657360581b606482015260840161023a565b826001600160a01b0316846001600160a01b031610611674578284611677565b83835b90925090506001600160a01b0382166116e35760405162461bcd60e51b815260206004820152602860248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a205a65726f604482015267206164647265737360c01b606482015260840161023a565b9250929050565b60035460405163e6a4390560e01b8152600091630100000090046001600160a01b03169063e6a43905906117249086908690600401611e58565b60206040518083038186803b15801561173c57600080fd5b505afa158015611750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117749190611b29565b9392505050565b600054610100900460ff166117965760005460ff161561179a565b303b155b6117b65760405162461bcd60e51b815260040161023a90611ecd565b600054610100900460ff161580156117d8576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015611341576000805461ff00191690555050565b6000611864826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118e19092919063ffffffff16565b80519091501561110357808060200190518101906118829190611d70565b6111035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161023a565b6060611383848460008585843b61193a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161023a565b600080866001600160a01b031685876040516119569190611e28565b60006040518083038185875af1925050503d8060008114611993576040519150601f19603f3d011682016040523d82523d6000602084013e611998565b606091505b50915091506119a88282866119b3565b979650505050505050565b606083156119c2575081611774565b8251156119d25782518084602001fd5b8160405162461bcd60e51b815260040161023a9190611e9a565b828054828255906000526020600020908101928215611a41579160200282015b82811115611a4157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a0c565b50611a4d929150611a51565b5090565b5b80821115611a4d5760008155600101611a52565b600082601f830112611a76578081fd5b81356020611a8b611a868361200f565b611fdf565b80838252828201915082860187848660051b8901011115611aaa578586fd5b855b85811015611ad1578135611abf8161213b565b84529284019290840190600101611aac565b5090979650505050505050565b80516001600160701b0381168114611af557600080fd5b919050565b803562ffffff81168114611af557600080fd5b600060208284031215611b1e578081fd5b81356117748161213b565b600060208284031215611b3a578081fd5b81516117748161213b565b60008060408385031215611b57578081fd5b8235611b628161213b565b91506020830135611b728161213b565b809150509250929050565b600080600080600060a08688031215611b94578081fd5b8535611b9f8161213b565b94506020860135611baf8161213b565b93506040860135611bbf8161213b565b94979396509394606081013594506080013592915050565b600080600060608486031215611beb578283fd5b8335611bf68161213b565b92506020840135611c068161213b565b929592945050506040919091013590565b60008060408385031215611c29578182fd5b82356001600160401b03811115611c3e578283fd5b611c4a85828601611a66565b9250506020830135611b728161213b565b600080600080600060a08688031215611c72578081fd5b85356001600160401b03811115611c87578182fd5b611c9388828901611a66565b9550506020860135611ca48161213b565b93506040860135611cb48161213b565b92506060860135611cc48161213b565b9150611cd260808701611afa565b90509295509295909350565b60006020808385031215611cf0578182fd5b82516001600160401b03811115611d05578283fd5b8301601f81018513611d15578283fd5b8051611d23611a868261200f565b80828252848201915084840188868560051b8701011115611d42578687fd5b8694505b83851015611d64578051835260019490940193918501918501611d46565b50979650505050505050565b600060208284031215611d81578081fd5b81518015158114611774578182fd5b600080600060608486031215611da4578283fd5b611dad84611ade565b9250611dbb60208501611ade565b9150604084015163ffffffff81168114611dd3578182fd5b809150509250925092565b600060208284031215611def578081fd5b61177482611afa565b600060208284031215611e09578081fd5b5035919050565b600060208284031215611e21578081fd5b5051919050565b60008251611e3a8184602087016120c4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60208101600c8310611e9457634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152611eb98160408501602087016120c4565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611fbe5784516001600160a01b031683529383019391830191600101611f99565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f191681016001600160401b038111828210171561200757612007612125565b604052919050565b60006001600160401b0382111561202857612028612125565b5060051b60200190565b600082198211156120455761204561210f565b500190565b60008261206557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156120845761208461210f565b500290565b600062ffffff838116908316818110156120a5576120a561210f565b039392505050565b6000828210156120bf576120bf61210f565b500390565b60005b838110156120df5781810151838201526020016120c7565b838111156120ee576000848401525b50505050565b60006000198214156121085761210861210f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461215057600080fd5b5056fe5375736869537761705472616465723a3a736574536c6970706167654e756d65a2646970667358221220b1d37ecf95526485f3310e34e6d293a07454dcb7ddacf91c2b505439a97ae5b764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ba5760003560e01c80630f0a1c6f146100bf578063257b3185146100ee5780632ef318c11461010357806349470541146101165780634aa0665214610139578063841bdb9e1461015a5780638f769ec91461016d57806398c671ce14610175578063a0cae8f614610188578063a7fc7a07146101a5578063a9c2e36c146101b8578063bbb37017146101d0578063ccbfc16c146101d9578063e94b0dd2146101ec575b600080fd5b6000546100d8906201000090046001600160a01b031681565b6040516100e59190611e44565b60405180910390f35b6101016100fc366004611c5b565b6101ff565b005b610101610111366004611dde565b610388565b610129610124366004611b7d565b61066d565b60405190151581526020016100e5565b61014c610147366004611bd7565b610b2e565b6040519081526020016100e5565b610129610168366004611b45565b610c91565b610129610cc5565b610101610183366004611c17565b611001565b60035462ffffff165b60405162ffffff90911681526020016100e5565b6101016101b3366004611b0d565b611108565b600354630100000090046001600160a01b03166100d8565b620f4240610191565b61014c6101e7366004611bd7565b611345565b6100d86101fa366004611df8565b61138b565b600054610100900460ff1661021a5760005460ff161561021e565b303b155b6102435760405162461bcd60e51b815260040161023a90611ecd565b60405180910390fd5b600054610100900460ff16158015610265576000805461ffff19166101011790555b600354620f424062ffffff90911611156103185760405162461bcd60e51b815260206004820152606260248201527f5375736869537761705472616465723a3a696e697469616c697a653a20536c6960448201527f7070616765204e756d657261746f72206d757374206265206c6573732074686160648201527f6e206f7220657175616c20746f20736c6970706167652064656e6f6d696e617460848201526137b960f11b60a482015260c40161023a565b6103228686611001565b60038054600480546001600160a01b0319166001600160a01b03878116919091179091556001600160b81b031990911663010000009187169190910262ffffff19161762ffffff84161790558015610380576000805461ff00191690555b505050505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916103bd9190600401611e72565b60206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190611b29565b6001600160a01b031663f3ae2415336040518263ffffffff1660e01b81526004016104389190611e44565b60206040518083038186803b15801561045057600080fd5b505afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190611d70565b6104eb5760405162461bcd60e51b815260206004820152602e60248201527f436f6e74726f6c6c65643a3a6f6e6c794d616e616765723a2043616c6c65722060448201526d34b9903737ba1036b0b730b3b2b960911b606482015260840161023a565b60035462ffffff828116911614156105765760405162461bcd60e51b8152602060048201526054602482015260008051602061215483398151915260448201527f7261746f723a20536c697070616765206e756d657261746f72206d7573742062606482015273652073657420746f2061206e65772076616c756560601b608482015260a40161023a565b600354620f424062ffffff90911611156106215760405162461bcd60e51b815260206004820152606c602482015260008051602061215483398151915260448201527f7261746f723a20536c697070616765204e756d657261746f72206d757374206260648201527f65206c657373207468616e206f7220657175616c20746f20736c69707061676560848201526b103232b737b6b4b730ba37b960a11b60a482015260c40161023a565b6003805462ffffff191662ffffff83169081179091556040519081527f2946b3a1ef03d9a59c864dc0f1780b8ce4a27cdf227a341877e28742649efb909060200160405180910390a150565b3360009081526001602052604081205460ff1661069c5760405162461bcd60e51b815260040161023a90611f1b565b6040516370a0823160e01b815283906001600160a01b038816906370a08231906106ca903090600401611e44565b60206040518083038186803b1580156106e257600080fd5b505afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611e10565b10156107995760405162461bcd60e51b815260206004820152604260248201527f5375736869537761705472616465723a3a737761704578616374496e7075743a60448201527f2042616c616e6365206973206c657373207468616e20747261646520616d6f756064820152611b9d60f21b608482015260a40161023a565b60408051600280825260608201835260009260208301908036833701905050905086816000815181106107dc57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061081e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260048054604051636eb1769f60e11b815242938b81169363dd62ed3e93610862933093919091169101611e58565b60206040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190611e10565b6108d2576004546108d2906001600160a01b038a811691166000196113b5565b6040516370a0823160e01b81526000906001600160a01b038916906370a0823190610901908a90600401611e44565b60206040518083038186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190611e10565b600480546040516338ed173960e01b81529293506001600160a01b0316916338ed173991610989918a918a9189918e918a9101611f6f565b600060405180830381600087803b1580156109a357600080fd5b505af19250505080156109d857506040513d6000823e601f3d908101601f191682016040526109d59190810190611cde565b60015b610a3a57604080516001600160a01b03808c1682528a166020820152908101879052606081018690527fc6025cc9171961a5e71ebf48ad90ba0ec8fe882c4f0c422b084f1b82bbe767e29060800160405180910390a160009350505050610b25565b507fbaaf81d8ac8c3accbbfd1f5837a8785ccae1884dcd7f2d30ca408cc7b926af9989898888858d6001600160a01b03166370a082318e6040518263ffffffff1660e01b8152600401610a8d9190611e44565b60206040518083038186803b158015610aa557600080fd5b505afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add9190611e10565b610ae791906120ad565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00160405180910390a1600193505050505b95945050505050565b6000808211610baf5760405162461bcd60e51b815260206004820152604160248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a206160448201527f6d6f756e74496e206d7573742062652067726561746572207468616e207a65726064820152606f60f81b608482015260a40161023a565b600080610bbc86866114fa565b91509150600082118015610bd05750600081115b610c415760405162461bcd60e51b815260206004820152603c60248201527f5375736869537761705472616465723a3a676574416d6f756e744f75743a204e60448201527b6f206c697175696469747920696e20706f6f6c20726573657276657360201b606482015260840161023a565b6000610c4f856103e561206a565b90506000610c5d838361206a565b9050600082610c6e866103e861206a565b610c789190612032565b9050610c84818361204a565b9998505050505050505050565b6000806000610ca085856115d1565b90925090506000610cb183836116ea565b6001600160a01b0316141595945050505050565b3360009081526001602052604081205460ff16610cf45760405162461bcd60e51b815260040161023a90611f1b565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031690636f8c3f8a90610d2b90600390600401611e72565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190611b29565b90506000816001600160a01b0316638b9c94896040518163ffffffff1660e01b815260040160206040518083038186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df09190611b29565b90506000826001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190611b29565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e959190611e44565b60206040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190611e10565b90506000610ef4848484611345565b9050610ff784866001600160a01b03166344fc9b566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190611b29565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a91610fa09190600401611e72565b60206040518083038186803b158015610fb857600080fd5b505afa158015610fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff09190611b29565b858561066d565b9550505050505090565b600054610100900460ff1661101c5760005460ff1615611020565b303b155b61103c5760405162461bcd60e51b815260040161023a90611ecd565b600054610100900460ff1615801561105e576000805461ffff19166101011790555b60005b83518110156110d357600180600086848151811061108f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110cb816120f4565b915050611061565b5082516110e79060029060208601906119ec565b506110f18261177b565b8015611103576000805461ff00191690555b505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a9161113d9190600401611e72565b60206040518083038186803b15801561115557600080fd5b505afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190611b29565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b81526004016111b89190611e44565b60206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190611d70565b6112675760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b606482015260840161023a565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b6002548110156112ef57600281815481106112b957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156112dd57600191505b806112e7816120f4565b91505061128e565b508061134157600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b600354600090620f42409061135f9062ffffff1682612089565b62ffffff1661136f868686610b2e565b611379919061206a565b611383919061204a565b949350505050565b6002818154811061139b57600080fd5b6000918252602090912001546001600160a01b0316905081565b80158061143d5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906113eb9030908690600401611e58565b60206040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190611e10565b155b6114a85760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161023a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261110390849061180f565b600080600061150985856115d1565b50905060008061151987876116ea565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561155157600080fd5b505afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190611d90565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b0316146115c05780826115c3565b81815b909890975095505050505050565b600080826001600160a01b0316846001600160a01b031614156116545760405162461bcd60e51b815260206004820152603560248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a204964656e604482015274746963616c20746f6b656e2061646472657373657360581b606482015260840161023a565b826001600160a01b0316846001600160a01b031610611674578284611677565b83835b90925090506001600160a01b0382166116e35760405162461bcd60e51b815260206004820152602860248201527f5375736869537761705472616465723a3a736f7274546f6b656e3a205a65726f604482015267206164647265737360c01b606482015260840161023a565b9250929050565b60035460405163e6a4390560e01b8152600091630100000090046001600160a01b03169063e6a43905906117249086908690600401611e58565b60206040518083038186803b15801561173c57600080fd5b505afa158015611750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117749190611b29565b9392505050565b600054610100900460ff166117965760005460ff161561179a565b303b155b6117b65760405162461bcd60e51b815260040161023a90611ecd565b600054610100900460ff161580156117d8576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015611341576000805461ff00191690555050565b6000611864826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118e19092919063ffffffff16565b80519091501561110357808060200190518101906118829190611d70565b6111035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161023a565b6060611383848460008585843b61193a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161023a565b600080866001600160a01b031685876040516119569190611e28565b60006040518083038185875af1925050503d8060008114611993576040519150601f19603f3d011682016040523d82523d6000602084013e611998565b606091505b50915091506119a88282866119b3565b979650505050505050565b606083156119c2575081611774565b8251156119d25782518084602001fd5b8160405162461bcd60e51b815260040161023a9190611e9a565b828054828255906000526020600020908101928215611a41579160200282015b82811115611a4157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a0c565b50611a4d929150611a51565b5090565b5b80821115611a4d5760008155600101611a52565b600082601f830112611a76578081fd5b81356020611a8b611a868361200f565b611fdf565b80838252828201915082860187848660051b8901011115611aaa578586fd5b855b85811015611ad1578135611abf8161213b565b84529284019290840190600101611aac565b5090979650505050505050565b80516001600160701b0381168114611af557600080fd5b919050565b803562ffffff81168114611af557600080fd5b600060208284031215611b1e578081fd5b81356117748161213b565b600060208284031215611b3a578081fd5b81516117748161213b565b60008060408385031215611b57578081fd5b8235611b628161213b565b91506020830135611b728161213b565b809150509250929050565b600080600080600060a08688031215611b94578081fd5b8535611b9f8161213b565b94506020860135611baf8161213b565b93506040860135611bbf8161213b565b94979396509394606081013594506080013592915050565b600080600060608486031215611beb578283fd5b8335611bf68161213b565b92506020840135611c068161213b565b929592945050506040919091013590565b60008060408385031215611c29578182fd5b82356001600160401b03811115611c3e578283fd5b611c4a85828601611a66565b9250506020830135611b728161213b565b600080600080600060a08688031215611c72578081fd5b85356001600160401b03811115611c87578182fd5b611c9388828901611a66565b9550506020860135611ca48161213b565b93506040860135611cb48161213b565b92506060860135611cc48161213b565b9150611cd260808701611afa565b90509295509295909350565b60006020808385031215611cf0578182fd5b82516001600160401b03811115611d05578283fd5b8301601f81018513611d15578283fd5b8051611d23611a868261200f565b80828252848201915084840188868560051b8701011115611d42578687fd5b8694505b83851015611d64578051835260019490940193918501918501611d46565b50979650505050505050565b600060208284031215611d81578081fd5b81518015158114611774578182fd5b600080600060608486031215611da4578283fd5b611dad84611ade565b9250611dbb60208501611ade565b9150604084015163ffffffff81168114611dd3578182fd5b809150509250925092565b600060208284031215611def578081fd5b61177482611afa565b600060208284031215611e09578081fd5b5035919050565b600060208284031215611e21578081fd5b5051919050565b60008251611e3a8184602087016120c4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60208101600c8310611e9457634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260008251806020840152611eb98160408501602087016120c4565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611fbe5784516001600160a01b031683529383019391830191600101611f99565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f191681016001600160401b038111828210171561200757612007612125565b604052919050565b60006001600160401b0382111561202857612028612125565b5060051b60200190565b600082198211156120455761204561210f565b500190565b60008261206557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156120845761208461210f565b500290565b600062ffffff838116908316818110156120a5576120a561210f565b039392505050565b6000828210156120bf576120bf61210f565b500390565b60005b838110156120df5781810151838201526020016120c7565b838111156120ee576000848401525b50505050565b60006000198214156121085761210861210f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461215057600080fd5b5056fe5375736869537761705472616465723a3a736574536c6970706167654e756d65a2646970667358221220b1d37ecf95526485f3310e34e6d293a07454dcb7ddacf91c2b505439a97ae5b764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "biosBuyBack()": {
        "returns": {
          "_0": "Bool indicating whether the trade succeeded"
        }
      },
      "getAmountOut(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOut": "The estimated amount of tokenOut to receive"
        }
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "amountOutMinimum": "The minimum amount of tokenOut to receive, factoring in allowable slippage"
        }
      },
      "getFactoryAddress()": {
        "returns": {
          "_0": "SushiSwap Factory address"
        }
      },
      "getSlippageDenominator()": {
        "returns": {
          "_0": "The slippage denominator"
        }
      },
      "getSlippageNumerator()": {
        "returns": {
          "_0": "The slippage numerator"
        }
      },
      "initialize(address[],address,address,address,uint24)": {
        "params": {
          "controllers_": "The addresses of the controlling contracts",
          "factoryAddress_": "The address of the SushiSwap factory contract",
          "moduleMap_": "The address of the module map contract",
          "slippageNumerator_": "The number divided by the slippage denominator to get the slippage percentage",
          "swapRouterAddress_": "The address of the SushiSwap swap router contract"
        }
      },
      "isPoolExist(address,address)": {
        "params": {
          "_tokenA": "The address of the first  token from the token pair",
          "_tokenB": "The address of the second token from the token pair return true if pool exist else overwise"
        }
      },
      "swapExactInput(address,address,address,uint256,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input to swap",
          "amountOutMin": "The minimum amount of tokenOut to receive from the swap",
          "recipient": "The address of the token out recipient",
          "tokenIn": "The address of the input token",
          "tokenOut": "The address of the output token"
        },
        "returns": {
          "_0": "bool Indicates whether the swap succeeded"
        }
      },
      "updateSlippageNumerator(uint24)": {
        "params": {
          "slippageNumerator_": "The number divided by the slippage denominator to get the slippage percentage"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "biosBuyBack()": {
        "notice": "Swaps all WETH held in this contract for BIOS and sends to the kernel"
      }
    },
    "notice": "Integrates 0x Nodes to SushiSwap",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 723,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 726,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9534,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)19218"
      },
      {
        "astId": 4667,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4670,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11478,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "slippageNumerator",
        "offset": 0,
        "slot": "3",
        "type": "t_uint24"
      },
      {
        "astId": 11480,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "factoryAddress",
        "offset": 3,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11482,
        "contract": "contracts/core/SushiSwapTrader.sol:SushiSwapTrader",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)19218": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}