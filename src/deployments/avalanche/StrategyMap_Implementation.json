{
  "address": "0x4A2B4c0fBf56b161225a66C32801E9E3137F2B8a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "DeleteStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NewStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "UpdateName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "UpdateStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN_WEIGHT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "__Controlled_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "clearClosablePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "closePositionsForWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "integration",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseDeployAmountChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUserPositions.TokenMovement[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "decreaseStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "deleteStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getClosablePositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStrategyMap.ClosablePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "integration",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "poolID",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDeployAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getMultipleStrategies",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "integration",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "ammPoolID",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Integration[]",
              "name": "integrations",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "integrationPairIdx",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "weight",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyMap.StrategySummary[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getStrategy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "integration",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "ammPoolID",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Integration[]",
              "name": "integrations",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "integrationPairIdx",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "weight",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStrategyMap.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyMap.StrategySummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_strategies",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getStrategyBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strategyID",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IStrategyMap.GeneralBalance[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyMap.StrategyBalance[]",
          "name": "strategyBalances",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStrategyMap.GeneralBalance[]",
          "name": "generalBalances",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getStrategyTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategy",
          "type": "uint256"
        }
      ],
      "name": "getStrategyTokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUserPositions.TokenMovement[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "increaseStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUserPositions.TokenMovement[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "increaseTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "controllers_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "moduleMap_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleMap",
      "outputs": [
        {
          "internalType": "contract IModuleMap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "updateName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "integration",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "ammPoolID",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Integration[]",
          "name": "integrations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "integrationPairIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "weight",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStrategyMap.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "updateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb21b2500011cc4fd218452d3d8d8e70441a0d57fba004a22dcf77e1ced1d2211",
  "receipt": {
    "to": null,
    "from": "0x58E63E0F585F130a3Bc12699aD1a6bDF30bD47a6",
    "contractAddress": "0x4A2B4c0fBf56b161225a66C32801E9E3137F2B8a",
    "transactionIndex": 7,
    "gasUsed": "4030567",
    "logsBloom": "0x
    "blockHash": "0x51bfaf90d30205295143a8e0590b4296638c9af81e26c11a343c0b6e55d0006d",
    "transactionHash": "0xb21b2500011cc4fd218452d3d8d8e70441a0d57fba004a22dcf77e1ced1d2211",
    "logs": [],
    "blockNumber": 8927252,
    "cumulativeGasUsed": "5114807",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3c329c0643231770f636e8187b4b428d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeleteStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UpdateName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"UpdateStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"clearClosablePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"closePositionsForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseDeployAmountChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserPositions.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"decreaseStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deleteStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClosablePositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.ClosablePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDeployAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getMultipleStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategySummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategySummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_strategies\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getStrategyBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.GeneralBalance[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategyBalance[]\",\"name\":\"strategyBalances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.GeneralBalance[]\",\"name\":\"generalBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStrategyTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategy\",\"type\":\"uint256\"}],\"name\":\"getStrategyTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserPositions.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"increaseStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserPositions.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"increaseTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStrategy(string,(address,uint32)[],(uint256,address,uint32)[])\":{\"params\":{\"integrations\":\"the integrations and weights that form the strategy\",\"name\":\"the name of the new strategy\"}},\"clearClosablePositions(address[])\":{\"params\":{\"tokens\":\"The list of tokens to clear\"}},\"closePositionsForWithdrawal(address,uint256)\":{\"params\":{\"amount\":\"the amount to source\",\"token\":\"the token to source\"}},\"decreaseDeployAmountChange(address,uint32,address,uint256)\":{\"params\":{\"amount\":\"the amount to reduce the vector by\",\"integration\":\"the integration that was changed\",\"poolID\":\"the pool within the integration that handled the tokens\",\"token\":\"the token to decrease for\"}},\"decreaseStrategy(uint256,(address,uint256)[])\":{\"params\":{\"id\":\"the strategy to withdraw assets from\",\"tokens\":\"details of the tokens being deposited\"}},\"deleteStrategy(uint256)\":{\"details\":\"This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\",\"params\":{\"id\":\"the strategy to delete\"}},\"getDeployAmount(address,uint32,address)\":{\"params\":{\"integration\":\"the integration to deploy to\",\"poolID\":\"the pool within the integration that should receive the tokens\",\"token\":\"the token to be deployed\"},\"returns\":{\"_0\":\"the pending deploy amount\"}},\"getMultipleStrategies(uint256[])\":{\"params\":{\"ids\":\"The ids of the strategies to return.\"}},\"getStrategy(uint256)\":{\"params\":{\"id\":\"the strategy to return\"}},\"getStrategyBalances(uint256[],address[])\":{\"params\":{\"_strategies\":\"The strategies to retrieve balances for\",\"_tokens\":\"The tokens to retrieve\"}},\"getStrategyTokenBalance(uint256,address)\":{\"params\":{\"id\":\"the strategy id to check\",\"token\":\"The token to retrieve the balance for\"},\"returns\":{\"amount\":\" the amount of token that is invested in the strategy\"}},\"getStrategyTokenLength(uint256)\":{\"params\":{\"strategy\":\"the strategy to look up\"},\"returns\":{\"_0\":\"the length\"}},\"getTokenTotalBalance(address)\":{\"params\":{\"token\":\"the token to fetch the balance for\"},\"returns\":{\"amount\":\" the amount of the token currently invested\"}},\"increaseStrategy(uint256,(address,uint256)[])\":{\"params\":{\"id\":\"the strategy to deposit into\",\"tokens\":\"the tokens to deposit\"}},\"increaseTokenBalance(uint256,(address,uint256)[])\":{\"params\":{\"id\":\"The strategy id\",\"tokens\":\"the tokens and amounts \"}},\"updateName(uint256,string)\":{\"params\":{\"name\":\"the new name\"}},\"updateStrategy(uint256,(address,uint32)[],(uint256,address,uint32)[])\":{\"params\":{\"id\":\"the strategy to update\",\"integrations\":\"the new integrations that will be used\",\"tokens\":\"the tokens accepted for new entries\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStrategy(string,(address,uint32)[],(uint256,address,uint32)[])\":{\"notice\":\"Adds a new strategy to the list of available strategies\"},\"clearClosablePositions(address[])\":{\"notice\":\"Clears the list of positions that can be closed to supply a token\"},\"closePositionsForWithdrawal(address,uint256)\":{\"notice\":\"Closes enough positions to provide a requested amount of a token\"},\"decreaseDeployAmountChange(address,uint32,address,uint256)\":{\"notice\":\"Decreases the deployable amount after a deployment/withdrawal\"},\"decreaseStrategy(uint256,(address,uint256)[])\":{\"notice\":\"Decreases the amount of a set of tokens invested in a strategy\"},\"deleteStrategy(uint256)\":{\"notice\":\"Deletes a strategy\"},\"getDeployAmount(address,uint32,address)\":{\"notice\":\"Returns the current amount awaiting deployment\"},\"getMultipleStrategies(uint256[])\":{\"notice\":\"Returns 1 or more strategies in a single call.\"},\"getStrategy(uint256)\":{\"notice\":\"Getter function to return the nested arrays as well as the name\"},\"getStrategyBalances(uint256[],address[])\":{\"notice\":\"Returns balances per strategy, and total invested balances\"},\"getStrategyTokenBalance(uint256,address)\":{\"notice\":\"Returns the amount of a given token currently invested in a strategy\"},\"getStrategyTokenLength(uint256)\":{\"notice\":\"returns the length of the tokens array in a strategy\"},\"getTokenTotalBalance(address)\":{\"notice\":\"Returns the total amount of a token invested across all strategies\"},\"idCounter()\":{\"notice\":\"autogenerated getter definition\"},\"increaseStrategy(uint256,(address,uint256)[])\":{\"notice\":\"Increases the amount of a set of tokens in a strategy\"},\"increaseTokenBalance(uint256,(address,uint256)[])\":{\"notice\":\"Increases strategy balances without increasing the deploy amount\"},\"updateName(uint256,string)\":{\"notice\":\"Updates the strategy name\"},\"updateStrategy(uint256,(address,uint32)[],(uint256,address,uint32)[])\":{\"notice\":\"Updates a strategy's integrations and tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StrategyMap.sol\":\"StrategyMap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/core/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(\\n        address[] memory controllers_,\\n        address moduleMap_\\n    ) public initializer {\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender],\\n            \\\"Controlled::onlyController: Caller is not controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d695827316f9115bdeefad43183295fe65948c7ca5489ba6718fbbb01bfbcb8\",\"license\":\"GPL-2.0\"},\"contracts/core/ModuleMapConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\",\"keccak256\":\"0xb229e8c09ab0a6b5f517c3537adfe08d26a46fc3ea46031ace67a00fb1900840\",\"license\":\"GPL-2.0\"},\"contracts/core/StrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"../interfaces/IAMMIntegration.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IYieldManager.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract StrategyMap is\\n    Initializable,\\n    ModuleMapConsumer,\\n    Controlled,\\n    IStrategyMap\\n{\\n    // #### Constants\\n    uint32 public constant TOKEN_WEIGHT = 100000;\\n\\n    // #### Global State\\n\\n    // Strategy id => Strategy\\n    mapping(uint256 => Strategy) internal strategies;\\n\\n    // Token => total amount in all strategies\\n    mapping(address => uint256) internal tokenBalances;\\n\\n    // Strategy => token => balance\\n    mapping(uint256 => mapping(address => uint256))\\n        internal strategyTokenBalances;\\n\\n    // Integration => pool id => token => amount to deploy\\n    mapping(address => mapping(uint32 => mapping(address => int256)))\\n        internal deployAmount;\\n\\n    // Token => {integration, pool, amount}[]\\n    mapping(address => ClosablePosition[]) private _closablePositions;\\n\\n    uint256 public override idCounter;\\n\\n    // Used for strategy verification. Contents are always deleted at the end of a tx to reduce gas hit.\\n    mapping(address => uint256) internal tokenWeights;\\n\\n    // #### Functions\\n\\n    function initialize(address[] memory controllers_, address moduleMap_)\\n        public\\n        initializer\\n    {\\n        __Controlled_init(controllers_, moduleMap_);\\n    }\\n\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens\\n    ) external override onlyController {\\n        require(integrations.length > 0, \\\"integrations missing\\\");\\n        require(tokens.length > 0, \\\"tokens missing\\\");\\n        require(bytes(name).length > 0, \\\"must have a name\\\");\\n\\n        idCounter++;\\n        uint256 strategyID = idCounter;\\n        _verifyAndSetStrategy(strategyID, name, integrations, tokens);\\n\\n        // Emit event\\n        emit NewStrategy(strategyID, integrations, tokens, name);\\n    }\\n\\n    function _verifyAndSetStrategy(\\n        uint256 strategyID,\\n        string memory name,\\n        Integration[] memory integrations,\\n        Token[] memory tokens\\n    ) internal {\\n        for (uint256 i = 0; i < integrations.length; i++) {\\n            require(\\n                integrations[i].integration != address(0),\\n                \\\"bad integration\\\"\\n            );\\n        }\\n\\n        address[] memory uniqueTokens = new address[](tokens.length);\\n        uint256 idx = 0;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(\\n                tokens[i].integrationPairIdx < integrations.length,\\n                \\\"integration idx out of bounds\\\"\\n            );\\n            require(tokens[i].token != address(0), \\\"bad token\\\");\\n\\n            if (tokenWeights[tokens[i].token] == 0) {\\n                uniqueTokens[idx] = tokens[i].token;\\n                idx++;\\n            }\\n            tokenWeights[tokens[i].token] += tokens[i].weight;\\n        }\\n\\n        // Verify weights\\n        for (uint256 i = 0; i < idx; i++) {\\n            require(\\n                tokenWeights[uniqueTokens[i]] == TOKEN_WEIGHT,\\n                \\\"invalid token weight\\\"\\n            );\\n            strategies[strategyID].availableTokens[uniqueTokens[i]] = true;\\n            delete tokenWeights[uniqueTokens[i]];\\n        }\\n\\n        strategies[strategyID].name = name;\\n\\n        // Can't copy a memory array directly to storage yet, so we build it manually.\\n        for (uint256 i = 0; i < integrations.length; i++) {\\n            strategies[strategyID].integrations.push(integrations[i]);\\n        }\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            strategies[strategyID].tokens.push(tokens[i]);\\n        }\\n    }\\n\\n    function updateName(uint256 id, string calldata name)\\n        external\\n        override\\n        onlyController\\n    {\\n        require(bytes(strategies[id].name).length > 0, \\\"strategy must exist\\\");\\n        require(bytes(name).length > 0, \\\"invalid name\\\");\\n        strategies[id].name = name;\\n        emit UpdateName(id, name);\\n    }\\n\\n    function updateStrategy(\\n        uint256 id,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens\\n    ) external override onlyController {\\n        require(integrations.length > 0, \\\"integrations missing\\\");\\n        require(tokens.length > 0, \\\"tokens missing\\\");\\n        require(bytes(strategies[id].name).length > 0, \\\"strategy must exist\\\");\\n\\n        StrategySummary memory currentStrategy = getStrategy(id);\\n\\n        delete strategies[id].tokens;\\n        delete strategies[id].integrations;\\n\\n        // Reduce deploy amount for each current token by: strat token balance * weight / TOKEN_WEIGHT\\n\\n        for (uint256 i = 0; i < currentStrategy.tokens.length; i++) {\\n            deployAmount[\\n                currentStrategy\\n                    .integrations[currentStrategy.tokens[i].integrationPairIdx]\\n                    .integration\\n            ][\\n                currentStrategy\\n                    .integrations[currentStrategy.tokens[i].integrationPairIdx]\\n                    .ammPoolID\\n            ][currentStrategy.tokens[i].token] -= int256(\\n                (strategyTokenBalances[id][currentStrategy.tokens[i].token] *\\n                    currentStrategy.tokens[i].weight) / TOKEN_WEIGHT\\n            );\\n\\n            delete strategies[id].availableTokens[\\n                currentStrategy.tokens[i].token\\n            ];\\n        }\\n\\n        // Increase deploy amount for each new token by: strat token balance * weight / TOKEN_WEIGHT\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (strategyTokenBalances[id][tokens[i].token] > 0) {\\n                deployAmount[\\n                    integrations[tokens[i].integrationPairIdx].integration\\n                ][integrations[tokens[i].integrationPairIdx].ammPoolID][\\n                    tokens[i].token\\n                ] += int256(\\n                    (strategyTokenBalances[id][tokens[i].token] *\\n                        tokens[i].weight) / TOKEN_WEIGHT\\n                );\\n            }\\n        }\\n\\n        _verifyAndSetStrategy(id, currentStrategy.name, integrations, tokens);\\n\\n        emit UpdateStrategy(id, integrations, tokens);\\n    }\\n\\n    function deleteStrategy(uint256 id) external override onlyController {\\n        StrategySummary memory strategy = getStrategy(id);\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            require(\\n                strategyTokenBalances[id][strategy.tokens[i].token] == 0,\\n                \\\"strategy in use\\\"\\n            );\\n            delete strategies[id].availableTokens[strategy.tokens[i].token];\\n        }\\n        delete strategies[id];\\n        emit DeleteStrategy(id);\\n    }\\n\\n    function increaseStrategy(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external override onlyController {\\n        StrategySummary memory strategy = getStrategy(id);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(\\n                strategies[id].availableTokens[tokens[i].token],\\n                \\\"invalid token\\\"\\n            );\\n            strategyTokenBalances[id][tokens[i].token] += tokens[i].amount;\\n            tokenBalances[tokens[i].token] += tokens[i].amount;\\n\\n            for (uint256 j = 0; j < strategy.tokens.length; j++) {\\n                if (tokens[i].token == strategy.tokens[j].token) {\\n                    Integration memory integration = strategy.integrations[\\n                        strategy.tokens[j].integrationPairIdx\\n                    ];\\n                    deployAmount[integration.integration][\\n                        integration.ammPoolID\\n                    ][tokens[i].token] += int256(\\n                        _getTokenAmount(\\n                            tokens[i].amount,\\n                            strategy.tokens[j].weight,\\n                            TOKEN_WEIGHT\\n                        )\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getTokenAmount(\\n        uint256 tokenAmount,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return (tokenAmount * numerator) / denominator;\\n    }\\n\\n    function decreaseStrategy(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external override onlyController {\\n        StrategySummary memory strategy = getStrategy(id);\\n        require(strategy.tokens.length > 0, \\\"invalid strategy\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(\\n                strategyTokenBalances[id][tokens[i].token] >= tokens[i].amount,\\n                \\\"insufficient funds\\\"\\n            );\\n            require(\\n                tokenBalances[tokens[i].token] >= tokens[i].amount,\\n                \\\"insufficient funds\\\"\\n            );\\n            strategyTokenBalances[id][tokens[i].token] -= tokens[i].amount;\\n            tokenBalances[tokens[i].token] -= tokens[i].amount;\\n\\n            for (uint256 j = 0; j < strategy.tokens.length; j++) {\\n                if (tokens[i].token == strategy.tokens[j].token) {\\n                    Integration memory integration = strategy.integrations[\\n                        strategy.tokens[j].integrationPairIdx\\n                    ];\\n                    uint256 amount = _getTokenAmount(\\n                        tokens[i].amount,\\n                        strategy.tokens[j].weight,\\n                        TOKEN_WEIGHT\\n                    );\\n                    deployAmount[integration.integration][\\n                        integration.ammPoolID\\n                    ][tokens[i].token] -= int256(amount);\\n\\n                    _closablePositions[tokens[i].token].push(\\n                        ClosablePosition(\\n                            integration.integration,\\n                            integration.ammPoolID,\\n                            amount\\n                        )\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function clearClosablePositions(address[] calldata tokens)\\n        external\\n        override\\n        onlyController\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            delete _closablePositions[tokens[i]];\\n        }\\n    }\\n\\n    function closePositionsForWithdrawal(address token, uint256 amount)\\n        external\\n        override\\n        onlyController\\n    {\\n        ClosablePosition[] memory positions = _closablePositions[token];\\n        uint256 amountGathered = 0;\\n        address kernel = moduleMap.getModuleAddress(Modules.Kernel);\\n        if (positions.length > 0) {\\n            for (uint256 i = positions.length - 1; i >= 0; i--) {\\n                uint256 balanceBefore = IERC20(token).balanceOf(kernel);\\n                if (positions[i].ammPoolID == 0) {\\n                    IIntegration(positions[i].integration).withdraw(\\n                        token,\\n                        positions[i].amount\\n                    );\\n                } else {\\n                    IAMMIntegration(positions[i].integration).withdraw(\\n                        token,\\n                        positions[i].amount,\\n                        positions[i].ammPoolID\\n                    );\\n                }\\n                uint256 recovered = IERC20(token).balanceOf(kernel) -\\n                    balanceBefore;\\n\\n                _closablePositions[token].pop();\\n\\n                decreaseDeployAmountChange(\\n                    positions[i].integration,\\n                    positions[i].ammPoolID,\\n                    token,\\n                    positions[i].amount // Still decreasing by the notional amount, since we are erasing the closable position entirely from the vector\\n                );\\n\\n                amountGathered += recovered;\\n\\n                if (amountGathered >= amount) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 amount\\n    ) public override {\\n        int256 currentAmount = deployAmount[integration][poolID][token];\\n\\n        if (currentAmount >= 0) {\\n            deployAmount[integration][poolID][token] -= int256(amount);\\n        } else {\\n            deployAmount[integration][poolID][token] += int256(amount);\\n        }\\n    }\\n\\n    function getStrategy(uint256 id)\\n        public\\n        view\\n        override\\n        returns (StrategySummary memory)\\n    {\\n        StrategySummary memory result;\\n        result.name = strategies[id].name;\\n        result.integrations = strategies[id].integrations;\\n        result.tokens = strategies[id].tokens;\\n        return result;\\n    }\\n\\n    function getMultipleStrategies(uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (StrategySummary[] memory)\\n    {\\n        StrategySummary[] memory severalStrategies = new StrategySummary[](\\n            ids.length\\n        );\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            severalStrategies[i] = getStrategy(ids[i]);\\n        }\\n        return severalStrategies;\\n    }\\n\\n    function getStrategyTokenBalance(uint256 id, address token)\\n        public\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        amount = strategyTokenBalances[id][token];\\n    }\\n\\n    function getTokenTotalBalance(address token)\\n        public\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        amount = tokenBalances[token];\\n    }\\n\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view override returns (int256) {\\n        return deployAmount[integration][poolID][token];\\n    }\\n\\n    function getStrategyBalances(\\n        uint256[] calldata _strategies,\\n        address[] calldata _tokens\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            StrategyBalance[] memory strategyBalances,\\n            GeneralBalance[] memory generalBalances\\n        )\\n    {\\n        strategyBalances = new StrategyBalance[](_strategies.length);\\n        generalBalances = new GeneralBalance[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            generalBalances[i].token = _tokens[i];\\n            generalBalances[i].balance = tokenBalances[_tokens[i]];\\n        }\\n\\n        for (uint256 i = 0; i < _strategies.length; i++) {\\n            Token[] memory strategyTokens = strategies[_strategies[i]].tokens;\\n            strategyBalances[i].tokens = new GeneralBalance[](\\n                strategyTokens.length\\n            );\\n            strategyBalances[i].strategyID = _strategies[i];\\n            for (uint256 j = 0; j < strategyTokens.length; j++) {\\n                strategyBalances[i].tokens[j].token = strategyTokens[j].token;\\n                strategyBalances[i].tokens[j].balance = strategyTokenBalances[\\n                    _strategies[i]\\n                ][strategyTokens[j].token];\\n            }\\n        }\\n    }\\n\\n    function getStrategyTokenLength(uint256 strategy)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return strategies[strategy].tokens.length;\\n    }\\n\\n    function getClosablePositions(address token, uint256 index)\\n        external\\n        view\\n        returns (ClosablePosition memory)\\n    {\\n        return _closablePositions[token][index];\\n    }\\n\\n    function increaseTokenBalance(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external override onlyController {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(\\n                strategies[id].availableTokens[tokens[i].token],\\n                \\\"invalid token\\\"\\n            );\\n            strategyTokenBalances[id][tokens[i].token] += tokens[i].amount;\\n            tokenBalances[tokens[i].token] += tokens[i].amount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9115be6a77aa9dca19325399f414b0287dd1b15b738e8ee4158742857820d204\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IAMMIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAMMIntegration {\\n    struct Pool {\\n        address tokenA;\\n        address tokenB;\\n        uint256 positionID; // Used for Uniswap V3\\n    }\\n\\n    /// Events\\n    event CreatePool(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint32 poolID\\n    );\\n\\n    event HarvestYieldError(uint32 indexed poolID);\\n\\n    /// @dev IMPORTANT: poolID must start at 1 for all amm integrations. A poolID of 0 is used to designate a non amm integration.\\n\\n    /// @param token The address of the deposited token\\n    /// @param amount The amount of token being deposited\\n    /// @param poolID  The id of the pool to deposit into\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @param token  the token to withdraw\\n    /// @param amount The amount of token in the pool to withdraw\\n    /// @param poolID  the pool to withdraw from\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint32 poolID\\n    ) external;\\n\\n    /// @dev Deploys all the tokens for the specified pools\\n    function deploy(uint32 poolID) external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n}\\n\",\"keccak256\":\"0x0d31a21361f37a394c000b7fcff8390d12e3407e4ae7b2dc75db415faeba1dde\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    //tmp here\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xcf2ea6188f0ad2411a8225aa311a9c4a8708150b6be58b7d46f70f5bae932668\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IIntegration {\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /// @param tokenAddress The address of the withdrawal token\\n    /// @param amount The amount of the token to withdraw\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n    function deploy() external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n\\n    /// @dev This returns the total amount of the underlying token that\\n    /// @dev has been deposited to the integration contract\\n    /// @param tokenAddress The address of the deployed token\\n    /// @return The amount of the underlying token that can be withdrawn\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n\\n    /// @dev Returns the total amount of yield awaiting to be harvested\\n    /// @dev using the relevant integration's own function\\n    /// @param amount The amount of available yield for the specified token\\n    function getPendingYield(address) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xd92f51a22cbda8f9cbf06a31f798a76d946b82e82b1074cf7ade968125f58e01\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IIntegrationMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IIntegrationMap {\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        bool acceptingLping;\\n        bool acceptingBridging;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n        uint256 targetLiquidityRatioNumerator;\\n        uint256 transferFeeKValueNumerator;\\n        uint256 transferFeePlatformRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name)\\n        external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param acceptingLping Whether LPing is enabled\\n    /// @param acceptingBridging Whether bridging is enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenLping(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenBridging(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(\\n        address tokenAddress,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param targetLiquidityRatioNumerator Number that gets divided by target liquidity ratio denominator to get target liquidity ratio\\n    function updateTokenTargetLiquidityRatioNumerator(\\n        address tokenAddress,\\n        uint256 targetLiquidityRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeeKValueNumerator Number that gets divided by transfer fee K-value denominator to get K-value\\n    function updateTokenTransferFeeKValueNumerator(\\n        address tokenAddress,\\n        uint256 transferFeeKValueNumerator\\n    ) external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param transferFeePlatformRatioNumerator Number that gets divided by transfer fee platform ratio denominator to get the ratio of transfer fees sent to the platform instead of LPers\\n    function updateTokenTransferFeePlatformRatioNumerator(\\n        address tokenAddress,\\n        uint256 transferFeePlatformRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum()\\n        external\\n        view\\n        returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether Lping this token is currently enabled\\n    function getTokenAcceptingLping(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether bridging this token is currently enabled\\n    function getTokenAcceptingBridging(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by target liquidity ratio denominator\\n    function getTokenTargetLiquidityRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The target liquidity ratio denominator\\n    function getTargetLiquidityRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee K-value denominator\\n    function getTokenTransferFeeKValueNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee K-value denominator\\n    function getTransferFeeKValueDenominator() external view returns (uint32);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The number that gets divided by transfer fee platform ratio denominator\\n    function getTokenTransferFeePlatformRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The transfer fee platform ratio denominator\\n    function getTransferFeePlatformRatioDenominator()\\n        external\\n        view\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x4a57712bb45de506f0e58f5d04714af48bfd391d8ae251ab9f599b02a081f410\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IKernel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../libraries/TokenSettings.sol\\\";\\n\\ninterface IKernel {\\n    event Withdraw(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] tokenAmounts,\\n        uint256 ethAmount\\n    );\\n    event ClaimEthRewards(address indexed user, uint256 ethRewards);\\n    event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n    event WithdrawAllAndClaim(\\n        address indexed user,\\n        address[] tokens,\\n        bool withdrawWethAsEth,\\n        uint256[] tokenAmounts,\\n        uint256 ethWithdrawn,\\n        uint256 ethRewards,\\n        uint256 biosRewards\\n    );\\n    event TokenAdded(\\n        address indexed tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        bool acceptingLping,\\n        bool acceptingBridging,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator,\\n        uint256 targetLiquidityRatioNumerator,\\n        uint256 transferFeeKValueNumerator,\\n        uint256 transferFeePlatformRatioNumerator\\n    );\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettings.TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n    event GasAccountUpdated(address gasAccount);\\n    event TreasuryAccountUpdated(address treasuryAccount);\\n    event IntegrationAdded(address indexed contractAddress, string name);\\n    event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n    event SeedBiosRewards(uint256 biosAmount);\\n    event Deploy();\\n    event HarvestYield();\\n    event DistributeEth();\\n    event BiosBuyBack();\\n    event EthDistributionWeightsUpdated(\\n        uint32 biosBuyBackEthWeight,\\n        uint32 treasuryEthWeight,\\n        uint32 protocolFeeEthWeight,\\n        uint32 rewardsEthWeight\\n    );\\n    event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are a liquidity provider\\n    /// @return Bool indicating whether the account is a liquidity provider\\n    function isLiquidityProvider(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x510aabf6a9a2a4f10896501ce5e850d4b92f52413f09dd1a7379368de07af7f0\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IModuleMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager, // 9\\n    Interconnects, // 10\\n    SwapManager // 11\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd39d052a3b0788f77f806435622f4cef19d8b3c0c734d44d8a3f3b85bd3b48a3\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyMap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"./IUserPositions.sol\\\";\\n\\ninterface IStrategyMap {\\n    // #### Structs\\n    struct Integration {\\n        address integration;\\n        uint32 ammPoolID;\\n    }\\n    struct Token {\\n        uint256 integrationPairIdx;\\n        address token;\\n        uint32 weight;\\n    }\\n\\n    struct TokenDeploy {\\n        address integration;\\n        uint32 ammPoolID;\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct Strategy {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n        mapping(address => bool) availableTokens;\\n    }\\n\\n    struct StrategySummary {\\n        string name;\\n        Integration[] integrations;\\n        Token[] tokens;\\n    }\\n\\n    struct StrategyBalance {\\n        uint256 strategyID;\\n        GeneralBalance[] tokens;\\n    }\\n\\n    struct GeneralBalance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct ClosablePosition {\\n        address integration;\\n        uint32 ammPoolID;\\n        uint256 amount;\\n    }\\n\\n    // #### Events\\n    // NewStrategy, UpdateName, UpdateStrategy, DeleteStrategy\\n    event NewStrategy(\\n        uint256 indexed id,\\n        Integration[] integrations,\\n        Token[] tokens,\\n        string name\\n    );\\n    event UpdateName(uint256 indexed id, string name);\\n    event UpdateStrategy(\\n        uint256 indexed id,\\n        Integration[] integrations,\\n        Token[] tokens\\n    );\\n    event DeleteStrategy(uint256 indexed id);\\n\\n    // #### Functions\\n    /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     */\\n    function addStrategy(\\n        string calldata name,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n    function updateName(uint256 id, string calldata name) external;\\n\\n    /**\\n    @notice Updates a strategy's integrations and tokens\\n    @param id  the strategy to update\\n    @param integrations  the new integrations that will be used\\n    @param tokens  the tokens accepted for new entries\\n    */\\n    function updateStrategy(\\n        uint256 id,\\n        Integration[] calldata integrations,\\n        Token[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\\n    @param id  the strategy to delete\\n     */\\n    function deleteStrategy(uint256 id) external;\\n\\n    /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param id  the strategy to deposit into\\n    @param tokens  the tokens to deposit\\n     */\\n    function increaseStrategy(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param id  the strategy to withdraw assets from\\n    @param tokens  details of the tokens being deposited\\n     */\\n    function decreaseStrategy(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param id  the strategy to return\\n     */\\n    function getStrategy(uint256 id)\\n        external\\n        view\\n        returns (StrategySummary memory);\\n\\n    /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param amount  the amount to reduce the vector by\\n     */\\n    function decreaseDeployAmountChange(\\n        address integration,\\n        uint32 poolID,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param id  the strategy id to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n    function getStrategyTokenBalance(uint256 id, address token)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @return amount  the amount of the token currently invested\\n    */\\n    function getTokenTotalBalance(address token)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return the pending deploy amount\\n     */\\n    function getDeployAmount(\\n        address integration,\\n        uint32 poolID,\\n        address token\\n    ) external view returns (int256);\\n\\n    /**\\n    @notice Returns balances per strategy, and total invested balances\\n    @param _strategies  The strategies to retrieve balances for\\n    @param _tokens  The tokens to retrieve\\n     */\\n    function getStrategyBalances(\\n        uint256[] calldata _strategies,\\n        address[] calldata _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            StrategyBalance[] memory strategyBalances,\\n            GeneralBalance[] memory generalBalances\\n        );\\n\\n    /**\\n  @notice Returns 1 or more strategies in a single call.\\n  @param ids  The ids of the strategies to return.\\n   */\\n    function getMultipleStrategies(uint256[] calldata ids)\\n        external\\n        view\\n        returns (StrategySummary[] memory);\\n\\n    /// @notice autogenerated getter definition\\n    function idCounter() external view returns (uint256);\\n\\n    /**\\n    @notice returns the length of the tokens array in a strategy\\n    @param strategy  the strategy to look up\\n    @return the length\\n    */\\n    function getStrategyTokenLength(uint256 strategy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n    @notice Clears the list of positions that can be closed to supply a token\\n    @param tokens  The list of tokens to clear\\n     */\\n    function clearClosablePositions(address[] calldata tokens) external;\\n\\n    /**\\n    @notice Closes enough positions to provide a requested amount of a token\\n    @param token  the token to source\\n    @param amount  the amount to source\\n     */\\n    function closePositionsForWithdrawal(address token, uint256 amount)\\n        external;\\n\\n    /**\\n@notice Increases strategy balances without increasing the deploy amount\\n@param id  The strategy id\\n@param tokens  the tokens and amounts \\n */\\n    function increaseTokenBalance(\\n        uint256 id,\\n        IUserPositions.TokenMovement[] calldata tokens\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbcf21ccdeb7fea2e8370775d38c28d6f4ea582d058eef6407730116078fc2290\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n    struct TokenMovement {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyRecord {\\n        uint256 strategyId;\\n        uint256 timestamp;\\n    }\\n    struct MigrateStrategy {\\n        address user;\\n        TokenMovement[] tokens;\\n    }\\n    // ##### Events\\n    event EnterStrategy(\\n        uint256 indexed id,\\n        address indexed user,\\n        TokenMovement[] tokens\\n    );\\n    event ExitStrategy(\\n        uint256 indexed id,\\n        address indexed user,\\n        TokenMovement[] tokens\\n    );\\n    event Deposit(\\n        address indexed user,\\n        address[] tokens,\\n        uint256[] tokenAmounts,\\n        uint256 ethAmount\\n    );\\n\\n    // ##### Functions\\n\\n    /// @notice User is allowed to deposit whitelisted tokens\\n    /// @param depositor Address of the account depositing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param ethAmount The amount of ETH sent with the deposit\\n    /// @param migration flag if this is a migration from the old system\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount,\\n        bool migration\\n    ) external;\\n\\n    /// @notice User is allowed to withdraw tokens\\n    /// @param recipient The address of the user withdrawing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n    /// @param recipient The address of the user withdrawing tokens\\n    /// @param tokens Array of token address that user is exiting positions from\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    /// @return tokenAmounts The amounts of each token being withdrawn\\n    /// @return ethWithdrawn The amount of ETH being withdrawn\\n    /// @return ethClaimed The amount of ETH being claimed from rewards\\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        bool withdrawWethAsEth\\n    )\\n        external\\n        returns (\\n            uint256[] memory tokenAmounts,\\n            uint256 ethWithdrawn,\\n            uint256 ethClaimed,\\n            uint256 biosClaimed\\n        );\\n\\n    /// @param user The address of the user claiming ETH rewards\\n    function claimEthRewards(address user)\\n        external\\n        returns (uint256 ethClaimed);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @return The total balance of the asset deposited in the system\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /// @notice Returns the amount that a user has deposited locally, but that isn't in a strategy\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userTokenBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the amount that a user can use for strategies (local balance + interconnect balance - deployed)\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userDeployableBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the amount that a user has interconnected\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userInterconnectBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n    @notice Adds a user's funds to a strategy to be deployed\\n    @param strategyID  The strategy to enter\\n    @param tokens  The tokens and amounts to enter into the strategy\\n     */\\n    function enterStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\\n        external;\\n\\n    /**\\n    @notice Marks a user's funds as withdrawable\\n    @param strategyID  The strategy to withdrawfrom\\n    @param tokens  The tokens and amounts to withdraw\\n     */\\n    function exitStrategy(uint256 strategyID, TokenMovement[] calldata tokens)\\n        external;\\n\\n    /**\\n    @notice Updates a user's local balance. Only called by controlled contracts or relayer\\n    @param assets list of tokens to update\\n    @param account user \\n    @param amounts list of amounts to update \\n     */\\n    function updateUserTokenBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n    @notice Updates a user's interconnected balance. Only called by controlled contracts or relayer\\n    @param assets list of tokens to update\\n    @param account user \\n    @param amounts list of amounts to update \\n     */\\n    function updateUserInterconnectBalances(\\n        address[] memory assets,\\n        address account,\\n        uint256[] memory amounts,\\n        bool[] memory add\\n    ) external;\\n\\n    /**\\n    @notice returns the amount of a given token a user has invested in a given strategy\\n    @param id  the strategy id\\n    @param token  the token address\\n    @param user  the user who holds the funds\\n    @return amount  the amount of token that the user has invested in the strategy \\n     */\\n    function getUserStrategyBalanceByToken(\\n        uint256 id,\\n        address token,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    /**\\n    @notice Returns the amount of a given token that a user has invested across all strategies\\n    @param token  the token address\\n    @param user  the user holding the funds\\n    @return amount  the amount of tokens the user has invested across all strategies\\n     */\\n    function getUserInvestedAmountByToken(address token, address user)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n    @notice Returns a user's balances for requested strategies, and the users total invested amounts for each token requested\\n    @param user  the user to request for\\n    @param _strategies  the strategies to get balances for\\n    @param _tokens  the tokens to get balances for\\n    @return userStrategyBalances  The user's invested funds in the strategies\\n    @return userBalance  User total token balances\\n     */\\n    function getUserBalances(\\n        address user,\\n        uint256[] calldata _strategies,\\n        address[] calldata _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            IStrategyMap.StrategyBalance[] memory userStrategyBalances,\\n            IStrategyMap.GeneralBalance[] memory userBalance\\n        );\\n\\n    /**\\n    @notice Migrates user strategy positions to the new system\\n    @param users  the user data to add to the strategy\\n     */\\n    function migrateUser(uint256 strategyId, MigrateStrategy[] calldata users)\\n        external;\\n}\\n\",\"keccak256\":\"0xa15543e8ccdf019cac726eab17675f4c241e0741bfcacb103940e9f713052c20\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.4;\\n\\ninterface IYieldManager {\\n    // #### Structs\\n\\n    struct DeployRequest {\\n        address integration;\\n        address[] tokens; // If ammPoolID > 0, this should contain exactly two addresses\\n        uint32 ammPoolID; // The pool to deposit into. This is 0 for non-AMM integrations\\n    }\\n\\n    struct IntegrationYield {\\n        address integration;\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    // #### Functions\\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n    function updateGasAccountTargetEthBalance(\\n        uint256 gasAccountTargetEthBalance_\\n    ) external;\\n\\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n    function updateEthDistributionWeights(\\n        uint32 biosBuyBackEthWeight_,\\n        uint32 treasuryEthWeight_,\\n        uint32 protocolFeeEthWeight_,\\n        uint32 rewardsEthWeight_\\n    ) external;\\n\\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n    function updateGasAccount(address payable gasAccount_) external;\\n\\n    /// @param treasuryAccount_ The address of the system treasury account\\n    function updateTreasuryAccount(address payable treasuryAccount_) external;\\n\\n    /// @notice Deploys all tokens to all integrations according to configured weights\\n    function deploy(DeployRequest[] calldata deployments) external;\\n\\n    /// @notice Harvests available yield from all tokens and integrations\\n    function harvestYield(\\n        address integrationAddress,\\n        address[] calldata tokenAddresses\\n    ) external;\\n\\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n    function distributeEth() external;\\n\\n    /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\\n    function biosBuyBack() external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of the token held in the Kernel as reserves\\n    function getReserveTokenBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The desired amount of the token to hold in the Kernel as reserves\\n    function getDesiredReserveTokenBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return ethWeightSum The sum of ETH distribution weights\\n    function getEthWeightSum() external view returns (uint32 ethWeightSum);\\n\\n    /// @return processedWethSum The sum of yields processed into WETH\\n    function getProcessedWethSum()\\n        external\\n        view\\n        returns (uint256 processedWethSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of WETH received from token yield processing\\n    function getProcessedWethByToken(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return processedWethByTokenSum The sum of processed WETH\\n    function getProcessedWethByTokenSum(address[] calldata)\\n        external\\n        view\\n        returns (uint256 processedWethByTokenSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\\n    function getTokenTotalIntegrationBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256 tokenTotalIntegrationBalance);\\n\\n    /// @return The address of the gas account\\n    function getGasAccount() external view returns (address);\\n\\n    /// @return The address of the treasury account\\n    function getTreasuryAccount() external view returns (address);\\n\\n    /// @return The last amount of ETH distributed to rewards\\n    function getLastEthRewardsAmount() external view returns (uint256);\\n\\n    /// @return The target ETH balance of the gas account\\n    function getGasAccountTargetEthBalance() external view returns (uint256);\\n\\n    /// @return The BIOS buyback ETH weight\\n    /// @return The Treasury ETH weight\\n    /// @return The Protocol fee ETH weight\\n    /// @return The rewards ETH weight\\n    function getEthDistributionWeights()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        );\\n\\n    function transferClosedPositionsValue(\\n        address destination,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    // function getAllPendingYield(address token)\\n    //     external\\n    //     view\\n    //     returns (IntegrationYield[] memory);\\n}\\n\",\"keccak256\":\"0x06d09776e515b876b53980c3f840a6dfc1b7d10fd46dd385370ea00bead1153f\",\"license\":\"GPL-2.0\"},\"contracts/libraries/TokenSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title TokenSettings contains enum and events for the different token settings used in events in Kernel and IntegrationMap\\nlibrary TokenSettings {\\n    enum TokenSettingName {\\n        rewardWeight,\\n        reserveRatioNumerator,\\n        targetLiquidityRatioNumerator,\\n        transferFeeKValueNumerator,\\n        transferFeePlatformRatioNumerator,\\n        deposit,\\n        withdraw,\\n        lp,\\n        bridge\\n    }\\n\\n    event TokenSettingUpdated(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        uint256 indexed newValue\\n    );\\n\\n    event TokenSettingToggled(\\n        address indexed token,\\n        TokenSettingName indexed settingName,\\n        bool indexed newValue\\n    );\\n}\\n\",\"keccak256\":\"0xa610706ba9d4134cf5afd5b23dc7db0aefff042c75c7d0aadd616e0bb50fc461\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101335760003560e01c80630f0a1c6f146101385780631416110b146101675780631975762f1461017c57806327ddb9711461019c57806343b17d63146101cd578063462d0b2e146101e057806353e76f2c146101f35780635560066a1461020657806370051bf21461021957806385039aa61461022c578063873020371461023f57806398c671ce146102525780639d6eaec214610265578063a441f6ec1461029a578063a742d0b6146102de578063a7fc7a0714610307578063ce19bda11461031a578063cfc0cc3414610339578063d4a4a04314610359578063e94b0dd21461036c578063eb08ab281461037f578063edeaa0d214610388578063ee73ccae1461039b578063f7e50fcf146103ae578063ffeeb234146103f7575b600080fd5b600054610151906201000090046001600160a01b031681565b60405161015e91906142ba565b60405180910390f35b61017a610175366004613fc5565b610418565b005b61018f61018a366004613c0f565b610851565b60405161015e91906143d0565b6101bf6101aa366004613ef0565b60009081526003602052604090206002015490565b60405190815260200161015e565b61017a6101db366004613c0f565b610937565b61017a6101ee366004613c4e565b6109ed565b61017a61020136600461400e565b610a6a565b61017a610214366004613b4e565b610b66565b61017a610227366004613d9b565b61111d565b61017a61023a366004613fc5565b61130d565b61017a61024d366004613ef0565b611523565b61017a610260366004613c4e565b6116f9565b6101bf610273366004613f20565b60009182526005602090815260408084206001600160a01b03909316845291905290205490565b6102ad6102a8366004613b4e565b6117e9565b6040805182516001600160a01b0316815260208084015163ffffffff1690820152918101519082015260600161015e565b6101bf6102ec366004613b0f565b6001600160a01b031660009081526004602052604090205490565b61017a610315366004613b0f565b61188e565b610324620186a081565b60405163ffffffff909116815260200161015e565b61034c610347366004613ef0565b611acb565b60405161015e91906145e5565b61017a610367366004613fc5565b611c90565b61015161037a366004613ef0565b612280565b6101bf60085481565b61017a610396366004613f4f565b6122aa565b61017a6103a9366004613bc1565b6129ed565b6101bf6103bc366004613b79565b6001600160a01b03808416600090815260066020908152604080832063ffffffff871684528252808320938516835292905220549392505050565b61040a610405366004613d13565b612acb565b60405161015e929190614349565b3360009081526001602052604090205460ff166104505760405162461bcd60e51b815260040161044790614591565b60405180910390fd5b600061045b84611acb565b905060005b8281101561084a5760008581526003602081905260408220019085858481811061049a57634e487b7160e01b600052603260045260246000fd5b6104b09260206040909202019081019150613b0f565b6001600160a01b0316815260208101919091526040016000205460ff166104e95760405162461bcd60e51b81526004016104479061453e565b83838281811061050957634e487b7160e01b600052603260045260246000fd5b9050604002016020013560056000878152602001908152602001600020600086868581811061054857634e487b7160e01b600052603260045260246000fd5b61055e9260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461058d9190614669565b9091555084905083828181106105b357634e487b7160e01b600052603260045260246000fd5b90506040020160200135600460008686858181106105e157634e487b7160e01b600052603260045260246000fd5b6105f79260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546106269190614669565b90915550600090505b826040015151811015610837578260400151818151811061066057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b031685858481811061069557634e487b7160e01b600052603260045260246000fd5b6106ab9260206040909202019081019150613b0f565b6001600160a01b031614156108255760008360200151846040015183815181106106e557634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518151811061070f57634e487b7160e01b600052603260045260246000fd5b6020026020010151905061078b86868581811061073c57634e487b7160e01b600052603260045260246000fd5b905060400201602001358560400151848151811061076a57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015163ffffffff16620186a063ffffffff1661300e565b81516001600160a01b031660009081526006602090815260408083208286015163ffffffff1684529091528120908888878181106107d957634e487b7160e01b600052603260045260246000fd5b6107ef9260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461081e9190614628565b9091555050505b8061082f81614768565b91505061062f565b508061084281614768565b915050610460565b5050505050565b60606000826001600160401b0381111561087b57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108b457816020015b6108a161373c565b8152602001906001900390816108995790505b50905060005b8381101561092f576108f18585838181106108e557634e487b7160e01b600052603260045260246000fd5b90506020020135611acb565b82828151811061091157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061092790614768565b9150506108ba565b509392505050565b3360009081526001602052604090205460ff166109665760405162461bcd60e51b815260040161044790614591565b60005b818110156109e8576007600084848481811061099557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109aa9190613b0f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006109d6919061375d565b806109e081614768565b915050610969565b505050565b600054610100900460ff16610a085760005460ff1615610a0c565b303b155b610a285760405162461bcd60e51b8152600401610447906144c8565b600054610100900460ff16158015610a4a576000805461ffff19166101011790555b610a5483836116f9565b80156109e8576000805461ff0019169055505050565b3360009081526001602052604090205460ff16610a995760405162461bcd60e51b815260040161044790614591565b60008381526003602052604081208054610ab29061472d565b905011610ad15760405162461bcd60e51b81526004016104479061446d565b80610b0d5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206e616d6560a01b6044820152606401610447565b6000838152600360205260409020610b26908383613781565b50827fac2072268d18e10aecad35c0c04acd66330b2571a8ff403e3c702d77d3bab1348383604051610b59929190614459565b60405180910390a2505050565b3360009081526001602052604090205460ff16610b955760405162461bcd60e51b815260040161044790614591565b6001600160a01b038216600090815260076020908152604080832080548251818502810185019093528083529192909190849084015b82821015610c28576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b900463ffffffff1683850152600190810154918301919091529083529092019101610bcb565b5050505090506000808060029054906101000a90046001600160a01b03166001600160a01b0316636f8c3f8a60006040518263ffffffff1660e01b8152600401610c729190614431565b60206040518083038186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190613b32565b83519091501561084a57600060018451610cdc91906146ff565b90505b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190610d0e9086906004016142ba565b60206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190613f08565b9050848281518110610d8057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015163ffffffff1660001415610e6957848281518110610dba57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031663f3fef3a388878581518110610df557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516040518363ffffffff1660e01b8152600401610e329291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610e4c57600080fd5b505af1158015610e60573d6000803e3d6000fd5b50505050610f6b565b848281518110610e8957634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316637db2ddfe88878581518110610ec457634e487b7160e01b600052603260045260246000fd5b602002602001015160400151888681518110610ef057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915263ffffffff166044820152606401600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b505050505b600081886001600160a01b03166370a08231866040518263ffffffff1660e01b8152600401610f9a91906142ba565b60206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190613f08565b610ff491906146ff565b6001600160a01b03891660009081526007602052604090208054919250908061102d57634e487b7160e01b600052603160045260246000fd5b60008281526020812060026000199093019283020180546001600160c01b031916815560010155905585516110e69087908590811061107c57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518785815181106110a857634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518a8987815181106110d557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516129ed565b6110f08186614669565b9450868510611100575050611115565b5050808061110d90614716565b915050610cdf565b505050505050565b3360009081526001602052604090205460ff1661114c5760405162461bcd60e51b815260040161044790614591565b826111695760405162461bcd60e51b81526004016104479061449a565b806111865760405162461bcd60e51b815260040161044790614516565b846111c65760405162461bcd60e51b815260206004820152601060248201526f6d75737420686176652061206e616d6560801b6044820152606401610447565b600880549060006111d683614768565b9190505550600060085490506112c28188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020808e02820181019092528c815294508c93508b925082919085015b828210156112655761125660408302860136819003810190613e30565b81526020019060010190611239565b50505050508686808060200260200160405190810160405280939291908181526020016000905b828210156112b8576112a960608302860136819003810190613e8b565b8152602001906001019061128c565b505050505061302d565b807f4e61f7bf6a133a1b5c26fdae178f0d6316fa1214e5d7f1153e67c688dc64eef0868686868c8c6040516112fc96959493929190614300565b60405180910390a250505050505050565b3360009081526001602052604090205460ff1661133c5760405162461bcd60e51b815260040161044790614591565b60005b8181101561151d5760008481526003602081905260408220019084848481811061137957634e487b7160e01b600052603260045260246000fd5b61138f9260206040909202019081019150613b0f565b6001600160a01b0316815260208101919091526040016000205460ff166113c85760405162461bcd60e51b81526004016104479061453e565b8282828181106113e857634e487b7160e01b600052603260045260246000fd5b9050604002016020013560056000868152602001908152602001600020600085858581811061142757634e487b7160e01b600052603260045260246000fd5b61143d9260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461146c9190614669565b90915550839050828281811061149257634e487b7160e01b600052603260045260246000fd5b90506040020160200135600460008585858181106114c057634e487b7160e01b600052603260045260246000fd5b6114d69260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546115059190614669565b9091555081905061151581614768565b91505061133f565b50505050565b3360009081526001602052604090205460ff166115525760405162461bcd60e51b815260040161044790614591565b600061155d82611acb565b905060005b81604001515181101561169257600560008481526020019081526020016000206000836040015183815181106115a857634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166001600160a01b03168152602001908152602001600020546000146116165760405162461bcd60e51b815260206004820152600f60248201526e737472617465677920696e2075736560881b6044820152606401610447565b6003600084815260200190815260200160002060030160008360400151838151811061165257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518101516001600160a01b03168252810191909152604001600020805460ff191690558061168a81614768565b915050611562565b506000828152600360205260408120906116ac8282613805565b6116ba60018301600061383f565b6116c860028301600061385d565b505060405182907f79097c9b1a7ba453a3ecc60124deebb47c637495f9912752840842a8ae28905690600090a25050565b600054610100900460ff166117145760005460ff1615611718565b303b155b6117345760405162461bcd60e51b8152600401610447906144c8565b600054610100900460ff16158015611756576000805461ffff19166101011790555b60005b83518110156117cb57600180600086848151811061178757634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806117c381614768565b915050611759565b5082516117df90600290602086019061387e565b50610a54826136a8565b60408051606081018252600080825260208083018290528284018290526001600160a01b0386168252600790529190912080548390811061183a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160608101825260029390930290910180546001600160a01b0381168452600160a01b900463ffffffff1693830193909352600190920154918101919091529392505050565b600080546040516337c61fc560e11b8152620100009091046001600160a01b031691636f8c3f8a916118c39190600401614431565b60206040518083038186803b1580156118db57600080fd5b505afa1580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119139190613b32565b6001600160a01b0316632f54bf6e336040518263ffffffff1660e01b815260040161193e91906142ba565b60206040518083038186803b15801561195657600080fd5b505afa15801561196a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198e9190613d7b565b6119ed5760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726f6c6c65643a3a6f6e6c794f776e65723a2043616c6c6572206973604482015269103737ba1037bbb732b960b11b6064820152608401610447565b6001600160a01b03811660009081526001602081905260408220805460ff19169091179055805b600254811015611a755760028181548110611a3f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0384811691161415611a6357600191505b80611a6d81614768565b915050611a14565b5080611ac757600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b5050565b611ad361373c565b611adb61373c565b60008381526003602052604090208054611af49061472d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b209061472d565b8015611b6d5780601f10611b4257610100808354040283529160200191611b6d565b820191906000526020600020905b815481529060010190602001808311611b5057829003601f168201915b5050509183525050600083815260036020908152604080832060010180548251818502810185019093528083529193909284015b82821015611bed57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900463ffffffff1681830152825260019092019101611ba1565b5050505060208083019190915260008481526003825260408082206002018054825181860281018601909352808352919390929084015b82821015611c815760008481526020908190206040805160608101825260028602909201805483526001908101546001600160a01b03811684860152600160a01b900463ffffffff16918301919091529083529092019101611c24565b50505050604082015292915050565b3360009081526001602052604090205460ff16611cbf5760405162461bcd60e51b815260040161044790614591565b6000611cca84611acb565b9050600081604001515111611d145760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420737472617465677960801b6044820152606401610447565b60005b8281101561084a57838382818110611d3f57634e487b7160e01b600052603260045260246000fd5b90506040020160200135600560008781526020019081526020016000206000868685818110611d7e57634e487b7160e01b600052603260045260246000fd5b611d949260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015611dd35760405162461bcd60e51b815260040161044790614565565b838382818110611df357634e487b7160e01b600052603260045260246000fd5b9050604002016020013560046000868685818110611e2157634e487b7160e01b600052603260045260246000fd5b611e379260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015611e765760405162461bcd60e51b815260040161044790614565565b838382818110611e9657634e487b7160e01b600052603260045260246000fd5b90506040020160200135600560008781526020019081526020016000206000868685818110611ed557634e487b7160e01b600052603260045260246000fd5b611eeb9260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611f1a91906146ff565b909155508490508382818110611f4057634e487b7160e01b600052603260045260246000fd5b9050604002016020013560046000868685818110611f6e57634e487b7160e01b600052603260045260246000fd5b611f849260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611fb391906146ff565b90915550600090505b82604001515181101561226d5782604001518181518110611fed57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b031685858481811061202257634e487b7160e01b600052603260045260246000fd5b6120389260206040909202019081019150613b0f565b6001600160a01b0316141561225b57600083602001518460400151838151811061207257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518151811061209c57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006120f98787868181106120cb57634e487b7160e01b600052603260045260246000fd5b905060400201602001358660400151858151811061076a57634e487b7160e01b600052603260045260246000fd5b82516001600160a01b031660009081526006602090815260408083208287015163ffffffff168452909152812091925082919089898881811061214c57634e487b7160e01b600052603260045260246000fd5b6121629260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461219191906146c0565b909155506007905060008888878181106121bb57634e487b7160e01b600052603260045260246000fd5b6121d19260206040909202019081019150613b0f565b6001600160a01b0390811682526020808301939093526040918201600090812083516060810185528751841681529685015163ffffffff908116888701908152948801968752815460018181018455928452959092209651600290950290960180549351909116600160a01b026001600160c01b0319909316939091169290921717815590519101555b8061226581614768565b915050611fbc565b508061227881614768565b915050611d17565b6002818154811061229057600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526001602052604090205460ff166122d95760405162461bcd60e51b815260040161044790614591565b826122f65760405162461bcd60e51b81526004016104479061449a565b806123135760405162461bcd60e51b815260040161044790614516565b6000858152600360205260408120805461232c9061472d565b90501161234b5760405162461bcd60e51b81526004016104479061446d565b600061235686611acb565b6000878152600360205260408120919250612374916002019061385d565b60008681526003602052604081206123919160019091019061383f565b60005b81604001515181101561263d57620186a063ffffffff16826040015182815181106123cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015163ffffffff16600560008a815260200190815260200160002060008560400151858151811061241a57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166001600160a01b031681526020019081526020016000205461245191906146a1565b61245b9190614681565b6006600084602001518560400151858151811061248857634e487b7160e01b600052603260045260246000fd5b602002602001015160000151815181106124b257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600084602001518560400151858151811061250957634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518151811061253357634e487b7160e01b600052603260045260246000fd5b60200260200101516020015163ffffffff1663ffffffff16815260200190815260200160002060008460400151848151811061257f57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546125ba91906146c0565b92505081905550600360008881526020019081526020016000206003016000836040015183815181106125fd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518101516001600160a01b03168252810191909152604001600020805460ff191690558061263581614768565b915050612394565b5060005b828110156128fc5760008781526005602052604081208186868581811061267857634e487b7160e01b600052603260045260246000fd5b90506060020160200160208101906126909190613b0f565b6001600160a01b03166001600160a01b031681526020019081526020016000205411156128ea57620186a08484838181106126db57634e487b7160e01b600052603260045260246000fd5b90506060020160400160208101906126f3919061404a565b63ffffffff16600560008a8152602001908152602001600020600087878681811061272e57634e487b7160e01b600052603260045260246000fd5b90506060020160200160208101906127469190613b0f565b6001600160a01b03166001600160a01b031681526020019081526020016000205461277191906146a1565b61277b9190614681565b6006600088888888878181106127a157634e487b7160e01b600052603260045260246000fd5b905060600201600001358181106127c857634e487b7160e01b600052603260045260246000fd5b6127de9260206040909202019081019150613b0f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888888888781811061282257634e487b7160e01b600052603260045260246000fd5b9050606002016000013581811061284957634e487b7160e01b600052603260045260246000fd5b9050604002016020016020810190612861919061404a565b63ffffffff1663ffffffff168152602001908152602001600020600086868581811061289d57634e487b7160e01b600052603260045260246000fd5b90506060020160200160208101906128b59190613b0f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128e49190614628565b90915550505b806128f481614768565b915050612641565b506129a78682600001518787808060200260200160405190810160405280939291908181526020016000905b828210156129545761294560408302860136819003810190613e30565b81526020019060010190612928565b50505050508686808060200260200160405190810160405280939291908181526020016000905b828210156112b85761299860608302860136819003810190613e8b565b8152602001906001019061297b565b857fff42d8810dd20b2ca67dcd42122a89f3901dfc9f4a6b77e745f38ca8566c9585868686866040516129dd94939291906142ce565b60405180910390a2505050505050565b6001600160a01b03808516600090815260066020908152604080832063ffffffff881684528252808320938616835292905290812054908112612a7a576001600160a01b03808616600090815260066020908152604080832063ffffffff89168452825280832093871683529290529081208054849290612a6f9084906146c0565b9091555061084a9050565b6001600160a01b03808616600090815260066020908152604080832063ffffffff89168452825280832093871683529290529081208054849290612abf908490614628565b90915550505050505050565b606080846001600160401b03811115612af457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b3a57816020015b604080518082019091526000815260606020820152815260200190600190039081612b125790505b509150826001600160401b03811115612b6357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b9c57816020015b612b896138d3565b815260200190600190039081612b815790505b50905060005b83811015612cb157848482818110612bca57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612bdf9190613b0f565b828281518110612bff57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b03909116905260046000868684818110612c3b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612c509190613b0f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110612c9157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151015280612ca981614768565b915050612ba2565b5060005b8581101561300457600060036000898985818110612ce357634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020600201805480602002602001604051908101604052809291908181526020016000905b82821015612d785760008481526020908190206040805160608101825260028602909201805483526001908101546001600160a01b03811684860152600160a01b900463ffffffff16918301919091529083529092019101612d1b565b50505050905080516001600160401b03811115612da557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612dde57816020015b612dcb6138d3565b815260200190600190039081612dc35790505b50848381518110612dff57634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250878783818110612e2e57634e487b7160e01b600052603260045260246000fd5b90506020020135848381518110612e5557634e487b7160e01b600052603260045260246000fd5b60209081029190910101515260005b8151811015612fef57818181518110612e8d57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151858481518110612eb957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518281518110612ee457634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b039091169052600560008a8a86818110612f2057634e487b7160e01b600052603260045260246000fd5b9050602002013581526020019081526020016000206000838381518110612f5757634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002054858481518110612fa457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518281518110612fcf57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151015280612fe781614768565b915050612e64565b50508080612ffc90614768565b915050612cb5565b5094509492505050565b60008161301b84866146a1565b6130259190614681565b949350505050565b60005b82518110156130cb5760006001600160a01b031683828151811061306457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031614156130b95760405162461bcd60e51b815260206004820152600f60248201526e3130b21034b73a32b3b930ba34b7b760891b6044820152606401610447565b806130c381614768565b915050613030565b50600081516001600160401b038111156130f557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561311e578160200160208202803683370190505b5090506000805b835181101561339757845184828151811061315057634e487b7160e01b600052603260045260246000fd5b602002602001015160000151106131a95760405162461bcd60e51b815260206004820152601d60248201527f696e746567726174696f6e20696478206f7574206f6620626f756e64730000006044820152606401610447565b60006001600160a01b03168482815181106131d457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b031614156132235760405162461bcd60e51b81526020600482015260096024820152683130b2103a37b5b2b760b91b6044820152606401610447565b6009600085838151811061324757634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002054600014156132ee5783818151811061329c57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518383815181106132c857634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152816132ea81614768565b9250505b83818151811061330e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015163ffffffff166009600086848151811061334457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461337f9190614669565b9091555081905061338f81614768565b915050613125565b5060005b8181101561351a57620186a063ffffffff16600960008584815181106133d157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541461343e5760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081d1bdad95b881dd95a59da1d60621b6044820152606401610447565b600160036000898152602001908152602001600020600301600085848151811061347857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600960008483815181106134db57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009055808061351290614768565b91505061339b565b506000868152600360209081526040909120865161353a928801906138ea565b5060005b84518110156135e4576003600088815260200190815260200160002060010185828151811061357d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845292829020815193018054919092015163ffffffff16600160a01b026001600160c01b03199091166001600160a01b0390931692909217919091179055806135dc81614768565b91505061353e565b5060005b835181101561369f576003600088815260200190815260200160002060020184828151811061362757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001818101855560009485529383902082516002909202019081559181015191909201805460409093015163ffffffff16600160a01b026001600160c01b03199093166001600160a01b03909216919091179190911790558061369781614768565b9150506135e8565b50505050505050565b600054610100900460ff166136c35760005460ff16156136c7565b303b155b6136e35760405162461bcd60e51b8152600401610447906144c8565b600054610100900460ff16158015613705576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015611ac7576000805461ff00191690555050565b60405180606001604052806060815260200160608152602001606081525090565b508054600082556002029060005260206000209081019061377e919061395e565b50565b82805461378d9061472d565b90600052602060002090601f0160209004810192826137af57600085556137f5565b82601f106137c85782800160ff198235161785556137f5565b828001600101855582156137f5579182015b828111156137f55782358255916020019190600101906137da565b50613801929150613984565b5090565b5080546138119061472d565b6000825580601f10613821575050565b601f01602090049060005260206000209081019061377e9190613984565b508054600082559060005260206000209081019061377e9190613999565b508054600082556002029060005260206000209081019061377e91906139b8565b8280548282559060005260206000209081019282156137f5579160200282015b828111156137f557825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061389e565b604080518082019091526000808252602082015290565b8280546138f69061472d565b90600052602060002090601f01602090048101928261391857600085556137f5565b82601f1061393157805160ff19168380011785556137f5565b828001600101855582156137f5579182015b828111156137f5578251825591602001919060010190613943565b5b808211156138015780546001600160c01b03191681556000600182015560020161395f565b5b808211156138015760008155600101613985565b5b808211156138015780546001600160c01b031916815560010161399a565b5b8082111561380157600081556001810180546001600160c01b03191690556002016139b9565b80356139ea816147af565b919050565b60008083601f840112613a00578081fd5b5081356001600160401b03811115613a16578182fd5b6020830191508360208260051b8501011115613a3157600080fd5b9250929050565b60008083601f840112613a49578182fd5b5081356001600160401b03811115613a5f578182fd5b6020830191508360208260061b8501011115613a3157600080fd5b60008083601f840112613a8b578182fd5b5081356001600160401b03811115613aa1578182fd5b602083019150836020606083028501011115613a3157600080fd5b60008083601f840112613acd578182fd5b5081356001600160401b03811115613ae3578182fd5b602083019150836020828501011115613a3157600080fd5b803563ffffffff811681146139ea57600080fd5b600060208284031215613b20578081fd5b8135613b2b816147af565b9392505050565b600060208284031215613b43578081fd5b8151613b2b816147af565b60008060408385031215613b60578081fd5b8235613b6b816147af565b946020939093013593505050565b600080600060608486031215613b8d578081fd5b8335613b98816147af565b9250613ba660208501613afb565b91506040840135613bb6816147af565b809150509250925092565b60008060008060808587031215613bd6578081fd5b8435613be1816147af565b9350613bef60208601613afb565b92506040850135613bff816147af565b9396929550929360600135925050565b60008060208385031215613c21578182fd5b82356001600160401b03811115613c36578283fd5b613c42858286016139ef565b90969095509350505050565b60008060408385031215613c60578182fd5b82356001600160401b0380821115613c76578384fd5b818501915085601f830112613c89578384fd5b8135602082821115613c9d57613c9d614799565b8160051b9250613cae8184016145f8565b8281528181019085830185870184018b1015613cc8578889fd5b8896505b84871015613cf65780359550613ce1866147af565b85835260019690960195918301918301613ccc565b509650613d0690508782016139df565b9450505050509250929050565b60008060008060408587031215613d28578182fd5b84356001600160401b0380821115613d3e578384fd5b613d4a888389016139ef565b90965094506020870135915080821115613d62578384fd5b50613d6f878288016139ef565b95989497509550505050565b600060208284031215613d8c578081fd5b81518015158114613b2b578182fd5b60008060008060008060608789031215613db3578384fd5b86356001600160401b0380821115613dc9578586fd5b613dd58a838b01613abc565b90985096506020890135915080821115613ded578586fd5b613df98a838b01613a38565b90965094506040890135915080821115613e11578384fd5b50613e1e89828a01613a7a565b979a9699509497509295939492505050565b600060408284031215613e41578081fd5b604080519081016001600160401b0381118282101715613e6357613e63614799565b6040528235613e71816147af565b8152613e7f60208401613afb565b60208201529392505050565b600060608284031215613e9c578081fd5b604051606081016001600160401b0381118282101715613ebe57613ebe614799565b604052823581526020830135613ed3816147af565b6020820152613ee460408401613afb565b60408201529392505050565b600060208284031215613f01578081fd5b5035919050565b600060208284031215613f19578081fd5b5051919050565b60008060408385031215613f32578182fd5b823591506020830135613f44816147af565b809150509250929050565b600080600080600060608688031215613f66578283fd5b8535945060208601356001600160401b0380821115613f83578485fd5b613f8f89838a01613a38565b90965094506040880135915080821115613fa7578283fd5b50613fb488828901613a7a565b969995985093965092949392505050565b600080600060408486031215613fd9578081fd5b8335925060208401356001600160401b03811115613ff5578182fd5b61400186828701613a38565b9497909650939450505050565b600080600060408486031215614022578081fd5b8335925060208401356001600160401b0381111561403e578182fd5b61400186828701613abc565b60006020828403121561405b578081fd5b613b2b82613afb565b6000815180845260208085019450808401835b838110156140a757815180516001600160a01b031688528301518388015260409096019590820190600101614077565b509495945050505050565b81835260006020808501945082825b858110156140a75781356140d4816147af565b6001600160a01b0316875263ffffffff6140ef838501613afb565b168784015260409687019691909101906001016140c1565b6000815180845260208085019450808401835b838110156140a757815180516001600160a01b0316885283015163ffffffff16838801526040909601959082019060010161411a565b81835260006020808501945082825b858110156140a7578135875282820135614178816147af565b6001600160a01b031687840152604063ffffffff614197848301613afb565b1690880152606096870196919091019060010161415f565b6000815180845260208085019450808401835b838110156140a757815180518852838101516001600160a01b03168489015260409081015163ffffffff1690880152606090960195908201906001016141c2565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151606084528051806060860152825b8181101561425b576020818401810151608088840101520161423e565b8181111561426c5783608083880101525b50601f19601f8201168501915050602083015160808583030160208601526142976080830182614107565b915050604083015184820360408601526142b182826141af565b95945050505050565b6001600160a01b0391909116815260200190565b6040815260006142e26040830186886140b2565b82810360208401526142f5818587614150565b979650505050505050565b60608152600061431460608301888a6140b2565b8281036020840152614327818789614150565b9050828103604084015261433c818587614203565b9998505050505050505050565b6000604080830181845280865180835260608601915060608160051b87010192506020808901865b838110156143b057888603605f1901855281518051875283015183870188905261439d88880182614064565b9650509382019390820190600101614371565b5050868403818801525050506143c68186614064565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561442457603f1988860301845261441285835161422c565b945092850192908501906001016143f6565b5092979650505050505050565b60208101600c831061445357634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000613025602083018486614203565b6020808252601390820152721cdd1c985d1959de481b5d5cdd08195e1a5cdd606a1b604082015260600190565b602080825260149082015273696e746567726174696f6e73206d697373696e6760601b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d746f6b656e73206d697373696e6760901b604082015260600190565b6020808252600d908201526c34b73b30b634b2103a37b5b2b760991b604082015260600190565b602080825260129082015271696e73756666696369656e742066756e647360701b604082015260600190565b60208082526034908201527f436f6e74726f6c6c65643a3a6f6e6c79436f6e74726f6c6c65723a2043616c6c60408201527332b91034b9903737ba1031b7b73a3937b63632b960611b606082015260800190565b602081526000613b2b602083018461422c565b604051601f8201601f191681016001600160401b038111828210171561462057614620614799565b604052919050565b600080821280156001600160ff1b038490038513161561464a5761464a614783565b600160ff1b839003841281161561466357614663614783565b50500190565b6000821982111561467c5761467c614783565b500190565b60008261469c57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156146bb576146bb614783565b500290565b60008083128015600160ff1b8501841216156146de576146de614783565b6001600160ff1b03840183138116156146f9576146f9614783565b50500390565b60008282101561471157614711614783565b500390565b60008161472557614725614783565b506000190190565b600181811c9082168061474157607f821691505b6020821081141561476257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561477c5761477c614783565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461377e57600080fdfea2646970667358221220de09c40ccddf3687f635923cd1ad5e5030ce2bfb4c50ecfb106f08b97d71b22664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStrategy(string,(address,uint32)[],(uint256,address,uint32)[])": {
        "params": {
          "integrations": "the integrations and weights that form the strategy",
          "name": "the name of the new strategy"
        }
      },
      "clearClosablePositions(address[])": {
        "params": {
          "tokens": "The list of tokens to clear"
        }
      },
      "closePositionsForWithdrawal(address,uint256)": {
        "params": {
          "amount": "the amount to source",
          "token": "the token to source"
        }
      },
      "decreaseDeployAmountChange(address,uint32,address,uint256)": {
        "params": {
          "amount": "the amount to reduce the vector by",
          "integration": "the integration that was changed",
          "poolID": "the pool within the integration that handled the tokens",
          "token": "the token to decrease for"
        }
      },
      "decreaseStrategy(uint256,(address,uint256)[])": {
        "params": {
          "id": "the strategy to withdraw assets from",
          "tokens": "details of the tokens being deposited"
        }
      },
      "deleteStrategy(uint256)": {
        "details": "This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.",
        "params": {
          "id": "the strategy to delete"
        }
      },
      "getDeployAmount(address,uint32,address)": {
        "params": {
          "integration": "the integration to deploy to",
          "poolID": "the pool within the integration that should receive the tokens",
          "token": "the token to be deployed"
        },
        "returns": {
          "_0": "the pending deploy amount"
        }
      },
      "getMultipleStrategies(uint256[])": {
        "params": {
          "ids": "The ids of the strategies to return."
        }
      },
      "getStrategy(uint256)": {
        "params": {
          "id": "the strategy to return"
        }
      },
      "getStrategyBalances(uint256[],address[])": {
        "params": {
          "_strategies": "The strategies to retrieve balances for",
          "_tokens": "The tokens to retrieve"
        }
      },
      "getStrategyTokenBalance(uint256,address)": {
        "params": {
          "id": "the strategy id to check",
          "token": "The token to retrieve the balance for"
        },
        "returns": {
          "amount": " the amount of token that is invested in the strategy"
        }
      },
      "getStrategyTokenLength(uint256)": {
        "params": {
          "strategy": "the strategy to look up"
        },
        "returns": {
          "_0": "the length"
        }
      },
      "getTokenTotalBalance(address)": {
        "params": {
          "token": "the token to fetch the balance for"
        },
        "returns": {
          "amount": " the amount of the token currently invested"
        }
      },
      "increaseStrategy(uint256,(address,uint256)[])": {
        "params": {
          "id": "the strategy to deposit into",
          "tokens": "the tokens to deposit"
        }
      },
      "increaseTokenBalance(uint256,(address,uint256)[])": {
        "params": {
          "id": "The strategy id",
          "tokens": "the tokens and amounts "
        }
      },
      "updateName(uint256,string)": {
        "params": {
          "name": "the new name"
        }
      },
      "updateStrategy(uint256,(address,uint32)[],(uint256,address,uint32)[])": {
        "params": {
          "id": "the strategy to update",
          "integrations": "the new integrations that will be used",
          "tokens": "the tokens accepted for new entries"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addStrategy(string,(address,uint32)[],(uint256,address,uint32)[])": {
        "notice": "Adds a new strategy to the list of available strategies"
      },
      "clearClosablePositions(address[])": {
        "notice": "Clears the list of positions that can be closed to supply a token"
      },
      "closePositionsForWithdrawal(address,uint256)": {
        "notice": "Closes enough positions to provide a requested amount of a token"
      },
      "decreaseDeployAmountChange(address,uint32,address,uint256)": {
        "notice": "Decreases the deployable amount after a deployment/withdrawal"
      },
      "decreaseStrategy(uint256,(address,uint256)[])": {
        "notice": "Decreases the amount of a set of tokens invested in a strategy"
      },
      "deleteStrategy(uint256)": {
        "notice": "Deletes a strategy"
      },
      "getDeployAmount(address,uint32,address)": {
        "notice": "Returns the current amount awaiting deployment"
      },
      "getMultipleStrategies(uint256[])": {
        "notice": "Returns 1 or more strategies in a single call."
      },
      "getStrategy(uint256)": {
        "notice": "Getter function to return the nested arrays as well as the name"
      },
      "getStrategyBalances(uint256[],address[])": {
        "notice": "Returns balances per strategy, and total invested balances"
      },
      "getStrategyTokenBalance(uint256,address)": {
        "notice": "Returns the amount of a given token currently invested in a strategy"
      },
      "getStrategyTokenLength(uint256)": {
        "notice": "returns the length of the tokens array in a strategy"
      },
      "getTokenTotalBalance(address)": {
        "notice": "Returns the total amount of a token invested across all strategies"
      },
      "idCounter()": {
        "notice": "autogenerated getter definition"
      },
      "increaseStrategy(uint256,(address,uint256)[])": {
        "notice": "Increases the amount of a set of tokens in a strategy"
      },
      "increaseTokenBalance(uint256,(address,uint256)[])": {
        "notice": "Increases strategy balances without increasing the deploy amount"
      },
      "updateName(uint256,string)": {
        "notice": "Updates the strategy name"
      },
      "updateStrategy(uint256,(address,uint32)[],(uint256,address,uint32)[])": {
        "notice": "Updates a strategy's integrations and tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 723,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 726,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9534,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "moduleMap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IModuleMap)19218"
      },
      {
        "astId": 4667,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4670,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "controllers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9786,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "strategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Strategy)19430_storage)"
      },
      {
        "astId": 9790,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9796,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "strategyTokenBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9804,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "deployAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_address,t_int256)))"
      },
      {
        "astId": 9810,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "_closablePositions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(ClosablePosition)19460_storage)dyn_storage)"
      },
      {
        "astId": 9813,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "idCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9817,
        "contract": "contracts/core/StrategyMap.sol:StrategyMap",
        "label": "tokenWeights",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClosablePosition)19460_storage)dyn_storage": {
        "base": "t_struct(ClosablePosition)19460_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyMap.ClosablePosition[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Integration)19399_storage)dyn_storage": {
        "base": "t_struct(Integration)19399_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyMap.Integration[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)19406_storage)dyn_storage": {
        "base": "t_struct(Token)19406_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyMap.Token[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModuleMap)19218": {
        "encoding": "inplace",
        "label": "contract IModuleMap",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ClosablePosition)19460_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStrategyMap.ClosablePosition[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ClosablePosition)19460_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_address,t_int256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(address => int256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_address,t_int256))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Strategy)19430_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStrategyMap.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)19430_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ClosablePosition)19460_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.ClosablePosition",
        "members": [
          {
            "astId": 19455,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integration",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19457,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "ammPoolID",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 19459,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Integration)19399_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.Integration",
        "members": [
          {
            "astId": 19396,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integration",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19398,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "ammPoolID",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)19430_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.Strategy",
        "members": [
          {
            "astId": 19417,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19421,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integrations",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Integration)19399_storage)dyn_storage"
          },
          {
            "astId": 19425,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Token)19406_storage)dyn_storage"
          },
          {
            "astId": 19429,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "availableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)19406_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyMap.Token",
        "members": [
          {
            "astId": 19401,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "integrationPairIdx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19403,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19405,
            "contract": "contracts/core/StrategyMap.sol:StrategyMap",
            "label": "weight",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}